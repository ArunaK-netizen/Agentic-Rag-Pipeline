[{"text": "E-310B failure leadinq to H2S slippaqe in HDS section\non 9.1.2017\nIncident\nOn 9th Jan 2017 at 09:00 hrs lead acetate test was performed in HDS section.B-\n301 hydrogenator outlet lead acetate test was positive and Lead acetate test was\nperformed at the outlet of desulphurization section (R-302A) which also came\npositive.\nBackqround\nNHGU plant was running with H2 production of g0 T/D. NHGU feed was HCLN\n(9500 Kg/hr), ccR off-gas (21 T/D). plant was running normal.\nActions Taken\nTrouble-shooting of the probabilities of sulphur break-through ex desulphurization\nsection was done\n1. Operating temperature increased\n2. HZIHC ratio increased\n3. Feed Sample drawn to check sulphur content\n4. Samples drawn across Desulphurization section to check sulphur and chlorine\ncontent\nAnalvsis\nNormally in R-302 A/B H2S is picked up by the zinc oxide catalyst present in R-\n302 fuB. The reaction is\nH2S+ZnO <--------+ZnS +H2O\nThis reaction is reversible and the reversible reaction is highly dependent on the\nst", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_0", "chunk_strategy": "fixed_size"}}, {"text": " A/B H2S is picked up by the zinc oxide catalyst present in R-\n302 fuB. The reaction is\nH2S+ZnO <--------+ZnS +H2O\nThis reaction is reversible and the reversible reaction is highly dependent on the\nsteam content present at the inlet of R-302A/B\nThere are two probabilities for presence of steam in feed\n1. lf feed contain CO2:\nlf feed stock contain CO2 and high concentration of hydrogen then there is\nchances of steam formation by the below reaction\nH2+CO2 r------\u20acO +H2O\nln R-302fuB sulfur is removed by following reaction\nH2S+ ZnO <-------qnS +H2O\nCOS+ ZnO <---+ZnS +CO2\n111\nSo the presence of CO2 in feedstock may strip off sulptrr\ndesulfurization catalyst. So with this condition lead acetate test willb\n2. lf feed contain H2O:\nffi2othenthereversereactionwilloccurinP.].._\nH2S+ ZnO <--+ZnS +H2O\nSo the presence of H2O in feedstock may strip off sulphur preser: -\ndesulfurization catalyst. So with this condition lead acetate test \"' r:\nAnalysis of above two possibilities done:\ni. \nCCR off-gas s", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_1", "chunk_strategy": "fixed_size"}}, {"text": "So the presence of H2O in feedstock may strip off sulphur preser: -\ndesulfurization catalyst. So with this condition lead acetate test \"' r:\nAnalysis of above two possibilities done:\ni. \nCCR off-gas sample was checked for CO2 content :\nshowed nit COZ content in CCR off-gas' So possibility :' \n=\nto CO2 present in feedstock was over-ruled.\nii. \nSecond possibility was analyzed' Source for steam in\nil feed pieheat exchanger leaks. Checked sample at RSfi\ncontent was observed.\nE-310B (Feed Pre-heater) was isolated and sample\nintervals and sample at R-301 O/L was seen moistr'=\ntest was carried at R-302 A mid and O/L bed which\n(No sulPhur Presence)\nconclusion: The H2S slippage in HDS section was due to Feed\nLearning and Recommendation :\n. Always conduct Lead acetate test at R-302 A outlet h\nslippage in HDS section.\nMinor Fire ln CDU-3 ISBL Tech Structure Near Road\nNo 3 on 17.2.2017\nlntroduction\nOn 17th February 2017, at 1645 hrs there was a minor fire on welding equipment at\nfirst floor of TS-", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_2", "chunk_strategy": "fixed_size"}}, {"text": "ge in HDS section.\nMinor Fire ln CDU-3 ISBL Tech Structure Near Road\nNo 3 on 17.2.2017\nlntroduction\nOn 17th February 2017, at 1645 hrs there was a minor fire on welding equipment at\nfirst floor of TS-1 in CDU-3 complex.\nBackqround\n. Gas cutting work was in progress for 12\" Hot feed line for DHT on 1't floor of\nTech structure 1 of CDU-3 complex. Gas cutting was being done at height inside\nthe booth protected with fire retardant cloth.\n. Gas cutting set has LPG hose clamped using jubli clamp. While doing gas\ncutting, gas leak developed from the LPG hose connection. Sparks generated\nthrough gas cutting initiated fire at leaky clamp location.\n113\n\\\nOXYGEN GAS HOSE CONDITIO'I'S\nr\nF\n\\^\nlnvestiqations\na. Site lnspection/Observations :\n' scaffolding for work at height was observed having no proper ladder approach.\n' \nLPG hose was found.ra.L and burnt n\"riir-,\"liamp tocation.\nAnalvsis\n' \nGas cutting set had leaked because of loose clamp and cracked hose. Also hose\nleak test was not carried out ", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_3", "chunk_strategy": "fixed_size"}}, {"text": " ladder approach.\n' \nLPG hose was found.ra.L and burnt n\"riir-,\"liamp tocation.\nAnalvsis\n' \nGas cutting set had leaked because of loose clamp and cracked hose. Also hose\nleak test was not carried out before star-t of work ai fresh rocation.\n' LPG vapors would have accumulated at hose reaky location and as soon as\nspark for gas cutting was generated, LpG uupoi, caused fire.\no Escape route was not avairabre for scaffording pratform.\nConclusion:\nIt is concluded based on the.analysis that loos.e clamp of LpG hose of gas cutting\nset and non performance of reak iest has resutteJ in iire.\nProper escape route radder was not ensured throughout the work.\nRecommendations:\n' All the cracked gas hoses shall be cut and removed for avoiding re-use in future.\n' \nLeak test of all the gas cutting set shall be ensured before start of every job.\n' \nProper escape route to be enlure throughout the work.\nrpproach.\n,. Also hose\nts soon as\ngas cutting\n131-P-102 Tripped On Faultv PLC Siqnal on 25.5.2017\nlnciden", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_4", "chunk_strategy": "fixed_size"}}, {"text": "be ensured before start of every job.\n' \nProper escape route to be enlure throughout the work.\nrpproach.\n,. Also hose\nts soon as\ngas cutting\n131-P-102 Tripped On Faultv PLC Siqnal on 25.5.2017\nlncident:\nOn 25th May,2017 al 13:36 hrs, Preflashed Crude Pump 131-P-102 tripped on faulf,'\nPLC close signal of pump suction MOV-1106.\nBackground:\nNCDU/VDU plant was running at a feed rate of 20500 T/D processing Upper Zakum-\n52o/\", Arab Extra Light- 15o/\", Basrah Light- 67\", Seria Light Extra Blend- 6o/o, Murban-\n2\"/\" and Slop- 19o/o with all the products on grade.\nNCDU/VDU receives crude from PIH-1. Received crude is first desalted and then sent\nto pre-f lash drum (V-101). Lighter fractions f rom crude get flashed in pre-flash drum and\nare sent straight to distillation column. The heavier fractions are pumped with 131-P-102\nAIBIC to the distillation column via 131-F-101 which heats the crude to a desired\ntemperature.\nP-102 can trip on two interlocks:\n1. When prellash drum level reduces to 18.5\"", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_5", "chunk_strategy": "fixed_size"}}, {"text": " are pumped with 131-P-102\nAIBIC to the distillation column via 131-F-101 which heats the crude to a desired\ntemperature.\nP-102 can trip on two interlocks:\n1. When prellash drum level reduces to 18.5\"/o, P-l02 suction MOV closes and the\npump trips.\n2. When P-102 suction MOV closes.\nAt 13:36 hrs, faulty MOV closed signal was sent to PLC and hence the pumps got\ntnpped. Suction MOV of P-/02 was checked in field and it was found n open condition.\ntVOt/ was lhen rmmedrale/ykepl lorced open from PLC and /3/-P-/O2 was put back on\n/oadat /3.'4/ hrs.\nParameter\nTaq\nNormal\nDuring\nemergency\nCrude Flow, T/D\nrmpcordlw.pv\n20500\n3369 (min)\nPre-flash drum Level\nrmprlc111.pv\n72\n95.5 (max)\nP -1 02 discharge Pressure\n(kq/cm2)\nrmprpi219.pv\n33\n11.9 (min)\nF-101 HOT, deg C\nrmoftc165.pv\n359\n401 (max)\nF-102 HOT. deq C\nrmpftc276.pv\n392\n404 (max)\n115\nFurnace-1 01\nNormal\nDurinq emerqencv\nFlow\nRadiation O/L\ntemp\nFlow\n(min)\nRadiation O/L temp\n(max)\nPass 1\n2760\n371\n1480\n405\nPass 2\n2745\n366\n1315\n405\nPass 3\n2515\n363\n12", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_6", "chunk_strategy": "fixed_size"}}, {"text": "q C\nrmpftc276.pv\n392\n404 (max)\n115\nFurnace-1 01\nNormal\nDurinq emerqencv\nFlow\nRadiation O/L\ntemp\nFlow\n(min)\nRadiation O/L temp\n(max)\nPass 1\n2760\n371\n1480\n405\nPass 2\n2745\n366\n1315\n405\nPass 3\n2515\n363\n1265\n402\nPass 4\n2250\n360\n1300\n390\nPass 5\n2400\n355\n1345\n390\nPass 6\n2260\n362\n1435\n399\nPass 7\n2275\n368\n1375\n405\nPass 8\n2350\n364\n1160\n405\nCorrective actions taken :\n1. All the downstream units and P/H 1 was informed about the emergency.\n2. Crude flow through F-101 decreased and the furnace outlet temperatre\nincreased from 359 to 401 deg C. To reduce furnace outlet temperature, firing h\nthe furnace was reduced. F-101 trips when flow through any pass reduces to 9ffi\nT/D and radiation outlet temperature of that particular pass increases to 394\nC. As the flow through all the passes remained above 900 T/D, the furnace\nnot trip.\n3. C-101 bottom level decreased lo 25o/o and hence RCO flow through F-\ndecreased. F-102 outlet temperature increased from 392 to 404 deg C.\ncontrol furnace outlet temperature,", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_7", "chunk_strategy": "fixed_size"}}, {"text": "D, the furnace\nnot trip.\n3. C-101 bottom level decreased lo 25o/o and hence RCO flow through F-\ndecreased. F-102 outlet temperature increased from 392 to 404 deg C.\ncontrol furnace outlet temperature, furnace firing was reduced.\n4. C-110 bottom level decreased to 22o/\". VR to BBU was reduced from 2300 TID\n500 T/D.\n5. Product flow ex CDU and VDU was reduced to maintain the stripper and\nlevels.\n6. P-102 was put back on load on 13:41 hr, crude to unit was increased\nFurnace firing was also increased simultaneously and plant normalized.\nObservations:\nTotal analysis was done of all the alarms before and after the incident. lt was\nthat only MOV close signal alarm was generated at the time of incident and on\nabnormality was observed. This alarm got generated due to problem in MOV\ncard. lt was decided to keep the MOV force open from PLC till the card is replaced\nConclusion:\nThe faulty close signal of MOV led to tripping of the pumps.\nLearninqs:\nHealthiness of MOV cards to be ensured by periodic", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_8", "chunk_strategy": "fixed_size"}}, {"text": "ded to keep the MOV force open from PLC till the card is replaced\nConclusion:\nThe faulty close signal of MOV led to tripping of the pumps.\nLearninqs:\nHealthiness of MOV cards to be ensured by periodic checking.\n_l\nE\n!r\nD\nIil\nLVGO CR Control Valve Bvpass Gland Leak on\n29.5.2017\nlncident:\nWhile taking LVGO control valve (RFC 206) on bypass on 29th May, 2017 at 10:37 hrs;\ngland leak occurred from the bypass valve leading to plant disturbance.\nBackoround:\nNCDU/VDU plant was running at a feed rate of 21000 T/D processing Upper Zakum-\n607o, Basrah Light- 30% and Slop- 10% with all the products on grade.\nLVGO CR control valve (RFC 206) was stuck up and was operating only in the range of\n50 to 7OYo. Therefore it was decided to take control valve on bypass to handover to\ninstruments.\nLVGO CR flow was 10200 T/D and opening was 70% when bypass activity was\nstarted. Maintaining LVGO CR flow at 10,000 T/D, RFC206 bypass was slowly opened\nin the field while at the same time control valve was closed ", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_9", "chunk_strategy": "fixed_size"}}, {"text": "as 10200 T/D and opening was 70% when bypass activity was\nstarted. Maintaining LVGO CR flow at 10,000 T/D, RFC206 bypass was slowly opened\nin the field while at the same time control valve was closed from 70 to 50%. At 10:37\nhrs, bypass valve and its associated piping started vibrating and its gland started\nleaking.\nCorrective actions taken:\no Feed to unit was dropped to 14000 TlD. PIH-1 and other downstream units were\ninformed about the feed reduction.\n. Firing in both the furnaces was adjusted.\no Fire station was kept standby.\n. LVGO pump was stopped to attend the leak. Gear box of bypass globe valve\nwas sent to machine shop. lts gear box check nut and ring was found in broken\ncondition.\n. HVGO pump 131-P-1348 was on load and its amp was 53 (Red amps 58).\nHVGO total flow was increased while monitoring the amps of the pump. At 11:58\nhr. HVGO pump 131-P-134B tripped on red amps. At 12:04 hr. 131-P-134A was\nput on load.\no VDU bed temperatures, level and pressure was closely monitored.\no", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_10", "chunk_strategy": "fixed_size"}}, {"text": "ile monitoring the amps of the pump. At 11:58\nhr. HVGO pump 131-P-134B tripped on red amps. At 12:04 hr. 131-P-134A was\nput on load.\no VDU bed temperatures, level and pressure was closely monitored.\no At 12:15 hr. ATF was called off. HK was diverted to SKO and LK was diverted to\nDHDS.\no At 13:15 hr. VR to BBU was called off and same was diverted to FOB lV.\no RFC 206 bypass valve's gear box was fitted back and gland was repacked by\nmaintenance.\no At 14:10 hr. 131-P-133A was put back on load and RFC 206 was taken in line.\no Plant was normalized and products were diverted on grade.\n1.77\nI\n__l\nObservations:\nWhen control valve was being taken on bypass mode, the associated lines\nvibrating when control MV was closed from 70oh to less than S0%.This contro{ '\nhigh piessure drop across it (Pressure drop for Min/Normal/Max flc',t\n19.1Kg/cm219.8 Kglcm2l7.9 Kg/cm2 respectively). As bypass valve was not :\ncater for such high pressure drop, line started vibrating and subsequently it l+:\nleak of bypa", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_11", "chunk_strategy": "fixed_size"}}, {"text": " drop for Min/Normal/Max flc',t\n19.1Kg/cm219.8 Kglcm2l7.9 Kg/cm2 respectively). As bypass valve was not :\ncater for such high pressure drop, line started vibrating and subsequently it l+:\nleak of bypass valve.\nConclusion:\nBypass valve gland leak was mainly due to high pressure drop of the contrci\nwhich led to high vibration in the piping.\nLearninqs:\nControl valve which have high pressure drop should be provided with bypass\nsame characteristics.\n", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_12", "chunk_strategy": "fixed_size"}}, {"text": "i\niii\nDedicated\u00a0to\u00a0\nNalinee\u00a0&\u00a0Prabhakar\u00a0Kanetkar...\niv\nAbout Yashavant Kanetkar\nThrough\u00a0his\u00a0books\u00a0and\u00a0Online Courses\u00a0on\u00a0C,\u00a0C++,\u00a0\nJava,\u00a0 Python,\u00a0 Data\u00a0 Structures,\u00a0 .NET,\u00a0 IoT,\u00a0 etc.\u00a0\nYashavant\u00a0 Kanetkar\u00a0 has\u00a0 created,\u00a0 molded\u00a0 and\u00a0\ngroomed\u00a0 lacs\u00a0 of\u00a0 IT\u00a0 careers\u00a0 in\u00a0 the\u00a0 last\u00a0 three\u00a0\ndecades\ue001\u00a0 Yasha\u01c0ant\ue002s\u00a0 books\u00a0 and\u00a0 Online\u00a0 Courses\u00a0\nhave\u00a0 made\u00a0 a\u00a0 significant\u00a0 contribution\u00a0 in\u00a0 creating\u00a0\ntop-notch\u00a0IT\u00a0manpower\u00a0in\u00a0India\u00a0and\u00a0abroad.\nHis\u00a0 books\u00a0 are\u00a0 globally\u00a0 recognized\u00a0 and\u00a0 millions\u00a0 of\u00a0 students\u00a0 /\u00a0\nprofessionals\u00a0have\u00a0benefitted\u00a0from\u00a0them.\u00a0Many\u00a0of\u00a0his\u00a0books\u00a0have\u00a0been\u00a0\ntranslated\u00a0 into\u00a0 Hindi,\u00a0 Gujarati,\u00a0 Japanese,\u00a0 Korean\u00a0 and\u00a0 Chinese\u00a0\nlanguages.\u00a0 Many\u00a0 of\u00a0 his\u00a0 books\u00a0 are\u00a0 published\u00a0 in\u00a0 India,\u00a0 USA,\u00a0 Japan,\u00a0\nSingapore,\u00a0Korea\u00a0and\u00a0China.\nHe\u00a0 is\u00a0a\u00a0 much\u00a0sought\u00a0after\u00a0 speaker\u00a0 in\u00a0the\u00a0 IT\u00a0field\u00a0 and\u00a0has\u00a0conducted\u00a0\nseminars/workshops\u00a0 at\u00a0 TedEx,\u00a0 IITs,\u00a0 IIITs,\u00a0 NITs\u00a0 and\u00a0 global\u00a0 software\u00a0\ncompanies.\u00a0\nHe has\u00a0 been\u00a0 honored\u00a0 \u01c1ith\u00a0 the\u00a0 prestigio\u01b5s\u00a0 \ue003Disting\u01b5ished\u00a0 Al\u01b5mn\u01b5s\u00a0\nA\u01c1ard\ue004\u00a0 b\u01c7\u00a0 I", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_0", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0field\u00a0 and\u00a0has\u00a0conducted\u00a0\nseminars/workshops\u00a0 at\u00a0 TedEx,\u00a0 IITs,\u00a0 IIITs,\u00a0 NITs\u00a0 and\u00a0 global\u00a0 software\u00a0\ncompanies.\u00a0\nHe has\u00a0 been\u00a0 honored\u00a0 \u01c1ith\u00a0 the\u00a0 prestigio\u01b5s\u00a0 \ue003Disting\u01b5ished\u00a0 Al\u01b5mn\u01b5s\u00a0\nA\u01c1ard\ue004\u00a0 b\u01c7\u00a0 IIT\u00a0 Kanp\u01b5r\u00a0 for\u00a0 his\u00a0 entrepreneurial,\u00a0 professional\u00a0 and\u00a0\nacademic\u00a0 excellence.\u00a0 This\u00a0 award\u00a0 was\u00a0 given\u00a0 to\u00a0 top\u00a0 50\u00a0 alumni\u00a0 of\u00a0 IIT\u00a0\nKanpur\u00a0 who\u00a0 have\u00a0 made\u00a0 significant\u00a0 contribution\u00a0 towards\u00a0 their\u00a0\nprofession\u00a0and\u00a0betterment\u00a0of\u00a0society\u00a0in\u00a0the\u00a0last\u00a050\u00a0years.\u00a0\nIn\u00a0recognition\u00a0of\u00a0his\u00a0immense\u00a0contribution\u00a0to\u00a0IT\u00a0education\u00a0in\u00a0India,\u00a0he\u00a0\nhas\u00a0 been\u00a0a\u01c1arded\u00a0 the\u00a0 \ue003Best\u00a0 \ue001NET\u00a0 Technical\u00a0 Contrib\u01b5tor\ue004\u00a0 and\u00a0 \ue003Most\u00a0\nVal\u01b5able\u00a0Professional\ue004\u00a0a\u01c1ards\u00a0b\u01c7\u00a0Microsoft\u00a0for\u00a0\u03f1\u00a0s\u01b5ccessi\u01c0e\u00a0\u01c7ears\ue001\u00a0\nYashavant\u00a0holds\u00a0a\u00a0BE\u00a0from\u00a0VJTI\u00a0Mumbai\u00a0and\u00a0M.Tech.\u00a0from\u00a0IIT\u00a0Kanpur.\u00a0\nHis\u00a0current\u00a0affiliations\u00a0include\u00a0being\u00a0a\u00a0Director\u00a0of\u00a0KICIT\u00a0Pvt.\u00a0Ltd.\u00a0He\u00a0can\u00a0\nbe\u00a0reached\u00a0at\u00a0kanetkar@kicit.com\u00a0or\u00a0through\u00a0http://www.kicit.com. (http://www.k\nv\nAbout Aditya Kanetkar\nAditya\u00a0 is\u00a0 currently\u00a0 working\u00a0 as\u00a0 a\u00a0 Cloud\nSoftware\u00a0 Engineer\u00a0 at\u00a0 Mi", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_1", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0KICIT\u00a0Pvt.\u00a0Ltd.\u00a0He\u00a0can\u00a0\nbe\u00a0reached\u00a0at\u00a0kanetkar@kicit.com\u00a0or\u00a0through\u00a0http://www.kicit.com. (http://www.k\nv\nAbout Aditya Kanetkar\nAditya\u00a0 is\u00a0 currently\u00a0 working\u00a0 as\u00a0 a\u00a0 Cloud\nSoftware\u00a0 Engineer\u00a0 at\u00a0 Microsoft,\u00a0 Redmond,\u00a0\nUSA.\u00a0\nHe\u00a0\nhas\u00a0\nworked\u00a0\nat\u00a0\nmultiple\u00a0\nsoftware\u00a0\ncompanies\u00a0 in\u00a0 the\u00a0 past,\u00a0 including\u00a0 Oracle,\u00a0\nRedfin,\u00a0Amazon\u00a0 and\u00a0Arista\u00a0Networks.\u00a0 He\u00a0has\u00a0\nbeen\u00a0 designing\u00a0 distributed\u00a0 systems\u00a0 software\u00a0\nfor\u00a0the\u00a0last\u00a0four years.\nAditya\u00a0holds\u00a0a\u00a0Bachelor's\u00a0degree\u00a0in\u00a0Computer\u00a0Science\u00a0and\u00a0Engineering\u00a0\nfrom\u00a0 IIT\u00a0 Guwahati\u00a0 and\u00a0 a\u00a0 Master's\u00a0 degree\u00a0 in\u00a0 Computer\u00a0 Science\u00a0 from\u00a0\nGeorgia\u00a0 Tech,\u00a0 Atlanta.\u00a0 His\u00a0 current\u00a0 passion\u00a0 is\u00a0 anything\u00a0 remotely\u00a0\nconnected\u00a0 to\u00a0 Python,\u00a0 Machine\u00a0 Learning,\u00a0 Distributed\u00a0 Systems,\u00a0 Cloud\u00a0\nComputing\u00a0and\u00a0C#.\u00a0When\u00a0not\u00a0writing\u00a0software,\u00a0he\u00a0is\u00a0most\u00a0likely\u00a0to\u00a0be\u00a0\nfound\u00a0on\u00a0a Badminton\u00a0court\u00a0or\u00a0watching\u00a0a\u00a0football\u00a0game.\nAditya\u00a0can\u00a0be reached\u00a0through\u00a0http://www.kicit.com. (http://www.kicit.com.)\nvi\nPreface to Third Edition\nProgramming\u00a0 landscape\u00a0 has\u00a0 changed signif", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_2", "chunk_strategy": "fixed_size"}}, {"text": "nd\u00a0on\u00a0a Badminton\u00a0court\u00a0or\u00a0watching\u00a0a\u00a0football\u00a0game.\nAditya\u00a0can\u00a0be reached\u00a0through\u00a0http://www.kicit.com. (http://www.kicit.com.)\nvi\nPreface to Third Edition\nProgramming\u00a0 landscape\u00a0 has\u00a0 changed significantly\u00a0 over\u00a0 the\u00a0 last\u00a0 few\u00a0\nyears.\u00a0Python\u00a0is\u00a0making\u00a0inroads\u00a0into\u00a0every\u00a0field\u00a0that\u00a0has\u00a0anything\u00a0to\u00a0do\u00a0\nwith\u00a0programming.\u00a0Naturally,\u00a0Python\u00a0programming\u00a0is\u00a0a\u00a0skill\u00a0that\u00a0one\u00a0has\u00a0\nto\u00a0acquire,\u00a0sooner the\u00a0better.\u00a0\nIf\u00a0you\u00a0have\u00a0no\u00a0programming\u00a0background\u00a0and\u00a0you\u00a0are\u00a0learning\u00a0Python\u00a0as\u00a0\nyour\u00a0first\u00a0 programming\u00a0language\u00a0 you\u00a0will\u00a0find\u00a0the\u00a0book\u00a0very\u00a0simple\u00a0to\u00a0\nunderstand.\u00a0 Primary\u00a0 credit\u00a0 of\u00a0 this\u00a0 goes\u00a0 to\u00a0 the\u00a0 Python\u00a0 language\u0376it\u00a0 is\u00a0\nvery\u00a0simple\u00a0for\u00a0the\u00a0beginner,\u00a0yet\u00a0very\u00a0powerful\u00a0for\u00a0the\u00a0expert\u00a0who\u00a0can\u00a0\ntap\u00a0into\u00a0its power.\nIf\u00a0you have some\u00a0acquaintance\u00a0with\u00a0a programming\u00a0language,\u00a0you\u00a0need\u00a0\nto\u00a0 get\u00a0 off the\u00a0 ground\u00a0 with\u00a0 Python\u00a0 quickly.\u00a0 To\u00a0 do\u00a0 that\u00a0 you\u00a0 need\u00a0 to\u00a0\nunderstand\u00a0the\u00a0similarities/differences\u00a0in\u00a0a\u00a0feature\u00a0that\u00a0you have\u00a0used\u00a0\nin\u00a0 other\u00a0 language(s) and\u00a0 new\u00a0 features\u00a0 that\u00a0 Pytho", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_3", "chunk_strategy": "fixed_size"}}, {"text": "t\u00a0 off the\u00a0 ground\u00a0 with\u00a0 Python\u00a0 quickly.\u00a0 To\u00a0 do\u00a0 that\u00a0 you\u00a0 need\u00a0 to\u00a0\nunderstand\u00a0the\u00a0similarities/differences\u00a0in\u00a0a\u00a0feature\u00a0that\u00a0you have\u00a0used\u00a0\nin\u00a0 other\u00a0 language(s) and\u00a0 new\u00a0 features\u00a0 that\u00a0 Python\u00a0 offers.\u00a0 In\u00a0 both\u00a0\nrespects\u00a0this\u00a0book\u00a0 should\u00a0help\u00a0 you immensely.\u00a0Instead\u00a0of\u00a0explaining\u00a0a\u00a0\nfeature\u00a0with\u00a0verbose\u00a0text,\u00a0we have\u00a0mentioned\u00a0the\u00a0key\u00a0points\u00a0about\u00a0it\u00a0as\u00a0\n'KanNotes' and\u00a0explained\u00a0those\u00a0points\u00a0with\u00a0the\u00a0help\u00a0of\u00a0programs.\nThe\u00a0most\u00a0important\u00a0characteristic\u00a0of\u00a0this\u00a0book is\u00a0its\u00a0simplicity\u0376be\u00a0it\u00a0the\u00a0\ncode\u00a0 or\u00a0 the\u00a0 text.\u00a0 You\u00a0 will\u00a0 also\u00a0 notice\u00a0 that\u00a0 very\u00a0 few\u00a0 programming\u00a0\nexamples\u00a0 in\u00a0 this\u00a0 book\u00a0 are\u00a0 code\u00a0 fragments.\u00a0 We\u00a0 have\u00a0 realized\u00a0 that\u00a0 a\u00a0\nprogram\u00a0 that\u00a0 act\u01b5all\u01c7\u00a0 compiles\u00a0 and\u00a0 r\u01b5ns\ue005\u00a0 helps\u00a0 impro\u01c0e\u00a0 one\ue002s\u00a0\nunderstanding\u00a0of\u00a0a\u00a0subject\u00a0a\u00a0great\u00a0deal\u00a0more,\u00a0than\u00a0just\u00a0code\u00a0snippets.\nExercises\nare\u00a0\nexceptionally\u00a0\nuseful\u00a0\nto\u00a0 complete\u00a0\nthe\u00a0\nreader\ue002s\u00a0\nunderstanding\u00a0 of\u00a0 a\u00a0 topic.\u00a0 So\u00a0 you\u00a0 will\u00a0 find\u00a0 them at\u00a0 the\u00a0 end\u00a0 of\u00a0 each\u00a0\nchapter.\u00a0 Please\u00a0 do\u00a0 attempt\u00a0 them.\u00a0 They\u00a0 will", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_4", "chunk_strategy": "fixed_size"}}, {"text": "ets.\nExercises\nare\u00a0\nexceptionally\u00a0\nuseful\u00a0\nto\u00a0 complete\u00a0\nthe\u00a0\nreader\ue002s\u00a0\nunderstanding\u00a0 of\u00a0 a\u00a0 topic.\u00a0 So\u00a0 you\u00a0 will\u00a0 find\u00a0 them at\u00a0 the\u00a0 end\u00a0 of\u00a0 each\u00a0\nchapter.\u00a0 Please\u00a0 do\u00a0 attempt\u00a0 them.\u00a0 They\u00a0 will\u00a0 really\u00a0 make\u00a0 you\u00a0 battle-\nready. If\u00a0you\u00a0want\u00a0solutions\u00a0to\u00a0these\u00a0Exercises then\u00a0take\u00a0a\u00a0look\u00a0at\u00a0our\nbook\u00a0'Let\u00a0Us\u00a0Python\u00a0Solutions'.\nThe\u00a0immense\u00a0success\u00a0of\u00a0first\u00a0edition\u00a0of\u00a0'Let\u00a0Us\u00a0Python'\u00a0has enthused\u00a0us\u00a0\nto\u00a0pour\u00a0 our best\u00a0efforts\u00a0 creating\u00a0 this\u00a0 third edition.\u00a0Admittedly,\u00a0 in\u00a0the\u00a0\nfirst\u00a0two\u00a0editions there\u00a0were\u00a0a\u00a0few\u00a0key\u00a0places\u00a0where\u00a0the\u00a0topic\u00a0change\u00a0\nwas\u00a0 a\u00a0 bit\u00a0 jarring.\u00a0 To\u00a0 address\u00a0 this\u00a0 issue\u00a0 many\u00a0 chapters\u00a0 have\u00a0 been\u00a0\nreorganized,\u00a0split\u00a0or\u00a0combined.\u00a0In\u00a0addition\u00a0 one new\u00a0chapter and\u00a0three\u00a0\nnew\u00a0appendices\u00a0have\u00a0been\u00a0added\u00a0in\u00a0this\u00a0edition.\u00a0\nWe have\u00a0tried\u00a0to\u00a0write\u00a0a\u00a0Python\u00a0book\u00a0that\u00a0makes\u00a0reading\u00a0it\u00a0as\u00a0much\u00a0fun\u00a0\nas\u00a0 the\u00a0 language\u00a0 is.\u00a0 Enjoy\u00a0 the\u00a0 book\u00a0 and\u00a0your\u00a0 journey\u00a0 into\u00a0 the\u00a0 Python\u00a0\nworld!\nvii\nBrief Contents\n1\nIntroduction\u00a0to\u00a0Python\u00a0_______________________________\n1\n2\nGetting", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_5", "chunk_strategy": "fixed_size"}}, {"text": "s\u00a0reading\u00a0it\u00a0as\u00a0much\u00a0fun\u00a0\nas\u00a0 the\u00a0 language\u00a0 is.\u00a0 Enjoy\u00a0 the\u00a0 book\u00a0 and\u00a0your\u00a0 journey\u00a0 into\u00a0 the\u00a0 Python\u00a0\nworld!\nvii\nBrief Contents\n1\nIntroduction\u00a0to\u00a0Python\u00a0_______________________________\n1\n2\nGetting\u00a0Started______________________________________\n9\n3\nPython\u00a0Basics ______________________________________\n17\n4\nStrings\u00a0____________________________________________\n39\n5\nDecision\u00a0Control\u00a0Instruction ___________________________\n55\n6\nRepetition\u00a0Control\u00a0Instruction\u00a0_________________________\n69\n7\u00a0\nConsole\u00a0Input/Output ________________________________\n81\n8\nLists\u00a0______________________________________________\n91\n9\nTuples _____________________________________________\n109\n10\nSets _______________________________________________\n121\n11\u00a0 Dictionaries ________________________________________\n131\n12\u00a0 Comprehensions\u00a0____________________________________\n145\n13\nFunctions __________________________________________\n157\n14\nRecursion\u00a0__________________________________________\n175\n15\nFunctional\u00a0Programming\u00a0______", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_6", "chunk_strategy": "fixed_size"}}, {"text": "nsions\u00a0____________________________________\n145\n13\nFunctions __________________________________________\n157\n14\nRecursion\u00a0__________________________________________\n175\n15\nFunctional\u00a0Programming\u00a0_____________________________\n191\n16\u00a0 Modules and\u00a0Packages\u00a0_______________________________\n205\n17\u00a0 Namespaces\u00a0_______________________________________\n217\n18\u00a0 Classes\u00a0and\u00a0Objects\u00a0_________________________________\n227\n19\nIntricacies\u00a0of\u00a0Classes\u00a0and\u00a0Objects\u00a0______________________\n245\n20\u00a0 Containership\u00a0and\u00a0Inheritance\u00a0________________________\n257\n21\u00a0 Iterators\u00a0and\u00a0Generators\u00a0____________________________\n277\n22\u00a0 Exception\u00a0Handling\u00a0_________________________________\n299\n23\u00a0 File\u00a0Input/Output\u00a0__________________________________\n317\n24\u00a0 Miscellany\u00a0________________________________________\n333\n25\u00a0 Concurrency\u00a0and Parallelism__________________________\n355\n26\u00a0 Synchronization\u00a0____________________________________\n373\nviii\nAppendix\u00a0A\u00a0- Precedence\u00a0Table________________________\n395\nAppendix\u00a0B\u00a0- Debugging\u00a0in\u00a0Python", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_7", "chunk_strategy": "fixed_size"}}, {"text": "d Parallelism__________________________\n355\n26\u00a0 Synchronization\u00a0____________________________________\n373\nviii\nAppendix\u00a0A\u00a0- Precedence\u00a0Table________________________\n395\nAppendix\u00a0B\u00a0- Debugging\u00a0in\u00a0Python______________________\n397\nAppendix\u00a0C\u00a0- Chasing\u00a0the\u00a0Bugs_________________________\n401\nIndex _____________________________________________\n407\nix\nContents\n1\nIntroduction\u00a0to Python _____________________________\n1\nWhat\u00a0is\u00a0Python?\n2\nReasons\u00a0for\u00a0Popularity\n2\nWhat\u00a0sets\u00a0Python\u00a0apart?\n3\nWhat\u00a0can\u00a0be\u00a0done\u00a0using\u00a0Python?\n3\nWho\u00a0uses\u00a0Python\u00a0today?\n4\nProgramming\u00a0Paradigms\n4\nFunctional\u00a0Programming\u00a0Model\n5\nProcedural\u00a0Programming\u00a0Model\n5\nObject-oriented\u00a0Programming\u00a0Model\n6\nEvent-driven Programming\u00a0Model\n6\nExercises\n7\n2\nGetting\u00a0Started\u00a0__________________________________\n9\nPython\u00a0Specification\n10\nPython Installation\u00a0under\u00a0Windows\n10\nPython Installation\u00a0under\u00a0Linux\n11\nPython\u00a0Resources\n12\nThird-party\u00a0Packages\n12\nMore\u00a0Sophisticated\u00a0Tools\n13\nWorking\u00a0with\u00a0Python\n13\nPython Programming\u00a0Modes\n14\nDetermining\u00a0Python\u00a0Ve", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_8", "chunk_strategy": "fixed_size"}}, {"text": "ion\u00a0under\u00a0Windows\n10\nPython Installation\u00a0under\u00a0Linux\n11\nPython\u00a0Resources\n12\nThird-party\u00a0Packages\n12\nMore\u00a0Sophisticated\u00a0Tools\n13\nWorking\u00a0with\u00a0Python\n13\nPython Programming\u00a0Modes\n14\nDetermining\u00a0Python\u00a0Version\n15\nExercises\n15\n3\nPython\u00a0Basics ____________________________________\n17\nIdentifiers\u00a0and\u00a0Keywords\n18\nPython\u00a0Types\n18\nBasic\u00a0Types\n19\nInteger\u00a0and\u00a0Float\u00a0Ranges\n19\nVariable\u00a0Type\u00a0and\u00a0Assignment\n20\nArithmetic\u00a0Operators\n20\nOperation\u00a0Nuances\n21\nPrecedence and\u00a0Associativity\n22\nConversions\n23\nBuilt-in\u00a0Functions\n23\nBuilt-in\u00a0Modules\n24\nContainer\u00a0Types\n26\nx\nPython\u00a0Type\u00a0Jargon\n26\nComments\u00a0and\u00a0Indentation\n27\nMulti-lining\n27\nClasses\u00a0and\u00a0Objects\n28\nMultiple\u00a0Objects\n29\nPrograms\n30\nExercises\n37\n4\nStrings __________________________________________\n39\nWhat\u00a0are\u00a0Strings?\n40\nAccessing\u00a0String\u00a0Elements\n40\nString\u00a0Properties\n41\nBuilt-in\u00a0Functions\n42\nString\u00a0Methods\n42\nString\u00a0Conversions\n43\nString\u00a0Comparisons\n44\nPrograms\n45\nExercises\n52\n5\nDecision\u00a0Control\u00a0Instruction_________________________\n55\nDecision\u00a0Control\u00a0In", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_9", "chunk_strategy": "fixed_size"}}, {"text": "roperties\n41\nBuilt-in\u00a0Functions\n42\nString\u00a0Methods\n42\nString\u00a0Conversions\n43\nString\u00a0Comparisons\n44\nPrograms\n45\nExercises\n52\n5\nDecision\u00a0Control\u00a0Instruction_________________________\n55\nDecision\u00a0Control\u00a0Instruction\n56\nNuances\u00a0of\u00a0Conditions\n57\nLogical\u00a0Operators\n57\nConditional\u00a0Expressions\n58\nall(\u00a0) and\u00a0any(\u00a0)\n59\nReceiving\u00a0Input\n59\npass Statement\n60\nPrograms\n60\nExercises\n65\n6\nRepetition\u00a0Control Instruction _______________________\n69\nRepetition\u00a0Control\u00a0Instruction\n70\nUsage\u00a0of\u00a0while Loop\n70\nUsage\u00a0of\u00a0for Loop\n71\nbreak and\u00a0continue\n73\nElse\u00a0Block\u00a0of\u00a0a\u00a0Loop\n73\nPrograms\n74\nExercises\n77\n7\nConsole\u00a0Input/Output _____________________________\n81\nConsole\u00a0Input\n82\nxi\nConsole\u00a0Output\n83\nFormatted\u00a0Printing\n83\nPrograms\n85\nExercises\n88\n8\nLists\u00a0____________________________________________\n91\nWhat\u00a0are\u00a0Lists?\n92\nAccessing\u00a0List\u00a0Elements\n92\nLooping\u00a0in Lists\n93\nBasic\u00a0List\u00a0Operations\n93\nUsing\u00a0Built-in\u00a0Functions\u00a0on\u00a0Lists\n96\nList\u00a0Methods\n97\nSorting\u00a0and\u00a0Reversing\n97\nList\u00a0Varieties\n98\nStack\u00a0Data\u00a0Structure\n99\nQueue\u00a0Data\u00a0Str", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_10", "chunk_strategy": "fixed_size"}}, {"text": "ing\u00a0List\u00a0Elements\n92\nLooping\u00a0in Lists\n93\nBasic\u00a0List\u00a0Operations\n93\nUsing\u00a0Built-in\u00a0Functions\u00a0on\u00a0Lists\n96\nList\u00a0Methods\n97\nSorting\u00a0and\u00a0Reversing\n97\nList\u00a0Varieties\n98\nStack\u00a0Data\u00a0Structure\n99\nQueue\u00a0Data\u00a0Structure\n99\nPrograms\n99\nExercises\n105\n9\nTuples\u00a0__________________________________________\n109\nWhat\u00a0are\u00a0Tuples?\n110\nAccessing\u00a0Tuple\u00a0Elements\n110\nLooping\u00a0in\u00a0Tuples\n111\nBasic\u00a0Tuple\u00a0Operations\n111\nUsing\u00a0Built-in\u00a0Functions\u00a0on\u00a0Tuples\n112\nTuple\u00a0Methods\n113\nTuple\u00a0Varieties\n113\nPrograms\n114\nExercises\n119\n10\nSets ____________________________________________\n121\nWhat\u00a0are\u00a0Sets?\n122\nAccessing\u00a0Set\u00a0Elements\n123\nLooping\u00a0in\u00a0Sets\n123\nBasic\u00a0Set\u00a0Operations\n123\nUsing\u00a0Built-in\u00a0Functions\u00a0on\u00a0Sets\n124\nSet\u00a0Methods\n124\nMathematical\u00a0Set\u00a0Operations\n125\nUpdating\u00a0Set\u00a0Operations\n126\nSet\u00a0Varieties\n126\nPrograms\n126\nxii\nExercises\n129\n11\nDictionaries\u00a0______________________________________\n131\nWhat\u00a0are\u00a0Dictionaries?\n132\nAccessing\u00a0Dictionary\u00a0Elements\n132\nLooping\u00a0in\u00a0Dictionaries\n133\nBasic\u00a0Dictionary\u00a0Operations\n133\nUsing\u00a0Built-in\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_11", "chunk_strategy": "fixed_size"}}, {"text": "\n129\n11\nDictionaries\u00a0______________________________________\n131\nWhat\u00a0are\u00a0Dictionaries?\n132\nAccessing\u00a0Dictionary\u00a0Elements\n132\nLooping\u00a0in\u00a0Dictionaries\n133\nBasic\u00a0Dictionary\u00a0Operations\n133\nUsing\u00a0Built-in\u00a0Functions\u00a0on\u00a0Dictionaries\n134\nDictionary\u00a0Methods\n135\nDictionary Varieties\n135\nPrograms\n136\nExercises\n141\n12\nComprehensions __________________________________\n145\nWhat\u00a0are\u00a0Comprehensions?\n146\nList\u00a0Comprehension\n146\nSet\u00a0Comprehension\n147\nDictionary\u00a0Comprehension\n148\nPrograms\n148\nExercises\n154\n13\nFunctions\u00a0________________________________________\n157\nWhat\u00a0are\u00a0Functions?\n158\nCommunication\u00a0with\u00a0Functions\n159\nTypes\u00a0of\u00a0Arguments\n160\nUnpacking\u00a0Arguments\n163\nPrograms\n164\nExercises\n173\n14\nRecursion\u00a0________________________________________\n175\nRepetitions\n176\nRecursive\u00a0Function\n176\nWhen\u00a0to\u00a0use\u00a0Recursion\n177\nProblem\u00a0as\u00a0Similar\u00a0Sub-problems\n177\nRecursive\u00a0Factorial\u00a0Function\n178\nProblem\u00a0with\u00a0Unknown\u00a0Loops\n179\nTypes\u00a0of\u00a0Recursion\n181\nRecursion\u00a0Limit\n182\nIteration\u00a0to Recursion\n182\nPrograms\n182\nExercises\n188", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_12", "chunk_strategy": "fixed_size"}}, {"text": "177\nProblem\u00a0as\u00a0Similar\u00a0Sub-problems\n177\nRecursive\u00a0Factorial\u00a0Function\n178\nProblem\u00a0with\u00a0Unknown\u00a0Loops\n179\nTypes\u00a0of\u00a0Recursion\n181\nRecursion\u00a0Limit\n182\nIteration\u00a0to Recursion\n182\nPrograms\n182\nExercises\n188\nxiii\n15\nFunctional\u00a0Programming ___________________________\n191\nFunctional\u00a0Programming\n192\nFunctions\u00a0as\u00a0First-class Values\n192\nLambda\u00a0Functions\n193\nHigher\u00a0Order\u00a0Functions\n194\nMap,\u00a0Filter,\u00a0Reduce\n195\nmap(\u00a0) Function\n195\nfilter(\u00a0) Function\n196\nreduce(\u00a0) Function\n196\nUsing\u00a0Lambda\u00a0with\u00a0map(\u00a0),\u00a0filter(\u00a0),\u00a0reduce(\u00a0)\n197\nWhere\u00a0are\u00a0they\u00a0Useful?\n198\nPrograms\n199\nExercises\n203\n16\nModules\u00a0and\u00a0Packages _____________________________\n205\nThe\u00a0Main\u00a0Module\n206\nMultiple\u00a0Modules\n206\nImporting\u00a0a\u00a0Module\n207\nVariations\u00a0of\u00a0import\n208\nSearch\u00a0Sequence\n208\nSame\u00a0Code,\u00a0Different\u00a0Interpretation\n209\nPackages\n209\nThird-party\u00a0Packages\n210\nPrograms\n211\nExercises\n215\n17\nNamespaces _____________________________________\n217\nSymbol\u00a0Table\n218\nNamespace\n218\nglobals(\u00a0) and\u00a0locals(\u00a0)\n219\nWhere\u00a0to\u00a0use\u00a0them?\n220\nInner\u00a0Functions\n221", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_13", "chunk_strategy": "fixed_size"}}, {"text": "y\u00a0Packages\n210\nPrograms\n211\nExercises\n215\n17\nNamespaces _____________________________________\n217\nSymbol\u00a0Table\n218\nNamespace\n218\nglobals(\u00a0) and\u00a0locals(\u00a0)\n219\nWhere\u00a0to\u00a0use\u00a0them?\n220\nInner\u00a0Functions\n221\nScope\u00a0and\u00a0LEGB\u00a0Rule\n222\nPrograms\n223\nExercises\n225\n18\nClasses\u00a0and\u00a0Objects ________________________________\n227\nProgramming\u00a0Paradigms\n228\nWhat\u00a0are\u00a0Classes\u00a0and\u00a0Objects?\n228\nClasses\u00a0and\u00a0Objects\u00a0in\u00a0Programming\n229\nxiv\nUser-defined\u00a0Classes\n229\nAccess\u00a0Convention\n231\nObject\u00a0Initialization\n232\nClass\u00a0Variables\u00a0and\u00a0Methods\n234\nvars(\u00a0) and\u00a0dir(\u00a0) Functions\n234\nMore\u00a0vars(\u00a0) and\u00a0dir(\u00a0)\n235\nPrograms\n236\nExercises\n242\n19\nIntricacies\u00a0of\u00a0Classes\u00a0and\u00a0Objects\u00a0____________________\n245\nIdentifier\u00a0Naming\u00a0Convention\u00a0\n246\nCalling\u00a0Functions\u00a0and\u00a0Methods\n247\nOperator\u00a0Overloading\n248\nWhich\u00a0Operators\u00a0to\u00a0Overload\n249\nEverything\u00a0is\u00a0an\u00a0Object\n250\nImitating\u00a0a\u00a0Structure\u00a0\n252\nType Conversion\n252\nPrograms\n253\nExercises\n256\n20\nContainership\u00a0and\u00a0Inheritance _______________________\n259\nReuse\u00a0Mechanisms\n260\nWhich\u00a0to\u00a0use\u00a0When?\n2", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_14", "chunk_strategy": "fixed_size"}}, {"text": "ything\u00a0is\u00a0an\u00a0Object\n250\nImitating\u00a0a\u00a0Structure\u00a0\n252\nType Conversion\n252\nPrograms\n253\nExercises\n256\n20\nContainership\u00a0and\u00a0Inheritance _______________________\n259\nReuse\u00a0Mechanisms\n260\nWhich\u00a0to\u00a0use\u00a0When?\n260\nContainership\n260\nInheritance\n261\nWhat\u00a0is\u00a0Accessible\u00a0where?\n263\nisinstance(\u00a0) and\u00a0issubclass(\u00a0)\n264\nThe\u00a0object class\n265\nFeatures\u00a0of\u00a0Inheritance\n265\nTypes\u00a0of\u00a0Inheritance\n265\nDiamond\u00a0Problem\n267\nAbstract\u00a0Classes\n268\nRuntime\u00a0Polymorphism\n269\nPrograms\n269\nExercises\n274\n21\nIterators\u00a0and\u00a0Generators ___________________________\n277\nIterables\u00a0and\u00a0Iterators\n278\nzip(\u00a0) Function\u00a0\n278\nIterators\n279\nUser-defined\u00a0Iterators\n281\nxv\nGenerators\n282\nWhich\u00a0to\u00a0use\u00a0When?\n283\nGenerator\u00a0Expressions\n283\nPrograms\n284\nExercises\n297\n22\nException\u00a0Handling ________________________________\n299\nWhat\u00a0may\u00a0go\u00a0Wrong?\n300\nSyntax\u00a0Errors\n300\nExceptions\n301\nHow\u00a0to\u00a0deal\u00a0with\u00a0Exceptions?\n302\nHow\u00a0to\u00a0use\u00a0try - except?\n303\nNuances\u00a0of\u00a0try and\u00a0except\n304\nUser-defined\u00a0Exceptions\n305\nelse Block\n308\nfinally Block\n309\nException\u00a0Handling", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_15", "chunk_strategy": "fixed_size"}}, {"text": "ax\u00a0Errors\n300\nExceptions\n301\nHow\u00a0to\u00a0deal\u00a0with\u00a0Exceptions?\n302\nHow\u00a0to\u00a0use\u00a0try - except?\n303\nNuances\u00a0of\u00a0try and\u00a0except\n304\nUser-defined\u00a0Exceptions\n305\nelse Block\n308\nfinally Block\n309\nException\u00a0Handling\u00a0Tips\n309\nPrograms\n309\nExercises\n314\n23\nFile\u00a0Input/Output\u00a0_________________________________\n317\nI/O\u00a0System\n318\nFile\u00a0I/O\n318\nRead\u00a0/\u00a0Write\u00a0Operations\n319\nFile\u00a0Opening\u00a0Modes\n320\nwith Keyword\n321\nMoving\u00a0within\u00a0a\u00a0File\n321\nSerialization\u00a0and\u00a0Deserialization\n322\nSerialization\u00a0of\u00a0User-defined\u00a0Types\n325\nFile\u00a0and\u00a0Directory\u00a0Operations\n326\nPrograms\n327\nExercises\n330\n24\nMiscellany\u00a0_______________________________________\n333\nDocumentation\u00a0Strings\n334\nCommand-line\u00a0Arguments\n335\nParsing\u00a0of\u00a0Command-line\n336\nBitwise\u00a0Operators\n338\nAssertion\n339\nDecorators\n340\nDecorating\u00a0Functions\u00a0with\u00a0Arguments\n342\nxvi\nUnicode\n345\nbytes Datatype\n345\nCreate\u00a0Executable\u00a0File\n347\nPrograms\n348\nExercises\n353\n25\nConcurrency\u00a0and\u00a0Parallelism ________________________\n355\nConcurrency\u00a0and\u00a0Parallelism\n356\nWhat\u00a0are\u00a0Threads?\n356\nConcurrency", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_16", "chunk_strategy": "fixed_size"}}, {"text": "5\nbytes Datatype\n345\nCreate\u00a0Executable\u00a0File\n347\nPrograms\n348\nExercises\n353\n25\nConcurrency\u00a0and\u00a0Parallelism ________________________\n355\nConcurrency\u00a0and\u00a0Parallelism\n356\nWhat\u00a0are\u00a0Threads?\n356\nConcurrency\u00a0and\u00a0Parallelism\u00a0in\u00a0Programming\n357\nCPU-bound\u00a0and\u00a0I/O-bound\u00a0Programs\n358\nWhich\u00a0to\u00a0use\u00a0When?\n358\nConcurrency\u00a0for\u00a0Improving\u00a0Performance\n359\nTypes\u00a0of\u00a0Concurrencies\n360\nThread\u00a0Properties\n361\nLaunching\u00a0Threads\n361\nPassing\u00a0Parameters\u00a0to\u00a0a\u00a0Thread\n362\nPrograms\n363\nExercises\n370\n26\nSynchronization __________________________________\n373\nSynchronization\n374\nExamples\u00a0of\u00a0Sharing\u00a0Resources\n374\nExample\u00a0of\u00a0Communication\u00a0between\u00a0Threads\n374\nMechanisms\u00a0for\u00a0Sharing\u00a0Resources\n375\nLock\u00a0\n375\nRLock\u00a0\n376\nSemaphore\n377\nMechanisms\u00a0for\u00a0Inter-thread\u00a0Communication\n377\nEvent\n377\nCondition\n378\nPrograms\n379\nExercises\n393\nAppendix\u00a0A\u00a0- Precedence\u00a0Table _____________________\n395\nAppendix\u00a0B\u00a0- Debugging\u00a0in\u00a0Python ___________________\n397\nAppendix\u00a0C\u00a0- Chasing\u00a0the\u00a0Bugs _______________________\n401\nIndex\u00a0__________________________", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_17", "chunk_strategy": "fixed_size"}}, {"text": "endix\u00a0A\u00a0- Precedence\u00a0Table _____________________\n395\nAppendix\u00a0B\u00a0- Debugging\u00a0in\u00a0Python ___________________\n397\nAppendix\u00a0C\u00a0- Chasing\u00a0the\u00a0Bugs _______________________\n401\nIndex\u00a0___________________________________________\n407\nLet\u00a0Us\nPython\n1\nIntroduction\u00a0to\nPython\nx\nWhat\u00a0is\u00a0Python?\nx\nFunctional\u00a0Programming\u00a0Model\nx\nReasons\u00a0for\u00a0Popularity\nx\nProcedural\u00a0Programming\u00a0Model\nx\nWhat\u00a0sets\u00a0Python\u00a0apart?\nx\nObject-oriented\u00a0Programming\u00a0Model\nx\nWhere\u00a0is\u00a0Python Used?\nx\nEvent-driven\u00a0Programming\u00a0Model\nx\nWho\u00a0uses\u00a0Python\u00a0today?\nx\nExercises\nx\nProgramming\u00a0Paradigms\n1\n\u201cWet\u00a0your\u00a0feet...\u201d\n2\nLet\u00a0Us\u00a0Python\nWhat\u00a0is\u00a0Python?\nx\nPython\u00a0is\u00a0a\u00a0high-level\u00a0programming\u00a0language\u00a0created\u00a0by\u00a0Guido\u00a0Van\u00a0\nRossum - fondly\u00a0known\u00a0as\u00a0Benevolent\u00a0Dictator\u00a0For\u00a0Life.\nx\nPython\u00a0 was\u00a0 first\u00a0 released\u00a0 in\u00a0 1991.\u00a0 Today\u00a0 Python\u00a0 interpreters\u00a0 are\u00a0\navailable\u00a0for\u00a0many\u00a0Operating\u00a0Systems\u00a0including\u00a0Windows\u00a0and\u00a0Linux.\nx\nPython\u00a0programmers\u00a0are\u00a0often\u00a0called\u00a0Pythonists\u00a0or\u00a0Pythonistas.\nReasons\u00a0for\u00a0Popularity\nx\nThe\u018ce\u00a0a\u018ce\u00a0\u0190e\u01c0e\u018cal\u00a0\u018cea\u0190on\u0190\u00a0fo\u018c\u00a0P\u01c7\u019ahon\ue001\u0190\u00a0pop\u01b5la", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_18", "chunk_strategy": "fixed_size"}}, {"text": "vailable\u00a0for\u00a0many\u00a0Operating\u00a0Systems\u00a0including\u00a0Windows\u00a0and\u00a0Linux.\nx\nPython\u00a0programmers\u00a0are\u00a0often\u00a0called\u00a0Pythonists\u00a0or\u00a0Pythonistas.\nReasons\u00a0for\u00a0Popularity\nx\nThe\u018ce\u00a0a\u018ce\u00a0\u0190e\u01c0e\u018cal\u00a0\u018cea\u0190on\u0190\u00a0fo\u018c\u00a0P\u01c7\u019ahon\ue001\u0190\u00a0pop\u01b5la\u018ci\u019a\u01c7\ue002\u00a0The\u0190e\u00a0incl\u01b5de\ue003\n(a) Free:\n-\nPython\u00a0 is\u00a0 free\u00a0 to\u00a0 use\u00a0 and\u00a0 distribute and\u00a0 is supported\u00a0 by\u00a0\ncommunity.\n-\nPython\u00a0interpreter\u00a0is\u00a0available\u00a0for\u00a0every\u00a0major\u00a0platform.\n(b) Software\u00a0quality:\n-\nBetter\u00a0than\u00a0traditional\u00a0and scripting\u00a0languages.\n-\nReadable\u00a0code,\u00a0hence\u00a0reusable\u00a0and maintainable.\n-\nSupport\u00a0for\u00a0advance\u00a0reuse\u00a0mechanisms.\n(c) Developer\u00a0productivity:\n-\nMuch\u00a0better\u00a0than\u00a0statically\u00a0typed\u00a0languages.\n-\nMuch\u00a0smaller\u00a0code.\n-\nLess\u00a0to\u00a0type,\u00a0debug\u00a0and\u00a0maintain.\n-\nNo\u00a0lengthy\u00a0compile\u00a0and\u00a0link\u00a0steps.\n(d) Program\u00a0portability:\n-\nPython\u00a0programs\u00a0run\u00a0unchanged\u00a0on\u00a0most\u00a0platforms.\n-\nPython\u00a0runs\u00a0on every\u00a0major\u00a0platform\u00a0currently\u00a0in\u00a0use.\n-\nPorting\u00a0 program\u00a0 to\u00a0a\u00a0 new\u00a0 platform\u00a0 usually\u00a0need\u00a0only\u00a0 cut\u00a0and\u00a0\npaste.\u00a0This\u00a0is\u00a0true\u00a0even\u00a0for\u00a0GUI,\u00a0DB\u00a0access,\u00a0Web\u00a0programming,\u00a0\nOS\u00a0interfacing,\u00a0Directory\u00a0access,\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_19", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0major\u00a0platform\u00a0currently\u00a0in\u00a0use.\n-\nPorting\u00a0 program\u00a0 to\u00a0a\u00a0 new\u00a0 platform\u00a0 usually\u00a0need\u00a0only\u00a0 cut\u00a0and\u00a0\npaste.\u00a0This\u00a0is\u00a0true\u00a0even\u00a0for\u00a0GUI,\u00a0DB\u00a0access,\u00a0Web\u00a0programming,\u00a0\nOS\u00a0interfacing,\u00a0Directory\u00a0access,\u00a0etc.\n(e) Support\u00a0libraries:\n-\nStrong\u00a0 library\u00a0 support\nfrom\u00a0 Text\u00a0 pattern\u00a0 matching\u00a0 to\u00a0\nnetworking.\n-\nVast\u00a0collection\u00a0of\u00a0third\u00a0party\u00a0libraries.\n-\nLibraries\u00a0 for\u00a0 Web\u00a0 site\u00a0 construction,\u00a0 Numeric\u00a0 programming,\u00a0\nGame\u00a0development,\u00a0Machine\u00a0Learning\u00a0etc.\nChapter\u00a01:\u00a0Introduction\u00a0to\u00a0Python\u00a0\n3\n(f) Component\u00a0integration:\n-\nCan\u00a0invoke\u00a0C,\u00a0C++\u00a0libraries\u00a0and\u00a0Java\u00a0components.\n-\nCan\u00a0communicate\u00a0with\u00a0frameworks\u00a0such\u00a0as\u00a0COM,\u00a0.NET.\n-\nCan\u00a0interact\u00a0over\u00a0networks\u00a0with\u00a0interfaces\u00a0like\u00a0SOAP,\u00a0XML-RPC,\u00a0\nCORBA.\n-\nWith\u00a0appropriate\u00a0glue\u00a0code, Python\u00a0can\u00a0subclass\u00a0C++,\u00a0Java,\u00a0C#.\nclasses,\u00a0thereby\u00a0extending\u00a0the\u00a0reach\u00a0of\u00a0the\u00a0program.\n-\nPopularly\u00a0used\u00a0for\u00a0product\u00a0customization\u00a0and\u00a0extension.\n(g) Enjoyment:\n-\nEase\u00a0of\u00a0use.\n-\nBuilt-in\u00a0toolset.\n-\nProgramming\u00a0becomes\u00a0pleasure\u00a0than\u00a0work.\nWhat\u00a0sets\u00a0Python\u00a0apart?\n(a) Powerful:\n", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_20", "chunk_strategy": "fixed_size"}}, {"text": "he\u00a0program.\n-\nPopularly\u00a0used\u00a0for\u00a0product\u00a0customization\u00a0and\u00a0extension.\n(g) Enjoyment:\n-\nEase\u00a0of\u00a0use.\n-\nBuilt-in\u00a0toolset.\n-\nProgramming\u00a0becomes\u00a0pleasure\u00a0than\u00a0work.\nWhat\u00a0sets\u00a0Python\u00a0apart?\n(a) Powerful:\n-\nDynamic typing.\n-\nNo\u00a0variable declaration.\n-\nAutomatic\u00a0allocation\u00a0and Garbage\u00a0Collection.\n-\nSupports\u00a0classes,\u00a0modules\u00a0and exceptions.\n-\nPermits\u00a0componentization and reuse.\n-\nPowerful\u00a0containers\u00a0- Lists,\u00a0Dictionaries,\u00a0Tuples,\u00a0etc.\n(b) Ready-made\u00a0stuff:\n-\nSupport\u00a0for\u00a0operations like\u00a0joining,\u00a0slicing,\u00a0sorting,\u00a0mapping,\u00a0etc.\n-\nPowerful\u00a0library.\n-\nLarge\u00a0collection\u00a0of\u00a0third-party\u00a0utilities.\n(c) Ease\u00a0of\u00a0use:\n-\nType\u00a0and\u00a0run.\n-\nNo\u00a0compile\u00a0and\u00a0link\u00a0steps.\n-\nInteractive\u00a0programming\u00a0experience.\n-\nRapid\u00a0turnaround.\n-\nPrograms are\u00a0simpler,\u00a0smaller and\u00a0more\u00a0flexible.\nWhere\u00a0is\u00a0Python used?\nx\nPython\u00a0is\u00a0used\u00a0for\u00a0multiple\u00a0purposes.\u00a0These\u00a0include:\n(a) System\u00a0programming\n(b) Building\u00a0GUI\u00a0applications\n(c) Internet\u00a0scripting\n4\nLet\u00a0Us\u00a0Python\n(d) Component\u00a0integration\n(e) Database\u00a0programming\n(f) Rapid\u00a0prototypi", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_21", "chunk_strategy": "fixed_size"}}, {"text": "for\u00a0multiple\u00a0purposes.\u00a0These\u00a0include:\n(a) System\u00a0programming\n(b) Building\u00a0GUI\u00a0applications\n(c) Internet\u00a0scripting\n4\nLet\u00a0Us\u00a0Python\n(d) Component\u00a0integration\n(e) Database\u00a0programming\n(f) Rapid\u00a0prototyping\n(g) Numeric and\u00a0Scientific\u00a0programming\n(h) Game\u00a0programming\n(i) Robotics programming\nWho\u00a0uses\u00a0Python\u00a0today?\nx\nMany\u00a0organizations\u00a0use\u00a0Python\u00a0for\u00a0varied\u00a0purposes.\u00a0These\u00a0include:\n(a) Google\u00a0- In\u00a0web\u00a0search\u00a0system\n(b) YouTube - Video\u00a0Sharing\u00a0service\n(c) Bit-torrent\u00a0- Peer\u00a0to\u00a0Peer\u00a0file\u00a0sharing\u00a0system\n(d) Intel,\u00a0HP,\u00a0Seagate,\u00a0IBM,\u00a0Qualcomm - Hardware\u00a0testing\u00a0\n(e) Pixar,\u00a0Industrial\u00a0Light\u00a0and\u00a0Magic\u00a0- Movie\u00a0animation\u00a0\n(f) JP\u00a0Morgan,\u00a0Chase,\u00a0UBS - Financial\u00a0market\u00a0forecasting\u00a0\n(g) NASA,\u00a0FermiLab - Scientific\u00a0programming\u00a0\n(h) iRobot\u00a0- Commercial\u00a0robot\u00a0vacuum\u00a0cleaners\u00a0\n(i) NSA\u00a0- Cryptographic\u00a0and Intelligence\u00a0analysis\u00a0\n(j) IronPort - Email\u00a0Servers\u00a0\nProgramming\u00a0Paradigms\nx\nParadigm\u00a0means\u00a0organization\u00a0principle.\u00a0It\u00a0is\u00a0also\u00a0known\u00a0as\u00a0model.\nx\nProgramming\u00a0 paradigm/model\u00a0 is\u00a0 a\u00a0 style\u00a0 of\u00a0 building\u00a0 the\u00a0 ", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_22", "chunk_strategy": "fixed_size"}}, {"text": "gence\u00a0analysis\u00a0\n(j) IronPort - Email\u00a0Servers\u00a0\nProgramming\u00a0Paradigms\nx\nParadigm\u00a0means\u00a0organization\u00a0principle.\u00a0It\u00a0is\u00a0also\u00a0known\u00a0as\u00a0model.\nx\nProgramming\u00a0 paradigm/model\u00a0 is\u00a0 a\u00a0 style\u00a0 of\u00a0 building\u00a0 the\u00a0 structure\u00a0\nand\u00a0elements\u00a0of computer\u00a0programs.\nx\nThere\u00a0 exist\u00a0many\u00a0programming\u00a0models\u00a0 like\u00a0Functional,\u00a0 Procedural,\u00a0\nObject-oriented,\u00a0Event-driven,\u00a0etc.\u00a0\nx\nMany\u00a0 languages\u00a0facilitate\u00a0programming\u00a0in\u00a0one\u00a0or\u00a0more\u00a0paradigms.\u00a0\nFor\u00a0 example,\u00a0 Python\u00a0 supports\u00a0 Functional,\u00a0 Procedural,\u00a0 Object-\noriented\u00a0and\u00a0Event-driven\u00a0programming\u00a0models.\nChapter\u00a01:\u00a0Introduction\u00a0to\u00a0Python\u00a0\n5\nx\nThere\u00a0 are\u00a0 situations\u00a0when\u00a0 Functional\u00a0 programming\u00a0 is\u00a0the\u00a0 obvious\u00a0\nchoice,\u00a0 and\u00a0 other\u00a0 situations\u00a0 were\u00a0 Procedural\u00a0 programming\u00a0 is\u00a0 the\u00a0\nbetter\u00a0choice.\nx\nParadigms\u00a0are not\u00a0meant\u00a0to\u00a0be\u00a0mutually\u00a0exclusive.\u00a0A single\u00a0program\u00a0\nmay\u00a0use\u00a0multiple\u00a0paradigms.\u00a0\nFunctional\u00a0Programming\u00a0Model\nx\nFunctional\u00a0 programming\u00a0 decomposes\u00a0 a\u00a0 problem\u00a0 into\u00a0 a\u00a0 set\u00a0 of\u00a0\nfunctions.\u00a0 These\u00a0functions\u00a0 provide\u00a0 the\u00a0main\u00a0source\u00a0 of\u00a0 logic\u00a0in\u00a0 t", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_23", "chunk_strategy": "fixed_size"}}, {"text": "m\u00a0\nmay\u00a0use\u00a0multiple\u00a0paradigms.\u00a0\nFunctional\u00a0Programming\u00a0Model\nx\nFunctional\u00a0 programming\u00a0 decomposes\u00a0 a\u00a0 problem\u00a0 into\u00a0 a\u00a0 set\u00a0 of\u00a0\nfunctions.\u00a0 These\u00a0functions\u00a0 provide\u00a0 the\u00a0main\u00a0source\u00a0 of\u00a0 logic\u00a0in\u00a0 the\nprogram.\nx\nFunctions\u00a0 take\u00a0 input\u00a0 parameters\u00a0 and\u00a0 produce\u00a0 outputs.\u00a0 Python\u00a0\nprovides\u00a0 functional\u00a0 programming\u00a0 techniques\u00a0 like\u00a0 lambda,\u00a0 map,\u00a0\nreduce\u00a0and\u00a0filter.\u00a0These\u00a0are\u00a0discussed\u00a0in\u00a0Chapter\u00a015.\nx\nIn\u00a0this\u00a0model\u00a0computation\u00a0is\u00a0treated\u00a0as\u00a0 evaluation\u00a0of mathematical\u00a0\nfunctions.\u00a0 For\u00a0 example,\u00a0 to\u00a0 get\u00a0 factorial\u00a0 value\u00a0 of\u00a0 a\u00a0 number,\u00a0 or\u00a0 nth\nFibonacci\u00a0number\u00a0we\u00a0can\u00a0use\u00a0the\u00a0following\u00a0functions:\nfactorial(n)\u00a0 =\u00a01\u00a0\nif\u00a0n\u00a0==\u00a00\n=\u00a0n\u00a0*\u00a0factorial(n\u00a0- 1)\u00a0\nif\u00a0n\u00a0>\u00a00\nfibo(n)\u00a0=\u00a00\u00a0\nif\u00a0n\u00a0=\u00a00\n=\u00a01\u00a0\nif\u00a0n\u00a0=\u00a01\n=\u00a0fibo(n\u00a0- 2)\u00a0+\u00a0fibo(n\u00a0- 1)\u00a0\nif\u00a0n\u00a0>\u00a01\u00a0\nx\nThe\u00a0 output\u00a0value\u00a0 of\u00a0 a\u00a0 function\u00a0depends\u00a0 only\u00a0 on\u00a0 its arguments,\u00a0so\u00a0\ncalling\u00a0 a\u00a0 function\u00a0 with\u00a0 the\u00a0 same\u00a0 value\u00a0 for\u00a0 an\u00a0 argument\u00a0 always\u00a0\nproduces\u00a0 the\u00a0 same\u00a0 result.\u00a0 As\u00a0a\u00a0 result,\u00a0 it\u00a0is\u00a0 a\u00a0 good\u00a0 fit\u00a0 for\u00a0 parallel\u00a0\nexecution.\nx\nNo\u00a0function\u00a0can", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_24", "chunk_strategy": "fixed_size"}}, {"text": "ts arguments,\u00a0so\u00a0\ncalling\u00a0 a\u00a0 function\u00a0 with\u00a0 the\u00a0 same\u00a0 value\u00a0 for\u00a0 an\u00a0 argument\u00a0 always\u00a0\nproduces\u00a0 the\u00a0 same\u00a0 result.\u00a0 As\u00a0a\u00a0 result,\u00a0 it\u00a0is\u00a0 a\u00a0 good\u00a0 fit\u00a0 for\u00a0 parallel\u00a0\nexecution.\nx\nNo\u00a0function\u00a0can\u00a0have\u00a0side\u00a0effects\u00a0on\u00a0other\u00a0variables\u00a0(state\u00a0remains\u00a0\nunaltered).\nx\nFunctional\u00a0 programming\u00a0 model\u00a0 is\u00a0 often\u00a0 called\u00a0 a 'Declarative'\nprogramming paradigm\u00a0as\u00a0programming\u00a0is\u00a0done\u00a0with expressions or\u00a0\ndeclarations instead\u00a0of statements.\u00a0\nProcedural\u00a0Programming\u00a0Model\nx\nProcedural\u00a0 programming\u00a0 solves\u00a0 the\u00a0problem\u00a0by\u00a0 implementing\u00a0 one\u00a0\nstatement (a\u00a0procedure)\u00a0at\u00a0a\u00a0time.\u00a0Thus\u00a0it\u00a0contains\u00a0explicit\u00a0steps\u00a0that\u00a0\nare\u00a0executed\u00a0in\u00a0a\u00a0specific\u00a0order.\n6\nLet\u00a0Us\u00a0Python\nx\nIt\u00a0also\u00a0uses\u00a0functions,\u00a0but\u00a0these\u00a0are\u00a0not\u00a0mathematical\u00a0functions like\u00a0\nthe\u00a0 ones\u00a0used\u00a0in\u00a0functional\u00a0programming.\u00a0Functional programming\u00a0\nfocuses\u00a0 on expressions,\u00a0 whereas\u00a0 Procedural programming\u00a0 focuses\u00a0\non statements.\nx\nThe\u00a0 statements\u00a0don't\u00a0 have\u00a0values\u00a0 and\u00a0instead\u00a0modify\u00a0 the\u00a0state\u00a0of\u00a0\nsome\u00a0conceptual\u00a0machine.\nx\nSame\u00a0language\u00a0expres", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_25", "chunk_strategy": "fixed_size"}}, {"text": "cuses\u00a0 on expressions,\u00a0 whereas\u00a0 Procedural programming\u00a0 focuses\u00a0\non statements.\nx\nThe\u00a0 statements\u00a0don't\u00a0 have\u00a0values\u00a0 and\u00a0instead\u00a0modify\u00a0 the\u00a0state\u00a0of\u00a0\nsome\u00a0conceptual\u00a0machine.\nx\nSame\u00a0language\u00a0expression\u00a0can\u00a0result\u00a0in\u00a0different\u00a0values\u00a0at\u00a0different\u00a0\ntimes\u00a0depending\u00a0on\u00a0the\u00a0global\u00a0state\u00a0of\u00a0the\u00a0executing\u00a0program.\u00a0Also,\u00a0\nthe\u00a0functions\u00a0may\u00a0change\u00a0a\u00a0program's\u00a0state.\nx\nProcedural\u00a0 programming\u00a0 model\u00a0 is\u00a0 often\u00a0 called\u00a0 'Imperative'\nprogramming as\u00a0 it\u00a0 changes\u00a0 state\u00a0 with\u00a0 an\u00a0 explicit\u00a0 sequence\u00a0 of\u00a0\nstatements.\nObject-oriented\u00a0Programming\u00a0Model\nx\nThis\u00a0model\u00a0mimics the\u00a0real\u00a0world\u00a0by\u00a0creating inside\u00a0the\u00a0computer\u00a0a\u00a0\nmini-world\u00a0of\u00a0objects.\nx\nIn\u00a0a\u00a0 University\u00a0system\u00a0objects\u00a0can\u00a0be\u00a0VC,\u00a0Professors,\u00a0 Non-teaching\u00a0\nstaff,\u00a0students,\u00a0courses,\u00a0semesters,\u00a0examinations,\u00a0etc.\nx\nEach\u00a0object\u00a0 has\u00a0a\u00a0state\u00a0(values)\u00a0and\u00a0 behavior\u00a0(interface/methods).\u00a0\nObjects\u00a0 get\u00a0 state\u00a0 and\u00a0 behavior\u00a0 based\u00a0 on\u00a0 the\u00a0 class\u00a0 from\u00a0 which\u00a0 it\u00a0\ncreated.\nx\nObjects\u00a0 interact\u00a0 with\u00a0 one\u00a0 another\u00a0 by sending\u00a0 messages\u00a0 to\u00a0 each\u00a0\no\u019ahe", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_26", "chunk_strategy": "fixed_size"}}, {"text": ")\u00a0and\u00a0 behavior\u00a0(interface/methods).\u00a0\nObjects\u00a0 get\u00a0 state\u00a0 and\u00a0 behavior\u00a0 based\u00a0 on\u00a0 the\u00a0 class\u00a0 from\u00a0 which\u00a0 it\u00a0\ncreated.\nx\nObjects\u00a0 interact\u00a0 with\u00a0 one\u00a0 another\u00a0 by sending\u00a0 messages\u00a0 to\u00a0 each\u00a0\no\u019ahe\u018c\ue004\u00a0i\ue002e\ue002\u00a0b\u01c7\u00a0calling\u00a0each\u00a0o\u019ahe\u018c\ue001\u0190\u00a0in\u019ae\u018cface\u00a0methods.\nEvent-driven\u00a0Programming\u00a0Model\nx\nThis\u00a0 model\u00a0 is\u00a0 popularly\u00a0 used\u00a0 for\u00a0 programming\u00a0 GUI\u00a0 applications\u00a0\ncontaining\u00a0 elements\u00a0 like\u00a0 windows,\u00a0 check\u00a0 boxes,\u00a0 buttons,\u00a0 combo-\nboxes,\u00a0scroll\u00a0bars,\u00a0menus,\u00a0etc.\nx\nWhen\u00a0 we\u00a0 interact\u00a0 with\u00a0 these\u00a0 elements\u00a0 (like\u00a0 clicking\u00a0 a\u00a0 button,\u00a0 or\u00a0\nmoving\u00a0 the\u00a0 scrollbar\u00a0 or\u00a0 selecting\u00a0 a\u00a0 menu\u00a0 item)\u00a0 events\u00a0 occur\u00a0 and\u00a0\nthese\u00a0 elements\u00a0 emit\u00a0messages.\u00a0 There\u00a0 are\u00a0 listener\u00a0 methods\u00a0 which\u00a0\nare\u00a0registered\u00a0with\u00a0these\u00a0GUI\u00a0elements\u00a0which\u00a0react\u00a0to\u00a0these\u00a0events.\u00a0\nx\nSince\u00a0 there\u00a0is\u00a0no\u00a0guaranteed\u00a0sequence\u00a0in\u00a0which\u00a0events\u00a0 may\u00a0occur\u00a0\n(based\u00a0on\u00a0how\u00a0we\u00a0interact\u00a0with\u00a0GUI\u00a0elements),\u00a0the\u00a0listeners\u00a0should\u00a0\nbe\u00a0able\u00a0to\u00a0handle\u00a0them\u00a0in\u00a0asynchronous\u00a0manner.\n__________________________________________________________________", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_27", "chunk_strategy": "fixed_size"}}, {"text": "events\u00a0 may\u00a0occur\u00a0\n(based\u00a0on\u00a0how\u00a0we\u00a0interact\u00a0with\u00a0GUI\u00a0elements),\u00a0the\u00a0listeners\u00a0should\u00a0\nbe\u00a0able\u00a0to\u00a0handle\u00a0them\u00a0in\u00a0asynchronous\u00a0manner.\n____________________________________________________________________\nChapter\u00a01:\u00a0Introduction\u00a0to\u00a0Python\u00a0\n7\n[A] Answer\u00a0the\u00a0following:\n(a) Mention\u00a05\u00a0fields\u00a0in\u00a0which\u00a0Python\u00a0is\u00a0popularly\u00a0used.\n(b) Where\u00a0is\u00a0event-driven\u00a0programming\u00a0popularly\u00a0used?\n(c) Why\u00a0Python\u00a0is\u00a0called\u00a0portable\u00a0language?\n(d) What\u00a0is\u00a0the\u00a0single\u00a0most\u00a0important\u00a0feature\u00a0of\u00a0different\u00a0programming\u00a0\nmodels\u00a0discussed\u00a0in\u00a0this\u00a0chapter?\n(e) Which\u00a0of\u00a0the\u00a0following\u00a0is\u00a0not\u00a0a\u00a0feature\u00a0of\u00a0Python?\n-\nStatic typing\n-\nDynamic\u00a0typing\n-\nRun-time\u00a0error\u00a0handling\u00a0through\u00a0error\u00a0numbers\n-\nLibrary\u00a0support\u00a0for\u00a0containers\u00a0like\u00a0Lists,\u00a0Dictionaries,\u00a0Tuples\n(f) Give\u00a0an\u00a0example\u00a0application\u00a0of\u00a0each\u00a0of\u00a0the\u00a0following\u00a0programming\u00a0\nmodels:\n-\nFunctional\u00a0model\n-\nProcedural\u00a0model\n-\nObject-oriented\u00a0model\n-\nEvent-driven\u00a0model\n[B] State\u00a0whether\u00a0the\u00a0following\u00a0statements\u00a0are\u00a0True\u00a0or\u00a0False:\n(a) Python\u00a0is\u00a0free\u00a0to\u00a0use\u00a0and\u00a0distribute.\n(b) Sam", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_28", "chunk_strategy": "fixed_size"}}, {"text": "dels:\n-\nFunctional\u00a0model\n-\nProcedural\u00a0model\n-\nObject-oriented\u00a0model\n-\nEvent-driven\u00a0model\n[B] State\u00a0whether\u00a0the\u00a0following\u00a0statements\u00a0are\u00a0True\u00a0or\u00a0False:\n(a) Python\u00a0is\u00a0free\u00a0to\u00a0use\u00a0and\u00a0distribute.\n(b) Same\u00a0 Python\u00a0 program\u00a0 can\u00a0 work\u00a0 on\u00a0different\u00a0 OS\u00a0 - microprocessor\u00a0\ncombinations.\n(c) It\u00a0is\u00a0possible\u00a0to\u00a0use\u00a0C++\u00a0or\u00a0Java\u00a0libraries\u00a0in\u00a0a\u00a0Python\u00a0program.\n(d) In\u00a0Python\u00a0type\u00a0of\u00a0the\u00a0variable\u00a0is\u00a0decided\u00a0based\u00a0on\u00a0its\u00a0usage.\n(e) Python\u00a0cannot\u00a0be\u00a0used\u00a0for\u00a0building\u00a0GUI\u00a0applications.\n(f) Python\u00a0 supports\u00a0functional,\u00a0procedural,\u00a0object-oriented\u00a0and\u00a0event-\ndriven\u00a0programming\u00a0models.\n(g) GUI\u00a0applications\u00a0are\u00a0based\u00a0on\u00a0event-driven\u00a0programming\u00a0model.\n8\nLet\u00a0Us\u00a0Python\n(h) Functional\u00a0 programming\u00a0 model\u00a0 consists\u00a0 of\u00a0 interaction\u00a0 of\u00a0 multiple\u00a0\nobjects.\n[C] Match\u00a0the\u00a0following pairs:\na.\u00a0 Functional\u00a0programming\n1.\u00a0 GUI\u00a0element\u00a0based\u00a0interaction\nb.\u00a0 Event-driven\u00a0programming\n2.\u00a0 Interaction\u00a0of\u00a0objects\nc.\u00a0 Procedural\u00a0programming\n3.\u00a0 Statements\nd.\u00a0 OOP\n4.\u00a0 Maths-like\u00a0functions\n[D] Fill\u00a0in\u00a0the\u00a0blanks:\n(a) Functiona", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_29", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0 GUI\u00a0element\u00a0based\u00a0interaction\nb.\u00a0 Event-driven\u00a0programming\n2.\u00a0 Interaction\u00a0of\u00a0objects\nc.\u00a0 Procedural\u00a0programming\n3.\u00a0 Statements\nd.\u00a0 OOP\n4.\u00a0 Maths-like\u00a0functions\n[D] Fill\u00a0in\u00a0the\u00a0blanks:\n(a) Functional\u00a0 programming\u00a0 paradigm\u00a0 is\u00a0 also\u00a0 known\u00a0 as\u00a0 ________\u00a0\nprogramming\u00a0model.\n(b) Procedural\u00a0 programming\u00a0 paradigm\u00a0 is\u00a0 also\u00a0 known\u00a0 as\u00a0 ________\u00a0\nprogramming\u00a0model.\n(c) Python\u00a0was\u00a0created\u00a0by\u00a0_________.\n(d) Python\u00a0programmers\u00a0are\u00a0often\u00a0called\u00a0_________.\nLet\u00a0Us\nPython\n9\nGetting\u00a0Started\nx\nPython\u00a0Specification\nx\nMore\u00a0Sophisticated\u00a0Tools\nx\nPython\u00a0Installation\u00a0under\u00a0Windows\nx\nWorking\u00a0with\u00a0Python\nx\nPython\u00a0Installation\u00a0under\u00a0Linux\nx\nPython\u00a0Programming\u00a0Modes\nx\nPython\u00a0Resources\nx\nDetermining\u00a0Python\u00a0Version\nx\nThird-party\u00a0Packages\nx\nExercises\n2\n\u201cOn\u00a0your\u00a0mark,\u00a0set,\u00a0go...\u201d\n10\nLet\u00a0Us\u00a0Python\nPython\u00a0Specification\nx\nPython is\u00a0a\u00a0specification\u00a0for\u00a0a\u00a0language\u00a0that\u00a0can\u00a0be\u00a0implemented\u00a0in\u00a0\ndifferent\u00a0ways.\u00a0There\u00a0are\u00a0many\u00a0implementations\u00a0of\u00a0this\u00a0specification\u00a0\nwritten\u00a0in\u00a0different\u00a0languages.\nx\nDifferent\u00a0popular\u00a0Pyt", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_30", "chunk_strategy": "fixed_size"}}, {"text": "ion\nx\nPython is\u00a0a\u00a0specification\u00a0for\u00a0a\u00a0language\u00a0that\u00a0can\u00a0be\u00a0implemented\u00a0in\u00a0\ndifferent\u00a0ways.\u00a0There\u00a0are\u00a0many\u00a0implementations\u00a0of\u00a0this\u00a0specification\u00a0\nwritten\u00a0in\u00a0different\u00a0languages.\nx\nDifferent\u00a0popular\u00a0Python\u00a0implementations are:\nCPython\u00a0- is\u00a0the\u00a0reference\u00a0implementation,\u00a0written\u00a0in\u00a0C.\nPyPy\u00a0- Written\u00a0in\u00a0a\u00a0subset\u00a0of\u00a0Python\u00a0language\u00a0called\u00a0RPython.\nJython\u00a0- Written\u00a0in\u00a0Java.\nIronPython\u00a0- Written\u00a0in\u00a0C#.\nx\nAll\u00a0 the\u00a0implementations\u00a0are\u00a0 compilers\u00a0as\u00a0 well\u00a0as\u00a0 interpreters.\u00a0The\u00a0\ncompiler\u00a0converts\u00a0the\u00a0Python\u00a0program\u00a0into\u00a0intermediate\u00a0bytecode.\u00a0\nThis\u00a0bytecode\u00a0is\u00a0then\u00a0interpreted\u00a0by\u00a0the\u00a0interpreter.\nPython Installation under\u00a0Windows\nx\nPython\u00a0 has\u00a0 evolved\u00a0 over\u00a0 the\u00a0 years.\u00a0 At\u00a0 the\u00a0 time\u00a0 of\u00a0 writing\u00a0 of\u00a0 this\u00a0\nedition\u00a0the\u00a0latest\u00a0version\u00a0for\u00a0Windows\u00a0and\u00a0Linux\u00a0environments\u00a0was\u00a0\nPython\u00a03.8.2.\u00a0\nx\nPython\u00a0is\u00a0not\u00a0shipped\u00a0as\u00a0part\u00a0of\u00a0Windows\u00a0OS.\u00a0So\u00a0we\u00a0need\u00a0to\u00a0install\u00a0it\u00a0\nseparately. For\u00a0this\u00a0we\u00a0need\u00a0to\u00a0download\u00a0the\u00a0Python\u00a0installer\u00a0from\u00a0\nwww.python.org/downloads/.\u00a0 (http://www.python.org/downloads/.\u00a0)\nx\nWhi", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_31", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0not\u00a0shipped\u00a0as\u00a0part\u00a0of\u00a0Windows\u00a0OS.\u00a0So\u00a0we\u00a0need\u00a0to\u00a0install\u00a0it\u00a0\nseparately. For\u00a0this\u00a0we\u00a0need\u00a0to\u00a0download\u00a0the\u00a0Python\u00a0installer\u00a0from\u00a0\nwww.python.org/downloads/.\u00a0 (http://www.python.org/downloads/.\u00a0)\nx\nWhile\u00a0downloading\u00a0ensure\u00a0that\u00a0you\u00a0choose\u00a0the\u00a0appropriate\u00a0installer\u00a0\nfrom\u00a0the\u00a0following,\u00a0based\u00a0on\u00a0whether\u00a0you\u00a0wish\u00a0to\u00a0install\u00a0it\u00a0on\u00a0a\u00a032-\nbit\u00a0machine\u00a0or\u00a0a\u00a064-bit\u00a0machine:\n64-bit\u00a0machine:\u00a0Download\u00a0Windows\u00a0x86-64\u00a0executable\u00a0installer\n32-bit\u00a0machine:\u00a0Download\u00a0Windows\u00a0x86\u00a0executable\u00a0installer\nx\nOnce\u00a0 you\u00a0have\u00a0chosen\u00a0 and\u00a0downloaded\u00a0an\u00a0 installer,\u00a0execute\u00a0it\u00a0by\u00a0\ndouble-clicking\u00a0on\u00a0the\u00a0downloaded\u00a0file.\u00a0A\u00a0dialog\u00a0shown\u00a0in\u00a0Figure\u00a02.1\u00a0\nwill\u00a0appear on\u00a0the\u00a0screen.\nx\nIn\u00a0 this\u00a0 dialog\u00a0 check\u00a0 the\u00a0 check\u00a0 box\u00a0 'Add\u00a0 Python\u00a0 3.8\u00a0 to\u00a0 PATH' to\u00a0\nensure\u00a0that\u00a0the\u00a0interpreter\u00a0will\u00a0be\u00a0placed\u00a0in\u00a0your\u00a0execution\u00a0path.\nChapter 2:\u00a0 Getting Started\u00a0\n11\nFigure\u00a02.1\nx\nClick\u00a0 on\u00a0 'Install\u00a0 Now'\u00a0 and\u00a0 the\u00a0 installation\u00a0 will\u00a0 happen\u00a0 in\u00a0 a\u00a0 few\u00a0\nminutes.\u00a0Python\u00a0files\u00a0will\u00a0get\u00a0installed\u00a0in\u00a0the\u00a0directory:\u00a0\nC:\\Users\\Kanetkar\\App", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_32", "chunk_strategy": "fixed_size"}}, {"text": "pter 2:\u00a0 Getting Started\u00a0\n11\nFigure\u00a02.1\nx\nClick\u00a0 on\u00a0 'Install\u00a0 Now'\u00a0 and\u00a0 the\u00a0 installation\u00a0 will\u00a0 happen\u00a0 in\u00a0 a\u00a0 few\u00a0\nminutes.\u00a0Python\u00a0files\u00a0will\u00a0get\u00a0installed\u00a0in\u00a0the\u00a0directory:\u00a0\nC:\\Users\\Kanetkar\\AppData\\Local\\Programs\\Python\\Python38-32\nx\nIn\u00a0 this\u00a0 path\u00a0 \u2018Kanetkar\u2019\u00a0will\u00a0 be\u00a0 substituted\u00a0by\u00a0 your\u00a0 user\u00a0 name\u00a0and\u00a0\n\u2018Python\u03ef\u03f4-32\u2019\u00a0 by\u00a0 version\u00a0 number\u00a0 of\u00a0 Python\u00a0 installation\u00a0 that\u00a0 you\u00a0\nhave\u00a0downloaded\u00a0and\u00a0installed.\nx\nIf\u00a0 you\u00a0 forget\u00a0 to\u00a0 check\u00a0 the\u00a0 check\u00a0 box,\u00a0 you\u00a0 can\u00a0 add\u00a0 the\u00a0 path\u00a0\nmentioned\u00a0above\u00a0to\u00a0PATH\u00a0variable\u00a0through\u00a0Control\u00a0Panel\u00a0|\u00a0System\u00a0|\u00a0\nEnvironment\u00a0 Variables\u00a0 |\u00a0 Edit.\u00a0 The\u00a0 PATH\u00a0 variable\u00a0 already\u00a0 contains\u00a0\nmany\u00a0 semicolon\u00a0 separated\u00a0 values.\u00a0 Append\u00a0 the\u00a0 above\u00a0 path\u00a0 to\u00a0\nexisting\u00a0values.\nPython Installation under\u00a0Linux\nx\nMost\u00a0Linux\u00a0distributions\u00a0already\u00a0contain\u00a0Python\u00a0in\u00a0them.\u00a0However,\u00a0\nthe\u00a0 installed\u00a0 Python\u00a0 version\u00a0 may\u00a0 not\u00a0 be\u00a0 the\u00a0 latest\u00a0 one.\u00a0 You\u00a0 can\u00a0\ncheck\u00a0the\u00a0version\u00a0as\u00a0shown\u00a0below:\n$\u00a0python3\u00a0--version\nx\nIf\u00a0you\u00a0find\u00a0that\u00a0the\u00a0version\u00a0is\u00a0not\u00a0the\u00a0latest\u00a0o", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_33", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0in\u00a0them.\u00a0However,\u00a0\nthe\u00a0 installed\u00a0 Python\u00a0 version\u00a0 may\u00a0 not\u00a0 be\u00a0 the\u00a0 latest\u00a0 one.\u00a0 You\u00a0 can\u00a0\ncheck\u00a0the\u00a0version\u00a0as\u00a0shown\u00a0below:\n$\u00a0python3\u00a0--version\nx\nIf\u00a0you\u00a0find\u00a0that\u00a0the\u00a0version\u00a0is\u00a0not\u00a0the\u00a0latest\u00a0one,\u00a0then\u00a0you\u00a0can\u00a0install\u00a0\nit\u00a0using\u00a0the\u00a0command:\n$\u00a0sudo\u00a0apt-get\u00a0install\u00a0python3.8\n12\nLet\u00a0Us\u00a0Python\nPython\u00a0Resources\nx\nPython\u00a0source\u00a0code,\u00a0binaries and\u00a0documentation\u00a0is\u00a0available\u00a0at:\n-\nPython\u00a0official\u00a0website:\u00a0www.python.org (http://www.python.org)\n-\nDocumentation\u00a0website:\u00a0www.python.org/doc (http://www.python.org/doc\nx\nProgram\u00a0development\u00a0in\u00a0Python\u00a0can\u00a0be\u00a0done\u00a0in\u00a03\u00a0ways:\n-\nUsing\u00a0built-in\u00a0IDLE.\n-\nUsing\u00a0third-party\u00a0IDEs.\n-\nUsing\u00a0online\u00a0Python\u00a0shells.\nx\nThird-party\u00a0development\u00a0tools\u00a0and\u00a0the\u00a0links\u00a0from\u00a0where\u00a0they\u00a0can\u00a0be\u00a0\ndownloaded\u00a0are\u00a0given\u00a0below:\n-\nNetBeans\u00a0IDE\u00a0for\u00a0Python:\u00a0\nhttps://download.netbeans.org/netbeans/6.5/python/ea/ (https://download\n-\nPyCharm\u00a0IDE\u00a0for\u00a0Python:\u00a0\nhttps://www.jetbrains.com/pycharm (https://www.jetbrains.com/pycharm)\n-\nVisual\u00a0Studio\u00a0Code\u00a0IDE:\u00a0\nhttps://code.visualstudio.", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_34", "chunk_strategy": "fixed_size"}}, {"text": "ans.org/netbeans/6.5/python/ea/ (https://download\n-\nPyCharm\u00a0IDE\u00a0for\u00a0Python:\u00a0\nhttps://www.jetbrains.com/pycharm (https://www.jetbrains.com/pycharm)\n-\nVisual\u00a0Studio\u00a0Code\u00a0IDE:\u00a0\nhttps://code.visualstudio.com/download (https://code.visualstudio.com/dow\nx\nIf\u00a0 you\u00a0do\u00a0not\u00a0wish\u00a0to\u00a0install\u00a0any\u00a0Python\u00a0development\u00a0tool\u00a0on\u00a0your\u00a0\nmachine,\u00a0then\u00a0you\u00a0can\u00a0use\u00a0any\u00a0of\u00a0the\u00a0following\u00a0online\u00a0Python\u00a0shells:\n-\nhttps://www.python.org/shell/\u00a0 (https://www.python.org/shell/\u00a0)\n-\nhttps://ideone.com/\u00a0 (https://ideone.com/\u00a0)\n-\nhttps://repl.it/languages/python3\u00a0 (https://repl.it/languages/python3\u00a0)\nThird-party\u00a0Packages\nx\nPythonistas\u00a0 in\u00a0 Python\u00a0 community\u00a0 create\u00a0 packages\u00a0 (libraries) and\u00a0\nmakes\u00a0it\u00a0available\u00a0for\u00a0use\u00a0 for\u00a0other\u00a0 programmers.\u00a0They\u00a0use\u00a0PyPI\u2014\nPython\u00a0 Package\u00a0Index\u00a0(www.pypi.org)\u00a0 (http://www.pypi.org)\u00a0)\nto\u00a0distribute\u00a0 their\u00a0packages.\u00a0\nPyPI\u00a0maintains\u00a0the\u00a0list\u00a0of\u00a0such\u00a0third-party\u00a0Python\u00a0packages\u00a0available.\u00a0\nx\nThere\u00a0are\u00a0third-party\u00a0packages\u00a0available\u00a0for\u00a0literally\u00a0doing\u00a0everything\u00a0\nunder\u00a0the\u00a0sun. Some\u00a0packa", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_35", "chunk_strategy": "fixed_size"}}, {"text": "istribute\u00a0 their\u00a0packages.\u00a0\nPyPI\u00a0maintains\u00a0the\u00a0list\u00a0of\u00a0such\u00a0third-party\u00a0Python\u00a0packages\u00a0available.\u00a0\nx\nThere\u00a0are\u00a0third-party\u00a0packages\u00a0available\u00a0for\u00a0literally\u00a0doing\u00a0everything\u00a0\nunder\u00a0the\u00a0sun. Some\u00a0packages\u00a0that\u00a0 are popularly\u00a0used\u00a0for\u00a0creating\u00a0\nData\u00a0Science\u00a0applications\u00a0include:\n-\nNumPy:\u00a0Advanced\u00a0mathematical\u00a0operations\u00a0library\u00a0with\u00a0support\u00a0\nfor\u00a0large\u00a0multi-dimensional\u00a0arrays\u00a0and\u00a0matrices.\n-\nSciPy: Scientific\u00a0computing\u00a0library\u00a0for\u00a0optimization,\u00a0integration,\u00a0\ninterpolation,\u00a0signal\u00a0processing,\u00a0image\u00a0processing,\u00a0etc.\n-\nPandas: Library\u00a0 for\u00a0 manipulating\u00a0 numerical\u00a0 tables\u00a0 and\u00a0 time\u00a0\nseries.\nChapter 2:\u00a0 Getting Started\u00a0\n13\n-\nMatPlotLib: 2D\u00a0and\u00a03D\u00a0Data\u00a0visualization\u00a0library.\n-\nOpenCV: Open\u00a0source\u00a0Computer\u00a0vision\u00a0library.\nx\nYou\u00a0 too\u00a0can\u00a0 register\u00a0at\u00a0 PyPI\u00a0and\u00a0 upload\u00a0your\u00a0 packages\u00a0 there.\u00a0You\u00a0\nshould\u00a0 follow\u00a0 the\u00a0 guidelines\u00a0 given\u00a0 at\u00a0 www.pypi.org (http://www.pypi.org)\nto\u00a0create\u00a0 the\u00a0\npackage,\u00a0build\u00a0it\u00a0and\u00a0upload\u00a0it\u00a0to\u00a0the\u00a0Python\u00a0Package\u00a0Index.\nx\npip\u00a0is\u00a0a\u00a0commonly\u00a0used\u00a0tool\u00a0for\u00a0installing\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_36", "chunk_strategy": "fixed_size"}}, {"text": "hould\u00a0 follow\u00a0 the\u00a0 guidelines\u00a0 given\u00a0 at\u00a0 www.pypi.org (http://www.pypi.org)\nto\u00a0create\u00a0 the\u00a0\npackage,\u00a0build\u00a0it\u00a0and\u00a0upload\u00a0it\u00a0to\u00a0the\u00a0Python\u00a0Package\u00a0Index.\nx\npip\u00a0is\u00a0a\u00a0commonly\u00a0used\u00a0tool\u00a0for\u00a0installing\u00a0packages\u00a0from\u00a0PyPI. This\u00a0\ntool\u00a0gets\u00a0installed\u00a0when\u00a0you\u00a0install\u00a0Python.\nMore\u00a0Sophisticated\u00a0Tools\nx\nMany\u00a0 tools\u00a0have\u00a0come\u00a0into\u00a0existence\u00a0to\u00a0help\u00a0 Python\u00a0programmers\u00a0\nbuild and document\u00a0 their\u00a0 Data\u00a0 Science\u00a0 and\u00a0 Artificial\u00a0 Intelligence\u00a0\napplications.\u00a0These\u00a0include:\n-\nJupyter\u00a0Notebook\u00a0- It\u00a0is\u00a0a\u00a0very\u00a0flexible\u00a0browser-based\u00a0 tool\u00a0that\u00a0\nlets\u00a0 us\u00a0 to\u00a0 interactively\u00a0 work\u00a0 with\u00a0 Python\u00a0 (and\u00a0 many\u00a0 other\u00a0\nlanguages).\u00a0It\u00a0 lets\u00a0us\u00a0 put\u00a0 our\u00a0Python\u00a0code,\u00a0output\u00a0 of\u00a0the\u00a0 code\u00a0\nand\u00a0any\u00a0kind\u00a0of\u00a0visualization\u00a0or\u00a0plot\u00a0etc.\u00a0in\u00a0the\u00a0same\u00a0document\u00a0\ncalled\u00a0 Notebook. It\u00a0 is\u00a0 a\u00a0 great\u00a0 tool\u00a0 doing\u00a0 modular\u00a0 program\u00a0\ndevelopment.\n-\nGoogle\u00a0 Colab\u00a0 - This\u00a0 tool\u00a0 provides\u00a0 a\u00a0 free\u00a0 Jupyter\u00a0 notebook\u00a0\nenvironment\u00a0 to\u00a0 execute\u00a0 code\u00a0 on\u00a0 Google's\u00a0 cloud\u00a0 servers.\u00a0 As\u00a0 a\u00a0\nresult,\u00a0you\u00a0can\u00a0leverage\u00a0the\u00a0power\u00a0of\u00a0Google", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_37", "chunk_strategy": "fixed_size"}}, {"text": "am\u00a0\ndevelopment.\n-\nGoogle\u00a0 Colab\u00a0 - This\u00a0 tool\u00a0 provides\u00a0 a\u00a0 free\u00a0 Jupyter\u00a0 notebook\u00a0\nenvironment\u00a0 to\u00a0 execute\u00a0 code\u00a0 on\u00a0 Google's\u00a0 cloud\u00a0 servers.\u00a0 As\u00a0 a\u00a0\nresult,\u00a0you\u00a0can\u00a0leverage\u00a0the\u00a0power\u00a0of\u00a0Google's\u00a0hardware.\n-\nSpyder\u00a0 - This\u00a0 tool\u00a0 provides\u00a0 a\u00a0 Scientific\u00a0 PYthon\u00a0 Development\u00a0\nEnviRonment\u00a0with\u00a0sophisticated\u00a0testing\u00a0and\u00a0debugging\u00a0features.\nx\nBoth\u00a0 Jupyter\u00a0 and\u00a0 Spyder\u00a0 are\u00a0 part\u00a0 of\u00a0 a\u00a0 very\u00a0 popular\u00a0 software\u00a0\ndistribution\u00a0 called\u00a0 Anaconda.\u00a0 So\u00a0 once\u00a0 you\u00a0 download\u00a0 and\u00a0 install\u00a0\nAnaconda,\u00a0you\u00a0get\u00a0Jupyter\u00a0and\u00a0Spyder\u00a0ready-made.\nWorking\u00a0with\u00a0Python\nx\nOnce\u00a0Python\u00a0is\u00a0installed,\u00a0program\u00a0development\u00a0can\u00a0be\u00a0done\u00a0 using\u00a0\nthe\u00a0\nbuilt-in\u00a0\nPython\u00a0 Integrated\nDevelopment\u00a0 and\u00a0 Learning\u00a0\nEnvironment\u00a0(IDLE).\u00a0\nx\nIDLE\u00a0is\u00a0a\u00a0good\u00a0development\u00a0tool.\u00a0It\u00a0offers\u00a0handy\u00a0features\u00a0like\u00a0syntax\u00a0\nhighlighting,\u00a0context-sensitive\u00a0help\u00a0and\u00a0debugging.\nx\nSyntax\u00a0 highlighting\u00a0 feature\u00a0 display\u00a0 keywords,\u00a0 functions,\u00a0 methods\u00a0\nand\u00a0strings\u00a0in\u00a0different\u00a0colors\u00a0making\u00a0it\u00a0easy\u00a0to\u00a0identify\u00a0them.\n14\nLet\u00a0Us\u00a0Python\nx\nContex", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_38", "chunk_strategy": "fixed_size"}}, {"text": "ntext-sensitive\u00a0help\u00a0and\u00a0debugging.\nx\nSyntax\u00a0 highlighting\u00a0 feature\u00a0 display\u00a0 keywords,\u00a0 functions,\u00a0 methods\u00a0\nand\u00a0strings\u00a0in\u00a0different\u00a0colors\u00a0making\u00a0it\u00a0easy\u00a0to\u00a0identify\u00a0them.\n14\nLet\u00a0Us\u00a0Python\nx\nContext-sensitive\u00a0 help\u00a0 can\u00a0 be\u00a0 obtained\u00a0 by\u00a0 pressing\u00a0 Ctrl\u00a0 Space\u00a0\nwherever\u00a0you\u00a0need\u00a0help\u00a0as\u00a0you\u00a0type\u00a0the\u00a0program.\u00a0This\u00a0is\u00a0immensely\u00a0\nuseful\u00a0 since\u00a0 it\u00a0 is\u00a0 almost\u00a0 impossible\u00a0 to\u00a0 remember\u00a0 names\u00a0 of\u00a0 all\u00a0\nfunctions\u00a0and\u00a0methods\u00a0and\u00a0their\u00a0parameters.\nx\nDebugger\u00a0 lets\u00a0 you\u00a0 locate\u00a0 any\u00a0 logical\u00a0 errors\u00a0 that\u00a0 you\u00a0 may\u00a0 have\u00a0\ncommitted\u00a0 in\u00a0 your\u00a0 program\u00a0 by allowing\u00a0 you\u00a0 trace\u00a0 the\u00a0 flow\u00a0 of\u00a0\nexecution\u00a0of\u00a0the\u00a0program.\u00a0This\u00a0tracing\u00a0can\u00a0be\u00a0done\u00a0a\u00a0step\u00a0at\u00a0a\u00a0time\u00a0\nby\u00a0 setting\u00a0 up\u00a0 break\u00a0 points\u00a0 and\u00a0 by\u00a0 single\u00a0 stepping\u00a0 through\u00a0 the\u00a0\nprogram.\u00a0As\u00a0you\u00a0do\u00a0so\u00a0 IDLE\u00a0lets\u00a0you\u00a0watch\u00a0the\u00a0values\u00a0 of\u00a0 different\u00a0\nvariables\u00a0as\u00a0they\u00a0change\u00a0during\u00a0execution.\nPython\u00a0Programming\u00a0Modes\nx\nPython\u00a0can\u00a0be\u00a0used\u00a0in\u00a0two\u00a0modes:\n-\nInteractive\u00a0 mode\u00a0- used\u00a0for\u00a0exploring\u00a0 Python\u00a0syntax,\u00a0seek\u00a0help\u00a0\nand\u00a0debug\u00a0short\u00a0program", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_39", "chunk_strategy": "fixed_size"}}, {"text": "rent\u00a0\nvariables\u00a0as\u00a0they\u00a0change\u00a0during\u00a0execution.\nPython\u00a0Programming\u00a0Modes\nx\nPython\u00a0can\u00a0be\u00a0used\u00a0in\u00a0two\u00a0modes:\n-\nInteractive\u00a0 mode\u00a0- used\u00a0for\u00a0exploring\u00a0 Python\u00a0syntax,\u00a0seek\u00a0help\u00a0\nand\u00a0debug\u00a0short\u00a0programs.\n-\nScript\u00a0mode\u00a0- used\u00a0for\u00a0writing\u00a0full-fledged\u00a0Python\u00a0programs.\nx\nBoth\u00a0modes\u00a0are\u00a0supported\u00a0by\u00a0IDLE\u00a0(Python\u00a0Integrated\u00a0Development\u00a0\nand\u00a0Learning\u00a0Environment).\nx\nTo\u00a0use\u00a0IDLE in\u00a0Interactive\u00a0mode:\n-\nLocate\u00a0it\u00a0in\u00a0Windows\u00a0by\u00a0typing\u00a0IDLE\u00a0in\u00a0Windows\u00a0search\u00a0bar\u00a0and\u00a0\nhit\u00a0enter,\u00a0or\u00a0double\u00a0click\u00a0the\u00a0IDLE\u00a0icon.\u00a0\n-\nIt\u00a0will\u00a0open\u00a0the\u00a0Python\u00a0shell\u00a0window\u00a0showing\u00a0>>>\u00a0Python\u00a0shell\u00a0\nprompt.\u00a0\n-\nExecute\u00a0the\u00a0following\u00a0Python\u00a0code\u00a0at\u00a0this\u00a0prompt.\n>>>\u00a0print('Keep\u00a0calm\u00a0and\u00a0bubble\u00a0on')\n-\nIt\u00a0will\u00a0display\u00a0the\u00a0message\u00a0'Keep\u00a0calm\u00a0and\u00a0bubble\u00a0on'\u00a0followed\u00a0\nby\u00a0the\u00a0>>>\u00a0prompt.\nx\nTo\u00a0use\u00a0IDLE\u00a0in\u00a0Script\u00a0mode:\n-\nLaunch\u00a0IDLE.\u00a0In\u00a0the\u00a0IDLE\u00a0shell\u00a0window\u00a0from\u00a0the\u00a0menu\u00a0select\u00a0File\u00a0\n|\u00a0New\u00a0File.\u00a0A\u00a0new\u00a0window\u00a0will\u00a0open.\u00a0Type\u00a0the\u00a0following\u00a0script\u00a0in\u00a0\nit:\nprint('Those\u00a0who\u00a0can\u0396t\u00a0laugh\u00a0at\u00a0themselves\u2026')\nprint('leave\u00a0the\u00a0job\u00a0to\u00a0others.')\u00a0\nC", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_40", "chunk_strategy": "fixed_size"}}, {"text": "he\u00a0IDLE\u00a0shell\u00a0window\u00a0from\u00a0the\u00a0menu\u00a0select\u00a0File\u00a0\n|\u00a0New\u00a0File.\u00a0A\u00a0new\u00a0window\u00a0will\u00a0open.\u00a0Type\u00a0the\u00a0following\u00a0script\u00a0in\u00a0\nit:\nprint('Those\u00a0who\u00a0can\u0396t\u00a0laugh\u00a0at\u00a0themselves\u2026')\nprint('leave\u00a0the\u00a0job\u00a0to\u00a0others.')\u00a0\nChapter 2:\u00a0 Getting Started\u00a0\n15\n-\nUsing\u00a0File\u00a0|\u00a0Save\u00a0and\u00a0save\u00a0the\u00a0script\u00a0under\u00a0the\u00a0name\u00a0'Test.py'.\u00a0\n-\nExecute\u00a0 the\u00a0 script\u00a0 from\u00a0 the\u00a0 Run\u00a0 menu\u00a0 or\u00a0 using\u00a0 F5. The\u00a0 two\u00a0\nmessages\u00a0will\u00a0get\u00a0printed.\u00a0\nx\nInstead\u00a0of\u00a0IDLE\u00a0if\u00a0you\u00a0decide\u00a0to\u00a0use\u00a0NetBeans\u00a0or\u00a0Visual\u00a0Studio\u00a0Code\u00a0\nfor\u00a0program\u00a0development\u00a0then\u00a0follow\u00a0the\u00a0steps\u00a0given\u00a0below:\n-\nCreate\u00a0a\u00a0new\u00a0Python\u00a0project\u00a0\u2018Test\u2019.\n-\nType\u00a0the\u00a0script\u00a0in\u00a0Test.py.\n-\nExecute\u00a0the\u00a0script\u00a0using\u00a0F6\u00a0in\u00a0NetBeans\u00a0or\u00a0Ctrl\u00a0F5\u00a0in\u00a0Visual\u00a0Studio\u00a0\nCode.\n-\nOn\u00a0execution\u00a0it\u00a0will\u00a0print\u00a0the\u00a0two\u00a0lines\u00a0and\u00a0then\u00a0you\u00a0are ready\u00a0to\u00a0\ncreate\u00a0another\u00a0project\u00a0and\u00a0another\u00a0script\u00a0in\u00a0it.\nDetermining\u00a0Python\u00a0Version\u00a0\nx\nPython\u00a0has\u00a0evolved\u00a0over\u00a0the\u00a0years.\u00a0You\u00a0can\u00a0determine\u00a0 the\u00a0version\u00a0\ninstalled\u00a0on\u00a0your\u00a0machine\u00a0through\u00a0a\u00a0simple\u00a0Python\u00a0script:\nimport\u00a0sys\nprint(sys.version)\n________________________", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_41", "chunk_strategy": "fixed_size"}}, {"text": "ng\u00a0Python\u00a0Version\u00a0\nx\nPython\u00a0has\u00a0evolved\u00a0over\u00a0the\u00a0years.\u00a0You\u00a0can\u00a0determine\u00a0 the\u00a0version\u00a0\ninstalled\u00a0on\u00a0your\u00a0machine\u00a0through\u00a0a\u00a0simple\u00a0Python\u00a0script:\nimport\u00a0sys\nprint(sys.version)\n____________________________________________________________________\n[A] Answer\u00a0the\u00a0following questions:\n(a) What\u00a0do\u00a0the\u00a0prompts\u00a0C:\\>,\u00a0$\u00a0and\u00a0>>>\u00a0signify?\n(b) In\u00a0which\u00a0two\u00a0modes can IDLE\u00a0be\u00a0used?\n(c) What\u00a0 is\u00a0 the\u00a0 purpose\u00a0 of\u00a0 the\u00a0 two\u00a0 programming\u00a0 modes\u00a0 offered\u00a0 by\u00a0\nIDLE?\n(d) How\u00a0can\u00a0third\u00a0party\u00a0libraries\u00a0be\u00a0used\u00a0in\u00a0a\u00a0Python\u00a0program?\n[B] Match\u00a0the\u00a0following pairs:\na.\u00a0 pip\n1.\u00a0 Advanced\u00a0mathematical\u00a0operations\nb.\u00a0 Jupyter\n2.\u00a0 Scientific\u00a0computing\nc.\u00a0 Spyder\n3.\u00a0 Manipulate\u00a0numerical\u00a0tables\nd.\u00a0 PyPI\n4.\u00a0 Visualization\n16\nLet\u00a0Us\u00a0Python\ne.\u00a0 NumPy\n5.\u00a0 Computer\u00a0vision\nf.\u00a0 SciPy\n6.\u00a0 Package\u00a0installation\u00a0tool\ng.\u00a0 Pandas\n7.\u00a0 Build\u00a0and\u00a0document\u00a0applications\nh.\u00a0 MatPlotLib\n8.\u00a0 Scientific\u00a0library\ni.\u00a0 OpenCV\n9.\u00a0 Python\u00a0package\u00a0index\n[C] State\u00a0whether\u00a0the\u00a0following\u00a0statements\u00a0are\u00a0True\u00a0or\u00a0False:\n(a) Python\u00a0 is\u00a0 a\u00a0 specification", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_42", "chunk_strategy": "fixed_size"}}, {"text": "Build\u00a0and\u00a0document\u00a0applications\nh.\u00a0 MatPlotLib\n8.\u00a0 Scientific\u00a0library\ni.\u00a0 OpenCV\n9.\u00a0 Python\u00a0package\u00a0index\n[C] State\u00a0whether\u00a0the\u00a0following\u00a0statements\u00a0are\u00a0True\u00a0or\u00a0False:\n(a) Python\u00a0 is\u00a0 a\u00a0 specification\nthat\u00a0 can\u00a0 be\u00a0 implemented\u00a0 through\u00a0\nlanguages\u00a0like\u00a0Python,\u00a0C#,\u00a0Java,\u00a0etc.\n(b) CPython\u00a0is\u00a0implementation\u00a0of\u00a0Python\u00a0specification,\u00a0written\u00a0in\u00a0C.\n(c) Python\u00a0 program\u00a0 is\u00a0 first\u00a0 compiled\u00a0 into\u00a0 byte\u00a0 code,\u00a0 which\u00a0 is\u00a0 then\u00a0\ninterpreted.\n(d) Most\u00a0Linux\u00a0distributions\u00a0already\u00a0contain\u00a0Python.\n(e) Windows\u00a0 system\u00a0 doesn't\u00a0 contain\u00a0 Python\u00a0 and\u00a0 it\u00a0 needs\u00a0 to\u00a0 be\u00a0\nseparately\u00a0installed.\n(f) Python\u00a0 programs\u00a0 can\u00a0 be\u00a0 built\u00a0 using\u00a0 IDLE,\u00a0 NetBeans,\u00a0PyCharm\u00a0 and\u00a0\nVisual\u00a0Studio\u00a0Code.\n(g) Third-party\u00a0Python\u00a0packages\u00a0are\u00a0distributed\u00a0using\u00a0PyPI.\nLet\u00a0Us\nPython\n17\nPython\u00a0Basics\nx\nIdentifiers\u00a0and\u00a0Keywords\nx\nBuilt-in\u00a0Modules\nx\nPython\u00a0Types\nx\nContainer\u00a0Types\nx\nBasic\u00a0Types\nx\nPython\u00a0Type\u00a0Jargon\nx\nInteger\u00a0and\u00a0Float\u00a0Ranges\nx\nComments\u00a0and\u00a0Indentation\nx\nVariable\u00a0Type\u00a0and\u00a0Assignment\nx\nMulti-lining\nx\nArithmetic\u00a0Oper", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_43", "chunk_strategy": "fixed_size"}}, {"text": "ilt-in\u00a0Modules\nx\nPython\u00a0Types\nx\nContainer\u00a0Types\nx\nBasic\u00a0Types\nx\nPython\u00a0Type\u00a0Jargon\nx\nInteger\u00a0and\u00a0Float\u00a0Ranges\nx\nComments\u00a0and\u00a0Indentation\nx\nVariable\u00a0Type\u00a0and\u00a0Assignment\nx\nMulti-lining\nx\nArithmetic\u00a0Operators\nx\nClasses\u00a0and\u00a0Objects\nx\nOperation\u00a0Nuances\nx\nMultiple\u00a0Objects\nx\nPrecedence and\u00a0Associativity\nx\nPrograms\nx\nConversions\nx\nExercises\nx\nBuilt-in\u00a0Functions\n3\n\u201cWell\u00a0begun\u00a0is\u00a0half\u00a0done...\u201d\n18\nLet\u00a0Us\u00a0Python\nIdentifiers\u00a0and\u00a0Keywords\nx\nPython\u00a0is\u00a0a\u00a0case\u00a0sensitive\u00a0language.\nx\nPython\u00a0 identifier\u00a0 is\u00a0 a\u00a0 name\u00a0 used\u00a0 to\u00a0 identify\u00a0 a\u00a0 variable,\u00a0 function,\nclass,\u00a0module,\u00a0or\u00a0other\u00a0object.\nx\nRules\u00a0for creating\u00a0identifiers:\n-\nStarts with\u00a0alphabet\u00a0or\u00a0an\u00a0underscore.\n-\nFollowed\u00a0by\u00a0zero\u00a0or\u00a0more\u00a0letters,\u00a0_\u00a0,\u00a0 and\u00a0digits.\n-\nkeyword\u00a0cannot\u00a0be\u00a0used\u00a0as\u00a0identifier.\nx\nAll\u00a0keywords are in\u00a0lowercase.\u00a0\nx\nPython\u00a0has\u00a033\u00a0keywords\u00a0shown\u00a0in\u00a0Figure\u00a03.1.\nFalse\ncontinue\nfrom\nnot\nNone\ndef\nglobal\nor\nTrue\ndel\nif\npass\nand\nelif\nimport\nraise\nas\nelse\nin\nreturn\nassert\nexcept\nis\ntry\nbreak\nfinally\nlambda\nwhile\nclass\nfor\nnonlocal\nwith\ny", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_44", "chunk_strategy": "fixed_size"}}, {"text": "words\u00a0shown\u00a0in\u00a0Figure\u00a03.1.\nFalse\ncontinue\nfrom\nnot\nNone\ndef\nglobal\nor\nTrue\ndel\nif\npass\nand\nelif\nimport\nraise\nas\nelse\nin\nreturn\nassert\nexcept\nis\ntry\nbreak\nfinally\nlambda\nwhile\nclass\nfor\nnonlocal\nwith\nyield\nFigure 3.1\nx\nYou\u00a0can\u00a0print a\u00a0list\u00a0of\u00a0Python\u00a0keywords\u00a0through\u00a0the\u00a0statements:\nimport\u00a0keyword\n#\u00a0makes\u00a0the\u00a0module\u00a0'keyword' available\nprint(keyword.kwlist)\n#\u00a0syntax\u00a0modulename.object/function\nPython\u00a0Types\nx\nPython\u00a0supports\u00a03\u00a0categories\u00a0of\u00a0data\u00a0types:\nBasic\u00a0types - int,\u00a0float,\u00a0complex, bool,\u00a0string,\u00a0bytes\nContainer\u00a0types\u00a0- list,\u00a0tuple,\u00a0set,\u00a0dict\nUser-defined types - class\u00a0\nChapter 3:\u00a0 Python Basics\u00a0\n19\nx\nOut\u00a0 of\u00a0 these,\u00a0 basic\u00a0types\u00a0 will\u00a0be\u00a0 covered\u00a0 in\u00a0this\u00a0chapter\u00a0 in\u00a0 detail.\u00a0\nContainer\u00a0 types\u00a0 will\u00a0 be\u00a0 covered\u00a0 briefly.\u00a0 A\u00a0 separate\u00a0 chapter\u00a0 is\u00a0\ndedicated\u00a0to\u00a0each\u00a0container\u00a0type,\u00a0where\u00a0they\u00a0are\u00a0covered\u00a0in\u00a0great\u00a0\ndetail.\u00a0 User-defined\u00a0 types\u00a0 will\u00a0 not\u00a0 be\u00a0 covered\u00a0 in\u00a0 this\u00a0 chapter.\u00a0\nChapter\u00a017\u00a0discusses how\u00a0to\u00a0create\u00a0and\u00a0use\u00a0them.\u00a0\nBasic\u00a0Types\nx\nExamples\u00a0of\u00a0different\u00a0basic\u00a0types a", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_45", "chunk_strategy": "fixed_size"}}, {"text": "they\u00a0are\u00a0covered\u00a0in\u00a0great\u00a0\ndetail.\u00a0 User-defined\u00a0 types\u00a0 will\u00a0 not\u00a0 be\u00a0 covered\u00a0 in\u00a0 this\u00a0 chapter.\u00a0\nChapter\u00a017\u00a0discusses how\u00a0to\u00a0create\u00a0and\u00a0use\u00a0them.\u00a0\nBasic\u00a0Types\nx\nExamples\u00a0of\u00a0different\u00a0basic\u00a0types are\u00a0given\u00a0below:\n#\u00a0int\u00a0can\u00a0be\u00a0expressed\u00a0in\u00a0binary,\u00a0decimal,\u00a0octal,\u00a0hexadecimal\n#\u00a0binary\u00a0starts\u00a0with\u00a00b/0B,\u00a0octal\u00a0with\u00a00o/0O,\u00a0hex\u00a0with\u00a00x/0X\n0b10111,\u00a0156,\u00a00o432,\u00a00x4A3\u00a0\n#\u00a0float\u00a0can\u00a0be\u00a0expressed\u00a0in\u00a0fractional\u00a0or\u00a0exponential\u00a0form\n- 314.1528,\u00a03.141528e2,\u00a03.141528E2\n#\u00a0complex\u00a0contains\u00a0real\u00a0and\u00a0imaginary\u00a0part\n3\u00a0+\u00a02j,\u00a01\u00a0+\u00a04J\u00a0\n#\u00a0bool\u00a0can\u00a0take\u00a0any\u00a0of\u00a0the\u00a0two\u00a0Boolean\u00a0values both\u00a0starting\u00a0in\u00a0caps\nTrue,\u00a0False\n#\u00a0string\u00a0is\u00a0an\u00a0immutable\u00a0collection\u00a0of\u00a0Unicode\u00a0characters enclosed\n#\u00a0within\u00a0'\u00a0',\u00a0\"\u00a0\"\u00a0or\u00a0\"\"\"\u00a0\"\"\".\n'Razzmatazz',\u00a0\"Razzmatazz\",\u00a0\"\"\"Razzmatazz\"\"\"\n#\u00a0bytes\u00a0represent\u00a0binary\u00a0data\nb'\\xa1\\xe4\\x56'\u00a0 #\u00a0represents\u00a03\u00a0bytes\u00a0with\u00a0hex\u00a0values\u00a0a1a456\nx\nType\u00a0of\u00a0particular\u00a0data\u00a0can\u00a0be\u00a0checked\u00a0using\u00a0a\u00a0function\u00a0called\u00a0type(\u00a0)\nas\u00a0shown\u00a0below:\nprint(type(35))\n#\u00a0prints\u00a0<class\u00a0'int'>\nprint(type(3.14))\n#\u00a0prints\u00a0<class\u00a0'floa", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_46", "chunk_strategy": "fixed_size"}}, {"text": "s\u00a03\u00a0bytes\u00a0with\u00a0hex\u00a0values\u00a0a1a456\nx\nType\u00a0of\u00a0particular\u00a0data\u00a0can\u00a0be\u00a0checked\u00a0using\u00a0a\u00a0function\u00a0called\u00a0type(\u00a0)\nas\u00a0shown\u00a0below:\nprint(type(35))\n#\u00a0prints\u00a0<class\u00a0'int'>\nprint(type(3.14))\n#\u00a0prints\u00a0<class\u00a0'float'>\nInteger\u00a0and\u00a0Float\u00a0Ranges\nx\nint can\u00a0be\u00a0of\u00a0any\u00a0arbitrary\u00a0size\na\u00a0=\u00a0123\nb\u00a0=\u00a01234567890\nc\u00a0=\u00a0123456789012345678901234567890\nPython has\u00a0arbitrary\u00a0precision\u00a0integers.\u00a0Hence\u00a0you\u00a0can\u00a0create\u00a0as\u00a0big\u00a0\nintegers\u00a0 as\u00a0 you\u00a0 want.\u00a0 Moreover, arithmetic\u00a0 operations\u00a0 can be\u00a0\nperformed\u00a0on\u00a0integers\u00a0without\u00a0worrying\u00a0about overflow/underflow.\n20\nLet\u00a0Us\u00a0Python\nx\nFloats\u00a0are\u00a0represented\u00a0internally\u00a0in\u00a0binary\u00a0as\u00a064-bit\u00a0double-precision\u00a0\nvalues,\u00a0 as\u00a0 per\u00a0 the IEEE\u00a0 754 standard.\u00a0 As\u00a0 per\u00a0 this\u00a0 standard,\u00a0 the\u00a0\nmaximum\u00a0 value\u00a0 a\u00a0 float\u00a0 can\u00a0 have\u00a0 is\u00a0 approximately\u00a0 1.8\u00a0 x\u00a0 10308.\u00a0 A\u00a0\nnumber\u00a0greater\u00a0than\u00a0this\u00a0is\u00a0represented\u00a0as\u00a0inf (short\u00a0for\u00a0infinity).\nx\nMany\u00a0 floats\u00a0cannot\u00a0be\u00a0represented\u00a0 'exactly' in\u00a0binary\u00a0form.\u00a0So\u00a0the\u00a0\ninternal\u00a0 representation\u00a0 is\u00a0 often\u00a0 an\u00a0 approximation\u00a0 of\u00a0 the\u00a0 actual\u00a0\nvalue.\u00a0\nx\nThe\u00a0differe", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_47", "chunk_strategy": "fixed_size"}}, {"text": "nted\u00a0as\u00a0inf (short\u00a0for\u00a0infinity).\nx\nMany\u00a0 floats\u00a0cannot\u00a0be\u00a0represented\u00a0 'exactly' in\u00a0binary\u00a0form.\u00a0So\u00a0the\u00a0\ninternal\u00a0 representation\u00a0 is\u00a0 often\u00a0 an\u00a0 approximation\u00a0 of\u00a0 the\u00a0 actual\u00a0\nvalue.\u00a0\nx\nThe\u00a0difference\u00a0between\u00a0the\u00a0actual\u00a0value\u00a0and\u00a0the\u00a0represented\u00a0value\u00a0\nis\u00a0very\u00a0small\u00a0and\u00a0should\u00a0not\u00a0usually\u00a0cause\u00a0significant\u00a0problems.\nVariable\u00a0Type\u00a0and\u00a0Assignment\nx\nThere\u00a0is\u00a0no\u00a0need\u00a0to\u00a0define\u00a0type\u00a0of\u00a0a\u00a0variable.\u00a0During\u00a0execution\u00a0the\u00a0\ntype\u00a0of\u00a0the\u00a0variable\u00a0is\u00a0inferred\u00a0from\u00a0the\u00a0context\u00a0in\u00a0which\u00a0it\u00a0is\u00a0being\u00a0\nused.\u00a0Hence\u00a0Python\u00a0is\u00a0called\u00a0dynamically-typed\u00a0language.\u00a0\na\u00a0=\u00a025\n#\u00a0type\u00a0of\u00a0a\u00a0is\u00a0inferred\u00a0as\u00a0int\na\u00a0=\u00a031.4\n#\u00a0type\u00a0of\u00a0a\u00a0is inferred\u00a0as\u00a0float\na\u00a0=\u00a0'Hi'\n#\u00a0type\u00a0of\u00a0a\u00a0is\u00a0inferred\u00a0as\u00a0str\nx\nType\u00a0of\u00a0a\u00a0variable\u00a0can\u00a0be\u00a0checked\u00a0using\u00a0the\u00a0built-in\u00a0function\u00a0type(\u00a0).\na\u00a0=\u00a0'Jamboree'\nprint(type(a))\n#\u00a0type\u00a0will\u00a0be\u00a0reported\u00a0as\u00a0str\nx\nSimple\u00a0variable\u00a0assignment:\na\u00a0=\u00a010\u00a0\npi\u00a0=\u00a03.14\u00a0\nname\u00a0=\u00a0'Sanjay'\nx\nMultiple\u00a0variable\u00a0assignment:\na\u00a0=\u00a010\u00a0;\u00a0pi\u00a0=\u00a031.4\u00a0;\u00a0name\u00a0=\u00a0'Sanjay' #\u00a0use\u00a0;\u00a0as\u00a0statement\u00a0separator\na,\u00a0pi,\u00a0name\u00a0=\u00a010,\u00a03.14,\u00a0'Sanja", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_48", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0str\nx\nSimple\u00a0variable\u00a0assignment:\na\u00a0=\u00a010\u00a0\npi\u00a0=\u00a03.14\u00a0\nname\u00a0=\u00a0'Sanjay'\nx\nMultiple\u00a0variable\u00a0assignment:\na\u00a0=\u00a010\u00a0;\u00a0pi\u00a0=\u00a031.4\u00a0;\u00a0name\u00a0=\u00a0'Sanjay' #\u00a0use\u00a0;\u00a0as\u00a0statement\u00a0separator\na,\u00a0pi,\u00a0name\u00a0=\u00a010,\u00a03.14,\u00a0'Sanjay'\na\u00a0=\u00a0b\u00a0=\u00a0c\u00a0=\u00a0d\u00a0=\u00a05\u00a0\nArithmetic\u00a0Operators\nx\nArithmetic\u00a0operators:\u00a0 +\u00a0 - *\u00a0 /\u00a0 %\u00a0 //\u00a0 **\na\u00a0=\u00a04\u00a0/ 2\n#\u00a0performs\u00a0true\u00a0division\u00a0and\u00a0yields\u00a0a\u00a0float\u00a02.0\na\u00a0=\u00a07\u00a0%\u00a02\u00a0\n#\u00a0%\u00a0yields\u00a0remainder\u00a01\nChapter 3:\u00a0 Python Basics\u00a0\n21\nb\u00a0=\u00a03\u00a0**\u00a04\u00a0\n#\u00a0**\u00a0yields\u00a03\u00a0raised\u00a0to\u00a04\u00a0(exponentiation)\nc\u00a0=\u00a04\u00a0//\u00a03\u00a0\n#\u00a0//\u00a0yields\u00a0quotient\u00a01\u00a0after\u00a0discarding\u00a0fractional\u00a0part\nx\nIn-place\u00a0 assignment\u00a0operators\u00a0offer\u00a0a\u00a0good\u00a0shortcut for\u00a0arithmetic\u00a0\noperations.\u00a0These\u00a0include\u00a0+=\u00a0 -=\u00a0 *=\u00a0 /=\u00a0 %=\u00a0 //=\u00a0 **=.\na\u00a0**=\u00a03\u00a0\n#\u00a0same\u00a0as\u00a0a\u00a0=\u00a0a\u00a0**\u00a03\nb\u00a0%=\u00a010\u00a0\n#\u00a0same\u00a0as\u00a0b\u00a0=\u00a0b\u00a0%\u00a010\u00a0\nOperation\u00a0Nuances\nx\nOn\u00a0performing\u00a0floor\u00a0division\u00a0a\u00a0//\u00a0b,\u00a0result\u00a0is\u00a0the\u00a0largest\u00a0integer\u00a0which\u00a0\nis\u00a0 less\u00a0 than\u00a0 or\u00a0 equal\u00a0 to\u00a0 the\u00a0 quotient.\u00a0 // is\u00a0 called\u00a0 floor\u00a0 division\u00a0\noperator.\nprint(10\u00a0//\u00a03)\n#\u00a0yields\u00a03\nprint(-10\u00a0//\u00a03)\n#\u00a0yields\u00a0-4\nprint(10\u00a0//\u00a0-3)\n#\u00a0yields\u00a0-4\nprint(-10\u00a0//\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_49", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0integer\u00a0which\u00a0\nis\u00a0 less\u00a0 than\u00a0 or\u00a0 equal\u00a0 to\u00a0 the\u00a0 quotient.\u00a0 // is\u00a0 called\u00a0 floor\u00a0 division\u00a0\noperator.\nprint(10\u00a0//\u00a03)\n#\u00a0yields\u00a03\nprint(-10\u00a0//\u00a03)\n#\u00a0yields\u00a0-4\nprint(10\u00a0//\u00a0-3)\n#\u00a0yields\u00a0-4\nprint(-10\u00a0//\u00a0-3)\n#\u00a0yields\u00a03\nprint(3\u00a0//\u00a010)\n#\u00a0yields\u00a00\nprint(3\u00a0//\u00a0-10)\n#\u00a0yields\u00a0-1\nprint(-3\u00a0//\u00a010)\n#\u00a0yields\u00a0-1\nprint(-3\u00a0//\u00a0-10)\n#\u00a0yields\u00a00\nIn\u00a0-10\u00a0 //\u00a03,\u00a0multiple\u00a0of\u00a03\u00a0which\u00a0will\u00a0yield\u00a0-10\u00a0is\u00a0-3.333,\u00a0whose\u00a0floor\u00a0\nvalue\u00a0is\u00a0-4.\nIn\u00a010\u00a0//\u00a0-3,\u00a0multiple\u00a0of\u00a0-3\u00a0which\u00a0will\u00a0yield\u00a010\u00a0is\u00a0-3.333,\u00a0whose\u00a0floor\u00a0\nvalue\u00a0is\u00a0-4.\nIn\u00a0-10\u00a0//\u00a0-3,\u00a0multiple\u00a0of\u00a0-3\u00a0which\u00a0will\u00a0yield\u00a0-10\u00a0is\u00a03.333,\u00a0whose\u00a0floor\u00a0\nvalue\u00a0is\u00a03.\nx\nprint( ) is\u00a0a\u00a0function\u00a0which\u00a0is\u00a0used\u00a0for\u00a0sending\u00a0output\u00a0to\u00a0screen.\u00a0Iy\u00a0\ncan\u00a0be\u00a0used\u00a0in\u00a0many\u00a0forms.\u00a0They\u00a0are\u00a0discussed\u00a0in\u00a0Chapter\u00a07.\nx\nOperation\u00a0 a\u00a0%\u00a0b is\u00a0evaluated\u00a0as\u00a0a\u00a0- (b\u00a0*\u00a0(a\u00a0//\u00a0b)).\u00a0This\u00a0can\u00a0be\u00a0best\u00a0\nunderstood\u00a0using\u00a0the\u00a0following\u00a0examples:\nprint(10\u00a0%\u00a03)\n#\u00a0yields\u00a01\nprint(-10\u00a0%\u00a03)\n#\u00a0yields\u00a02\nprint(10\u00a0%\u00a0-3)\n#\u00a0yields\u00a0-2\nprint(-10\u00a0%\u00a0-3)\n#\u00a0yields\u00a0-1\nprint(3\u00a0%\u00a010)\n#\u00a0yields\u00a03\nprint(3\u00a0%\u00a0-10)\n#\u00a0yields\u00a0-7\n22\nLet\u00a0Us\u00a0Pyth", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_50", "chunk_strategy": "fixed_size"}}, {"text": "ing\u00a0the\u00a0following\u00a0examples:\nprint(10\u00a0%\u00a03)\n#\u00a0yields\u00a01\nprint(-10\u00a0%\u00a03)\n#\u00a0yields\u00a02\nprint(10\u00a0%\u00a0-3)\n#\u00a0yields\u00a0-2\nprint(-10\u00a0%\u00a0-3)\n#\u00a0yields\u00a0-1\nprint(3\u00a0%\u00a010)\n#\u00a0yields\u00a03\nprint(3\u00a0%\u00a0-10)\n#\u00a0yields\u00a0-7\n22\nLet\u00a0Us\u00a0Python\nprint(-3\u00a0%\u00a010)\n#\u00a0yields\u00a07\nprint(-3\u00a0%\u00a0-10)\n#\u00a0yields\u00a0-3\nSince\u00a0a\u00a0%\u00a0b is\u00a0evaluated\u00a0as\u00a0 a - (b *\u00a0(a //\u00a0b)),\n-10\u00a0%\u00a03\u00a0is\u00a0evaluated\u00a0as\u00a0-10 - (3 *\u00a0(-10 //\u00a03)),\u00a0which\u00a0yields\u00a02\n10\u00a0%\u00a0-3\u00a0is\u00a0evaluated\u00a0as\u00a010 - (-3 *\u00a0(10 //\u00a0-3)),\u00a0which\u00a0yields\u00a0-2\n-10\u00a0%\u00a0-3\u00a0is\u00a0evaluated\u00a0as\u00a0-10 - (-3 *\u00a0(-10 //\u00a0-3)),\u00a0which\u00a0yields\u00a0-1\nx\nMathematical\u00a0rule\u00a0a\u00a0/\u00a0b x\u00a0c is\u00a0same\u00a0as\u00a0a\u00a0x\u00a0c\u00a0/\u00a0b holds,\u00a0but\u00a0not\u00a0always.\n#\u00a0following\u00a0expressions\u00a0give\u00a0same\u00a0results\na\u00a0=\u00a0300\u00a0/\u00a0100\u00a0*\u00a0250\na\u00a0=\u00a0300\u00a0*\u00a0250\u00a0/\u00a0100\n#\u00a0However,\u00a0these\u00a0don't\nb\u00a0=\u00a01e210\u00a0/\u00a01e200\u00a0*\u00a01e250\nb\u00a0=\u00a01e210\u00a0*\u00a01e250\u00a0/\u00a01e200\u00a0\n#\u00a0gives\u00a0INF\nx\nSince\u00a0True\u00a0is\u00a01\u00a0and\u00a0False\u00a0is\u00a00,\u00a0they\u00a0can\u00a0be\u00a0added.\na\u00a0=\u00a0True\u00a0+\u00a0True\n#\u00a0stores\u00a02\nb\u00a0=\u00a0True\u00a0+\u00a0False\u00a0\n#\u00a0stores\u00a01\nPrecedence and\u00a0Associativity\nx\nWhen\u00a0multiple\u00a0operators\u00a0are\u00a0used\u00a0in\u00a0an\u00a0arithmetic\u00a0 expression,\u00a0it\u00a0is\u00a0\nevaluated\u00a0 on\u00a0 the\u00a0 basis\u00a0 of\u00a0 precedence\u00a0 (pr", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_51", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0True\u00a0+\u00a0True\n#\u00a0stores\u00a02\nb\u00a0=\u00a0True\u00a0+\u00a0False\u00a0\n#\u00a0stores\u00a01\nPrecedence and\u00a0Associativity\nx\nWhen\u00a0multiple\u00a0operators\u00a0are\u00a0used\u00a0in\u00a0an\u00a0arithmetic\u00a0 expression,\u00a0it\u00a0is\u00a0\nevaluated\u00a0 on\u00a0 the\u00a0 basis\u00a0 of\u00a0 precedence\u00a0 (priority)\u00a0 of\u00a0 the\u00a0 operators\u00a0\nused.\nx\nOperators\u00a0in\u00a0decreasing\u00a0order\u00a0of\u00a0their\u00a0priority\u00a0(PEMDAS):\n(\u00a0)\n#\u00a0Parentheses\n**\n#\u00a0Exponentiation\n*,\u00a0/,\u00a0//,\u00a0%\n#\u00a0Multiplication,\u00a0Division\n+,\u00a0-\n#\u00a0Addition,\u00a0Subtraction\nx\nIf\u00a0there\u00a0is\u00a0a\u00a0tie\u00a0between\u00a0operators\u00a0of\u00a0same\u00a0precedence,\u00a0it\u00a0is\u00a0settled\u00a0\nusing\u00a0associativity\u00a0of\u00a0operators.\u00a0\nx\nEach\u00a0 operator\u00a0 has\u00a0either\u00a0 left\u00a0 to\u00a0 right\u00a0 associativity\u00a0 or\u00a0 right\u00a0 to\u00a0 left\u00a0\nassociativity.\nx\nIn\u00a0 expression\u00a0 c\u00a0 =\u00a0 a\u00a0 *\u00a0 b\u00a0 /\u00a0 c,\u00a0 *\u00a0 is\u00a0 done\u00a0 before\u00a0 /\u00a0 since\u00a0 arithmetic\u00a0\noperators\u00a0have\u00a0left\u00a0to\u00a0right\u00a0associativity.\nChapter 3:\u00a0 Python Basics\u00a0\n23\nx\nA\u00a0complete\u00a0list\u00a0of\u00a0Python\u00a0operators,\u00a0their\u00a0priority\u00a0and\u00a0associativity\u00a0is\u00a0\ngiven\u00a0in\u00a0Appendix\u00a0A.\nConversions\nx\nMixed mode\u00a0operations:\n-\nOperation between\u00a0int and\u00a0float will\u00a0yield\u00a0float.\n-\nOperation\u00a0between\u00a0int and\u00a0complex will\u00a0yield\u00a0com", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_52", "chunk_strategy": "fixed_size"}}, {"text": "s,\u00a0their\u00a0priority\u00a0and\u00a0associativity\u00a0is\u00a0\ngiven\u00a0in\u00a0Appendix\u00a0A.\nConversions\nx\nMixed mode\u00a0operations:\n-\nOperation between\u00a0int and\u00a0float will\u00a0yield\u00a0float.\n-\nOperation\u00a0between\u00a0int and\u00a0complex will\u00a0yield\u00a0complex.\n-\nOperation\u00a0between\u00a0float and\u00a0complex will\u00a0yield\u00a0complex.\nx\nWe\u00a0can\u00a0convert\u00a0one\u00a0numeric\u00a0type\u00a0to\u00a0another\u00a0using\u00a0built-in\u00a0functions\u00a0\nint( ),\u00a0float( ),\u00a0complex( ) and\u00a0bool( ).\nx\nType\u00a0conversions:\nint(float/numeric\u00a0string)\u00a0\n#\u00a0from\u00a0float/numeric\u00a0string\u00a0to\u00a0int\nint(numeric\u00a0string,\u00a0base)\u00a0\n#\u00a0from\u00a0numeric\u00a0string\u00a0to\u00a0int\u00a0in\u00a0base\nfloat(int/numeric\u00a0string)\u00a0\n#\u00a0from\u00a0int/numeric\u00a0string\u00a0to\u00a0float\nfloat(int)\u00a0\n#\u00a0from\u00a0int\u00a0to\u00a0float\ncomplex(int/float)\u00a0 #\u00a0convert\u00a0to\u00a0complex\u00a0with\u00a0imaginary\u00a0part\u00a00\ncomplex(int/float,\u00a0int/float)\u00a0 #\u00a0convert\u00a0to\u00a0complex\nbool(int/float)\u00a0\n#\u00a0from\u00a0int/float\u00a0to\u00a0True/False\u00a0(1/0)\nstr(int/float/bool)\u00a0\n#\u00a0converts\u00a0to\u00a0string\nchr(int)\u00a0\n#\u00a0yields\u00a0character\u00a0corresponding\u00a0to\u00a0int\nx\nint(\u00a0 ) removes\u00a0 the\u00a0 decimal\u00a0 portion from\u00a0 the\u00a0 quotient,\u00a0 so\u00a0 always\u00a0\nrounds\u00a0towards\u00a0zero.\nint(3.33)\n#\u00a0yields\u00a03\nint(-", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_53", "chunk_strategy": "fixed_size"}}, {"text": "bool)\u00a0\n#\u00a0converts\u00a0to\u00a0string\nchr(int)\u00a0\n#\u00a0yields\u00a0character\u00a0corresponding\u00a0to\u00a0int\nx\nint(\u00a0 ) removes\u00a0 the\u00a0 decimal\u00a0 portion from\u00a0 the\u00a0 quotient,\u00a0 so\u00a0 always\u00a0\nrounds\u00a0towards\u00a0zero.\nint(3.33)\n#\u00a0yields\u00a03\nint(-3.33)\n#\u00a0yields\u00a0-3\nBuilt-in\u00a0Functions\nx\nPython\u00a0has\u00a0many\u00a0built-in\u00a0functions\u00a0that\u00a0are\u00a0always\u00a0available\u00a0 in\u00a0any\u00a0\npart\u00a0of\u00a0the\u00a0program.\u00a0The\u00a0print(\u00a0) function\u00a0that\u00a0we\u00a0have\u00a0been\u00a0using\u00a0to\u00a0\nsend\u00a0output\u00a0to\u00a0screen\u00a0is\u00a0a\u00a0built-in\u00a0function.\nx\nHelp\u00a0about\u00a0any\u00a0built-in\u00a0function\u00a0is\u00a0available\u00a0using\u00a0help(function).\nx\nBuilt-in\u00a0functions\u00a0 that\u00a0are\u00a0commonly\u00a0used\u00a0with\u00a0numbers\u00a0are\u00a0given\u00a0\nbelow:\nabs(x)\u00a0\n#\u00a0returns\u00a0absolute\u00a0value\u00a0of\u00a0x\npow(x,\u00a0y)\u00a0\n#\u00a0returns\u00a0value\u00a0of\u00a0x\u00a0raised\u00a0to\u00a0y\nmin(x1,\u00a0x2,...)\u00a0\n#\u00a0returns\u00a0smallest\u00a0argument\n24\nLet\u00a0Us\u00a0Python\nmax(x1,\u00a0x2,...)\u00a0\n#\u00a0returns\u00a0largest\u00a0argument\ndivmod(x,\u00a0y)\u00a0\n#\u00a0returns\u00a0a\u00a0pair(x //\u00a0y,\u00a0x %\u00a0y)\nround(x\u00a0[,n])\u00a0\n#\u00a0returns\u00a0x\u00a0rounded\u00a0to\u00a0n\u00a0digits\u00a0after\u00a0.\nbin(x)\u00a0\n#\u00a0returns\u00a0binary\u00a0equivalent of\u00a0x\noct(x)\n#\u00a0returns\u00a0octal\u00a0equivalent of\u00a0x\nhex(x)\u00a0\n#\u00a0returns\u00a0hexadecimal\u00a0equivalent of\u00a0x\nx\nFollowing\u00a0P", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_54", "chunk_strategy": "fixed_size"}}, {"text": " %\u00a0y)\nround(x\u00a0[,n])\u00a0\n#\u00a0returns\u00a0x\u00a0rounded\u00a0to\u00a0n\u00a0digits\u00a0after\u00a0.\nbin(x)\u00a0\n#\u00a0returns\u00a0binary\u00a0equivalent of\u00a0x\noct(x)\n#\u00a0returns\u00a0octal\u00a0equivalent of\u00a0x\nhex(x)\u00a0\n#\u00a0returns\u00a0hexadecimal\u00a0equivalent of\u00a0x\nx\nFollowing\u00a0Python\u00a0program\u00a0shows\u00a0how\u00a0to\u00a0use\u00a0some\u00a0of\u00a0these\u00a0built-in\u00a0\nfunctions:\na\u00a0=\u00a0abs(-3)\n#\u00a0assigns\u00a03 to\u00a0a\nprint(min(10,\u00a020,\u00a030,\u00a040))\n#\u00a0prints\u00a010\nprint(hex(26))\n#\u00a0prints\u00a01a\nBuilt-in\u00a0Modules\nx\nApart\u00a0 from\u00a0 built-in\u00a0 functions,\u00a0 Python\u00a0 provides\u00a0 many\u00a0 built-in\u00a0\nmodules.\u00a0Each\u00a0module\u00a0contains\u00a0many\u00a0functions.\u00a0\nx\nFor\u00a0 performing\u00a0sophisticated\u00a0 mathematical\u00a0 operations\u00a0we\u00a0 can\u00a0 use\u00a0\nthe\u00a0 functions\u00a0 present\u00a0 in\u00a0 built-in\u00a0 modules\u00a0 math,\u00a0 cmath,\u00a0 random,\u00a0\ndecimal.\nmath\u00a0- many\u00a0useful\u00a0mathematics\u00a0functions.\ncmath\u00a0- functions\u00a0for\u00a0performing\u00a0operations\u00a0on\u00a0complex\u00a0numbers.\nrandom\u00a0- functions\u00a0related\u00a0to\u00a0random\u00a0number\u00a0generation.\ndecimal\u00a0- functions\u00a0for\u00a0performing\u00a0precise\u00a0arithmetic\u00a0operations.\nx\nMathematical\u00a0functions\u00a0in\u00a0math module:\npi,\u00a0e\u00a0\n#\u00a0values\u00a0of\u00a0constants\u00a0pi\u00a0and\u00a0e\nsqrt(x)\n#\u00a0square\u00a0root\u00a0of\u00a0x\nfactorial(x)\u00a0\n#\u00a0f", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_55", "chunk_strategy": "fixed_size"}}, {"text": "eneration.\ndecimal\u00a0- functions\u00a0for\u00a0performing\u00a0precise\u00a0arithmetic\u00a0operations.\nx\nMathematical\u00a0functions\u00a0in\u00a0math module:\npi,\u00a0e\u00a0\n#\u00a0values\u00a0of\u00a0constants\u00a0pi\u00a0and\u00a0e\nsqrt(x)\n#\u00a0square\u00a0root\u00a0of\u00a0x\nfactorial(x)\u00a0\n#\u00a0factorial\u00a0of\u00a0x\nfabs(x)\n#\u00a0absolute\u00a0value\u00a0of\u00a0float\u00a0x\nlog(x)\n#\u00a0natural\u00a0log\u00a0of\u00a0x\u00a0(log\u00a0to\u00a0the\u00a0base\u00a0e)\nlog10(x)\n#\u00a0base-10\u00a0logarithm\u00a0of\u00a0x\nexp(x)\n#\u00a0e\u00a0raised\u00a0to\u00a0x\ntrunc(x)\u00a0\n#\u00a0truncate\u00a0to\u00a0integer\nceil(x)\n#\u00a0smallest\u00a0integer\u00a0>=\u00a0x\nfloor(x)\n#\u00a0largest\u00a0integer\u00a0<=\u00a0x\nmodf(x)\n#\u00a0fractional\u00a0and\u00a0integer\u00a0parts\u00a0of\u00a0x\nChapter 3:\u00a0 Python Basics\u00a0\n25\nx\nround( ) built-in\u00a0function\u00a0can\u00a0round\u00a0to\u00a0a\u00a0specific\u00a0number\u00a0of\u00a0decimal\u00a0\nplaces,\u00a0whereas\u00a0math module's\u00a0library\u00a0functions\u00a0trunc( ),\u00a0ceil( ) and\u00a0\nfloor( ) always\u00a0round\u00a0to\u00a0zero\u00a0decimal\u00a0places.\nx\nTrigonometric\u00a0functions\u00a0in\u00a0math module:\ndegrees(x)\u00a0\n#\u00a0radians\u00a0to\u00a0degrees\nradians(x)\u00a0\n#\u00a0degrees\u00a0to\u00a0radians\nsin(x)\u00a0\n#\u00a0sine\u00a0of\u00a0x\u00a0radians\ncos(x)\u00a0\n#\u00a0cosine\u00a0of\u00a0x\u00a0radians\ntan(x)\u00a0\n#\u00a0tan\u00a0of\u00a0x\u00a0radians\nsinh(x)\u00a0\n#\u00a0hyperbolic\u00a0sine\u00a0of\u00a0x\ncosh(x)\u00a0\n#\u00a0hyperbolic\u00a0cosine\u00a0of\u00a0x\ntanh(x)\u00a0\n#\u00a0hyperbolic\u00a0tan\u00a0of\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_56", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0degrees\u00a0to\u00a0radians\nsin(x)\u00a0\n#\u00a0sine\u00a0of\u00a0x\u00a0radians\ncos(x)\u00a0\n#\u00a0cosine\u00a0of\u00a0x\u00a0radians\ntan(x)\u00a0\n#\u00a0tan\u00a0of\u00a0x\u00a0radians\nsinh(x)\u00a0\n#\u00a0hyperbolic\u00a0sine\u00a0of\u00a0x\ncosh(x)\u00a0\n#\u00a0hyperbolic\u00a0cosine\u00a0of\u00a0x\ntanh(x)\u00a0\n#\u00a0hyperbolic\u00a0tan\u00a0of\u00a0x\nacos(x)\u00a0\n#\u00a0cos\u00a0inverse\u00a0of\u00a0x,\u00a0in\u00a0radians\nasin(x)\u00a0\n#\u00a0sine\u00a0inverse\u00a0of\u00a0x,\u00a0in\u00a0radians\natan(x)\u00a0\n#\u00a0tan\u00a0inverse of\u00a0x,\u00a0in\u00a0radians\nhypot(x,\u00a0y)\u00a0\n#\u00a0sqrt(x\u00a0*\u00a0x\u00a0+\u00a0y\u00a0*\u00a0y)\nx\nRandom\u00a0number\u00a0generation\u00a0functions\u00a0from\u00a0random module:\nrandom(\u00a0)\u00a0\n#\u00a0random\u00a0number\u00a0between\u00a00\u00a0and\u00a01\nrandint(start,\u00a0stop)\u00a0\n#\u00a0random\u00a0number\u00a0in\u00a0the\u00a0range\nseed(\u00a0)\u00a0 #\u00a0sets\u00a0current\u00a0time\u00a0as\u00a0seed\u00a0for random\u00a0number\u00a0generation\u00a0\nseed(x)\u00a0 #\u00a0sets\u00a0x\u00a0as\u00a0seed\u00a0for\u00a0random\u00a0number\u00a0generation\u00a0logic\nx\nTo\u00a0use\u00a0functions\u00a0present\u00a0in\u00a0a\u00a0module,\u00a0we\u00a0need\u00a0to\u00a0import\u00a0the\u00a0module\u00a0\nusing\u00a0the\u00a0import statement.\nx\nFollowing\u00a0Python\u00a0program\u00a0shows\u00a0how\u00a0to\u00a0use\u00a0some\u00a0of\u00a0the\u00a0functions\u00a0\nof\u00a0math module\u00a0and\u00a0random module:\nimport\u00a0math\nimport\u00a0random\nprint(math.factorial(5))\n#\u00a0prints\u00a0120\nprint(math.degrees(math.pi))\n#\u00a0prints\u00a0180.0\nprint(random.random(\u00a0))\n#\u00a0prints\u00a00.8960522546341796\nx\nTh", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_57", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0\nof\u00a0math module\u00a0and\u00a0random module:\nimport\u00a0math\nimport\u00a0random\nprint(math.factorial(5))\n#\u00a0prints\u00a0120\nprint(math.degrees(math.pi))\n#\u00a0prints\u00a0180.0\nprint(random.random(\u00a0))\n#\u00a0prints\u00a00.8960522546341796\nx\nThere\u00a0are\u00a0many\u00a0built-in\u00a0functions\u00a0and\u00a0many\u00a0functions\u00a0in\u00a0each\u00a0built-\nin\u00a0module.\u00a0It\u00a0is\u00a0easy\u00a0to\u00a0forget\u00a0the\u00a0names\u00a0of\u00a0the\u00a0functions.\u00a0We\u00a0 can\u00a0\nget\u00a0a\u00a0quick\u00a0list\u00a0of\u00a0them\u00a0using\u00a0the\u00a0following\u00a0program:\nimport\u00a0math\nprint(dir(__builtins__))\n#\u00a02\u00a0underscores\u00a0before\u00a0and\u00a0after\u00a0builtins\n26\nLet\u00a0Us\u00a0Python\nprint(dir(math))\nContainer\u00a0Types\nx\nContainer\u00a0 types\u00a0 typically\u00a0 refer\u00a0 to\u00a0 multiple\u00a0 values\u00a0 stored\u00a0 together.\u00a0\nExamples\u00a0of\u00a0different\u00a0basic\u00a0types\u00a0are\u00a0given\u00a0below:\n#\u00a0list\u00a0is\u00a0a\u00a0indexed\u00a0collection\u00a0of\u00a0similar/dissimilar\u00a0entities\n[\u03ed\u03ec,\u00a0\u03ee\u03ec,\u00a0\u03ef\u03ec,\u00a0\u03ee\u03ec,\u00a0\u03ef\u03ec,\u00a0\u03f0\u03ec,\u00a0\u03f1\u03ec,\u00a0\u03ed\u03ec],\u00a0['She',\u00a0'sold',\u00a0\u03ed\u03ec,\u00a0'shells'\u2019]\n#\u00a0tuple\u00a0is\u00a0an\u00a0immutable\u00a0collection\n('Sanjay',\u00a034,\u00a04500.55),\u00a0('Let\u00a0Us\u00a0Python',\u00a0350,\u00a0195.00)\n#\u00a0set\u00a0is\u00a0a\u00a0collection\u00a0of\u00a0unique\u00a0values\n{10,\u00a020,\u00a030,\u00a040},\u00a0{'Sanjay',\u00a034,\u00a045000}\n#\u00a0dict\u00a0is\u00a0a\u00a0collection\u00a0of\u00a0key-value\u00a0pairs,\u00a0with\u00a0unique\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_58", "chunk_strategy": "fixed_size"}}, {"text": "ollection\n('Sanjay',\u00a034,\u00a04500.55),\u00a0('Let\u00a0Us\u00a0Python',\u00a0350,\u00a0195.00)\n#\u00a0set\u00a0is\u00a0a\u00a0collection\u00a0of\u00a0unique\u00a0values\n{10,\u00a020,\u00a030,\u00a040},\u00a0{'Sanjay',\u00a034,\u00a045000}\n#\u00a0dict\u00a0is\u00a0a\u00a0collection\u00a0of\u00a0key-value\u00a0pairs,\u00a0with\u00a0unique\u00a0key enclosed\u00a0in\u00a0'\u00a0'\n{'ME101'\u00a0:\u00a0'Strength\u00a0of\u00a0materials',\u00a0'EE101'\u00a0:\u00a0'Electronics'}\nx\nValues\u00a0in\u00a0a\u00a0list\u00a0and\u00a0tuple\u00a0can\u00a0be\u00a0accessed\u00a0using\u00a0their\u00a0position\u00a0in\u00a0the\u00a0\nlist\u00a0 or\u00a0 tuple.\u00a0 Values\u00a0 in\u00a0 a\u00a0 set\u00a0 can\u00a0 be\u00a0 accessed\u00a0 using\u00a0 a\u00a0 for loop\n(discussed\u00a0in\u00a0Chapter\u00a06).\u00a0Values\u00a0in\u00a0a\u00a0dictionary\u00a0can\u00a0be\u00a0accessed\u00a0using\u00a0\na\u00a0key.\u00a0This\u00a0is\u00a0shown\u00a0in the\u00a0following\u00a0program:\nlst\u00a0=\u00a0[10,\u00a020,\u00a030,\u00a020,\u00a030,\u00a040,\u00a050,\u00a010]\ntpl\u00a0=\u00a0('Let\u00a0Us\u00a0Python',\u00a0350,\u00a0195.00)\ns\u00a0=\u00a0{10,\u00a020,\u00a030,\u00a040}\ndct\u00a0=\u00a0{'ME101'\u00a0:\u00a0'SOM',\u00a0'EE101'\u00a0:\u00a0'Electronics'}\nprint(lst[0],\u00a0tpl[2])\n#\u00a0prints\u00a010\u00a0 195.0\nprint(dct['ME101'])\n#\u00a0prints\u00a0SOM\nPython\u00a0Type\u00a0Jargon\nx\nOften\u00a0following\u00a0terms\u00a0are\u00a0used\u00a0while\u00a0describing\u00a0Python\u00a0types:\nCollection - a\u00a0generic\u00a0term\u00a0for\u00a0container\u00a0types.\nIterable - means\u00a0a\u00a0collection that\u00a0can\u00a0be\u00a0iterated\u00a0over\u00a0using\u00a0a\u00a0loop.\nOrdered collection - element", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_59", "chunk_strategy": "fixed_size"}}, {"text": "lowing\u00a0terms\u00a0are\u00a0used\u00a0while\u00a0describing\u00a0Python\u00a0types:\nCollection - a\u00a0generic\u00a0term\u00a0for\u00a0container\u00a0types.\nIterable - means\u00a0a\u00a0collection that\u00a0can\u00a0be\u00a0iterated\u00a0over\u00a0using\u00a0a\u00a0loop.\nOrdered collection - elements\u00a0are\u00a0stored\u00a0in\u00a0the\u00a0same\u00a0order\u00a0in which\u00a0\nthey\u00a0 are\u00a0 inserted.\u00a0 Hence\u00a0 its\u00a0 elements can\u00a0 be\u00a0 accessed\u00a0 using\u00a0 an\u00a0\nindex,\u00a0i.e.\u00a0its\u00a0position\u00a0in\u00a0the\u00a0collection.\nUnordered collection - elements\u00a0are\u00a0not\u00a0stored\u00a0in\u00a0the\u00a0same\u00a0order in\u00a0\nwhich\u00a0 they\u00a0are\u00a0inserted.\u00a0So\u00a0we\u00a0cannot\u00a0predict\u00a0 at\u00a0which\u00a0position\u00a0a\u00a0\nparticular\u00a0element\u00a0is\u00a0present.\u00a0So\u00a0we\u00a0cannot\u00a0access its\u00a0elements\u00a0using\u00a0\na\u00a0position\u00a0based\u00a0index.\nChapter 3:\u00a0 Python Basics\u00a0\n27\nSequence is\u00a0the\u00a0generic\u00a0term\u00a0for\u00a0an\u00a0ordered\u00a0collection.\nImmutable - means\u00a0unchangeable collection.\nMutable - means\u00a0changeable collection.\nx\nLet\u00a0 us\u00a0 now\u00a0see\u00a0 which\u00a0of\u00a0 these\u00a0terms\u00a0 apply\u00a0 to\u00a0types\u00a0that\u00a0 we\u00a0have\u00a0\nseen\u00a0so\u00a0far.\nString\u00a0- ordered\u00a0collection,\u00a0immutable,\u00a0iterable.\nList\u00a0- ordered\u00a0collection,\u00a0mutable,\u00a0iterable.\nTuple\u00a0- ordered\u00a0collection,\u00a0immutable,\u00a0iterable.\nSet\u00a0- uno", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_60", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0 apply\u00a0 to\u00a0types\u00a0that\u00a0 we\u00a0have\u00a0\nseen\u00a0so\u00a0far.\nString\u00a0- ordered\u00a0collection,\u00a0immutable,\u00a0iterable.\nList\u00a0- ordered\u00a0collection,\u00a0mutable,\u00a0iterable.\nTuple\u00a0- ordered\u00a0collection,\u00a0immutable,\u00a0iterable.\nSet\u00a0- unordered\u00a0collection,\u00a0mutable,\u00a0iterable.\nDictionary\u00a0- unordered\u00a0collection,\u00a0mutable,\u00a0iterable.\nComments\u00a0and\u00a0Indentation\nx\nComments\u00a0begin\u00a0with\u00a0#.\n#\u00a0calculate\u00a0gross\u00a0salary\u00a0\ngs\u00a0=\u00a0bs\u00a0+\u00a0da\u00a0+\u00a0hra\u00a0+\u00a0ca\u00a0\nsi\u00a0=\u00a0p *\u00a0n\u00a0*\u00a0r\u00a0/\u00a0100\n#\u00a0calculate\u00a0simple\u00a0interest\nx\nMulti-line\u00a0comments\u00a0should\u00a0be\u00a0written\u00a0in\u00a0a\u00a0pair\u00a0of\u00a0'''\u00a0or\u00a0\"\"\".\n'''\u00a0Additional\u00a0program:\u00a0Calculate\u00a0bonus\u00a0to\u00a0be\u00a0paid\nURL:\u00a0https://www.ykanetkar.com (https://www.ykanetkar.com)\nAuthor:\u00a0Yashavant,\u00a0Date:\u00a018\u00a0May 2020\u00a0'''\nx\nIndentation\u00a0matters!\u00a0Don\u2019t\u00a0use\u00a0it\u00a0casually.\u00a0Following\u00a0code\u00a0will\u00a0report\u00a0\nan error 'Unexpected\u00a0indent'.\na\u00a0=\u00a020\u00a0\nb\u00a0= 45\u00a0\nMulti-lining\nx\nIf\u00a0 statements\u00a0are\u00a0long\u00a0they\u00a0can\u00a0be\u00a0written\u00a0as\u00a0multi-lines\u00a0with\u00a0each\u00a0\nline\u00a0except\u00a0the\u00a0last\u00a0ending\u00a0with\u00a0a\u00a0\\.\ntotal\u00a0=\u00a0physics\u00a0+\u00a0chemistry\u00a0+\u00a0maths\u00a0+\u00a0\\\nenglish\u00a0+\u00a0Marathi\u00a0+\u00a0history\u00a0+\u00a0\\\ngeography\u00a0+\u00a0civics\u00a0\nx\nMulti", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_61", "chunk_strategy": "fixed_size"}}, {"text": "tements\u00a0are\u00a0long\u00a0they\u00a0can\u00a0be\u00a0written\u00a0as\u00a0multi-lines\u00a0with\u00a0each\u00a0\nline\u00a0except\u00a0the\u00a0last\u00a0ending\u00a0with\u00a0a\u00a0\\.\ntotal\u00a0=\u00a0physics\u00a0+\u00a0chemistry\u00a0+\u00a0maths\u00a0+\u00a0\\\nenglish\u00a0+\u00a0Marathi\u00a0+\u00a0history\u00a0+\u00a0\\\ngeography\u00a0+\u00a0civics\u00a0\nx\nMulti-line\u00a0statements\u00a0within\u00a0[\u00a0],\u00a0{\u00a0},\u00a0or (\u00a0)\u00a0don't\u00a0need\u00a0\\.\n28\nLet\u00a0Us\u00a0Python\ndays\u00a0=\u00a0[\u00a0'Monday',\u00a0'Tuesday',\u00a0'Wednesday',\u00a0Thursday',\u00a0\n'Friday',\u00a0'Saturday',\u00a0'Sunday'\u00a0]\u00a0\nClasses\u00a0and\u00a0Objects\nx\nIn\u00a0Python\u00a0every\u00a0type\u00a0is\u00a0a\u00a0class.\u00a0So\u00a0int,\u00a0float,\u00a0complex,\u00a0bool,\u00a0str,\u00a0list,\u00a0\ntuple,\u00a0set,\u00a0dict are\u00a0all\u00a0classes.\u00a0These\u00a0are\u00a0ready-made\u00a0classes.\u00a0Python\u00a0\nalso\u00a0 permits\u00a0 us\u00a0 to\u00a0create\u00a0user-defined\u00a0 classes\u00a0 as\u00a0 we\u00a0would\u00a0see\u00a0 in\u00a0\nChapter\u00a018.\nx\nAn\u00a0object\u00a0is\u00a0created\u00a0from\u00a0a\u00a0class.\u00a0A\u00a0class\u00a0describes\u00a0two\u00a0things\u2014the\nform\u00a0an\u00a0object\u00a0created\u00a0from\u00a0it\u00a0will\u00a0take\u00a0and\u00a0the\u00a0methods\u00a0(functions)\u00a0\nthat\u00a0can\u00a0be\u00a0used\u00a0to\u00a0access\u00a0and\u00a0manipulate\u00a0the\u00a0object.\u00a0\nx\nFrom\u00a0 one\u00a0class\u00a0multiple\u00a0objects\u00a0can\u00a0be\u00a0created. When\u00a0an\u00a0object\u00a0is\u00a0\ncreated\u00a0from\u00a0a\u00a0class,\u00a0it\u00a0is\u00a0said\u00a0that\u00a0an\u00a0instance\u00a0of\u00a0the\u00a0class\u00a0is\u00a0being\u00a0\ncreated.\nx\nA\u00a0class\u00a0has\u00a0a\u00a0name,\u00a0whereas\u00a0objects", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_62", "chunk_strategy": "fixed_size"}}, {"text": "e\u00a0object.\u00a0\nx\nFrom\u00a0 one\u00a0class\u00a0multiple\u00a0objects\u00a0can\u00a0be\u00a0created. When\u00a0an\u00a0object\u00a0is\u00a0\ncreated\u00a0from\u00a0a\u00a0class,\u00a0it\u00a0is\u00a0said\u00a0that\u00a0an\u00a0instance\u00a0of\u00a0the\u00a0class\u00a0is\u00a0being\u00a0\ncreated.\nx\nA\u00a0class\u00a0has\u00a0a\u00a0name,\u00a0whereas\u00a0objects\u00a0are\u00a0nameless.\u00a0Since\u00a0objects\u00a0do\u00a0\nnot\u00a0have\u00a0names,\u00a0they\u00a0are\u00a0referred\u00a0using\u00a0their\u00a0addresses\u00a0in\u00a0memory.\nx\nAll\u00a0 the\u00a0 above\u00a0 statements\u00a0 can\u00a0 be\u00a0 verified\u00a0 through\u00a0 the\u00a0 following\u00a0\nprogram.\u00a0Refer\u00a0to\u00a0Figure\u00a03.1\u00a0to\u00a0understand\u00a0it\u00a0better.\na\u00a0=\u00a030\nb\u00a0=\u00a0'Good'\nprint(a,\u00a0b)\n#\u00a0prints\u00a03\u00a0Good\nprint(type(a),\u00a0type(b))\n#\u00a0prints\u00a0<class\u00a0'int'>\u00a0<class\u00a0'str'>\nprint(id(a),\u00a0id(b))\n#\u00a0prints 1356658640\u00a0 33720000\nprint(isinstance(a,\u00a0int),\u00a0isinstance(b,\u00a0str))\u00a0 #\u00a0prints\u00a0True\u00a0True\n33720000\n1356658640\n1356658640\n30\na\nint object\n33720000\nGood\nb\nstr object\nFigure\u00a03.1\n-\nIn\u00a0this\u00a0program\u00a0we\u00a0have\u00a0created\u00a0two objects\u2014one\u00a0from\u00a0ready-\nmade\u00a0class\u00a0int and\u00a0another\u00a0from\u00a0ready-made\u00a0class\u00a0str.\u00a0\nChapter 3:\u00a0 Python Basics\u00a0\n29\n-\nThe\u00a0object\u00a0of\u00a0type\u00a0int contains\u00a030,\u00a0whereas\u00a0the\u00a0object\u00a0of\u00a0type\u00a0str\ncontains\u00a0'Good'.\u00a0\n-\nBoth\u00a0the\u00a0 objects\u00a0are\u00a0namel", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_63", "chunk_strategy": "fixed_size"}}, {"text": "ade\u00a0class\u00a0int and\u00a0another\u00a0from\u00a0ready-made\u00a0class\u00a0str.\u00a0\nChapter 3:\u00a0 Python Basics\u00a0\n29\n-\nThe\u00a0object\u00a0of\u00a0type\u00a0int contains\u00a030,\u00a0whereas\u00a0the\u00a0object\u00a0of\u00a0type\u00a0str\ncontains\u00a0'Good'.\u00a0\n-\nBoth\u00a0the\u00a0 objects\u00a0are\u00a0nameless.\u00a0 Their\u00a0 addresses\u00a0in\u00a0 memory\u00a0are\u00a0\n1356658640\u00a0and\u00a033720000 which are\u00a0stored\u00a0in\u00a0a and\u00a0b.\u00a0\n-\nThese\u00a0addresses\u00a0can\u00a0be\u00a0obtained\u00a0using\u00a0the\u00a0built-in\u00a0function\u00a0id(\u00a0).\u00a0\nWhen\u00a0you\u00a0execute\u00a0the\u00a0program\u00a0you\u00a0may\u00a0get\u00a0different\u00a0addresses.\n-\nSince\u00a0a and\u00a0b contain\u00a0addresses\u00a0they\u00a0are\u00a0said\u00a0to\u00a0refer\u00a0to\u00a0objects\u00a0\npresent\u00a0at\u00a0these\u00a0addresses.\u00a0In\u00a0simpler\u00a0words\u00a0they\u00a0are\u00a0pointers\u00a0to\u00a0\nobjects.\n-\nType\u00a0of objects\u00a0to\u00a0which a and\u00a0b are\u00a0referring\u00a0to\u00a0can\u00a0be\u00a0obtained\u00a0\nusing\u00a0the\u00a0built-in\u00a0function\u00a0type(\u00a0).\n-\nWhether\u00a0a refers\u00a0to\u00a0an\u00a0instance\u00a0of\u00a0class\u00a0int can\u00a0be\u00a0checked\u00a0using\u00a0\nthe\u00a0built-in\u00a0function\u00a0instanceof(\u00a0).\nMultiple\u00a0Objects\nx\nConsider\u00a0the\u00a0following\u00a0program:\na\u00a0=\u00a03\nb\u00a0=\u00a03\nprint(id(a),\u00a0id(b))\n#\u00a0prints\u00a01356658640\u00a0 1356658640\nprint(a\u00a0is\u00a0b)\u00a0\n#\u00a0prints\u00a0True\na\u00a0=\u00a030\n#\u00a0now\u00a0a\u00a0refers\u00a0to\u00a0a\u00a0different\u00a0object\nprint(id(a))\n#\u00a0prints\u00a013566590", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_64", "chunk_strategy": "fixed_size"}}, {"text": "\nConsider\u00a0the\u00a0following\u00a0program:\na\u00a0=\u00a03\nb\u00a0=\u00a03\nprint(id(a),\u00a0id(b))\n#\u00a0prints\u00a01356658640\u00a0 1356658640\nprint(a\u00a0is\u00a0b)\u00a0\n#\u00a0prints\u00a0True\na\u00a0=\u00a030\n#\u00a0now\u00a0a\u00a0refers\u00a0to\u00a0a\u00a0different\u00a0object\nprint(id(a))\n#\u00a0prints\u00a01356659072\n-\nAre\u00a0we\u00a0creating\u00a02\u00a0int objects?\u00a0No.\u00a0Since\u00a0the\u00a0value\u00a0stored\u00a0in\u00a0int\nobject\u00a0is\u00a0same,\u00a0i.e.\u00a03,\u00a0only\u00a01\u00a0int object\u00a0is\u00a0created.\u00a0Both\u00a0a and\u00a0b\nare\u00a0referring\u00a0to\u00a0the\u00a0same\u00a0int object.\u00a0That\u00a0is\u00a0why\u00a0id(a) and\u00a0id(b)\nreturn\u00a0same\u00a0addresses.\n-\nThis\u00a0 can\u00a0 also\u00a0be\u00a0 verified\u00a0 using\u00a0 the\u00a0 is operator.\u00a0 It\u00a0 returns\u00a0 True\u00a0\nsince\u00a0a and\u00a0b both\u00a0are\u00a0referring\u00a0to\u00a0the\u00a0same\u00a0object.\n-\nWhen\u00a0we\u00a0attempt\u00a0to\u00a0store\u00a0a\u00a0new\u00a0value\u00a0in\u00a0a,\u00a0a\u00a0new\u00a0int object\u00a0is\u00a0\ncreated\u00a0as\u00a0a\u00a0different\u00a0value,\u00a030,\u00a0is\u00a0to\u00a0be\u00a0stored\u00a0in\u00a0it.\u00a0a now\u00a0starts\u00a0\nreferring\u00a0to\u00a0this\u00a0new\u00a0int object,\u00a0whereas\u00a0b continues\u00a0to\u00a0refer\u00a0to\u00a0\nint object\u00a0with\u00a0value\u00a03.\n-\nInstead\u00a0of\u00a0saying\u00a0that\u00a0a is\u00a0referring\u00a0to\u00a0an\u00a0int object\u00a0containing\u00a0a\u00a0\nvalue\u00a03,\u00a0it\u00a0is\u00a0often\u00a0said\u00a0that\u00a0a is\u00a0an\u00a0int object,\u00a0or\u00a03\u00a0is\u00a0assigned\u00a0to\n30\nLet\u00a0Us\u00a0Python\nint object a.\u00a0Many\u00a0programmers\u00a0continue\u00a0to\u00a0believe\u00a0that\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_65", "chunk_strategy": "fixed_size"}}, {"text": "ying\u00a0that\u00a0a is\u00a0referring\u00a0to\u00a0an\u00a0int object\u00a0containing\u00a0a\u00a0\nvalue\u00a03,\u00a0it\u00a0is\u00a0often\u00a0said\u00a0that\u00a0a is\u00a0an\u00a0int object,\u00a0or\u00a03\u00a0is\u00a0assigned\u00a0to\n30\nLet\u00a0Us\u00a0Python\nint object a.\u00a0Many\u00a0programmers\u00a0continue\u00a0to\u00a0believe\u00a0that\u00a0a and\u00a0b\nare\u00a0int variables,\u00a0which\u00a0we now\u00a0know\u00a0is\u00a0not\u00a0the\u00a0case.\n____________________________________________________________________\nProblem\u00a03.1\nDemonstrate\u00a0 use\u00a0of\u00a0 integer\u00a0 types\u00a0 and\u00a0 operators\u00a0that\u00a0 can\u00a0 be\u00a0 used\u00a0on\u00a0\nthem.\nProgram\n#\u00a0use\u00a0of\u00a0integer\u00a0types\nprint(3\u00a0/\u00a04)\nprint(3\u00a0%\u00a04)\nprint(3\u00a0//\u00a04)\nprint(3\u00a0**\u00a04)\na\u00a0=\u00a010\u00a0;\u00a0b\u00a0=\u00a025\u00a0;\u00a0c\u00a0=\u00a015\u00a0;\u00a0d\u00a0=\u00a030\u00a0;\u00a0e\u00a0=\u00a02\u00a0;\u00a0f\u00a0=\u00a03\u00a0;\u00a0g\u00a0=\u00a05\u00a0\nw\u00a0=\u00a0a\u00a0+\u00a0b\u00a0- c\u00a0\nx\u00a0=\u00a0d\u00a0**\u00a0e\u00a0\ny\u00a0=\u00a0f\u00a0%\u00a0g\u00a0\nprint(w,\u00a0x,\u00a0y)\nh\u00a0=\u00a099999999999999999\ni\u00a0=\u00a054321\nprint(h\u00a0*\u00a0i)\nOutput\n0.75\n3\n0\n81\n20\u00a0900\u00a03\n5432099999999999945679\nTips\nx\n3\u00a0/\u00a04\u00a0doesn't\u00a0yield\u00a00.\nx\nMultiple\u00a0statements\u00a0in\u00a0a\u00a0line\u00a0should\u00a0be\u00a0separated\u00a0using\u00a0;\nChapter 3:\u00a0 Python Basics\u00a0\n31\nx\nprint(w,\u00a0x,\u00a0y) prints\u00a0values\u00a0separated\u00a0by\u00a0a\u00a0space.\n____________________________________________________________________\nProblem\u00a03.2\nDemonstrate\u00a0use\u00a0of\u00a0 float,\u00a0c", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_66", "chunk_strategy": "fixed_size"}}, {"text": "using\u00a0;\nChapter 3:\u00a0 Python Basics\u00a0\n31\nx\nprint(w,\u00a0x,\u00a0y) prints\u00a0values\u00a0separated\u00a0by\u00a0a\u00a0space.\n____________________________________________________________________\nProblem\u00a03.2\nDemonstrate\u00a0use\u00a0of\u00a0 float,\u00a0complex and\u00a0bool types\u00a0and\u00a0operators\u00a0that\u00a0\ncan\u00a0be\u00a0used\u00a0on\u00a0them.\nProgram\n#\u00a0use\u00a0of\u00a0float\u00a0\ni\u00a0=\u00a03.5\nj\u00a0=\u00a01.2\u00a0\nprint(i\u00a0%\u00a0j)\n#\u00a0use\u00a0of\u00a0complex\na\u00a0=\u00a01\u00a0+\u00a02j\u00a0\nb\u00a0=\u00a03\u00a0*(1\u00a0+\u00a02j)\nc\u00a0=\u00a0a\u00a0*\u00a0b\nprint(a)\nprint(b)\nprint(c)\nprint(a.real)\nprint(a.imag)\nprint(a.conjugate(\u00a0))\nprint(a)\n#\u00a0use\u00a0of\u00a0bool\nx\u00a0=\u00a0True\ny\u00a0=\u00a03\u00a0>\u00a04\u00a0\nprint(x)\nprint(y)\nOutput\n1.1\n(1+2j)\n(3+6j)\n(-9+12j)\n1.0\n2.0\n(1-2j)\n32\nLet\u00a0Us\u00a0Python\n(1+2j)\nTrue\nFalse\nTips\nx\n%\u00a0works\u00a0on\u00a0floats.\nx\nIt\u00a0is\u00a0possible\u00a0to\u00a0obtain\u00a0real and\u00a0imag part\u00a0from\u00a0a\u00a0complex\u00a0number.\nx\nOn\u00a0evaluation\u00a0of\u00a0a\u00a0condition\u00a0it\u00a0replaced\u00a0by\u00a0True or\u00a0False.\n____________________________________________________________________\nProblem\u00a03.3\nDemonstrate\u00a0how\u00a0to\u00a0convert\u00a0from\u00a0one\u00a0number\u00a0type\u00a0to\u00a0another.\nProgram\n#\u00a0convert\u00a0to\u00a0int\nprint(int(3.14))\n#\u00a0from\u00a0float\u00a0to\u00a0int\u00a0\na\u00a0=\u00a0int('485')\n#\u00a0from\u00a0numeric\u00a0string\u00a0to\u00a0int\nb\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_67", "chunk_strategy": "fixed_size"}}, {"text": "__________________\nProblem\u00a03.3\nDemonstrate\u00a0how\u00a0to\u00a0convert\u00a0from\u00a0one\u00a0number\u00a0type\u00a0to\u00a0another.\nProgram\n#\u00a0convert\u00a0to\u00a0int\nprint(int(3.14))\n#\u00a0from\u00a0float\u00a0to\u00a0int\u00a0\na\u00a0=\u00a0int('485')\n#\u00a0from\u00a0numeric\u00a0string\u00a0to\u00a0int\nb\u00a0=\u00a0int('768')\n#\u00a0from\u00a0numeric\u00a0string\u00a0to\u00a0int\nc\u00a0=\u00a0a\u00a0+\u00a0b\u00a0\nprint(c)\nprint(int('1011',\u00a02))\u00a0\n#\u00a0convert\u00a0from\u00a0binary\u00a0to\u00a0decimal\u00a0int\u00a0\nprint(int('341',\u00a08))\u00a0\n#\u00a0convert\u00a0from\u00a0octal\u00a0to\u00a0decimal\u00a0int\u00a0\nprint(int('21',\u00a016))\u00a0\n#\u00a0convert\u00a0from\u00a0hex\u00a0to\u00a0decimal\u00a0int\u00a0\n#\u00a0convert\u00a0to\u00a0float\nprint(float(35))\n#\u00a0from\u00a0int\u00a0to\u00a0float\ni\u00a0=\u00a0float('4.85')\n#\u00a0from\u00a0numeric\u00a0string\u00a0to\u00a0float\nj\u00a0=\u00a0float('7.68')\n#\u00a0from\u00a0numeric\u00a0string\u00a0to\u00a0float\nk\u00a0=\u00a0i\u00a0+\u00a0j\u00a0\nprint(k)\n#\u00a0convert\u00a0to\u00a0complex\nprint(complex(35))\n#\u00a0from\u00a0int\u00a0to\u00a0float\nx\u00a0=\u00a0complex(4.85,\u00a01.1) #\u00a0from\u00a0numeric\u00a0string\u00a0to\u00a0float\ny\u00a0=\u00a0complex(7.68,\u00a02.1) #\u00a0from\u00a0numeric\u00a0string\u00a0to\u00a0float\nz\u00a0=\u00a0x\u00a0+\u00a0y\u00a0\nprint(z)\nChapter 3:\u00a0 Python Basics\u00a0\n33\n#\u00a0convert\u00a0to\u00a0bool\nprint(bool(35))\nprint(bool(1.2))\nprint(int(True))\nprint(int(False))\nOutput\n3\n1253\n11\n225\n33\n35.0\n12.53\n(35+0j)\n(12.53+3.2j)\nTrue\nTrue\n1\n0\nTips\nx\nIt\u00a0is\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_68", "chunk_strategy": "fixed_size"}}, {"text": "\nChapter 3:\u00a0 Python Basics\u00a0\n33\n#\u00a0convert\u00a0to\u00a0bool\nprint(bool(35))\nprint(bool(1.2))\nprint(int(True))\nprint(int(False))\nOutput\n3\n1253\n11\n225\n33\n35.0\n12.53\n(35+0j)\n(12.53+3.2j)\nTrue\nTrue\n1\n0\nTips\nx\nIt\u00a0is\u00a0possible\u00a0to\u00a0convert\u00a0a\u00a0binary\u00a0numeric\u00a0string,\u00a0octal\u00a0numeric\u00a0string\u00a0\nor\u00a0hexadecimal\u00a0numeric\u00a0string\u00a0to\u00a0equivalent\u00a0decimal\u00a0integer.\u00a0Same\u00a0\ncannot\u00a0be\u00a0done\u00a0for\u00a0a\u00a0float.\nx\nWhile\u00a0converting\u00a0to\u00a0complex\u00a0if\u00a0only\u00a0one\u00a0argument\u00a0is\u00a0used,\u00a0imaginary\u00a0\npart\u00a0is\u00a0considered\u00a0to\u00a0be\u00a00.\nx\nAny\u00a0non-zero\u00a0number\u00a0(int\u00a0or\u00a0float)\u00a0is\u00a0treated\u00a0as\u00a0True.\u00a00\u00a0is\u00a0treated\u00a0as\u00a0\nFalse.\n____________________________________________________________________\nProblem\u00a03.4\nWrite\u00a0a\u00a0program\u00a0that\u00a0makes\u00a0use\u00a0of\u00a0built-in\u00a0mathematical\u00a0functions.\nProgram\n#\u00a0built-in\u00a0math\u00a0functions\nprint(abs(-25))\n34\nLet\u00a0Us\u00a0Python\nprint(pow(2,\u00a04))\nprint(min(10,\u00a020,\u00a030,\u00a040,\u00a050))\nprint(max(10,\u00a020,\u00a030,\u00a040,\u00a050))\nprint(divmod(17,\u00a03))\nprint(bin(64),\u00a0oct(64),\u00a0hex(64))\nprint(round(2.567),\u00a0round(2.5678,\u00a02))\nOutput\n25\n16\n10\n50\n(5,\u00a02)\n0b1000000\u00a00o100\u00a00x40\n3\u00a02.57\nTips\nx\ndivmod(a,\u00a0b", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_69", "chunk_strategy": "fixed_size"}}, {"text": "50))\nprint(max(10,\u00a020,\u00a030,\u00a040,\u00a050))\nprint(divmod(17,\u00a03))\nprint(bin(64),\u00a0oct(64),\u00a0hex(64))\nprint(round(2.567),\u00a0round(2.5678,\u00a02))\nOutput\n25\n16\n10\n50\n(5,\u00a02)\n0b1000000\u00a00o100\u00a00x40\n3\u00a02.57\nTips\nx\ndivmod(a,\u00a0b) yields\u00a0a\u00a0pair\u00a0(a //\u00a0b,\u00a0a\u00a0%\u00a0b).\nx\nbin(\u00a0),\u00a0oct(\u00a0),\u00a0hex(\u00a0) return\u00a0binary,\u00a0octal\u00a0and\u00a0hexadecimal\u00a0equivalents.\nx\nround(x) assumes\u00a0 that\u00a0 rounding-off\u00a0 has\u00a0to\u00a0 be\u00a0 done\u00a0 with\u00a0 0\u00a0places\u00a0\nbeyond\u00a0decimal\u00a0point.\n___________________________________________________________________\nProblem\u00a03.5\nWrite\u00a0a\u00a0program\u00a0that\u00a0makes\u00a0use\u00a0of\u00a0functions\u00a0in\u00a0the\u00a0math\u00a0module.\nProgram\n#\u00a0mathematical\u00a0functions\u00a0from\u00a0math\u00a0module\nimport\u00a0math\nx\u00a0=\u00a01.5357\nprint\u00a0(\u00a0math.pi,\u00a0math.e)\nprint(math.sqrt(\u00a0x))\nprint(math.factorial(6))\nprint(math.fabs(x))\nprint(math.log(x))\nprint(math.log10(x))\nprint(math.exp(x))\nChapter 3:\u00a0 Python Basics\u00a0\n35\nprint(math.trunc(x))\nprint(math.floor(x))\nprint(math.ceil(x))\nprint(math.trunc(-x))\nprint(math.floor(-x))\nprint(math.ceil(-x))\nprint(math.modf(x))\nOutput\n3.141592653589793\u00a02.718281828459045\n1.2392336", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_70", "chunk_strategy": "fixed_size"}}, {"text": "\nprint(math.trunc(x))\nprint(math.floor(x))\nprint(math.ceil(x))\nprint(math.trunc(-x))\nprint(math.floor(-x))\nprint(math.ceil(-x))\nprint(math.modf(x))\nOutput\n3.141592653589793\u00a02.718281828459045\n1.2392336341465238\n720\n1.5357\n0.42898630314951025\n0.1863063842699079\n4.644575595215059\n1\n1\n2\n-1\n-2\n-1\n(0.5357000000000001,\u00a01.0)\nTips\nx\nfloor(\u00a0 ) rounds\u00a0 down\u00a0 towards\u00a0 negative\u00a0 infinity,\u00a0 ceil(\u00a0 ) rounds\u00a0 up\u00a0\ntowards\u00a0positive\u00a0infinity,\u00a0trunc(\u00a0) rounds\u00a0up\u00a0or\u00a0down\u00a0towards\u00a00.\nx\ntrunc(\u00a0) is\u00a0like\u00a0floor(\u00a0) for\u00a0positive\u00a0numbers.\nx\ntrunc(\u00a0) is\u00a0like\u00a0ceil(\u00a0) for\u00a0negative\u00a0numbers.\n____________________________________________________________________\nProblem\u00a03.6\nWrite\u00a0a\u00a0program\u00a0that\u00a0generates\u00a0float\u00a0and\u00a0integer\u00a0random\u00a0numbers.\nProgram\n#\u00a0random\u00a0number\u00a0operations\u00a0using\u00a0random\u00a0module\nimport\u00a0random\u00a0\n36\nLet\u00a0Us\u00a0Python\nimport\u00a0datetime\nrandom.seed(datetime.time(\u00a0))\nprint(random.random(\u00a0))\nprint(random.random(\u00a0))\nprint(random.randint(10,\u00a0100))\nOutput\n0.23796462709189137\n0.5442292252959519\n57\nTips\nx\nIt\u00a0is\u00a0necessary\u00a0to\u00a0im", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_71", "chunk_strategy": "fixed_size"}}, {"text": "port\u00a0datetime\nrandom.seed(datetime.time(\u00a0))\nprint(random.random(\u00a0))\nprint(random.random(\u00a0))\nprint(random.randint(10,\u00a0100))\nOutput\n0.23796462709189137\n0.5442292252959519\n57\nTips\nx\nIt\u00a0is\u00a0necessary\u00a0to\u00a0import\u00a0random module.\u00a0\nx\nIf\u00a0 we\u00a0seed\u00a0the\u00a0random\u00a0number\u00a0generation\u00a0logic\u00a0with\u00a0current\u00a0time,\u00a0\nwe\u00a0 get\u00a0 different\u00a0 random\u00a0 numbers\u00a0 on\u00a0 each\u00a0 execution\u00a0 of\u00a0 the\u00a0\nprogram.\u00a0\nx\nrandom.seed(\u00a0) with no\u00a0parameter\u00a0also\u00a0seeds\u00a0the\u00a0logic\u00a0with\u00a0current\u00a0\ntime.\n____________________________________________________________________\nProblem\u00a03.7\nHow\u00a0will\u00a0you\u00a0identify\u00a0which\u00a0of\u00a0the\u00a0following\u00a0is\u00a0a\u00a0string,\u00a0list,\u00a0tuple,\u00a0set\u00a0or\u00a0\ndictionary?\n{10,\u00a020,\u00a030.5}\n[1,\u00a02,\u00a03.14,\u00a0'Nagpur']\n{12 :\u00a0'Simple',\u00a043 :\u00a0'Complicated',\u00a013 :\u00a0'Complex'}\n\"Check\u00a0it\u00a0out!\"\n3\u00a0+\u00a02j\nProgram\n#\u00a0determine\u00a0type\u00a0of\u00a0data\nprint(type({10,\u00a020,\u00a030.5}))\nprint(type([1,\u00a02,\u00a03.14,\u00a0'Nagpur']))\nprint(type({12\u00a0:\u00a0'Simple',\u00a043\u00a0:\u00a0'Complicated',\u00a013\u00a0:\u00a0'Complex'}))\nprint(type(\"Check\u00a0it\u00a0out!\"))\nprint(type(3\u00a0+\u00a02j))\nChapter 3:\u00a0 Python Basics\u00a0\n37\nOutput\n<class\u00a0'set'>\n<class\u00a0'li", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_72", "chunk_strategy": "fixed_size"}}, {"text": "[1,\u00a02,\u00a03.14,\u00a0'Nagpur']))\nprint(type({12\u00a0:\u00a0'Simple',\u00a043\u00a0:\u00a0'Complicated',\u00a013\u00a0:\u00a0'Complex'}))\nprint(type(\"Check\u00a0it\u00a0out!\"))\nprint(type(3\u00a0+\u00a02j))\nChapter 3:\u00a0 Python Basics\u00a0\n37\nOutput\n<class\u00a0'set'>\n<class\u00a0'list'>\n<class\u00a0'dict'>\n<class\u00a0'str'>\n<class\u00a0'complex'>\nTips\nx\ntype(\u00a0) is\u00a0a\u00a0built-in\u00a0function\u00a0which\u00a0can\u00a0determine\u00a0type\u00a0of\u00a0any\u00a0data\u2014\nbuilt-in,\u00a0container\u00a0or\u00a0user-defined.\n____________________________________________________________________\n[A] Answer\u00a0the\u00a0following questions:\n(a) Write\u00a0a\u00a0program\u00a0that\u00a0swaps\u00a0the\u00a0values\u00a0of\u00a0variables\u00a0a and\u00a0b.\u00a0You\u00a0are\u00a0\nnot\u00a0allowed\u00a0to\u00a0use\u00a0a\u00a0third\u00a0variable.\u00a0You\u00a0are\u00a0not\u00a0allowed\u00a0to\u00a0perform\u00a0\narithmetic\u00a0on\u00a0a and\u00a0b.\n(b) Write\u00a0 a\u00a0 program\u00a0 that\u00a0 makes\u00a0 use\u00a0 of\u00a0 trigonometric\u00a0 functions\u00a0\navailable\u00a0in\u00a0math\u00a0module.\n(c)\nWrite\u00a0a\u00a0program\u00a0that\u00a0generates\u00a05\u00a0random\u00a0numbers\u00a0in\u00a0the\u00a0range\u00a010\u00a0\nto\u00a050.\u00a0Use\u00a0a\u00a0seed\u00a0value\u00a0of\u00a06.\u00a0Make\u00a0a\u00a0provision\u00a0to\u00a0change\u00a0this\u00a0seed\u00a0\nvalue\u00a0 every\u00a0 time\u00a0 you\u00a0execute\u00a0 the\u00a0 program\u00a0 by\u00a0 associating\u00a0it\u00a0 with\u00a0\ntime\u00a0of\u00a0execution?\n(d) Use\u00a0trunc(\u00a0),\u00a0floor(\u00a0) and\u00a0ceil(\u00a0) ", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_73", "chunk_strategy": "fixed_size"}}, {"text": "\nto\u00a050.\u00a0Use\u00a0a\u00a0seed\u00a0value\u00a0of\u00a06.\u00a0Make\u00a0a\u00a0provision\u00a0to\u00a0change\u00a0this\u00a0seed\u00a0\nvalue\u00a0 every\u00a0 time\u00a0 you\u00a0execute\u00a0 the\u00a0 program\u00a0 by\u00a0 associating\u00a0it\u00a0 with\u00a0\ntime\u00a0of\u00a0execution?\n(d) Use\u00a0trunc(\u00a0),\u00a0floor(\u00a0) and\u00a0ceil(\u00a0) for\u00a0numbers\u00a0-2.8,\u00a0-0.5,\u00a00.2,\u00a01.5\u00a0and\u00a0\n2.9\u00a0to\u00a0understand\u00a0the\u00a0difference\u00a0between\u00a0these\u00a0functions\u00a0clearly.\n(e) Assume\u00a0 a\u00a0 suitable\u00a0 value\u00a0 for\u00a0 temperature\u00a0 of\u00a0 a\u00a0 city\u00a0 in\u00a0 Fahrenheit\u00a0\ndegrees.\u00a0 Write\u00a0 a\u00a0 program\u00a0 to\u00a0 convert\u00a0 this\u00a0 temperature\u00a0 into\u00a0\nCentigrade\u00a0degrees\u00a0and\u00a0print\u00a0both\u00a0temperatures.\n(f)\nGiven\u00a0three\u00a0sides\u00a0a,\u00a0b,\u00a0c\u00a0of\u00a0a\u00a0triangle,\u00a0write\u00a0a\u00a0program\u00a0to\u00a0obtain\u00a0and\u00a0\nprint\u00a0the\u00a0 values\u00a0of\u00a0three\u00a0 angles\u00a0 rounded\u00a0to\u00a0the\u00a0next\u00a0integer.\u00a0Use\u00a0\nthe\u00a0formulae:\u00a0\na2 =\u00a0b2 +\u00a0c2 - 2bc cos\u00a0A,\u00a0b2 =\u00a0a2 +\u00a0c2 - 2ac\u00a0cos\u00a0B,\u00a0c2 =\u00a0a2 +\u00a0b2 - 2ab\u00a0cos\u00a0C\n38\nLet\u00a0Us\u00a0Python\n[B] How\u00a0will\u00a0you\u00a0perform\u00a0the\u00a0following\u00a0operations:\n(a) Print\u00a0imaginary\u00a0part\u00a0out\u00a0of\u00a02\u00a0+\u00a03j.\n(b) Obtain\u00a0conjugate\u00a0of\u00a04\u00a0+\u00a02j.\n(c) Print\u00a0decimal\u00a0equivalent\u00a0of\u00a0binary\u00a0'1100001110'.\n(d) Convert\u00a0a\u00a0float\u00a0value\u00a04.33\u00a0into a\u00a0numeric\u00a0string.\n(e) Obtain\u00a0intege", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_74", "chunk_strategy": "fixed_size"}}, {"text": "ns:\n(a) Print\u00a0imaginary\u00a0part\u00a0out\u00a0of\u00a02\u00a0+\u00a03j.\n(b) Obtain\u00a0conjugate\u00a0of\u00a04\u00a0+\u00a02j.\n(c) Print\u00a0decimal\u00a0equivalent\u00a0of\u00a0binary\u00a0'1100001110'.\n(d) Convert\u00a0a\u00a0float\u00a0value\u00a04.33\u00a0into a\u00a0numeric\u00a0string.\n(e) Obtain\u00a0integer\u00a0quotient\u00a0and\u00a0remainder\u00a0while\u00a0dividing\u00a029\u00a0with\u00a05.\n(f)\nObtain\u00a0hexadecimal\u00a0equivalent\u00a0of\u00a0decimal\u00a034567.\n(g) Round-off\u00a045.6782\u00a0to\u00a0second\u00a0decimal\u00a0place.\n(h) Obtain\u00a04\u00a0from\u00a03.556.\n(i)\nObtain\u00a017\u00a0from\u00a016.7844.\n(j)\nObtain\u00a0remainder\u00a0on\u00a0dividing\u00a03.45\u00a0with\u00a01.22.\n[C] Which\u00a0of\u00a0the\u00a0following\u00a0is\u00a0invalid\u00a0variable\u00a0name\u00a0and\u00a0why?\nBASICSALARY\n_basic\nbasic-hra\n#MEAN\ngroup.\n422\npop in\u00a02020\nover\u00a0\ntimemindovermatter SINGLE\nhELLO\nqueue.\nteam\u2019svictory\nPlot\u00a0#\u00a03\n2015_DDay\n[D] Evaluate\u00a0the\u00a0following\u00a0expressions:\n(a) 2\u00a0**\u00a06\u00a0//\u00a08\u00a0%\u00a02\n(b) 9\u00a0**\u00a02\u00a0//\u00a05\u00a0- 3\n(c) 10\u00a0+\u00a06\u00a0- 2\u00a0%\u00a03\u00a0+\u00a07\u00a0- 2\n(d) 5\u00a0%\u00a010\u00a0+\u00a010\u00a0-23\u00a0*\u00a04\u00a0//\u00a03\n(e) 5\u00a0+\u00a05\u00a0//\u00a05\u00a0- 5\u00a0*\u00a05\u00a0**\u00a05\u00a0%\u00a05\n(f) 7\u00a0%\u00a07\u00a0+\u00a07\u00a0//\u00a07\u00a0- 7\u00a0*\u00a07\n[E] Evaluate\u00a0the\u00a0following\u00a0expressions:\n(a) min(2,\u00a06,\u00a08,\u00a05)\n(b) bin(46)\n(c) round(10.544336,\u00a02)\n(d) math.hypot(6,\u00a08)\n(e) math.modf(3.1415)\n[F] Match\u00a0the\u00a0fol", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_75", "chunk_strategy": "fixed_size"}}, {"text": "- 5\u00a0*\u00a05\u00a0**\u00a05\u00a0%\u00a05\n(f) 7\u00a0%\u00a07\u00a0+\u00a07\u00a0//\u00a07\u00a0- 7\u00a0*\u00a07\n[E] Evaluate\u00a0the\u00a0following\u00a0expressions:\n(a) min(2,\u00a06,\u00a08,\u00a05)\n(b) bin(46)\n(c) round(10.544336,\u00a02)\n(d) math.hypot(6,\u00a08)\n(e) math.modf(3.1415)\n[F] Match\u00a0the\u00a0following pairs:\na.\u00a0 complex\n1.\u00a0 \\\nb.\u00a0 Escape\u00a0special\u00a0character\n2.\u00a0 Container\u00a0type\nc.\u00a0 Tuple\n3 Basic\u00a0type\nd. Natural\u00a0logarithm\n4.\u00a0log(\u00a0)\ne.\u00a0 Common\u00a0logarithmlog10(\u00a0)\n5.\u00a0log10(\u00a0)\nLet\u00a0Us\nPython\n39\nStrings\nx\nWhat\u00a0are\u00a0Strings?\nx\nString\u00a0Conversions\nx\nAccessing\u00a0String\u00a0Elements\nx\nString\u00a0Comparisons\nx\nString\u00a0Properties\nx\nPrograms\nx\nBuilt-in\u00a0Functions\nx\nExercises\nx\nString\u00a0Methods\n4\n\u201cPuppeting\u00a0on\u00a0strings...\u201d\n40\nLet\u00a0Us\u00a0Python\nWhat\u00a0are\u00a0Strings?\nx\nPython\u00a0string\u00a0is\u00a0a\u00a0collection\u00a0of\u00a0Unicode\u00a0characters.\nx\nPython\u00a0strings\u00a0can\u00a0be\u00a0enclosed\u00a0in\u00a0single,\u00a0double\u00a0or\u00a0triple\u00a0quotes.\n'BlindSpot'\n\"BlindSpot\"\n'\u00a0'\u00a0'BlindSpot'\u00a0'\u00a0'\n\"\"\"Blindspot\"\"\"\nx\nIf\u00a0 there\u00a0 are\u00a0 characters\u00a0 like\u00a0 '\u00a0 \"\u00a0 or\u00a0 \\ within\u00a0 a\u00a0 string,\u00a0 they\u00a0 can\u00a0 be\u00a0\nretained\u00a0in\u00a0two\u00a0ways:\n(a) Escape\u00a0them\u00a0by\u00a0preceding\u00a0them\u00a0with a\u00a0\\\n(b) Prepend\u00a0the\u00a0string\u00a0with\u00a0a\u00a0'r'\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_76", "chunk_strategy": "fixed_size"}}, {"text": "'\n\"\"\"Blindspot\"\"\"\nx\nIf\u00a0 there\u00a0 are\u00a0 characters\u00a0 like\u00a0 '\u00a0 \"\u00a0 or\u00a0 \\ within\u00a0 a\u00a0 string,\u00a0 they\u00a0 can\u00a0 be\u00a0\nretained\u00a0in\u00a0two\u00a0ways:\n(a) Escape\u00a0them\u00a0by\u00a0preceding\u00a0them\u00a0with a\u00a0\\\n(b) Prepend\u00a0the\u00a0string\u00a0with\u00a0a\u00a0'r'\u00a0indicating\u00a0that\u00a0it\u00a0is\u00a0a\u00a0raw\u00a0string\nmsg\u00a0=\u00a0'He\u00a0said,\u00a0\\'Let\u00a0Us\u00a0Python.\\''\nmsg\u00a0=\u00a0r'He\u00a0said,\u00a0'Let\u00a0Us\u00a0Python.''\nx\nMultiline\u00a0strings\u00a0can\u00a0be\u00a0created\u00a0in\u00a03\u00a0ways:\n-\nAll\u00a0but\u00a0the\u00a0last\u00a0line\u00a0ends\u00a0with\u00a0\\\n-\nEnclosed\u00a0within\u00a0\"\"\"some\u00a0msg\u00a0\"\"\"\u00a0 or\u00a0 '\u00a0'\u00a0'some\u00a0msg'\u00a0'\u00a0'\n-\n('one\u00a0msg'\n'another\u00a0msg')\nAccessing\u00a0String\u00a0Elements\nx\nString\u00a0elements\u00a0can\u00a0be\u00a0accessed\u00a0using\u00a0an\u00a0index\u00a0value,\u00a0starting\u00a0with\u00a0\n0.\u00a0Negative\u00a0index\u00a0value\u00a0is\u00a0allowed.\u00a0The\u00a0last\u00a0character\u00a0is\u00a0considered\u00a0\nto\u00a0be\u00a0 at\u00a0index\u00a0 -1.\u00a0Positive\u00a0and\u00a0negative\u00a0 indices\u00a0are\u00a0 show\u00a0in\u00a0Figure\n4.1.\n-5\n-4\n-3\n-2\n-1\nH\ne\nl\nl\no\n0\n1\n2\n3\n4\nFigure\u00a04.1\nChapter 4:\u00a0 Strings\u00a0\n41\nx\nExamples\u00a0of\u00a0positive\u00a0and\u00a0negative\u00a0indexing:\nmsg\u00a0=\u00a0'Hello'\na\u00a0=\u00a0msg[0]\n#\u00a0yields\u00a0H\nb\u00a0=\u00a0msg[4]\n#\u00a0yields\u00a0o\nc\u00a0=\u00a0msg[-0]\n#\u00a0yields\u00a0H,\u00a0-0\u00a0is\u00a0same\u00a0as\u00a00\nd\u00a0=\u00a0msg[-1]\n#\u00a0yields\u00a0o\ne =\u00a0msg[-2]\n#\u00a0yields\u00a0l\nf\u00a0=\u00a0msg[-5]\n#\u00a0yields\u00a0H", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_77", "chunk_strategy": "fixed_size"}}, {"text": "f\u00a0positive\u00a0and\u00a0negative\u00a0indexing:\nmsg\u00a0=\u00a0'Hello'\na\u00a0=\u00a0msg[0]\n#\u00a0yields\u00a0H\nb\u00a0=\u00a0msg[4]\n#\u00a0yields\u00a0o\nc\u00a0=\u00a0msg[-0]\n#\u00a0yields\u00a0H,\u00a0-0\u00a0is\u00a0same\u00a0as\u00a00\nd\u00a0=\u00a0msg[-1]\n#\u00a0yields\u00a0o\ne =\u00a0msg[-2]\n#\u00a0yields\u00a0l\nf\u00a0=\u00a0msg[-5]\n#\u00a0yields\u00a0H\nx\nA\u00a0sub-string\u00a0can\u00a0be\u00a0sliced\u00a0out\u00a0of\u00a0a\u00a0string.\ns[start\u00a0:\u00a0end]\u00a0- extract\u00a0from\u00a0start\u00a0to\u00a0end\u00a0- 1.\ns[start\u00a0:]\u00a0- extract\u00a0from\u00a0start\u00a0to\u00a0end.\ns[:\u00a0end]\u00a0- extract\u00a0from\u00a0start\u00a0to\u00a0end\u00a0- 1.\ns[-start\u00a0:]\u00a0- extract\u00a0from\u00a0-start\u00a0(included)\u00a0to\u00a0end.\ns[:\u00a0-end]\u00a0- extract\u00a0from\u00a0beginning\u00a0to\u00a0-end\u00a0- 1.\nx\nUsing\u00a0too\u00a0large\u00a0an\u00a0index\u00a0reports\u00a0an\u00a0error,\u00a0but\u00a0using\u00a0too\u00a0large\u00a0index\u00a0\nwhile\u00a0slicing\u00a0is\u00a0handled\u00a0elegantly.\nmsg\u00a0=\u00a0'Rafting'\nprint(msg[3:100])\u00a0\n#\u00a0prints\u00a0elements\u00a0from\u00a0't'\u00a0up\u00a0to\u00a0end\u00a0of\u00a0string\nprint(msg[100])\n#\u00a0error\u00a0since\u00a0100 th element\u00a0doesn't\u00a0exist\nString\u00a0Properties\nx\nPython\u00a0strings\u00a0are\u00a0immutable\u2014they\u00a0cannot\u00a0be\u00a0changed.\ns\u00a0=\u00a0'Hello'\ns[0]\u00a0=\u00a0'M'\u00a0\n#\u00a0rejected,\u00a0attempt\u00a0to\u00a0mutate\u00a0string\ns\u00a0=\u00a0'Bye'\u00a0\n#\u00a0s\u00a0is\u00a0a\u00a0variable,\u00a0it\u00a0can\u00a0change\nx\nStrings\u00a0can\u00a0be\u00a0concatenated\u00a0using\u00a0+.\nmsg3\u00a0=\u00a0ms1\u00a0+\u00a0msg2\nx\nStrings\u00a0can\u00a0be\u00a0replicated\u00a0during\u00a0pri", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_78", "chunk_strategy": "fixed_size"}}, {"text": "s\u00a0=\u00a0'Hello'\ns[0]\u00a0=\u00a0'M'\u00a0\n#\u00a0rejected,\u00a0attempt\u00a0to\u00a0mutate\u00a0string\ns\u00a0=\u00a0'Bye'\u00a0\n#\u00a0s\u00a0is\u00a0a\u00a0variable,\u00a0it\u00a0can\u00a0change\nx\nStrings\u00a0can\u00a0be\u00a0concatenated\u00a0using\u00a0+.\nmsg3\u00a0=\u00a0ms1\u00a0+\u00a0msg2\nx\nStrings\u00a0can\u00a0be\u00a0replicated\u00a0during\u00a0printing.\nprint('-',\u00a050)\u00a0\n#\u00a0prints\u00a050\u00a0dashes\nx\nWhether\u00a0one\u00a0string\u00a0is\u00a0part\u00a0of\u00a0another\u00a0can\u00a0be\u00a0found\u00a0out\u00a0using\u00a0in.\nprint('e'\u00a0in\u00a0'Hello')\u00a0\n#\u00a0prints\u00a0True\nprint('z'\u00a0in\u00a0'Hello')\n#\u00a0print\u00a0False\n42\nLet\u00a0Us\u00a0Python\nprint('lo'\u00a0in\u00a0'Hello')\n#\u00a0prints\u00a0True\nBuilt-in\u00a0Functions\nx\nSome\u00a0built-in\u00a0functions\u00a0can\u00a0be\u00a0used\u00a0with\u00a0a\u00a0string:\u00a0\nmsg\u00a0=\u00a0'Surreal'\nprint(len(msg))\u00a0\n#\u00a0prints\u00a07\u00a0- length\u00a0of\u00a0string\u00a0\nprint(min(msg))\n#\u00a0prints\u00a0S\u00a0- character\u00a0with\u00a0min\u00a0value\nprint(max(msg))\n#\u00a0prints\u00a0u\u00a0- character\u00a0with\u00a0max\u00a0value\nString\u00a0Methods\nx\nWhen\u00a0we\u00a0create\u00a0a\u00a0string a nameless object of\u00a0type\u00a0str is\u00a0created.\nmsg\u00a0=\u00a0'Surreal'\nprint(type(msg))\u00a0\n#\u00a0prints\u00a0<class\u00a0'str'>\nprint(id(msg))\n#\u00a0prints\u00a033720000\nAddress\u00a0 of\u00a0 the\u00a0 nameless\u00a0 str object\u00a0 is\u00a0 stored\u00a0 in\u00a0 msg.\u00a0 which\u00a0 is\u00a0\nreturned\u00a0by\u00a0the\u00a0built-in\u00a0id(\u00a0) function.\nx\nAn\u00a0 object\u00a0 of\u00a0 type\u00a0 str cont", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_79", "chunk_strategy": "fixed_size"}}, {"text": "prints\u00a0<class\u00a0'str'>\nprint(id(msg))\n#\u00a0prints\u00a033720000\nAddress\u00a0 of\u00a0 the\u00a0 nameless\u00a0 str object\u00a0 is\u00a0 stored\u00a0 in\u00a0 msg.\u00a0 which\u00a0 is\u00a0\nreturned\u00a0by\u00a0the\u00a0built-in\u00a0id(\u00a0) function.\nx\nAn\u00a0 object\u00a0 of\u00a0 type\u00a0 str contains\u00a0 methods\u00a0 using\u00a0 which\u00a0 it\u00a0 can\u00a0 be\u00a0\naccessed\u00a0and\u00a0modified.\u00a0These\u00a0methods can\u00a0be\u00a0called\u00a0using\u00a0a syntax\u00a0\nsimilar\u00a0to\u00a0calling\u00a0a\u00a0function\u00a0in\u00a0a\u00a0module\u00a0as\u00a0shown\u00a0below:\nimport\u00a0random\nnum\u00a0=\u00a0random.randint(1,\u00a025)\n#\u00a0syntax\u00a0 module.function(\u00a0)\ns\u00a0=\u00a0 'Hello'\u00a0\ns.upper(\u00a0)\n#\u00a0syntax\u00a0 string.method(\u00a0)\nx\nDifferent\u00a0categories\u00a0of\u00a0string\u00a0methods are\u00a0given\u00a0below.\n#\u00a0content\u00a0test\u00a0functions\u00a0\nisalpha(\u00a0)\u00a0- checks\u00a0if\u00a0all\u00a0characters\u00a0in\u00a0string\u00a0are\u00a0alphabets.\nisdigit(\u00a0)\u00a0- checks\u00a0if\u00a0all\u00a0characters\u00a0in\u00a0string\u00a0are\u00a0digits.\nisalnum( ) - checks\u00a0if\u00a0all\u00a0characters\u00a0in\u00a0string\u00a0are\u00a0alphabets\u00a0or\u00a0digits.\nislower( )\u00a0- checks\u00a0if\u00a0all\u00a0characters\u00a0in\u00a0string\u00a0are\u00a0lowercase\u00a0alphabets.\nisupper( )\u00a0- checks\u00a0if all\u00a0characters\u00a0in\u00a0string\u00a0are\u00a0uppercase\u00a0alphabets.\nstartswith( ) - checks\u00a0if\u00a0string\u00a0starts\u00a0with\u00a0a\u00a0value.\nendswith( ) - checks\u00a0if\u00a0string", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_80", "chunk_strategy": "fixed_size"}}, {"text": "racters\u00a0in\u00a0string\u00a0are\u00a0lowercase\u00a0alphabets.\nisupper( )\u00a0- checks\u00a0if all\u00a0characters\u00a0in\u00a0string\u00a0are\u00a0uppercase\u00a0alphabets.\nstartswith( ) - checks\u00a0if\u00a0string\u00a0starts\u00a0with\u00a0a\u00a0value.\nendswith( ) - checks\u00a0if\u00a0string\u00a0ends\u00a0with\u00a0a\u00a0value.\n#\u00a0search\u00a0and\u00a0replace\nfind(\u00a0) - searches\u00a0for\u00a0a\u00a0value,\u00a0returns\u00a0its\u00a0position.\nreplace(\u00a0) - replace\u00a0one value\u00a0with\u00a0another.\nChapter 4:\u00a0 Strings\u00a0\n43\n#\u00a0trims\u00a0whitespace\nlstrip(\u00a0)\u00a0- removes\u00a0whitespace\u00a0from\u00a0the\u00a0left\u00a0of\u00a0string\u00a0including\u00a0\\t.\nrstrip(\u00a0) - removes\u00a0whitespace\u00a0from\u00a0the\u00a0right\u00a0of\u00a0string\u00a0including\u00a0\\t.\nstrip(\u00a0)\u00a0- removes\u00a0whitespace\u00a0from\u00a0left\u00a0and\u00a0right\n#\u00a0split\u00a0and\u00a0partition\nsplit(\u00a0) - split\u00a0the\u00a0string\u00a0at\u00a0a\u00a0specified\u00a0separator\u00a0string.\npartition(\u00a0 )\u00a0 - partitions\u00a0 string\u00a0 into\u00a0 3\u00a0 parts\u00a0 at\u00a0 first\u00a0 occurrence\u00a0 of\u00a0\nspecified\u00a0string.\n#\u00a0join\u00a0- different\u00a0than\u00a0concatenation.\u00a0It\u00a0joins\u00a0string\u00a0to\u00a0each\u00a0element\u00a0\nof\u00a0string1\u00a0except\u00a0last.\u00a0\njoin(string1)\u00a0\nx\nFollowing\u00a0program\u00a0shows\u00a0how\u00a0to\u00a0use\u00a0the\u00a0string\u00a0methods:\nmsg\u00a0=\u00a0'Hello'\nprint(msg.replace('l',\u00a0'L'))\n#\u00a0replaces\u00a0l\u00a0with\u00a0L\u00a0in\u00a0Hello\nprint(", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_81", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0string\u00a0to\u00a0each\u00a0element\u00a0\nof\u00a0string1\u00a0except\u00a0last.\u00a0\njoin(string1)\u00a0\nx\nFollowing\u00a0program\u00a0shows\u00a0how\u00a0to\u00a0use\u00a0the\u00a0string\u00a0methods:\nmsg\u00a0=\u00a0'Hello'\nprint(msg.replace('l',\u00a0'L'))\n#\u00a0replaces\u00a0l\u00a0with\u00a0L\u00a0in\u00a0Hello\nprint(\"-\".join(\"Hello\"))\n#\u00a0prints\u00a0H-e-l-l-o\nString\u00a0Conversions\nx\nTwo\u00a0types\u00a0of\u00a0string\u00a0conversions\u00a0are\u00a0required\u00a0frequently:\n-\nConverting\u00a0the\u00a0case\u00a0of\u00a0characters\u00a0in\u00a0string\n-\nConverting\u00a0numbers\u00a0to\u00a0string\u00a0and\u00a0vice\u00a0versa\nx\nCase\u00a0conversions can\u00a0be\u00a0done\u00a0using\u00a0str methods:\nupper(\u00a0)\u00a0- converts\u00a0string\u00a0to\u00a0uppercase.\u00a0\nlower(\u00a0)\u00a0- converts\u00a0string\u00a0to\u00a0uppercase.\ncapitalize( ) - converts\u00a0first\u00a0character\u00a0of\u00a0string\u00a0to\u00a0uppercase.\ntitle(\u00a0)\u00a0- converts\u00a0first\u00a0character\u00a0of\u00a0each\u00a0word\u00a0to\u00a0uppercase.\nswapcase( ) - swap\u00a0cases\u00a0in\u00a0the\u00a0string.\nmsg\u00a0=\u00a0'Hello'\nprint(msg.upper(\u00a0))\n#\u00a0prints\u00a0HELLO\nprint('Hello'.upper(\u00a0))\n#\u00a0prints\u00a0HELLO\nx\nBuilt-in\u00a0functions\u00a0are\u00a0used\u00a0for string\u00a0to\u00a0number\u00a0conversions and\u00a0vice\u00a0\nversa:\nstr(\u00a0)\u00a0- converts\u00a0an\u00a0int,\u00a0float\u00a0or\u00a0complex\u00a0to\u00a0string\nint(\u00a0)\u00a0- converts\u00a0a\u00a0numeric\u00a0string\u00a0to\u00a0int\nfloat(\u00a0)\u00a0- converts\u00a0a\u00a0numeri", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_82", "chunk_strategy": "fixed_size"}}, {"text": "uilt-in\u00a0functions\u00a0are\u00a0used\u00a0for string\u00a0to\u00a0number\u00a0conversions and\u00a0vice\u00a0\nversa:\nstr(\u00a0)\u00a0- converts\u00a0an\u00a0int,\u00a0float\u00a0or\u00a0complex\u00a0to\u00a0string\nint(\u00a0)\u00a0- converts\u00a0a\u00a0numeric\u00a0string\u00a0to\u00a0int\nfloat(\u00a0)\u00a0- converts\u00a0a\u00a0numeric\u00a0string\u00a0to\u00a0float\n44\nLet\u00a0Us\u00a0Python\ncomplex(\u00a0)\u00a0- converts\u00a0a\u00a0numeric\u00a0string\u00a0to\u00a0complex\nx\nThe\u00a0built-in\u00a0function\u00a0chr(\u00a0) returns\u00a0a\u00a0string representing\u00a0its\u00a0Unicode\u00a0\nvalue\u00a0(known\u00a0as\u00a0code\u00a0point).\u00a0ord(\u00a0) does\u00a0the\u00a0reverse.\nx\nFollowing\u00a0program\u00a0shows\u00a0how\u00a0to\u00a0use\u00a0the\u00a0conversion\u00a0functions:\nage\u00a0=\u00a025\nprint('She\u00a0is '\u00a0+\u00a0str(age)\u00a0+\u00a0'\u00a0years\u00a0old')\ni\u00a0=\u00a0int(\"34\")\nf\u00a0=\u00a0float(\"3.14\")\nc\u00a0=\u00a0complex(\"3+2j\")\u00a0\n#\u00a0\"3\u00a0+\u00a02j\"\u00a0would\u00a0be\u00a0a\u00a0malformed\u00a0string\nprint(ord('A'))\n#\u00a0prints\u00a065\u00a0\nprint(chr(65))\u00a0\n#\u00a0prints\u00a0A\nString\u00a0Comparison\nx\nTwo\u00a0strings\u00a0can\u00a0be\u00a0compared\u00a0using\u00a0operators\u00a0==,\u00a0!=,\u00a0<,\u00a0>,\u00a0<=,\u00a0>=.\u00a0This\u00a0\nis\u00a0shown\u00a0in\u00a0the\u00a0following\u00a0program:\ns1\u00a0=\u00a0\"Bombay\"\u00a0\ns2\u00a0=\u00a0\"bombay\"\ns3\u00a0=\u00a0\"Nagpur\"\ns4\u00a0=\u00a0\"Bombaywala\"\ns5\u00a0=\u00a0\"Bombay\"\nprint(s1\u00a0==\u00a0s2)\n#\u00a0displays\u00a0False\nprint(s1\u00a0==\u00a0s5)\n#\u00a0displays\u00a0True\nprint(s1\u00a0!=\u00a0s3)\n#\u00a0displays\u00a0True\nprint(s1\u00a0>\u00a0s5)\n#\u00a0displays", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_83", "chunk_strategy": "fixed_size"}}, {"text": "m:\ns1\u00a0=\u00a0\"Bombay\"\u00a0\ns2\u00a0=\u00a0\"bombay\"\ns3\u00a0=\u00a0\"Nagpur\"\ns4\u00a0=\u00a0\"Bombaywala\"\ns5\u00a0=\u00a0\"Bombay\"\nprint(s1\u00a0==\u00a0s2)\n#\u00a0displays\u00a0False\nprint(s1\u00a0==\u00a0s5)\n#\u00a0displays\u00a0True\nprint(s1\u00a0!=\u00a0s3)\n#\u00a0displays\u00a0True\nprint(s1\u00a0>\u00a0s5)\n#\u00a0displays\u00a0False\nprint(s1\u00a0<\u00a0s2)\n#\u00a0displays\u00a0True\nprint(s1\u00a0<=\u00a0s4)\n#\u00a0displays\u00a0True\nx\nString\u00a0 comparison\u00a0 is\u00a0 done\u00a0 in\u00a0 lexicographical\u00a0 order\u00a0 (alphabetical)\u00a0\ncharacter\u00a0by\u00a0character.\u00a0Capitals\u00a0are\u00a0considered\u00a0to\u00a0be\u00a0less\u00a0than\u00a0their\u00a0\nlowercase\u00a0 counterparts.\u00a0 Result\u00a0 of\u00a0 comparison\u00a0 operation\u00a0 is\u00a0 either\u00a0\nTrue\u00a0or\u00a0False.\nx\nNote\u00a0 that\u00a0 there\u00a0is\u00a0only\u00a0 one\u00a0 str object containing \"Bombay\",\u00a0so\u00a0s1\nand\u00a0s5 both\u00a0contain\u00a0the\u00a0same\u00a0address.\n____________________________________________________________________\nChapter 4:\u00a0 Strings\u00a0\n45\nProblem\u00a04.1\nDemonstrate\u00a0how\u00a0to\u00a0create\u00a0simple\u00a0and\u00a0multi-line\u00a0strings\u00a0and\u00a0whether\u00a0a\u00a0\nstring\u00a0 can\u00a0 change\u00a0 after\u00a0 creation.\u00a0 Also\u00a0 show\u00a0 the\u00a0 usage\u00a0 of\u00a0 built-in\u00a0\nfunctions\u00a0len(\u00a0),\u00a0min(\u00a0) and\u00a0max(\u00a0) on\u00a0a\u00a0string.\nProgram\n#\u00a0simple\u00a0strings\nmsg1\u00a0=\u00a0'Hoopla'\u00a0\nprint(msg1)\n#\u00a0strings\u00a0with\u00a0special\u00a0charac", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_84", "chunk_strategy": "fixed_size"}}, {"text": "an\u00a0 change\u00a0 after\u00a0 creation.\u00a0 Also\u00a0 show\u00a0 the\u00a0 usage\u00a0 of\u00a0 built-in\u00a0\nfunctions\u00a0len(\u00a0),\u00a0min(\u00a0) and\u00a0max(\u00a0) on\u00a0a\u00a0string.\nProgram\n#\u00a0simple\u00a0strings\nmsg1\u00a0=\u00a0'Hoopla'\u00a0\nprint(msg1)\n#\u00a0strings\u00a0with\u00a0special\u00a0characters\nmsg2\u00a0=\u00a0'He\u00a0said,\u00a0\\'Let\u00a0Us\u00a0Python\\'.'\nfile1\u00a0=\u00a0'C:\\\\temp\\\\newfile'\nfile2\u00a0=\u00a0r'C:\\temp\\newfile' #\u00a0raw\u00a0string\u00a0- prepend\u00a0r\nprint(msg2)\nprint(file1)\nprint(file2)\n#\u00a0multiline\u00a0strings\n#\u00a0whitespace\u00a0at\u00a0beginning\u00a0of\u00a0second\u00a0line\u00a0becomes\u00a0part\u00a0of\u00a0string\nmsg3\u00a0=\u00a0'What\u00a0is\u00a0this\u00a0life\u00a0if\u00a0full\u00a0of\u00a0care...\\\nWe\u00a0have\u00a0no\u00a0time\u00a0to\u00a0stand\u00a0and\u00a0stare'\n#\u00a0enter\u00a0at\u00a0the\u00a0end\u00a0of\u00a0first\u00a0line\u00a0becomes\u00a0part\u00a0of\u00a0string\nmsg4\u00a0=\u00a0\"\"\"What\u00a0is\u00a0this\u00a0life\u00a0if\u00a0full\u00a0of\u00a0care...\nWe\u00a0have\u00a0no\u00a0time\u00a0to\u00a0stand\u00a0and\u00a0stare\"\"\"\n#\u00a0strings\u00a0are\u00a0concatenated\u00a0properly.(\u00a0)\u00a0necessary\nmsg5\u00a0=\u00a0('What\u00a0is\u00a0this\u00a0life\u00a0if\u00a0full\u00a0of\u00a0care...'\n'We\u00a0have\u00a0no\u00a0time\u00a0to\u00a0stand\u00a0and\u00a0stare')\nprint(msg3)\nprint(msg4)\nprint(msg5)\n#\u00a0string\u00a0replication\u00a0during\u00a0printing\nmsg6\u00a0=\u00a0'MacLearn!!'\nprint(msg1\u00a0*\u00a03)\n#\u00a0immutability\u00a0of\u00a0strings\n#\u00a0Utopia\u00a0cannot\u00a0change,\u00a0msg7\u00a0can\n46\nLet\u00a0Us\u00a0Python\nmsg7\u00a0=\u00a0'Utopi", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_85", "chunk_strategy": "fixed_size"}}, {"text": ")\nprint(msg3)\nprint(msg4)\nprint(msg5)\n#\u00a0string\u00a0replication\u00a0during\u00a0printing\nmsg6\u00a0=\u00a0'MacLearn!!'\nprint(msg1\u00a0*\u00a03)\n#\u00a0immutability\u00a0of\u00a0strings\n#\u00a0Utopia\u00a0cannot\u00a0change,\u00a0msg7\u00a0can\n46\nLet\u00a0Us\u00a0Python\nmsg7\u00a0=\u00a0'Utopia'\nmsg8\u00a0=\u00a0'Today!!!'\nmsg7\u00a0=\u00a0msg7\u00a0+\u00a0msg8\u00a0 #\u00a0concatenation\u00a0using\u00a0+\nprint(msg7)\n#\u00a0use\u00a0of\u00a0built-in\u00a0functions\u00a0on\u00a0strings\nprint(len('Hoopla'))\nprint(min('Hoopla'))\nprint(max('Hoopla'))\nOutput\nHoopla\nHe\u00a0said,\u00a0'Let\u00a0Us\u00a0Python'.\nC:\\temp\\newfile\nC:\\temp\\newfile\nWhat\u00a0is\u00a0this\u00a0life\u00a0if\u00a0full\u00a0of\u00a0care...\u00a0\nWe\u00a0have\u00a0no\u00a0time\u00a0to\u00a0stand\u00a0and\u00a0stare\nWhat\u00a0is\u00a0this\u00a0life\u00a0if\u00a0full\u00a0of\u00a0care...\nWe\u00a0have\u00a0no\u00a0time\u00a0to\u00a0stand\u00a0and\u00a0stare\nWhat\u00a0is\u00a0this\u00a0life\u00a0if\u00a0full\u00a0of\u00a0care...We\u00a0have\u00a0no\u00a0time\u00a0to\u00a0stand\u00a0and\u00a0stare\nHooplaHooplaHoopla\nUtopiaToday!!!\n6\nH\np\nTips\nx\nSpecial\u00a0 characters\u00a0 can\u00a0 be\u00a0 retained\u00a0 in\u00a0 a\u00a0 string\u00a0 by\u00a0 either\u00a0 escaping\u00a0\nthem\u00a0or\u00a0by\u00a0marking\u00a0the\u00a0string\u00a0as\u00a0a\u00a0raw\u00a0string.\nx\nStrings\u00a0cannot\u00a0change,\u00a0but\u00a0the\u00a0variables\u00a0that\u00a0store\u00a0them\u00a0can.\nx\nlen(\u00a0) returns\u00a0the\u00a0number\u00a0of\u00a0characters\u00a0present\u00a0in\u00a0string. min(\u00a0) and\u00a0\nmax(\u00a0 ) return\u00a0the\u00a0 chara", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_86", "chunk_strategy": "fixed_size"}}, {"text": "y\u00a0marking\u00a0the\u00a0string\u00a0as\u00a0a\u00a0raw\u00a0string.\nx\nStrings\u00a0cannot\u00a0change,\u00a0but\u00a0the\u00a0variables\u00a0that\u00a0store\u00a0them\u00a0can.\nx\nlen(\u00a0) returns\u00a0the\u00a0number\u00a0of\u00a0characters\u00a0present\u00a0in\u00a0string. min(\u00a0) and\u00a0\nmax(\u00a0 ) return\u00a0the\u00a0 character\u00a0with\u00a0minimum\u00a0 and\u00a0maximum\u00a0Unicode\u00a0\nvalue\u00a0from\u00a0the\u00a0string.\n____________________________________________________________________\nProblem\u00a04.2\nFor\u00a0a\u00a0given\u00a0string\u00a0'Bamboozled',\u00a0write\u00a0a\u00a0program\u00a0to\u00a0obtain\u00a0the\u00a0following\u00a0\noutput:\nChapter 4:\u00a0 Strings\u00a0\n47\nB\u00a0a\ne\u00a0d\ne\u00a0d\nmboozled\nmboozled\nmboozled\nBamboo\nBamboo\nBamboo\nBamboo\ndelzoobmaB\nBamboozled\nBmoze\nBbzd\nBoe\nBamboozledHype!\nBambooMonger!\nUse\u00a0multiple\u00a0ways\u00a0to\u00a0get\u00a0any\u00a0of\u00a0the\u00a0above\u00a0outputs.\nProgram\ns\u00a0=\u00a0'Bamboozled'\n#\u00a0extract\u00a0B\u00a0a\nprint(s[0],\u00a0s[1])\nprint(s[-10],\u00a0s[-9])\n#\u00a0extract\u00a0e\u00a0d\nprint(s[8],\u00a0s[9])\nprint(s[-2],\u00a0s[-1])\n#\u00a0extract\u00a0mboozled\nprint(s[2:10])\nprint(s[2:])\nprint(s[-8:])\n#\u00a0extract\u00a0Bamboo\nprint(s[0:6])\nprint(s[:6])\nprint(s[-10:-4])\nprint(s[:-4])\n#\u00a0reverse\u00a0Bamboozled\n48\nLet\u00a0Us\u00a0Python\nprint([::-1])\nprint(s[0:10:1])\nprint(s[0:10:2])\nprint(s[0:10:", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_87", "chunk_strategy": "fixed_size"}}, {"text": "rint(s[2:])\nprint(s[-8:])\n#\u00a0extract\u00a0Bamboo\nprint(s[0:6])\nprint(s[:6])\nprint(s[-10:-4])\nprint(s[:-4])\n#\u00a0reverse\u00a0Bamboozled\n48\nLet\u00a0Us\u00a0Python\nprint([::-1])\nprint(s[0:10:1])\nprint(s[0:10:2])\nprint(s[0:10:3])\nprint(s[0:10:4])\ns\u00a0=\u00a0s\u00a0+\u00a0'Hype!'\u00a0\nprint(s)\ns\u00a0=\u00a0s[:6]\u00a0+\u00a0'Monger'\u00a0+\u00a0s[-1]\u00a0\nprint(s)\nTips\nx\nSpecial\u00a0 characters\u00a0 can\u00a0 be\u00a0 retained\u00a0 in\u00a0 a\u00a0 string\u00a0 by\u00a0 either\u00a0 escaping\u00a0\nthem\u00a0or\u00a0by\u00a0marking\u00a0the\u00a0string\u00a0as\u00a0a\u00a0raw\u00a0string.\nx\ns[4:8] is\u00a0same\u00a0as\u00a0s[4:8:1],\u00a0where\u00a01\u00a0is\u00a0the\u00a0default.\nx\ns[4:8:2]\u00a0 returns a\u00a0character,\u00a0then\u00a0move\u00a0forward\u00a02\u00a0positions,\u00a0etc.\n____________________________________________________________________\nProblem\u00a04.3\nFor\u00a0the following\u00a0strings\u00a0find\u00a0out\u00a0which\u00a0are\u00a0having\u00a0only\u00a0alphabets,\u00a0which\u00a0\nare\u00a0numeric,\u00a0which\u00a0 are\u00a0alphanumeric,\u00a0 which\u00a0are\u00a0 lowercase,\u00a0which\u00a0 are\u00a0\nuppercase.\u00a0Also\u00a0find\u00a0out\u00a0whether\u00a0'And\u00a0Quiet\u00a0Flows\u00a0The\u00a0Don'\u00a0begins\u00a0with\u00a0\n'And'\u00a0or\u00a0ends\u00a0with\u00a0'And'\u00a0:\u00a0\n'NitiAayog'\n'And\u00a0Quiet Flows\u00a0The\u00a0Don'\n'1234567890'\n'Make\u00a0$1000\u00a0a\u00a0day'\nProgram\ns1\u00a0=\u00a0'NitiAayog'\ns2\u00a0=\u00a0'And\u00a0Quiet\u00a0Flows\u00a0The\u00a0Don'\ns3\u00a0=\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_88", "chunk_strategy": "fixed_size"}}, {"text": "r\u00a0'And\u00a0Quiet\u00a0Flows\u00a0The\u00a0Don'\u00a0begins\u00a0with\u00a0\n'And'\u00a0or\u00a0ends\u00a0with\u00a0'And'\u00a0:\u00a0\n'NitiAayog'\n'And\u00a0Quiet Flows\u00a0The\u00a0Don'\n'1234567890'\n'Make\u00a0$1000\u00a0a\u00a0day'\nProgram\ns1\u00a0=\u00a0'NitiAayog'\ns2\u00a0=\u00a0'And\u00a0Quiet\u00a0Flows\u00a0The\u00a0Don'\ns3\u00a0=\u00a0'1234567890'\ns4\u00a0=\u00a0'Make\u00a0$1000\u00a0a\u00a0day'\nprint('s1\u00a0=\u00a0',\u00a0s1)\nprint('s2\u00a0=\u00a0',\u00a0s2)\nprint('s3\u00a0=\u00a0',\u00a0s3)\nprint('s4\u00a0=\u00a0',\u00a0s4)\nChapter 4:\u00a0 Strings\u00a0\n49\n#\u00a0Content\u00a0test\u00a0functions\u00a0\nprint('check\u00a0isalpha\u00a0on\u00a0s1,\u00a0s2')\nprint(s1.isalpha(\u00a0))\nprint(s2.isalpha(\u00a0))\nprint('check\u00a0isdigit\u00a0on\u00a0s3,\u00a0s4')\nprint(s3.isdigit(\u00a0))\nprint(s4.isdigit(\u00a0))\nprint('check\u00a0isalnum\u00a0on\u00a0s1,\u00a0s2,\u00a0s3,\u00a0s4')\nprint(s1.isalnum(\u00a0))\nprint(s2.isalnum(\u00a0))\nprint(s3.isalnum(\u00a0))\nprint(s4.isalnum(\u00a0))\nprint('check\u00a0islower\u00a0on\u00a0s1,\u00a0s2')\nprint(s1.islower(\u00a0))\nprint(s2.islower(\u00a0))\nprint('check\u00a0isupper\u00a0on\u00a0s1,\u00a0s2')\nprint(s1.isupper(\u00a0))\nprint(s2.isupper(\u00a0))\nprint('check\u00a0startswith\u00a0and\u00a0endswith\u00a0on\u00a0s2')\nprint(s2.startswith('And'))\nprint(s2.endswith('And'))\nOutput\ns1\u00a0=\u00a0 NitiAayog\ns2\u00a0=\u00a0 And\u00a0Quiet\u00a0Flows\u00a0The\u00a0Don\ns3\u00a0=\u00a0 1234567890\ns4\u00a0=\u00a0 Make\u00a0$1000\u00a0a\u00a0day\ncheck\u00a0isalpha\u00a0on\u00a0s1,", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_89", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0startswith\u00a0and\u00a0endswith\u00a0on\u00a0s2')\nprint(s2.startswith('And'))\nprint(s2.endswith('And'))\nOutput\ns1\u00a0=\u00a0 NitiAayog\ns2\u00a0=\u00a0 And\u00a0Quiet\u00a0Flows\u00a0The\u00a0Don\ns3\u00a0=\u00a0 1234567890\ns4\u00a0=\u00a0 Make\u00a0$1000\u00a0a\u00a0day\ncheck\u00a0isalpha\u00a0on\u00a0s1,\u00a0s2\nTrue\nFalse\ncheck\u00a0isdigit\u00a0on\u00a0s3,\u00a0s4\nTrue\nFalse\ncheck\u00a0isalnum\u00a0on\u00a0s1,\u00a0s2,\u00a0s3,\u00a0s4\n50\nLet\u00a0Us\u00a0Python\nTrue\nFalse\nTrue\nFalse\ncheck\u00a0islower\u00a0on\u00a0s1,\u00a0s2\nFalse\nFalse\ncheck\u00a0isupper\u00a0on\u00a0s1,\u00a0s2\nFalse\nFalse\ncheck\u00a0startswith\u00a0and\u00a0endswith\u00a0on\u00a0s2\nTrue\nFalse\n____________________________________________________________________\nProblem\u00a04.4\nGiven\u00a0the\u00a0following\u00a0string:\n'Bring\u00a0It\u00a0On'\n'\nFlanked\u00a0by\u00a0spaces\u00a0on\u00a0either\u00a0side\u00a0 '\n'C:\\\\Users\\\\Kanetkar\\\\Documents'\nwrite\u00a0 a\u00a0 program\u00a0 to\u00a0 produce\u00a0 the\u00a0 following\u00a0 output\u00a0 using\u00a0 appropriate\u00a0\nstring\u00a0functions.\nBRING\u00a0IT\u00a0ON\nbring\u00a0it\u00a0on\nBring\u00a0it\u00a0on\nBring\u00a0It\u00a0On\nbRING\u00a0iT\u00a0oN\n6\n9\nBring\u00a0Him\u00a0On\nFlanked\u00a0by\u00a0spaces\u00a0on\u00a0either\u00a0side\u00a0\nFlanked\u00a0by\u00a0spaces\u00a0on\u00a0either\u00a0side\n['C:',\u00a0'Users',\u00a0'Kanetkar',\u00a0'Documents']\n('C:',\u00a0'\\\\',\u00a0'Users\\\\Kanetkar\\\\Documents')\nProgram\ns1 =\u00a0'Bring\u00a0It\u00a0On'\n#\u00a0Conversions\u00a0\nCh", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_90", "chunk_strategy": "fixed_size"}}, {"text": "m\u00a0On\nFlanked\u00a0by\u00a0spaces\u00a0on\u00a0either\u00a0side\u00a0\nFlanked\u00a0by\u00a0spaces\u00a0on\u00a0either\u00a0side\n['C:',\u00a0'Users',\u00a0'Kanetkar',\u00a0'Documents']\n('C:',\u00a0'\\\\',\u00a0'Users\\\\Kanetkar\\\\Documents')\nProgram\ns1 =\u00a0'Bring\u00a0It\u00a0On'\n#\u00a0Conversions\u00a0\nChapter 4:\u00a0 Strings\u00a0\n51\nprint(s1.upper(\u00a0))\nprint(s1.lower(\u00a0))\nprint(s1.capitalize(\u00a0))\nprint(s1.title(\u00a0))\nprint(s1.swapcase(\u00a0))\n#\u00a0search\u00a0and\u00a0replace\nprint(s1.find('I'))\nprint(s1.find('On'))\nprint(s1.replace('It',\u00a0'Him'))\n#\u00a0trimming\ns2\u00a0=\u00a0'\nFlanked\u00a0by\u00a0spaces\u00a0on\u00a0either\u00a0side\u00a0 '\nprint(s2.lstrip(\u00a0))\nprint(s2.rstrip(\u00a0))\n#\u00a0splitting\ns3\u00a0=\u00a0'C:\\\\Users\\\\Kanetkar\\\\Documents'\nprint(s3.split('\\\\'))\nprint(s3.partition('\\\\'))\n____________________________________________________________________\nProblem\u00a04.5\nFind\u00a0 all\u00a0 occurrences\u00a0 of\u00a0 'T'\u00a0 in\u00a0 the\u00a0 string\u00a0 'The\u00a0 Terrible\u00a0 Tiger\u00a0 Tore\u00a0 The\u00a0\nTowel'. Replace\u00a0all\u00a0occurrences\u00a0of\u00a0'T'\u00a0with\u00a0't'.\nProgram\ns\u00a0=\u00a0'The\u00a0Terrible\u00a0Tiger\u00a0Tore\u00a0The\u00a0Towel'\npos\u00a0=\u00a0s.find('T',\u00a00)\nprint(pos,\u00a0s[pos])\npos\u00a0=\u00a0s.find('T',\u00a0pos\u00a0+\u00a01)\nprint(pos,\u00a0s[pos])\npos\u00a0=\u00a0s.find('T',\u00a0pos\u00a0+\u00a01)\nprint(pos,\u00a0s[po", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_91", "chunk_strategy": "fixed_size"}}, {"text": "rences\u00a0of\u00a0'T'\u00a0with\u00a0't'.\nProgram\ns\u00a0=\u00a0'The\u00a0Terrible\u00a0Tiger\u00a0Tore\u00a0The\u00a0Towel'\npos\u00a0=\u00a0s.find('T',\u00a00)\nprint(pos,\u00a0s[pos])\npos\u00a0=\u00a0s.find('T',\u00a0pos\u00a0+\u00a01)\nprint(pos,\u00a0s[pos])\npos\u00a0=\u00a0s.find('T',\u00a0pos\u00a0+\u00a01)\nprint(pos,\u00a0s[pos])\npos\u00a0=\u00a0s.find('T',\u00a0pos\u00a0+\u00a01)\nprint(pos,\u00a0s[pos])\npos\u00a0=\u00a0s.find('T',\u00a0pos\u00a0+\u00a01)\nprint(pos,\u00a0s[pos])\npos =\u00a0s.find('T',\u00a0pos\u00a0+\u00a01)\nprint(pos,\u00a0s[pos])\n52\nLet\u00a0Us\u00a0Python\npos\u00a0=\u00a0s.find('T',\u00a0pos\u00a0+\u00a01)\nprint(pos)\nc\u00a0=\u00a0s.count('T')\ns\u00a0=\u00a0s.replace('T',\u00a0't',\u00a0c)\nprint(s)\nOutput\n0\u00a0T\n4\u00a0T\n13\u00a0T\n19\u00a0T\n24\u00a0T\n28\u00a0T\n-1\nthe\u00a0terrible\u00a0tiger\u00a0tore\u00a0the\u00a0towel\nTips\nx\nFirst\u00a0call\u00a0to\u00a0search(\u00a0) returns\u00a0the\u00a0position\u00a0where\u00a0first\u00a0'T'\u00a0is\u00a0found.\u00a0To\u00a0\nsearch\u00a0subsequent\u00a0'T'\u00a0search\u00a0is\u00a0started\u00a0from\u00a0pos\u00a0+\u00a01.\u00a0\nx\nWhen\u00a0'T'\u00a0is\u00a0not\u00a0found\u00a0search(\u00a0) returns\u00a0-1.\nx\ncount(\u00a0) returns\u00a0the\u00a0number\u00a0of\u00a0occurrences\u00a0of\u00a0'T'\u00a0in\u00a0the\u00a0string.\nx\nThird\u00a0 parameter\u00a0 in\u00a0 the\u00a0 call\u00a0 to\u00a0 replace(\u00a0 ) indicates\u00a0 number of\u00a0\nreplacements\u00a0to\u00a0be\u00a0done.\n____________________________________________________________________\n[A] Answer\u00a0the\u00a0following\u00a0questions:\n(a) Write\u00a0a\u00a0program\u00a0that\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_92", "chunk_strategy": "fixed_size"}}, {"text": " call\u00a0 to\u00a0 replace(\u00a0 ) indicates\u00a0 number of\u00a0\nreplacements\u00a0to\u00a0be\u00a0done.\n____________________________________________________________________\n[A] Answer\u00a0the\u00a0following\u00a0questions:\n(a) Write\u00a0a\u00a0program\u00a0that\u00a0generates\u00a0the\u00a0following\u00a0output\u00a0from\u00a0the\u00a0string\u00a0\n'Shenanigan'.\nS\u00a0h\na\u00a0n\nenanigan\nShenan\nShenan\nShenan\nChapter 4:\u00a0 Strings\u00a0\n53\nShenan\nShenanigan\nSeaia\nSnin\nSaa\nShenaniganType\nShenanWabbite\n(b) Write\u00a0a\u00a0program\u00a0to\u00a0convert\u00a0the\u00a0following\u00a0string\n'Visit\u00a0ykanetkar.com\u00a0for\u00a0online\u00a0courses\u00a0in\u00a0programming'\ninto\n'Visit\u00a0Ykanetkar.com\u00a0For\u00a0Online\u00a0Courses\u00a0In\u00a0Programming'\n(c) Write\u00a0a\u00a0program\u00a0to\u00a0convert\u00a0the\u00a0following\u00a0string\n'Light\u00a0travels\u00a0faster\u00a0than\u00a0sound.\u00a0This\u00a0is\u00a0why\u00a0some\u00a0people\u00a0appear\u00a0\nbright\u00a0until\u00a0you\u00a0hear\u00a0them\u00a0speak.'\ninto\n'LIGHT travels\u00a0faster\u00a0than\u00a0SOUND.\u00a0This\u00a0is\u00a0why\u00a0some\u00a0people\u00a0appear\u00a0\nbright\u00a0until\u00a0you\u00a0hear\u00a0them\u00a0speak.'\n(d) What\u00a0will\u00a0be\u00a0the\u00a0output\u00a0of\u00a0the\u00a0following\u00a0program?\ns\u00a0=\u00a0'HumptyDumpty'\nprint('s\u00a0=\u00a0',\u00a0s)\nprint(s.isalpha(\u00a0))\nprint(s.isdigit(\u00a0))\nprint(s.isalnum(\u00a0))\nprint(s.islower(\u00a0))\nprint(s.isupper(", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_93", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0them\u00a0speak.'\n(d) What\u00a0will\u00a0be\u00a0the\u00a0output\u00a0of\u00a0the\u00a0following\u00a0program?\ns\u00a0=\u00a0'HumptyDumpty'\nprint('s\u00a0=\u00a0',\u00a0s)\nprint(s.isalpha(\u00a0))\nprint(s.isdigit(\u00a0))\nprint(s.isalnum(\u00a0))\nprint(s.islower(\u00a0))\nprint(s.isupper(\u00a0))\nprint(s.startswith('Hump'))\nprint(s.endswith('Dump'))\n(e) What\u00a0is\u00a0the\u00a0purpose\u00a0of\u00a0a\u00a0raw\u00a0string?\n(f) If\u00a0 we\u00a0wish\u00a0to\u00a0work\u00a0with\u00a0an\u00a0individual\u00a0 word\u00a0in\u00a0the\u00a0following\u00a0string,\u00a0\nhow\u00a0will\u00a0you\u00a0separate\u00a0them\u00a0out:\n'The\u00a0difference\u00a0between\u00a0stupidity\u00a0and\u00a0genius\u00a0is\u00a0that\u00a0genius\u00a0has\u00a0its\u00a0\nlimits'\n(g) Mention\u00a0two\u00a0ways\u00a0to\u00a0store\u00a0a\u00a0string: He\u00a0said,\u00a0\"Let\u00a0Us\u00a0Python\".\n54\nLet\u00a0Us\u00a0Python\n(h) What\u00a0will\u00a0be\u00a0the\u00a0output\u00a0of\u00a0following\u00a0code\u00a0snippet?\nprint(id('Imaginary'))\nprint(type('Imaginary'))\n(i) What\u00a0will\u00a0be\u00a0the\u00a0output\u00a0of\u00a0the\u00a0following\u00a0code\u00a0snippet?\u00a0\ns3\u00a0=\u00a0'C:\\\\Users\\\\Kanetkar\\\\Documents'\nprint(s3.split('\\\\'))\nprint(s3.partition('\\\\'))\n(j) Strings\u00a0in\u00a0Python\u00a0are\u00a0iterable,\u00a0sliceable and\u00a0immutable.\u00a0(True/False)\n(k) How\u00a0will\u00a0you\u00a0extract\u00a0'\u00a0TraPoete'\u00a0from\u00a0the\u00a0string\u00a0'ThreadProperties'?\n(l) How\u00a0will\u00a0you\u00a0eliminate\u00a0spaces\u00a0on\u00a0e", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_94", "chunk_strategy": "fixed_size"}}, {"text": "rtition('\\\\'))\n(j) Strings\u00a0in\u00a0Python\u00a0are\u00a0iterable,\u00a0sliceable and\u00a0immutable.\u00a0(True/False)\n(k) How\u00a0will\u00a0you\u00a0extract\u00a0'\u00a0TraPoete'\u00a0from\u00a0the\u00a0string\u00a0'ThreadProperties'?\n(l) How\u00a0will\u00a0you\u00a0eliminate\u00a0spaces\u00a0on\u00a0either\u00a0side of\u00a0the\u00a0string\u00a0'\u00a0\nFlanked\u00a0\nby\u00a0spaces\u00a0on\u00a0either\u00a0side\u00a0\n'?\n(m)What\u00a0will\u00a0be\u00a0the\u00a0output\u00a0of\u00a0the\u00a0following\u00a0code\u00a0snippet?\u00a0\ns1\u00a0=\u00a0s2\u00a0=\u00a0s3\u00a0=\u00a0\"Hello\"\nprint(id(s1),\u00a0id(s2),\u00a0id(s3))\n(n) What\u00a0will\u00a0get\u00a0stored\u00a0in\u00a0ch\u00a0in\u00a0the\u00a0following\u00a0code\u00a0snippet:\nmsg\u00a0=\u00a0'Aeroplane'\nch\u00a0=\u00a0msg[-0]\n[B] Match\u00a0the\u00a0following\u00a0pairs\u00a0assuming\u00a0msg\u00a0=\u00a0'Keep\u00a0yourself\u00a0warm'\na.\u00a0 msg.partition('\u00a0')\n1.\u00a0 18\nb.\u00a0 msg.split('\u00a0')\n2.\u00a0 kEEP\u00a0YOURSELF\u00a0WARM\nc.\u00a0 msg.startswith('Keep')\n3.\u00a0 Keep\u00a0yourself\u00a0warm\nd.\u00a0 msg.endswith('Keep')\n4.\u00a0 3\ne.\u00a0 msg.swapcase(\u00a0)\n5.\u00a0 True\nf.\u00a0 msg.capitalize(\u00a0)\n6.\u00a0 False\ng.\u00a0 msg.count('e')\n7.\u00a0 ['Keep',\u00a0'yourself',\u00a0'warm']\nh.\u00a0 len(msg)\n8.\u00a0 ('Keep',\u00a0'\u00a0',\u00a0'yourself\u00a0warm')\ni.\u00a0 msg[0]\n9.\u00a0 Keep\u00a0yourself\u00a0w\nj.\u00a0 msg[-1]\n10.\u00a0keep\u00a0yourself\u00a0wa\nk.\u00a0 msg[1:1:1]\n11.\u00a0K\nl.\u00a0 msg[-1:3]\n12.\u00a0empty\u00a0string\nm.\u00a0 msg[:-3]\n13.\u00a0m\nn.\u00a0 msg[-3:]\n1", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_95", "chunk_strategy": "fixed_size"}}, {"text": "']\nh.\u00a0 len(msg)\n8.\u00a0 ('Keep',\u00a0'\u00a0',\u00a0'yourself\u00a0warm')\ni.\u00a0 msg[0]\n9.\u00a0 Keep\u00a0yourself\u00a0w\nj.\u00a0 msg[-1]\n10.\u00a0keep\u00a0yourself\u00a0wa\nk.\u00a0 msg[1:1:1]\n11.\u00a0K\nl.\u00a0 msg[-1:3]\n12.\u00a0empty\u00a0string\nm.\u00a0 msg[:-3]\n13.\u00a0m\nn.\u00a0 msg[-3:]\n14.\u00a0arm\no.\u00a0 msg[0:-2]\n15.\u00a0empty\u00a0string\nLet\u00a0Us\nPython\n55\nDecision\u00a0Control\nInstruction\nx\nDecision\u00a0Control\u00a0Instruction\nx\nReceiving\u00a0Input\nx\nNuances\u00a0of\u00a0Conditions\nx\npass Statement\nx\nLogical\u00a0Operators\nx\nPrograms\nx\nConditional\u00a0Expressions\nx\nExercises\nx\nall(\u00a0) and\u00a0any(\u00a0)\n5\n\u201cIndecision\u00a0cost\u00a0>\u00a0Wrong\u00a0decision\u00a0cost.. \u201d\n56\nLet\u00a0Us\u00a0Python\nx\nSo\u00a0far\u00a0 statements\u00a0in\u00a0all\u00a0our\u00a0programs\u00a0 got\u00a0executed\u00a0sequentially\u00a0or\u00a0\none\u00a0after\u00a0the\u00a0other.\nx\nSequence\u00a0 of\u00a0execution\u00a0of\u00a0instructions\u00a0in\u00a0a\u00a0program\u00a0 can\u00a0be\u00a0 altered\u00a0\nusing:\n(a) Decision\u00a0control\u00a0instruction\n(b) Repetition\u00a0control\u00a0instruction\nDecision\u00a0Control\u00a0Instruction\nx\nThree\u00a0ways\u00a0for\u00a0taking\u00a0decisions\u00a0in\u00a0a\u00a0program:\nif\u00a0condition :\nstatement1\u00a0\nstatement2\nif\u00a0condition :\nstatement1\u00a0\nstatement2\nelse\u00a0:\nstatement3\nstatement4\nif\u00a0condition1\u00a0:\nstatement1\u00a0\nstatement2\nelif\u00a0condition", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_96", "chunk_strategy": "fixed_size"}}, {"text": "e\u00a0ways\u00a0for\u00a0taking\u00a0decisions\u00a0in\u00a0a\u00a0program:\nif\u00a0condition :\nstatement1\u00a0\nstatement2\nif\u00a0condition :\nstatement1\u00a0\nstatement2\nelse\u00a0:\nstatement3\nstatement4\nif\u00a0condition1\u00a0:\nstatement1\u00a0\nstatement2\nelif\u00a0condition2\u00a0:\nstatement3\nelif\u00a0condition3\u00a0:\nstatement4\nelse\u00a0:\u00a0\nstatement5\nx\nThe\u00a0colon\u00a0(:)\u00a0after\u00a0if,\u00a0else,\u00a0elif.\u00a0It\u00a0is\u00a0compulsory.\nx\nStatements\u00a0 in\u00a0 if block,\u00a0else,\u00a0 block,\u00a0elif block\u00a0have\u00a0 to\u00a0be\u00a0 indented.\u00a0\nIndented\u00a0statements\u00a0are\u00a0treated\u00a0as\u00a0a\u00a0block\u00a0of\u00a0statements.\nx\nIndentation\u00a0is\u00a0used\u00a0to\u00a0group\u00a0statements.\u00a0Use\u00a0either\u00a04\u00a0spaces\u00a0or\u00a0a\u00a0tab\u00a0\nfor\u00a0indentation.\u00a0Don't\u00a0mix\u00a0tabs\u00a0and\u00a0spaces.\u00a0They\u00a0may\u00a0appear\u00a0ok\u00a0on\u00a0\nscreen,\u00a0but\u00a0would\u00a0be\u00a0reported\u00a0as\u00a0error.\nx\nIn\u00a0the\u00a0first\u00a0form\u00a0shown\u00a0above\u00a0else and\u00a0elif are\u00a0optional.\nx\nIn\u00a0the\u00a0second\u00a0form\u00a0shown\u00a0above,\u00a0if\u00a0condition\u00a0is\u00a0True\u00a0all\u00a0statements\u00a0\nin\u00a0if block\u00a0get\u00a0executed.\u00a0If\u00a0condition\u00a0is\u00a0False\u00a0then\u00a0statements\u00a0in\u00a0else\nblock\u00a0get\u00a0executed.\nx\nIn\u00a0the\u00a0third\u00a0form\u00a0shown\u00a0above,\u00a0if\u00a0a\u00a0condition\u00a0fails,\u00a0then\u00a0condition\u00a0in\u00a0\nthe\u00a0following\u00a0elif block\u00a0is\u00a0checked.\u00a0The\u00a0else block\u00a0goes\u00a0to\u00a0work\u00a0if\u00a0a", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_97", "chunk_strategy": "fixed_size"}}, {"text": "ion\u00a0is\u00a0False\u00a0then\u00a0statements\u00a0in\u00a0else\nblock\u00a0get\u00a0executed.\nx\nIn\u00a0the\u00a0third\u00a0form\u00a0shown\u00a0above,\u00a0if\u00a0a\u00a0condition\u00a0fails,\u00a0then\u00a0condition\u00a0in\u00a0\nthe\u00a0following\u00a0elif block\u00a0is\u00a0checked.\u00a0The\u00a0else block\u00a0goes\u00a0to\u00a0work\u00a0if\u00a0all\u00a0\nconditions\u00a0fail.\nChapter 5:\u00a0 Decision\u00a0Control\u00a0Instruction\u00a0\n57\nx\nif-else statements\u00a0 can\u00a0 be\u00a0 nested.\u00a0 Nesting\u00a0 can\u00a0 be\u00a0 as\u00a0 deep\u00a0 as\u00a0 the\u00a0\nprogram\u00a0logic\u00a0demands.\nNuances\u00a0of\u00a0Conditions\nx\nCondition\u00a0is\u00a0built\u00a0using\u00a0relation\u00a0operators\u00a0<,\u00a0>,\u00a0<=,\u00a0>=,\u00a0==,\u00a0!=.\n10\u00a0<\u00a020\u00a0\n#\u00a0yields\u00a0True\n'Santosh'\u00a0<\u00a0'Adi'\u00a0\n#\u00a0yields\u00a0False,\u00a0alphabetical\u00a0order\u00a0is\u00a0checked\n'gang'\u00a0<\u00a0'God'\n#\u00a0yields\u00a0False,\u00a0lowercase\u00a0is\u00a0>\u00a0uppercase\nx\na\u00a0=\u00a0b is\u00a0assignment, a\u00a0==\u00a0b is\u00a0comparison.\nx\nRanges\u00a0or\u00a0multiple\u00a0equalities\u00a0can\u00a0be\u00a0checked\u00a0more\u00a0naturally.\nif\u00a0a\u00a0<\u00a0b\u00a0<\u00a0c\u00a0\n#\u00a0checks\u00a0whether\u00a0b\u00a0falls between\u00a0a\u00a0and\u00a0c\nif\u00a0a\u00a0==\u00a0b\u00a0==\u00a0c\u00a0\n#\u00a0checks\u00a0whether\u00a0all\u00a0three\u00a0are\u00a0equal\nif\u00a010\u00a0!=\u00a020\u00a0!=\u00a010\n#\u00a0evaluates\u00a0to\u00a0True,\u00a0even\u00a0though\u00a010\u00a0!=\u00a010\u00a0is\u00a0False\nx\nAny\u00a0non-zero\u00a0number\u00a0(positive,\u00a0negative,\u00a0integer,\u00a0float)\u00a0is\u00a0treated\u00a0as\u00a0\nTrue,\u00a0and\u00a00\u00a0as\u00a0False.\nprint(bool(3.14))\n#", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_98", "chunk_strategy": "fixed_size"}}, {"text": "three\u00a0are\u00a0equal\nif\u00a010\u00a0!=\u00a020\u00a0!=\u00a010\n#\u00a0evaluates\u00a0to\u00a0True,\u00a0even\u00a0though\u00a010\u00a0!=\u00a010\u00a0is\u00a0False\nx\nAny\u00a0non-zero\u00a0number\u00a0(positive,\u00a0negative,\u00a0integer,\u00a0float)\u00a0is\u00a0treated\u00a0as\u00a0\nTrue,\u00a0and\u00a00\u00a0as\u00a0False.\nprint(bool(3.14))\n#\u00a0prints\u00a0True\nprint(bool(25))\n#\u00a0prints\u00a0True\nprint(bool(0))\n#\u00a0prints\u00a0False\nLogical\u00a0Operators\nx\nMore\u00a0complex\u00a0decision\u00a0making\u00a0can\u00a0be\u00a0done\u00a0using\u00a0logical\u00a0operators\u00a0\nand,\u00a0or and\u00a0not.\nx\nConditions\u00a0can\u00a0be\u00a0combined\u00a0using\u00a0and and or as\u00a0shown\u00a0below:\ncond1 and\u00a0cond2\u00a0- returns\u00a0True\u00a0if\u00a0both\u00a0are\u00a0True,\u00a0otherwise\u00a0False\ncond1\u00a0or\u00a0cond2\u00a0- returns\u00a0True\u00a0if\u00a0one\u00a0of\u00a0them\u00a0is\u00a0True,\u00a0otherwise\u00a0False\nx\nStrictly\u00a0speaking,\u00a0we\u00a0need\u00a0not\u00a0always\u00a0combine\u00a0only\u00a0conditions with\u00a0\nand/or.\u00a0 We\u00a0 can\u00a0 use\u00a0 any\u00a0 valid\u00a0 expression\u00a0 in\u00a0 place\u00a0 of\u00a0 conditions.\u00a0\nHence\u00a0when\u00a0used\u00a0with\u00a0expressions\u00a0we\u00a0may\u00a0not\u00a0get\u00a0True/False.\nx\nand operator\u00a0evaluates\u00a0ALL\u00a0expressions.\u00a0It\u00a0returns\u00a0last\u00a0expression\u00a0if\u00a0\nall\u00a0expressions\u00a0evaluate\u00a0to\u00a0True.\u00a0Otherwise\u00a0it\u00a0returns\u00a0first\u00a0value\u00a0that\u00a0\nevaluates\u00a0to\u00a0False.\na\u00a0=\u00a040\u00a0\nb\u00a0=\u00a030\nx\u00a0=\u00a075\u00a0and\u00a0a\u00a0>=\u00a020\u00a0and\u00a0b\u00a0<\u00a060\u00a0and\u00a035\n#\u00a0as", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_99", "chunk_strategy": "fixed_size"}}, {"text": "es\u00a0ALL\u00a0expressions.\u00a0It\u00a0returns\u00a0last\u00a0expression\u00a0if\u00a0\nall\u00a0expressions\u00a0evaluate\u00a0to\u00a0True.\u00a0Otherwise\u00a0it\u00a0returns\u00a0first\u00a0value\u00a0that\u00a0\nevaluates\u00a0to\u00a0False.\na\u00a0=\u00a040\u00a0\nb\u00a0=\u00a030\nx\u00a0=\u00a075\u00a0and\u00a0a\u00a0>=\u00a020\u00a0and\u00a0b\u00a0<\u00a060\u00a0and\u00a035\n#\u00a0assigns\u00a035\u00a0to\u00a0x\u00a0\n58\nLet\u00a0Us\u00a0Python\ny\u00a0=\u00a0-30\u00a0and\u00a0a\u00a0>=\u00a020\u00a0and\u00a0b\u00a0<\u00a015\u00a0and\u00a035\n#\u00a0assigns\u00a0False\u00a0to\u00a0y\nz\u00a0=\u00a0-30\u00a0and\u00a0a\u00a0>=\u00a020\u00a0and\u00a00\u00a0and\u00a035\n#\u00a0assigns\u00a00\u00a0to\u00a0z\nx\nor operator\u00a0 evaluates\u00a0 ALL\u00a0 expressions\u00a0 and\u00a0 returns\u00a0 the\u00a0 first\u00a0 value\u00a0\nthat\u00a0evaluates\u00a0to\u00a0True.\u00a0Otherwise\u00a0it\u00a0returns\u00a0last\u00a0value\u00a0that\u00a0evaluates\u00a0\nto\u00a0False.\na\u00a0=\u00a040\u00a0\nb\u00a0=\u00a030\nx\u00a0=\u00a075\u00a0or\u00a0a\u00a0>=\u00a020\u00a0or\u00a060\n#\u00a0assigns\u00a075\u00a0to\u00a0x\u00a0\ny\u00a0=\u00a0a\u00a0>=\u00a020\u00a0or\u00a075\u00a0or\u00a060\u00a0\n#\u00a0assigns\u00a0True\u00a0to\u00a0y\nz\u00a0=\u00a0a\u00a0<\u00a020\u00a0or\u00a00\u00a0or\u00a035\u00a0\n#\u00a0assigns\u00a035\u00a0to\u00a0z\nx\nCondition\u2019s\u00a0result\u00a0can\u00a0be\u00a0negated\u00a0using not.\na\u00a0=\u00a010\nb\u00a0=\u00a020\nnot\u00a0(a\u00a0<=\u00a0b)\n#\u00a0yields\u00a0False.\u00a0Same\u00a0as\u00a0a\u00a0>\u00a0b\nnot\u00a0(a\u00a0>=\u00a0b)\n#\u00a0yields True.\u00a0Same\u00a0as\u00a0a\u00a0<\u00a0b\nx\nShortcut\u00a0for\u00a0toggling\u00a0values\u00a0between\u00a01\u00a0and\u00a00:\na\u00a0=\u00a0input('Enter\u00a00\u00a0or\u00a01')\na\u00a0=\u00a0not\u00a0a\n#\u00a0set\u00a0a\u00a0to\u00a00\u00a0if\u00a0it\u00a0is\u00a01,\u00a0and\u00a0set\u00a0it\u00a0to\u00a01\u00a0if\u00a0it\u00a0is\u00a00\nx\na\u00a0=\u00a0not\u00a0b does\u00a0not\u00a0change\u00a0value\u00a0of\u00a0b.\nx\nIf\u00a0an\u00a0operator\u00a0needs\u00a0only\u00a01\u00a0oper", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_100", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0for\u00a0toggling\u00a0values\u00a0between\u00a01\u00a0and\u00a00:\na\u00a0=\u00a0input('Enter\u00a00\u00a0or\u00a01')\na\u00a0=\u00a0not\u00a0a\n#\u00a0set\u00a0a\u00a0to\u00a00\u00a0if\u00a0it\u00a0is\u00a01,\u00a0and\u00a0set\u00a0it\u00a0to\u00a01\u00a0if\u00a0it\u00a0is\u00a00\nx\na\u00a0=\u00a0not\u00a0b does\u00a0not\u00a0change\u00a0value\u00a0of\u00a0b.\nx\nIf\u00a0an\u00a0operator\u00a0needs\u00a0only\u00a01\u00a0operand\u00a0it\u00a0is\u00a0known\u00a0as\u00a0Unary\u00a0operator.\u00a0If\u00a0\nit\u00a0needs\u00a0two,\u00a0then\u00a0it\u00a0is\u00a0a\u00a0binary\u00a0operator.\nnot\u00a0- needs\u00a0only\u00a01\u00a0operand,\u00a0so\u00a0unary\u00a0operator\n+,\u00a0 -,\u00a0 <,\u00a0 >,\u00a0 and,\u00a0or,\u00a0etc.\u00a0- need\u00a02\u00a0operands,\u00a0so\u00a0binary\u00a0operators\nConditional\u00a0Expressions\nx\nPython\u00a0 supports\u00a0 one\u00a0 additional\u00a0 decision-making\u00a0 entity\u00a0 called\u00a0 a\u00a0\nconditional\u00a0expression.\n<expr1>\u00a0if\u00a0<conditional\u00a0expression>\u00a0else\u00a0<expr2>\n<conditional\u00a0 expression> is\u00a0 evaluated\u00a0 first.\u00a0 If\u00a0 it\u00a0 is\u00a0 true,\u00a0 the\u00a0\nexpression\u00a0 evaluates\u00a0 to <expr1>.\u00a0 If\u00a0 it\u00a0 is\u00a0 false,\u00a0 the\u00a0 expression\u00a0\nevaluates\u00a0to <expr2>.\nx\nExamples\u00a0of\u00a0condition\u00a0expressions:\nChapter 5:\u00a0 Decision\u00a0Control\u00a0Instruction\u00a0\n59\nage\u00a0=\u00a015\nstatus =\u00a0'minor'\u00a0if\u00a0age\u00a0<\u00a018 else\u00a0'adult'\n#\u00a0sets\u00a0minor\nsunny =\u00a0False\nprint('Let's\u00a0go\u00a0to\u00a0the',\u00a0'beach'\u00a0if\u00a0sunny else\u00a0'room')\nhumidity =\u00a076.8\nsetting\u00a0=\u00a025\u00a0if\u00a0humidity\u00a0>\u00a075\u00a0els", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_101", "chunk_strategy": "fixed_size"}}, {"text": "l\u00a0Instruction\u00a0\n59\nage\u00a0=\u00a015\nstatus =\u00a0'minor'\u00a0if\u00a0age\u00a0<\u00a018 else\u00a0'adult'\n#\u00a0sets\u00a0minor\nsunny =\u00a0False\nprint('Let's\u00a0go\u00a0to\u00a0the',\u00a0'beach'\u00a0if\u00a0sunny else\u00a0'room')\nhumidity =\u00a076.8\nsetting\u00a0=\u00a025\u00a0if\u00a0humidity\u00a0>\u00a075\u00a0else\u00a028\u00a0\n#\u00a0sets\u00a025\nx\nConditional\u00a0expressions\u00a0can\u00a0be\u00a0nested.\n#\u00a0assigns\u00a0Prim\nwt\u00a0=\u00a055\nmsg\u00a0=\u00a0'Obese'\u00a0if\u00a0wt\u00a0>\u00a085\u00a0else\u00a0'Hefty'\u00a0if\u00a0wt\u00a0>\u00a060\u00a0else\u00a0'Prim'\nall(\u00a0) and\u00a0any(\u00a0)\nx\nInstead\u00a0 of\u00a0 using\u00a0the\u00a0 and and\u00a0 or logical\u00a0 operators,\u00a0we\u00a0can\u00a0 use\u00a0the\u00a0\nbuilt-in\u00a0functions\u00a0all(\u00a0) and\u00a0any(\u00a0) to\u00a0get\u00a0the\u00a0same\u00a0effect.\u00a0Their\u00a0usage\u00a0\nis\u00a0shown\u00a0in\u00a0the\u00a0following\u00a0program:\na,\u00a0b,\u00a0c\u00a0=\u00a010,\u00a020,\u00a030\nres\u00a0=\u00a0all((a\u00a0>\u00a05,\u00a0b\u00a0>\u00a020,\u00a0c\u00a0>\u00a015))\nprint(res)\n#\u00a0prints\u00a0False,\u00a0as\u00a0second\u00a0condition\u00a0is\u00a0False\nres\u00a0=\u00a0any((a\u00a0>\u00a05,\u00a0b\u00a0>\u00a020,\u00a0c\u00a0>\u00a015))\nprint(res)\n#\u00a0prints\u00a0True\u00a0since\u00a0one\u00a0of\u00a0the\u00a0condition\u00a0is\u00a0True\nx\nNote\u00a0 that\u00a0 all(\u00a0 ) and\u00a0any(\u00a0 ) both\u00a0 receive\u00a0 a\u00a0single\u00a0 parameter\u00a0 of\u00a0the\u00a0\ntype\u00a0string,\u00a0list,\u00a0tuple,\u00a0set\u00a0or\u00a0dictionary.\u00a0We\u00a0have\u00a0passed\u00a0a\u00a0tuple\u00a0of\u00a03\u00a0\nconditions\u00a0to\u00a0them.\u00a0If\u00a0argument\u00a0is\u00a0a\u00a0dictionary\u00a0it\u00a0is\u00a0checked\u00a0whether\u00a0\nthe\u00a0keys\u00a0are\u00a0true\u00a0or\u00a0not.\nx", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_102", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0single\u00a0 parameter\u00a0 of\u00a0the\u00a0\ntype\u00a0string,\u00a0list,\u00a0tuple,\u00a0set\u00a0or\u00a0dictionary.\u00a0We\u00a0have\u00a0passed\u00a0a\u00a0tuple\u00a0of\u00a03\u00a0\nconditions\u00a0to\u00a0them.\u00a0If\u00a0argument\u00a0is\u00a0a\u00a0dictionary\u00a0it\u00a0is\u00a0checked\u00a0whether\u00a0\nthe\u00a0keys\u00a0are\u00a0true\u00a0or\u00a0not.\nx\nany(\u00a0) function\u00a0returns\u00a0True\u00a0if\u00a0at\u00a0least\u00a0one\u00a0element\u00a0of\u00a0its\u00a0parameter\u00a0\nis\u00a0True.\u00a0all(\u00a0) function\u00a0returns\u00a0True\u00a0if\u00a0all\u00a0elements\u00a0of\u00a0its\u00a0parameter\u00a0\nare\u00a0True.\nReceiving\u00a0Input\nx\nThe\u00a0way\u00a0print(\u00a0) function\u00a0is\u00a0used\u00a0to\u00a0output values\u00a0on\u00a0screen,\u00a0input( )\u00a0\nbuilt-in\u00a0function\u00a0can\u00a0be\u00a0used\u00a0to\u00a0receive\u00a0input\u00a0values\u00a0from\u00a0keyboard.\nx\ninput(\u00a0) function\u00a0returns\u00a0a\u00a0string,\u00a0i.e. if\u00a023\u00a0is\u00a0entered\u00a0it\u00a0returns\u00a0'23'.\u00a0\nSo\u00a0 if\u00a0 we\u00a0 wish\u00a0 to\u00a0 perform\u00a0 arithmetic\u00a0 on\u00a0 the\u00a0 number\u00a0 entered,\u00a0 we\u00a0\nneed\u00a0to\u00a0convert\u00a0the\u00a0string\u00a0into\u00a0int\u00a0or\u00a0float\u00a0as shown\u00a0below.\n60\nLet\u00a0Us\u00a0Python\nn\u00a0=\u00a0input('Enter\u00a0your\u00a0name:\u00a0')\nage\u00a0=\u00a0int(input('Enter\u00a0your\u00a0age:\u00a0'))\nsalary\u00a0=\u00a0float(input('Enter\u00a0your\u00a0salary:\u00a0'))\nprint(name,\u00a0age,\u00a0salary)\npass Statement\nx\npass statement\u00a0is\u00a0intended\u00a0to\u00a0do\u00a0nothing\u00a0on\u00a0execution.\u00a0Hence\u00a0it\u00a0is\u00a0\noften\u00a0called\u00a0a\u00a0no-op\u00a0instruction.\n", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_103", "chunk_strategy": "fixed_size"}}, {"text": "r\u00a0age:\u00a0'))\nsalary\u00a0=\u00a0float(input('Enter\u00a0your\u00a0salary:\u00a0'))\nprint(name,\u00a0age,\u00a0salary)\npass Statement\nx\npass statement\u00a0is\u00a0intended\u00a0to\u00a0do\u00a0nothing\u00a0on\u00a0execution.\u00a0Hence\u00a0it\u00a0is\u00a0\noften\u00a0called\u00a0a\u00a0no-op\u00a0instruction.\nx\nIf\u00a0we\u00a0wish\u00a0that\u00a0on\u00a0execution\u00a0of\u00a0a\u00a0statement\u00a0nothing\u00a0should\u00a0happen,\u00a0\nwe\u00a0 can\u00a0 achieve\u00a0this\u00a0 using\u00a0 a\u00a0pass statement. Its\u00a0 utility\u00a0 is\u00a0shown\u00a0 in\u00a0\nProblem\u00a05.6.\nx\nIt\u00a0 is\u00a0often\u00a0used\u00a0as\u00a0a\u00a0placeholder\u00a0 for\u00a0unimplemented\u00a0code\u00a0in\u00a0an if,\u00a0\nloop,\u00a0 function\u00a0or\u00a0class. This\u00a0 is\u00a0not\u00a0a\u00a0good\u00a0use\u00a0of\u00a0pass.\u00a0 Instead\u00a0you\u00a0\nshould\u00a0use\u00a0...\u00a0in\u00a0its\u00a0place.\u00a0If\u00a0you\u00a0use\u00a0pass it\u00a0might\u00a0make\u00a0one\u00a0believe\u00a0\nthat\u00a0 you\u00a0 actually\u00a0 do\u00a0 not\u00a0 intend\u00a0 to\u00a0 do\u00a0 anything\u00a0 in\u00a0 the\u00a0\nif/loop/function/class.\n____________________________________________________________________\nProblem\u00a05.1\nWhile\u00a0 purchasing\u00a0 certain\u00a0 items,\u00a0 a\u00a0 discount\u00a0 of\u00a0 10%\u00a0 is\u00a0 offered\u00a0 if\u00a0 the\u00a0\nquantity\u00a0purchased\u00a0is\u00a0more\u00a0than\u00a01000.\u00a0If\u00a0quantity\u00a0and\u00a0price\u00a0per\u00a0item\u00a0are\u00a0\ninput\u00a0 through\u00a0 the\u00a0 keyboard,\u00a0 write\u00a0 a\u00a0 program\u00a0 to\u00a0 calculate\u00a0 the\u00a0 total\u00a0\nexpenses.\nProgram\nqty\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_104", "chunk_strategy": "fixed_size"}}, {"text": "0%\u00a0 is\u00a0 offered\u00a0 if\u00a0 the\u00a0\nquantity\u00a0purchased\u00a0is\u00a0more\u00a0than\u00a01000.\u00a0If\u00a0quantity\u00a0and\u00a0price\u00a0per\u00a0item\u00a0are\u00a0\ninput\u00a0 through\u00a0 the\u00a0 keyboard,\u00a0 write\u00a0 a\u00a0 program\u00a0 to\u00a0 calculate\u00a0 the\u00a0 total\u00a0\nexpenses.\nProgram\nqty\u00a0=\u00a0int(input('Enter\u00a0value\u00a0of\u00a0quantity:\u00a0'))\u00a0\nprice\u00a0=\u00a0float(input('Enter\u00a0value\u00a0of\u00a0price:\u00a0'))\u00a0\nif\u00a0qty\u00a0>\u00a01000\u00a0:\u00a0\ndis\u00a0=\u00a010\u00a0\nelse\u00a0:\u00a0\ndis\u00a0=\u00a00\u00a0\ntotexp\u00a0=\u00a0qty\u00a0*\u00a0price\u00a0- qty\u00a0*\u00a0price\u00a0*\u00a0dis\u00a0/\u00a0100\u00a0\nprint('Total\u00a0expenses\u00a0=\u00a0Rs.\u00a0' +\u00a0str(totexp))\u00a0\nChapter 5:\u00a0 Decision\u00a0Control\u00a0Instruction\u00a0\n61\nOutput\nEnter\u00a0value\u00a0of\u00a0quantity:\u00a01200\nEnter\u00a0value\u00a0of\u00a0price:\u00a015.50\nTotal\u00a0expenses\u00a0=\u00a0Rs.\u00a016740.0\nTips\nx\ninput(\u00a0 )\u00a0returns\u00a0 a\u00a0string,\u00a0so\u00a0it\u00a0is\u00a0necessary\u00a0 to\u00a0convert\u00a0it\u00a0into\u00a0 int\u00a0 or\u00a0\nfloat\u00a0suitably. If\u00a0we\u00a0do\u00a0not\u00a0do\u00a0the\u00a0conversion,\u00a0qty\u00a0>\u00a01000 will\u00a0throw\u00a0\nan\u00a0error\u00a0as\u00a0a\u00a0string\u00a0cannot\u00a0be\u00a0compared\u00a0with\u00a0an\u00a0int.\nx\nstr(\u00a0 ) should\u00a0 be\u00a0 used\u00a0 to\u00a0 convert\u00a0 totexp to\u00a0 string\u00a0 before\u00a0 doing\u00a0\nconcatenation\u00a0using\u00a0+.\n____________________________________________________________________\nProblem\u00a05.2\nIn\u00a0a\u00a0company\u00a0an\u00a0employee\u00a0is\u00a0paid\u00a0as\u00a0under:\nI", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_105", "chunk_strategy": "fixed_size"}}, {"text": "sed\u00a0 to\u00a0 convert\u00a0 totexp to\u00a0 string\u00a0 before\u00a0 doing\u00a0\nconcatenation\u00a0using\u00a0+.\n____________________________________________________________________\nProblem\u00a05.2\nIn\u00a0a\u00a0company\u00a0an\u00a0employee\u00a0is\u00a0paid\u00a0as\u00a0under:\nIf\u00a0his\u00a0basic\u00a0salary\u00a0 is\u00a0less\u00a0than\u00a0Rs.\u00a01500,\u00a0 then\u00a0HRA\u00a0=\u00a0 10%\u00a0of\u00a0basic\u00a0salary\u00a0\nand\u00a0DA\u00a0=\u00a090%\u00a0of\u00a0basic\u00a0salary.\u00a0If\u00a0his\u00a0salary\u00a0is\u00a0either\u00a0equal\u00a0to\u00a0or\u00a0above\u00a0Rs.\u00a0\n1500,\u00a0then\u00a0HRA\u00a0=\u00a0Rs.\u00a0500\u00a0and\u00a0DA\u00a0=\u00a098%\u00a0of\u00a0basic\u00a0salary.\u00a0If\u00a0the\u00a0employee's\u00a0\nsalary\u00a0is\u00a0input\u00a0through\u00a0 the\u00a0keyboard\u00a0write\u00a0a\u00a0program\u00a0 to\u00a0find\u00a0his\u00a0gross\u00a0\nsalary.\nProgram\nbs\u00a0=\u00a0int(input('Enter\u00a0value\u00a0of\u00a0bs:\u00a0'))\nif\u00a0bs\u00a0>\u00a01000\u00a0:\u00a0\nhra\u00a0=\u00a0bs\u00a0*\u00a015\u00a0/100\u00a0\nda\u00a0=\u00a0bs\u00a0*\u00a095\u00a0/\u00a0100\u00a0\nca\u00a0=\u00a0bs\u00a0*\u00a010\u00a0/\u00a0100\u00a0\nelse:\u00a0\nhra\u00a0=\u00a0bs\u00a0*\u00a010\u00a0/\u00a0100\u00a0\nda\u00a0=\u00a0bs\u00a0*\u00a090\u00a0/\u00a0100\u00a0\nca\u00a0=\u00a0bs\u00a0*\u00a05\u00a0/\u00a0100\u00a0\ngs\u00a0=\u00a0bs\u00a0+\u00a0da\u00a0+ hra\u00a0+\u00a0ca\u00a0\nprint('Gross\u00a0Salary\u00a0=\u00a0Rs.\u00a0'\u00a0+\u00a0str(gs))\u00a0\n62\nLet\u00a0Us\u00a0Python\nTips\nx\nif block\u00a0 and\u00a0 else block\u00a0 can\u00a0 contain\u00a0 multiple\u00a0 statements\u00a0 in\u00a0 them,\u00a0\nsuitably\u00a0indented.\n____________________________________________________________________\nProblem\u00a05.3\nPercentage\u00a0 marks\u00a0 obtained\u00a0 by\u00a0 a\u00a0 s", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_106", "chunk_strategy": "fixed_size"}}, {"text": "nd\u00a0 else block\u00a0 can\u00a0 contain\u00a0 multiple\u00a0 statements\u00a0 in\u00a0 them,\u00a0\nsuitably\u00a0indented.\n____________________________________________________________________\nProblem\u00a05.3\nPercentage\u00a0 marks\u00a0 obtained\u00a0 by\u00a0 a\u00a0 student\u00a0 are\u00a0 input\u00a0 through\u00a0 the\u00a0\nkeyboard.\u00a0The\u00a0student\u00a0gets\u00a0a\u00a0division\u00a0as\u00a0per\u00a0the\u00a0following\u00a0rules:\nPercentage\u00a0above\u00a0or\u00a0equal\u00a0to\u00a060\u00a0- First\u00a0division\nPercentage\u00a0between\u00a050\u00a0and\u00a059\u00a0- Second\u00a0division\nPercentage\u00a0between\u00a040\u00a0and\u00a049\u00a0- Third\u00a0division\nPercentage\u00a0less\u00a0than\u00a040\u00a0- Fail\nWrite\u00a0a\u00a0program\u00a0to\u00a0calculate\u00a0the\u00a0division\u00a0obtained\u00a0by\u00a0the\u00a0student.\nProgram\nper\u00a0=\u00a0int(input('Enter\u00a0value\u00a0of\u00a0percentage:\u00a0'))\nif\u00a0per\u00a0>=\u00a060\u00a0:\u00a0\nprint('First\u00a0Division')\nelif\u00a0per\u00a0>=\u00a050\u00a0:\u00a0\nprint('Second\u00a0Division')\nelif\u00a0per\u00a0>=\u00a040\u00a0:\u00a0\nprint('Third\u00a0Division')\nelse\u00a0:\u00a0\nprint('Fail')\nOutput\nEnter\u00a0value\u00a0of\u00a0percentage:\u00a055\nSecond\u00a0Division\n____________________________________________________________________\nProblem\u00a05.4\nA\u00a0company\u00a0insures\u00a0its\u00a0drivers\u00a0in\u00a0the\u00a0following\u00a0cases:\n\ue001\nIf\u00a0the\u00a0driver\u00a0is\u00a0married.\n\ue001\nIf\u00a0the\u00a0driver\u00a0is\u00a0unmarried,\u00a0male\u00a0&\u00a0abov", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_107", "chunk_strategy": "fixed_size"}}, {"text": "________________________________________________________________\nProblem\u00a05.4\nA\u00a0company\u00a0insures\u00a0its\u00a0drivers\u00a0in\u00a0the\u00a0following\u00a0cases:\n\ue001\nIf\u00a0the\u00a0driver\u00a0is\u00a0married.\n\ue001\nIf\u00a0the\u00a0driver\u00a0is\u00a0unmarried,\u00a0male\u00a0&\u00a0above\u00a030\u00a0years\u00a0of\u00a0age.\n\ue001\nIf\u00a0the\u00a0driver\u00a0is\u00a0unmarried,\u00a0female\u00a0&\u00a0above\u00a025\u00a0years\u00a0of\u00a0age.\nChapter 5:\u00a0 Decision\u00a0Control\u00a0Instruction\u00a0\n63\nIn\u00a0all\u00a0other\u00a0cases,\u00a0the\u00a0driver\u00a0is\u00a0not\u00a0insured.\u00a0If\u00a0the\u00a0marital\u00a0status,\u00a0sex\u00a0and\u00a0\nage\u00a0of\u00a0the\u00a0driver\u00a0are\u00a0the\u00a0inputs,\u00a0write\u00a0a\u00a0program\u00a0to\u00a0determine\u00a0whether\u00a0\nthe\u00a0driver\u00a0should\u00a0be\u00a0insured\u00a0or\u00a0not.\nProgram\nms\u00a0=\u00a0input('Enter\u00a0marital\u00a0status:\u00a0')\ns\u00a0=\u00a0input('Enter\u00a0sex:\u00a0')\u00a0\nage\u00a0=\u00a0int(input('Enter\u00a0age:\u00a0'))\u00a0\nif\u00a0(\u00a0ms\u00a0==\u00a0'm'\u00a0)\u00a0or\u00a0(\u00a0ms\u00a0==\u00a0'u'\u00a0and\u00a0s\u00a0==\u00a0'm'\u00a0and\u00a0age\u00a0>\u00a030\u00a0)\u00a0\\\nor\u00a0(\u00a0ms\u00a0==\u00a0'u'\u00a0and\u00a0s\u00a0==\u00a0'f'\u00a0and age\u00a0>\u00a025\u00a0)\u00a0:\u00a0\nprint('Insured')\nelse\u00a0:\u00a0\nprint('Not\u00a0Insured')\nOutput\nEnter\u00a0marital\u00a0status:\u00a0u\nEnter\u00a0sex:\u00a0m\nEnter\u00a0age:\u00a023\nNot\u00a0Insured\n____________________________________________________________________\nProblem\u00a05.5\nSuppose\u00a0there\u00a0are\u00a0four\u00a0flag\u00a0variables\u00a0w,\u00a0x,\u00a0y,\u00a0z.\u00a0Write\u00a0a\u00a0program\u00a0to\u00a0check\u00a0\ni", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_108", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0u\nEnter\u00a0sex:\u00a0m\nEnter\u00a0age:\u00a023\nNot\u00a0Insured\n____________________________________________________________________\nProblem\u00a05.5\nSuppose\u00a0there\u00a0are\u00a0four\u00a0flag\u00a0variables\u00a0w,\u00a0x,\u00a0y,\u00a0z.\u00a0Write\u00a0a\u00a0program\u00a0to\u00a0check\u00a0\nin\u00a0multiple\u00a0ways\u00a0whether\u00a0one\u00a0of\u00a0them\u00a0is\u00a0true.\nProgram\n#\u00a0Different\u00a0ways\u00a0to\u00a0test\u00a0multiple\u00a0flags\nw,\u00a0x,\u00a0y,\u00a0z\u00a0=\u00a00,\u00a01,\u00a00,\u00a01\nif\u00a0w\u00a0==\u00a01\u00a0or\u00a0x\u00a0==\u00a01\u00a0or\u00a0y\u00a0==\u00a01\u00a0or\u00a0z\u00a0==\u00a01\u00a0:\nprint('True')\nif\u00a0w\u00a0or\u00a0x\u00a0or\u00a0y\u00a0or\u00a0z\u00a0:\nprint('True')\nif\u00a0any((w,\u00a0x,\u00a0y,\u00a0z)):\nprint('True')\n64\nLet\u00a0Us\u00a0Python\nif\u00a01\u00a0in\u00a0(w,\u00a0x,\u00a0y,\u00a0z)\u00a0:\nprint('True')\nOutput\nTrue\nTrue\nTrue\nTrue\nTips\nx\nany(\u00a0 ) is\u00a0a\u00a0built-in\u00a0function\u00a0that\u00a0 returns\u00a0True\u00a0if\u00a0 at\u00a0 least\u00a0one\u00a0 of\u00a0the\u00a0\nelement\u00a0of\u00a0its\u00a0parameter\u00a0is\u00a0True.\nx\nWe\u00a0have\u00a0to\u00a0pass\u00a0a string,\u00a0list,\u00a0tuple,\u00a0set\u00a0or\u00a0dictionary\u00a0to\u00a0any(\u00a0).\nx\nThere\u00a0is\u00a0another\u00a0similar\u00a0function\u00a0called\u00a0all(\u00a0),\u00a0which\u00a0returns\u00a0True\u00a0if\u00a0all\u00a0\nelements\u00a0 of\u00a0 its\u00a0 parameter\u00a0 are\u00a0 True.\u00a0 This\u00a0 function\u00a0 too\u00a0 should\u00a0 be\u00a0\npassed\u00a0a\u00a0string,\u00a0list,\u00a0tuple,\u00a0set\u00a0or dictionary.\n____________________________________________________________________\nProblem\u00a05.6\nGiv", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_109", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0 of\u00a0 its\u00a0 parameter\u00a0 are\u00a0 True.\u00a0 This\u00a0 function\u00a0 too\u00a0 should\u00a0 be\u00a0\npassed\u00a0a\u00a0string,\u00a0list,\u00a0tuple,\u00a0set\u00a0or dictionary.\n____________________________________________________________________\nProblem\u00a05.6\nGiven\u00a0a\u00a0number\u00a0n\u00a0we\u00a0wish\u00a0to\u00a0do\u00a0the\u00a0following:\nIf\u00a0n\u00a0is\u00a0positive\u00a0- print\u00a0n\u00a0*\u00a0n,\u00a0set\u00a0a\u00a0flag\u00a0to\u00a0true\nIf\u00a0n\u00a0is\u00a0negative\u00a0- print\u00a0n\u00a0*\u00a0n\u00a0*\u00a0n,\u00a0set\u00a0a\u00a0flag\u00a0to\u00a0true\nif\u00a0n\u00a0is\u00a00\u00a0- do\u00a0nothing\nIs\u00a0the\u00a0code\u00a0given\u00a0below\u00a0correct\u00a0for\u00a0this\u00a0logic?\nn\u00a0=\u00a0int(input('Enter\u00a0a\u00a0number:\u00a0'))\nif\u00a0n\u00a0>\u00a00\u00a0:\nflag\u00a0=\u00a0True\nprint(n\u00a0*\u00a0n)\nelif\u00a0n\u00a0<\u00a00\u00a0:\nflag\u00a0=\u00a0True\nprint(n\u00a0*\u00a0n\u00a0*\u00a0n)\nAnswer\nx\nThis\u00a0is\u00a0misleading\u00a0code.\u00a0At\u00a0a\u00a0later\u00a0date,\u00a0anybody\u00a0looking\u00a0at\u00a0this\u00a0code\u00a0\nmay\u00a0feel\u00a0that\u00a0flag\u00a0=\u00a0True should\u00a0be written\u00a0outside\u00a0if and else.\nx\nBetter\u00a0code\u00a0will\u00a0be\u00a0as\u00a0follows:\nChapter 5:\u00a0 Decision\u00a0Control\u00a0Instruction\u00a0\n65\nn\u00a0=\u00a0int(input('Enter\u00a0a\u00a0number:\u00a0'))\nif\u00a0n\u00a0>\u00a00\u00a0:\nflag\u00a0=\u00a0True\nprint(n\u00a0*\u00a0n)\nelif\u00a0n\u00a0<\u00a00\u00a0:\nflag\u00a0=\u00a0True\nprint(n\u00a0*\u00a0n\u00a0*\u00a0n)\nelse\u00a0:\npass\n#\u00a0does\u00a0nothing\u00a0on\u00a0execution\n____________________________________________________________________\n[A] Answer\u00a0the\u00a0follo", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_110", "chunk_strategy": "fixed_size"}}, {"text": "0\u00a0:\nflag\u00a0=\u00a0True\nprint(n\u00a0*\u00a0n)\nelif\u00a0n\u00a0<\u00a00\u00a0:\nflag\u00a0=\u00a0True\nprint(n\u00a0*\u00a0n\u00a0*\u00a0n)\nelse\u00a0:\npass\n#\u00a0does\u00a0nothing\u00a0on\u00a0execution\n____________________________________________________________________\n[A] Answer\u00a0the\u00a0following\u00a0questions:\n(a) Write\u00a0conditional\u00a0expressions\u00a0for\n-\nIf\u00a0a\u00a0<\u00a010\u00a0b\u00a0=\u00a020,\u00a0else\u00a0b\u00a0=\u00a030\n-\nPrint\u00a0'Morning'\u00a0if\u00a0time\u00a0<\u00a012,\u00a0otherwise\u00a0print\u00a0'Afternoon'\n-\nIf\u00a0marks\u00a0>=\u00a070,\u00a0set\u00a0remarks\u00a0to\u00a0True,\u00a0otherwise\u00a0False\n(b) Rewrite\u00a0the\u00a0following\u00a0code\u00a0snippet\u00a0in\u00a01\u00a0line:\nx\u00a0=\u00a03\u00a0\ny\u00a0=\u00a03.0\u00a0\nif\u00a0x\u00a0==\u00a0y :\nprint('x\u00a0and\u00a0y\u00a0are\u00a0equal')\u00a0\nelse :\nprint('x\u00a0and\u00a0y\u00a0are\u00a0not\u00a0equal')\u00a0\n(c)\nWhat\u00a0happens\u00a0when\u00a0a\u00a0pass statement\u00a0is\u00a0executed?\n[B] What\u00a0will be\u00a0the\u00a0output\u00a0of\u00a0the\u00a0following\u00a0programs:\n(a) i,\u00a0j,\u00a0k =\u00a04,\u00a0-1,\u00a00\nw\u00a0=\u00a0i\u00a0or j\u00a0or k\u00a0\nx\u00a0=\u00a0i\u00a0and j\u00a0and k\u00a0\ny\u00a0=\u00a0i\u00a0or j\u00a0and k\u00a0\nz\u00a0=\u00a0i\u00a0and j\u00a0or k\u00a0\nprint(w,\u00a0x,\u00a0y,\u00a0z)\u00a0\n(b) a\u00a0=\u00a010\na\u00a0=\u00a0not\u00a0not\u00a0a\nprint(a)\u00a0\n66\nLet\u00a0Us\u00a0Python\n(c)\nx,\u00a0y,\u00a0z =\u00a020,\u00a040,\u00a045\u00a0\nif\u00a0 x\u00a0>\u00a0y\u00a0and\u00a0x\u00a0>\u00a0z\u00a0:\nprint('biggest\u00a0=\u00a0'\u00a0+\u00a0str(x))\nelif y\u00a0>\u00a0x\u00a0and y\u00a0>\u00a0z :\nprint('biggest\u00a0=\u00a0'\u00a0+\u00a0str(y))\nelif\u00a0z\u00a0>\u00a0x\u00a0and z\u00a0>\u00a0y :\nprint('biggest\u00a0=\u00a0'\u00a0+\u00a0str(z))\n", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_111", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0\n66\nLet\u00a0Us\u00a0Python\n(c)\nx,\u00a0y,\u00a0z =\u00a020,\u00a040,\u00a045\u00a0\nif\u00a0 x\u00a0>\u00a0y\u00a0and\u00a0x\u00a0>\u00a0z\u00a0:\nprint('biggest\u00a0=\u00a0'\u00a0+\u00a0str(x))\nelif y\u00a0>\u00a0x\u00a0and y\u00a0>\u00a0z :\nprint('biggest\u00a0=\u00a0'\u00a0+\u00a0str(y))\nelif\u00a0z\u00a0>\u00a0x\u00a0and z\u00a0>\u00a0y :\nprint('biggest\u00a0=\u00a0'\u00a0+\u00a0str(z))\n(d) num\u00a0=\u00a030\u00a0\nk\u00a0=\u00a0100\u00a0if\u00a0num\u00a0<=\u00a010\u00a0else 500\nprint(k)\n(e) a\u00a0=\u00a010\nb\u00a0=\u00a060\nif\u00a0a\u00a0and\u00a0b\u00a0>\u00a020\u00a0:\nprint('Hello')\nelse\u00a0:\nprint('Hi')\n(f)\na\u00a0=\u00a010\nb\u00a0=\u00a060\nif\u00a0a\u00a0>\u00a020\u00a0and\u00a0b\u00a0>\u00a020\u00a0:\nprint('Hello')\nelse\u00a0:\nprint('Hi')\n(g)\na =\u00a010\nif\u00a0a\u00a0=\u00a030\u00a0or\u00a040\u00a0or\u00a060\u00a0:\nprint('Hello')\nelse\u00a0:\nprint('Hi')\n(h) a\u00a0=\u00a010\nif\u00a0a\u00a0=\u00a030\u00a0or\u00a0a\u00a0==\u00a040\u00a0or\u00a0a\u00a0==\u00a060\u00a0:\nprint('Hello')\nelse\u00a0:\nprint('Hi')\n(i)\na\u00a0=\u00a010\nif\u00a0a\u00a0in\u00a0(30,\u00a040,\u00a050)\u00a0:\nprint('Hello')\nelse\u00a0:\nprint('Hi')\nChapter 5:\u00a0 Decision\u00a0Control\u00a0Instruction\u00a0\n67\n[C] Point\u00a0out\u00a0the\u00a0errors,\u00a0if\u00a0any,\u00a0in\u00a0the\u00a0following\u00a0programs:\n(a) a\u00a0=\u00a012.25\nb\u00a0=\u00a012.52\nif a\u00a0=\u00a0b :\nprint('a\u00a0and\u00a0b\u00a0are\u00a0equal')\n(b) if\u00a0 ord('X') <\u00a0ord('x')\nprint('Unicode\u00a0value\u00a0of\u00a0X\u00a0is\u00a0smaller\u00a0than\u00a0that\u00a0of\u00a0x')\u00a0\n(c)\nx\u00a0=\u00a010\u00a0\nif\u00a0 x\u00a0>=\u00a02\u00a0 then\nprint('x')\n(d) x\u00a0=\u00a010 ; y\u00a0=\u00a015\nif\u00a0x\u00a0%\u00a02\u00a0=\u00a0y\u00a0%\u00a03\nprint('Carpathians\\n')\n(e) x,\u00a0y =\u00a030,\u00a040\nif\u00a0x\u00a0==\u00a0y :\nprint", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_112", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0ord('x')\nprint('Unicode\u00a0value\u00a0of\u00a0X\u00a0is\u00a0smaller\u00a0than\u00a0that\u00a0of\u00a0x')\u00a0\n(c)\nx\u00a0=\u00a010\u00a0\nif\u00a0 x\u00a0>=\u00a02\u00a0 then\nprint('x')\n(d) x\u00a0=\u00a010 ; y\u00a0=\u00a015\nif\u00a0x\u00a0%\u00a02\u00a0=\u00a0y\u00a0%\u00a03\nprint('Carpathians\\n')\n(e) x,\u00a0y =\u00a030,\u00a040\nif\u00a0x\u00a0==\u00a0y :\nprint('x\u00a0is\u00a0equal\u00a0to\u00a0y')\nelseif\u00a0x\u00a0>\u00a0y\u00a0:\nprint('x\u00a0is\u00a0greater\u00a0than\u00a0y')\nelseif\u00a0x\u00a0<\u00a0y\u00a0:\nprint('x\u00a0is\u00a0less\u00a0than\u00a0y')\n[D] If\u00a0a\u00a0=\u00a010,\u00a0b\u00a0=\u00a012,\u00a0c\u00a0=\u00a00,\u00a0find\u00a0the\u00a0values\u00a0of\u00a0the\u00a0following\u00a0expressions:\na\u00a0!=\u00a06\u00a0and\u00a0b\u00a0>\u00a05\u00a0\na\u00a0==\u00a09\u00a0or\u00a0b\u00a0<\u00a03\nnot\u00a0(\u00a0a\u00a0<\u00a010 )\nnot\u00a0(\u00a0a\u00a0>\u00a05\u00a0and\u00a0c\u00a0)\u00a0\n5\u00a0and\u00a0c\u00a0!=\u00a08\u00a0or\u00a0!c\n[E] Attempt\u00a0the\u00a0following questions:\n(a) Any\u00a0integer\u00a0is\u00a0input\u00a0through\u00a0the\u00a0keyboard.\u00a0Write\u00a0a\u00a0program\u00a0to\u00a0find\u00a0\nout\u00a0whether\u00a0it\u00a0is\u00a0an\u00a0odd\u00a0number\u00a0or\u00a0even\u00a0number.\n(b) Any\u00a0 year\u00a0 is\u00a0 input\u00a0 through\u00a0 the\u00a0 keyboard.\u00a0 Write\u00a0 a\u00a0 program\u00a0 to\u00a0\ndetermine\u00a0whether\u00a0the\u00a0year\u00a0is\u00a0a\u00a0leap\u00a0year\u00a0or\u00a0not.\n(c)\nIf\u00a0 ages\u00a0 of\u00a0 Ram,\u00a0 Shyam\u00a0 and\u00a0Ajay\u00a0 are\u00a0 input\u00a0 through\u00a0 the\u00a0 keyboard,\u00a0\nwrite\u00a0a\u00a0program\u00a0to\u00a0determine\u00a0the\u00a0youngest\u00a0of\u00a0the\u00a0three.\n(d) Write\u00a0a\u00a0program\u00a0 to\u00a0check\u00a0whether\u00a0a\u00a0triangle\u00a0is\u00a0valid\u00a0or\u00a0not,\u00a0when\u00a0\nthe\u00a0three\u00a0angles\u00a0of\u00a0the\u00a0triangle\u00a0are\u00a0entere", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_113", "chunk_strategy": "fixed_size"}}, {"text": "ut\u00a0 through\u00a0 the\u00a0 keyboard,\u00a0\nwrite\u00a0a\u00a0program\u00a0to\u00a0determine\u00a0the\u00a0youngest\u00a0of\u00a0the\u00a0three.\n(d) Write\u00a0a\u00a0program\u00a0 to\u00a0check\u00a0whether\u00a0a\u00a0triangle\u00a0is\u00a0valid\u00a0or\u00a0not,\u00a0when\u00a0\nthe\u00a0three\u00a0angles\u00a0of\u00a0the\u00a0triangle\u00a0are\u00a0entered\u00a0through\u00a0the\u00a0keyboard.\u00a0\n68\nLet\u00a0Us\u00a0Python\nA\u00a0triangle\u00a0is\u00a0valid\u00a0if\u00a0the\u00a0sum\u00a0of\u00a0all\u00a0the\u00a0three\u00a0angles\u00a0is\u00a0equal\u00a0to\u00a0180\u00a0\ndegrees.\n(e) Write\u00a0 a\u00a0program\u00a0 to\u00a0 find\u00a0the\u00a0 absolute\u00a0value\u00a0 of\u00a0a\u00a0 number\u00a0entered\u00a0\nthrough\u00a0the\u00a0keyboard.\n(f)\nGiven\u00a0the\u00a0length\u00a0and\u00a0breadth\u00a0of\u00a0a\u00a0rectangle,\u00a0write\u00a0a\u00a0program\u00a0to\u00a0find\u00a0\nwhether\u00a0the\u00a0area\u00a0of\u00a0the\u00a0rectangle\u00a0is\u00a0greater\u00a0than\u00a0its\u00a0perimeter.\u00a0For\u00a0\nexample,\u00a0the\u00a0area\u00a0of\u00a0the\u00a0rectangle\u00a0with\u00a0length\u00a0=\u00a05\u00a0and\u00a0breadth\u00a0=\u00a04\u00a0\nis\u00a0greater\u00a0than\u00a0its\u00a0perimeter.\n(g)\nGiven\u00a0three\u00a0points\u00a0(x1,\u00a0y1),\u00a0(x2,\u00a0y2) and\u00a0(x3,\u00a0y3),\u00a0write\u00a0a\u00a0program\u00a0to\u00a0\ncheck\u00a0if\u00a0all\u00a0the\u00a0three\u00a0points\u00a0fall\u00a0on\u00a0one\u00a0straight\u00a0line.\n(h) Given\u00a0the\u00a0coordinates\u00a0(x,\u00a0y) of\u00a0center\u00a0of\u00a0a\u00a0circle\u00a0and\u00a0its\u00a0radius,\u00a0write\u00a0\na\u00a0program\u00a0that\u00a0will\u00a0determine\u00a0whether\u00a0a\u00a0point\u00a0lies\u00a0inside\u00a0the\u00a0circle,\u00a0\non\u00a0 the\u00a0 circle\u00a0 or\u00a0 outside\u00a0 the\u00a0 circle.\u00a0 (Hint:\u00a0 Use\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_114", "chunk_strategy": "fixed_size"}}, {"text": "iven\u00a0the\u00a0coordinates\u00a0(x,\u00a0y) of\u00a0center\u00a0of\u00a0a\u00a0circle\u00a0and\u00a0its\u00a0radius,\u00a0write\u00a0\na\u00a0program\u00a0that\u00a0will\u00a0determine\u00a0whether\u00a0a\u00a0point\u00a0lies\u00a0inside\u00a0the\u00a0circle,\u00a0\non\u00a0 the\u00a0 circle\u00a0 or\u00a0 outside\u00a0 the\u00a0 circle.\u00a0 (Hint:\u00a0 Use\u00a0 sqrt( ) and\u00a0 pow(\u00a0 )\nfunctions)\n(i)\nGiven\u00a0a\u00a0point\u00a0(x,\u00a0y),\u00a0write\u00a0a\u00a0program\u00a0to\u00a0find\u00a0out\u00a0if\u00a0it\u00a0lies\u00a0on\u00a0the\u00a0X-\naxis,\u00a0Y-axis\u00a0or\u00a0on\u00a0the\u00a0origin.\n(j)\nA\u00a0 year\u00a0 is\u00a0 entered\u00a0 through\u00a0 the\u00a0 keyboard,\u00a0 write\u00a0 a\u00a0 program\u00a0 to\u00a0\ndetermine\u00a0whether\u00a0the\u00a0year\u00a0is\u00a0leap\u00a0or\u00a0not.\u00a0Use\u00a0the\u00a0logical\u00a0operators\u00a0\nand and\u00a0or.\n(k)\nIf\u00a0the\u00a0 three\u00a0sides\u00a0 of\u00a0a\u00a0 triangle\u00a0are\u00a0entered\u00a0through\u00a0 the\u00a0keyboard,\u00a0\nwrite\u00a0a\u00a0program\u00a0to\u00a0check\u00a0whether\u00a0the\u00a0triangle\u00a0is\u00a0valid\u00a0or\u00a0not.\u00a0The\u00a0\ntriangle\u00a0is\u00a0valid\u00a0if\u00a0the\u00a0sum\u00a0of\u00a0two\u00a0sides\u00a0is\u00a0greater\u00a0than\u00a0the\u00a0largest\u00a0of\u00a0\nthe\u00a0three\u00a0sides.\n(l)\nIf\u00a0the\u00a0 three\u00a0sides\u00a0 of\u00a0 a\u00a0triangle\u00a0are\u00a0entered\u00a0 through\u00a0the\u00a0keyboard,\u00a0\nwrite\u00a0 a\u00a0 program\u00a0 to\u00a0 check\u00a0 whether\u00a0 the\u00a0 triangle\u00a0 is\u00a0 isosceles,\u00a0\nequilateral,\u00a0scalene\u00a0or\u00a0right\u00a0angled\u00a0triangle.\nLet\u00a0Us\nPython\n69\nRepetition Control\nInstruction\nx\nRepetition\u00a0Control\u00a0Instruct", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_115", "chunk_strategy": "fixed_size"}}, {"text": "ard,\u00a0\nwrite\u00a0 a\u00a0 program\u00a0 to\u00a0 check\u00a0 whether\u00a0 the\u00a0 triangle\u00a0 is\u00a0 isosceles,\u00a0\nequilateral,\u00a0scalene\u00a0or\u00a0right\u00a0angled\u00a0triangle.\nLet\u00a0Us\nPython\n69\nRepetition Control\nInstruction\nx\nRepetition\u00a0Control\u00a0Instruction\nx\nElse\u00a0Block\u00a0of\u00a0a\u00a0Loop\nx\nUsage\u00a0of\u00a0while Loop\nx\nPrograms\nx\nUsage\u00a0of\u00a0for Loop\nx\nExercises\nx\nbreak and\u00a0continue\n6\n\u201cMerry\u00a0go\u00a0round...\u201d\n70\nLet\u00a0Us\u00a0Python\nRepetition\u00a0Control\u00a0Instruction\nx\nIt helps\u00a0us\u00a0a\u00a0repeat\u00a0a\u00a0set\u00a0of\u00a0statements\u00a0in\u00a0a\u00a0program.\u00a0There\u00a0are\u00a0two\u00a0\ntypes\u00a0of\u00a0repetition\u00a0control\u00a0instructions:\n(a) while\u00a0\n(b) for\u00a0\nUnlike\u00a0many\u00a0other\u00a0languages\u00a0there\u00a0is\u00a0no\u00a0do-while\u00a0loop\u00a0in\u00a0Python.\nx\nwhile is\u00a0used\u00a0to\u00a0repeatedly\u00a0execute\u00a0instructions\u00a0as\u00a0long\u00a0as\u00a0condition\u00a0\nis\u00a0true.\u00a0It\u00a0has\u00a0two\u00a0forms:\nwhile\u00a0 condition\u00a0:\nstatement1\u00a0\nstatement2\nwhile\u00a0 condition\u00a0:\nstatement1\u00a0\nstatement2\nelse\u00a0:\nstatement3\nstatement4\n-\nelse block\u00a0is\u00a0optional.\u00a0If\u00a0present,\u00a0it\u00a0is\u00a0 executed\u00a0when\u00a0 condition\nfails.\u00a0\n-\nIf\u00a0the\u00a0while loop\u00a0is\u00a0terminated\u00a0abruptly\u00a0using\u00a0a\u00a0break statement\u00a0\nthen\u00a0the\u00a0else block\u00a0is\u00a0not\u00a0executed.\nx\nfor is\u00a0used\u00a0 to\u00a0iter", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_116", "chunk_strategy": "fixed_size"}}, {"text": "e block\u00a0is\u00a0optional.\u00a0If\u00a0present,\u00a0it\u00a0is\u00a0 executed\u00a0when\u00a0 condition\nfails.\u00a0\n-\nIf\u00a0the\u00a0while loop\u00a0is\u00a0terminated\u00a0abruptly\u00a0using\u00a0a\u00a0break statement\u00a0\nthen\u00a0the\u00a0else block\u00a0is\u00a0not\u00a0executed.\nx\nfor is\u00a0used\u00a0 to\u00a0iterate\u00a0 over\u00a0elements\u00a0 of\u00a0 a\u00a0sequence\u00a0 such\u00a0as\u00a0 string,\u00a0\ntuple\u00a0or\u00a0list.\u00a0It\u00a0has\u00a0two\u00a0forms:\nfor\u00a0var\u00a0in\u00a0list\u00a0:\u00a0\nstatement1\u00a0\nstatement2\nfor\u00a0var\u00a0in\u00a0list\u00a0:\u00a0\nstatement1\u00a0\nstatement2\nelse\u00a0:\nstatement3\nstatement4\n-\nDuring\u00a0each\u00a0iteration\u00a0var is\u00a0assigned\u00a0the\u00a0next\u00a0value\u00a0from\u00a0the\u00a0list.\n-\nIn\u00a0place\u00a0of\u00a0a\u00a0list\u00a0a\u00a0string,\u00a0tuple,\u00a0set\u00a0or\u00a0dictionary\u00a0can\u00a0also\u00a0be\u00a0used.\n-\nelse block\u00a0 is\u00a0 optional.\u00a0 If\u00a0 present,\u00a0 it\u00a0 is\u00a0 executed\u00a0 if\u00a0 loop\u00a0 is\u00a0 not\u00a0\nterminated\u00a0abruptly\u00a0using\u00a0break.\nUsage\u00a0of\u00a0while loop\nx\nA\u00a0while loop\u00a0can\u00a0be\u00a0used\u00a0in\u00a0following\u00a0three\u00a0situations:\n-\nRepeat\u00a0a\u00a0set\u00a0of\u00a0statements\u00a0till\u00a0a\u00a0condition\u00a0remains\u00a0True.\nChapter 6:\u00a0 Repetition Control\u00a0Instruction\u00a0\n71\n-\nRepeat\u00a0a\u00a0set\u00a0of\u00a0statements\u00a0a\u00a0finite\u00a0number\u00a0of\u00a0times.\n-\nIterate\u00a0through\u00a0a\u00a0string,\u00a0list\u00a0and\u00a0tuple.\nx\nWhen\u00a0 we\u00a0 use\u00a0 while loop\u00a0 to\u00a0 repeat\u00a0 a\u00a0 set\u00a0 of\u00a0 statem", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_117", "chunk_strategy": "fixed_size"}}, {"text": "er 6:\u00a0 Repetition Control\u00a0Instruction\u00a0\n71\n-\nRepeat\u00a0a\u00a0set\u00a0of\u00a0statements\u00a0a\u00a0finite\u00a0number\u00a0of\u00a0times.\n-\nIterate\u00a0through\u00a0a\u00a0string,\u00a0list\u00a0and\u00a0tuple.\nx\nWhen\u00a0 we\u00a0 use\u00a0 while loop\u00a0 to\u00a0 repeat\u00a0 a\u00a0 set\u00a0 of\u00a0 statements\u00a0 till\u00a0 a\u00a0\ncondition\u00a0remains\u00a0True,\u00a0it\u00a0means\u00a0that\u00a0when\u00a0we\u00a0do\u00a0not\u00a0know\u00a0before-\nhand\u00a0how\u00a0many\u00a0times\u00a0the\u00a0statements\u00a0are\u00a0to\u00a0be\u00a0executed.\nnum\u00a0=\u00a0int(input('Enter\u00a0a\u00a0number:\u00a0'))\nwhile\u00a0num\u00a0!=\u00a05\u00a0:\nprint(num,\u00a0num\u00a0*\u00a0num)\nnum\u00a0=\u00a0int(input('Enter\u00a0a\u00a0number:\u00a0'))\nThe\u00a0loop\u00a0terminates\u00a0when\u00a05\u00a0is\u00a0entered\u00a0as\u00a0input.\nx\nWe\u00a0 can\u00a0 use\u00a0 a\u00a0 while loop\u00a0 to\u00a0 repeat\u00a0 a\u00a0 set\u00a0 of\u00a0 statements\u00a0 a\u00a0 finite\u00a0\nnumber\u00a0of\u00a0times.\ncount\u00a0=\u00a00\nwhile\u00a0count\u00a0<\u00a010\u00a0:\nprint(count,\u00a0count\u00a0*\u00a0count,\u00a0count\u00a0*\u00a0count\u00a0*\u00a0count)\ncount\u00a0+=\u00a01\nx\nA\u00a0while loop\u00a0can\u00a0also\u00a0be\u00a0used\u00a0to\u00a0iterate\u00a0through\u00a0a\u00a0string,\u00a0a\u00a0list\u00a0or\u00a0a\u00a0\ntuple\u00a0using\u00a0an\u00a0index\u00a0value\u00a0as\u00a0shown\u00a0in\u00a0the\u00a0following\u00a0program:\ns\u00a0=\u00a0'Mumbai'\nlst\u00a0=\u00a0['desert',\u00a0'dessert',\u00a0'to',\u00a0'too', 'lose',\u00a0'loose']\u00a0\ntpl\u00a0=\u00a0(10,\u00a020,\u00a030,\u00a0-20,\u00a0-10)\ni\u00a0=\u00a00\nwhile\u00a0i\u00a0<\u00a0len(lst)\u00a0:\nprint(i,\u00a0s[i],\u00a0lst[i],\u00a0tpl[i])\ni\u00a0+=\u00a01\nSince\u00a0items\u00a0in\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_118", "chunk_strategy": "fixed_size"}}, {"text": "following\u00a0program:\ns\u00a0=\u00a0'Mumbai'\nlst\u00a0=\u00a0['desert',\u00a0'dessert',\u00a0'to',\u00a0'too', 'lose',\u00a0'loose']\u00a0\ntpl\u00a0=\u00a0(10,\u00a020,\u00a030,\u00a0-20,\u00a0-10)\ni\u00a0=\u00a00\nwhile\u00a0i\u00a0<\u00a0len(lst)\u00a0:\nprint(i,\u00a0s[i],\u00a0lst[i],\u00a0tpl[i])\ni\u00a0+=\u00a01\nSince\u00a0items\u00a0in\u00a0a\u00a0set\u00a0or\u00a0a\u00a0dictionary\u00a0cannot\u00a0be\u00a0accessed\u00a0using\u00a0an\u00a0index\u00a0\nvalue,\u00a0it\u00a0is\u00a0better\u00a0to\u00a0use\u00a0a\u00a0for loop\u00a0to\u00a0access\u00a0their\u00a0elements.\nx\nOf\u00a0the\u00a0three\u00a0usages\u00a0of\u00a0while\u00a0loop\u00a0shown\u00a0above,\u00a0the\u00a0most\u00a0popular\u00a0is\u00a0\nthe\u00a0 first\u00a0 usage\u2014repeat\u00a0 statements\u00a0 an\u00a0 unknown\u00a0number\u00a0 of\u00a0 times.\u00a0\nThe\u00a0other\u00a0two\u00a0situations\u00a0are\u00a0usually\u00a0handled\u00a0using\u00a0a\u00a0for loop.\nUsage\u00a0of\u00a0for loop\nx\nA\u00a0for loop\u00a0can\u00a0be\u00a0used\u00a0in\u00a0following\u00a0two\u00a0situations:\n-\nRepeat\u00a0a\u00a0set\u00a0of\u00a0statements\u00a0a\u00a0finite\u00a0number\u00a0of\u00a0times.\n-\nIterate\u00a0through\u00a0a\u00a0string,\u00a0list,\u00a0tuple,\u00a0set\u00a0or\u00a0dictionary.\n72\nLet\u00a0Us\u00a0Python\nx\nTo\u00a0 repeat\u00a0 a\u00a0 set\u00a0 of\u00a0 statements\u00a0 a\u00a0 finite\u00a0 number\u00a0 of\u00a0 times\u00a0 a built-in\u00a0\nfunction range(\u00a0) is\u00a0used.\nx\nrange(\u00a0)\u00a0function\u00a0generates a\u00a0sequence\u00a0of\u00a0integers.\nrange(10)\u00a0- generates\u00a0numbers\u00a0from\u00a00\u00a0to\u00a09.\nrange(10,\u00a020)\u00a0- generates\u00a0numbers\u00a0from\u00a010\u00a0to\u00a019.\nrange(10,\u00a020,\u00a02)\u00a0- ", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_119", "chunk_strategy": "fixed_size"}}, {"text": "ilt-in\u00a0\nfunction range(\u00a0) is\u00a0used.\nx\nrange(\u00a0)\u00a0function\u00a0generates a\u00a0sequence\u00a0of\u00a0integers.\nrange(10)\u00a0- generates\u00a0numbers\u00a0from\u00a00\u00a0to\u00a09.\nrange(10,\u00a020)\u00a0- generates\u00a0numbers\u00a0from\u00a010\u00a0to\u00a019.\nrange(10,\u00a020,\u00a02)\u00a0- generates\u00a0numbers\u00a0from\u00a010\u00a0to\u00a019\u00a0in\u00a0steps\u00a0of\u00a02.\nrange(20,\u00a010,\u00a0-3)\u00a0- generates\u00a0numbers\u00a0from\u00a020\u00a0to\u00a09\u00a0in\u00a0steps\u00a0of\u00a0-3.\nNote\u00a0that\u00a0range(\u00a0) cannot\u00a0generate\u00a0a\u00a0sequence\u00a0of\u00a0floats.\nx\nIn\u00a0general,\u00a0\nrange(start,\u00a0stop,\u00a0step)\u00a0\nproduces\u00a0 a\u00a0 sequence\u00a0 of\u00a0 integers\u00a0 from\u00a0 start\u00a0 (inclusive)\u00a0 to\u00a0 stop\u00a0\n(exclusive)\u00a0by\u00a0step.\nx\nThe\u00a0list\u00a0of\u00a0numbers\u00a0generated\u00a0using\u00a0range(\u00a0) can\u00a0be\u00a0iterated\u00a0through\u00a0\nusing\u00a0a\u00a0for loop.\nfor\u00a0i\u00a0in\u00a0range(1,\u00a010,\u00a02)\u00a0:\nprint(i,\u00a0i\u00a0*\u00a0i,\u00a0i\u00a0*\u00a0i\u00a0*\u00a0i)\nx\nA\u00a0 for loop\u00a0 is\u00a0 very\u00a0 popularly\u00a0 used\u00a0 to\u00a0 iterate\u00a0 through\u00a0 a\u00a0 string,\u00a0 list,\u00a0\ntuple,\u00a0set\u00a0or\u00a0dictionary,\u00a0as\u00a0shown\u00a0below.\u00a0\nfor\u00a0char\u00a0in\u00a0'Leopard'\u00a0:\nprint(char)\nfor\u00a0animal\u00a0in\u00a0['Cat',\u00a0'Dog',\u00a0'Tiger',\u00a0'Lion',\u00a0'Leopard']\u00a0:\nprint(animal)\nfor\u00a0flower\u00a0in\u00a0('Rose',\u00a0'Lily',\u00a0'Jasmine')\u00a0:\nprint(flower)\nfor\u00a0num\u00a0in\u00a0{10,\u00a020,\u00a030,\u00a0-10,\u00a0-25}\u00a0:\nprint(num)\nfor\u00a0key\u00a0in", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_120", "chunk_strategy": "fixed_size"}}, {"text": "print(char)\nfor\u00a0animal\u00a0in\u00a0['Cat',\u00a0'Dog',\u00a0'Tiger',\u00a0'Lion',\u00a0'Leopard']\u00a0:\nprint(animal)\nfor\u00a0flower\u00a0in\u00a0('Rose',\u00a0'Lily',\u00a0'Jasmine')\u00a0:\nprint(flower)\nfor\u00a0num\u00a0in\u00a0{10,\u00a020,\u00a030,\u00a0-10,\u00a0-25}\u00a0:\nprint(num)\nfor\u00a0key\u00a0in\u00a0{'A101'\u00a0:\u00a0'Rajesh',\u00a0'A111'\u00a0:\u00a0'Sunil',\u00a0'A112'\u00a0:\u00a0'Rakesh'}\u00a0:\nprint(key)\nIn\u00a0the\u00a0first\u00a0for loop\u00a0in each\u00a0iteration of\u00a0the\u00a0loop\u00a0char is\u00a0assigned\u00a0the\u00a0\nnext\u00a0value\u00a0from\u00a0the\u00a0string.\nSimilarly,\u00a0in\u00a0the\u00a0second,\u00a0third\u00a0and\u00a0fourth\u00a0for loop,\u00a0in\u00a0each\u00a0iteration of\u00a0\nthe\u00a0 loop\u00a0 animal/flower/num is\u00a0 assigned\u00a0 the\u00a0 next\u00a0 value\u00a0 form\u00a0 the\u00a0\nlist/tuple/set.\nChapter 6:\u00a0 Repetition Control\u00a0Instruction\u00a0\n73\nNote\u00a0 that\u00a0in\u00a0the\u00a0last\u00a0for\u00a0loop\u00a0we\u00a0 are\u00a0printing\u00a0only\u00a0 the\u00a0keys\u00a0 in\u00a0the\u00a0\ndictionary.\u00a0 Printing\u00a0 values,\u00a0 or\u00a0 printing\u00a0 both\u00a0 keys\u00a0 and\u00a0 values\u00a0 are\u00a0\ncovered\u00a0in\u00a0Chapter\u00a011.\nx\nIf\u00a0while\u00a0iterating\u00a0through\u00a0a\u00a0collection\u00a0using\u00a0a\u00a0for loop\u00a0if\u00a0we\u00a0wish\u00a0to\u00a0\nalso\u00a0get\u00a0an\u00a0index\u00a0of\u00a0the\u00a0item\u00a0we\u00a0should\u00a0use\u00a0the\u00a0built-in\u00a0enumerate(\u00a0)\nfunction as\u00a0shown\u00a0below:\nlst\u00a0=\u00a0['desert',\u00a0'dessert',\u00a0'to',\u00a0'too',\u00a0'lose',\u00a0'loose']\u00a0\nfor\u00a0i,\u00a0ele\u00a0in\u00a0enu", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_121", "chunk_strategy": "fixed_size"}}, {"text": "ng\u00a0a\u00a0for loop\u00a0if\u00a0we\u00a0wish\u00a0to\u00a0\nalso\u00a0get\u00a0an\u00a0index\u00a0of\u00a0the\u00a0item\u00a0we\u00a0should\u00a0use\u00a0the\u00a0built-in\u00a0enumerate(\u00a0)\nfunction as\u00a0shown\u00a0below:\nlst\u00a0=\u00a0['desert',\u00a0'dessert',\u00a0'to',\u00a0'too',\u00a0'lose',\u00a0'loose']\u00a0\nfor\u00a0i,\u00a0ele\u00a0in\u00a0enumerate(lst)\u00a0:\nprint(i,\u00a0ele)\nbreak and\u00a0continue\nx\nbreak and\u00a0continue statements\u00a0can\u00a0be\u00a0used\u00a0with\u00a0while and\u00a0for.\nx\nbreak statement\u00a0 terminates\u00a0 the\u00a0 loop\u00a0 without\u00a0 executing\u00a0 the\u00a0 else\nblock.\nx\ncontinue statement\u00a0skips\u00a0the\u00a0rest\u00a0of\u00a0the\u00a0statements\u00a0in\u00a0the\u00a0block\u00a0and\u00a0\ncontinues\u00a0with\u00a0the\u00a0next\u00a0iteration\u00a0of\u00a0the\u00a0loop.\nElse\u00a0Block\u00a0of\u00a0a\u00a0Loop\nx\nelse block\u00a0of\u00a0a\u00a0 while loop\u00a0should\u00a0be\u00a0 used\u00a0in\u00a0situations\u00a0 where\u00a0you\u00a0\nwish\u00a0to\u00a0execute\u00a0some\u00a0statements\u00a0if\u00a0the\u00a0loop\u00a0is\u00a0terminated\u00a0normally\u00a0\nand\u00a0not\u00a0if\u00a0it\u00a0is\u00a0terminated\u00a0abruptly.\u00a0\nx\nSuch\u00a0a\u00a0situation\u00a0arises\u00a0if\u00a0we\u00a0are\u00a0to\u00a0determine whether\u00a0a\u00a0number\u00a0is\u00a0\nprime\u00a0or\u00a0not.\nnum\u00a0=\u00a0int(input('Enter\u00a0an\u00a0integer:\u00a0'))\ni\u00a0=\u00a02\nwhile\u00a0i\u00a0<=\u00a0num\u00a0- 1\u00a0:\nif\u00a0num\u00a0%\u00a0i\u00a0==\u00a00\u00a0:\nprint(num,\u00a0'is\u00a0not\u00a0a\u00a0prime\u00a0number')\nbreak\ni\u00a0+=\u00a01\nelse\u00a0:\nprint(num,\u00a0'is\u00a0a\u00a0prime\u00a0number')\nNote\u00a0the\u00a0indentation\u00a0of\u00a0else.\u00a0else ", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_122", "chunk_strategy": "fixed_size"}}, {"text": "nt(input('Enter\u00a0an\u00a0integer:\u00a0'))\ni\u00a0=\u00a02\nwhile\u00a0i\u00a0<=\u00a0num\u00a0- 1\u00a0:\nif\u00a0num\u00a0%\u00a0i\u00a0==\u00a00\u00a0:\nprint(num,\u00a0'is\u00a0not\u00a0a\u00a0prime\u00a0number')\nbreak\ni\u00a0+=\u00a01\nelse\u00a0:\nprint(num,\u00a0'is\u00a0a\u00a0prime\u00a0number')\nNote\u00a0the\u00a0indentation\u00a0of\u00a0else.\u00a0else is\u00a0working\u00a0for\u00a0the\u00a0while and\u00a0not\u00a0\nfor\u00a0if.\n74\nLet\u00a0Us\u00a0Python\nx\nIn\u00a0 the\u00a0 following\u00a0example\u00a0else block\u00a0will\u00a0 not\u00a0go\u00a0 to\u00a0work\u00a0as\u00a0the\u00a0list\u00a0\ncontains\u00a0 3,\u00a0 a\u00a0 non-multiple\u00a0 of\u00a0 10,\u00a0 on\u00a0 encountering\u00a0 which\u00a0 we\u00a0\nterminate\u00a0the\u00a0loop.\u00a0\nfor\u00a0ele\u00a0in\u00a0[10,\u00a020,\u00a030,\u00a03,\u00a040,\u00a050]\u00a0:\nif\u00a0ele\u00a0%\u00a010\u00a0!=\u00a00\u00a0:\u00a0\nprint(ele,\u00a0'is\u00a0a\u00a0not\u00a0a\u00a0multiple\u00a0of\u00a010')\nbreak\nelse\u00a0:\u00a0\nprint('all\u00a0numbers\u00a0in\u00a0list\u00a0are\u00a0multiples\u00a0of\u00a010')\n____________________________________________________________________\nProblem\u00a06.1\nWrite\u00a0 a\u00a0 program\u00a0 that\u00a0 receives\u00a0 3\u00a0 sets\u00a0 of\u00a0 values\u00a0 of\u00a0 p,\u00a0 n\u00a0 and\u00a0 r\u00a0 and\u00a0\ncalculates\u00a0simple\u00a0interest\u00a0for\u00a0each.\nProgram\ni\u00a0=\u00a01\nwhile\u00a0i\u00a0<=\u00a03\u00a0:\u00a0\np\u00a0=\u00a0float(input('Enter\u00a0value\u00a0of\u00a0p:\u00a0'))\nn\u00a0=\u00a0int(input('Enter\u00a0value\u00a0of\u00a0n:\u00a0'))\nr\u00a0=\u00a0float(input('Enter\u00a0value\u00a0of\u00a0r:\u00a0'))\nsi\u00a0=\u00a0p\u00a0*\u00a0n\u00a0*\u00a0r\u00a0/\u00a0100\nprint('Simple\u00a0interest\u00a0=\u00a0Rs.\u00a0'\u00a0+\u00a0str\u00a0(si))\ni\u00a0=\u00a0i\u00a0+\u00a01", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_123", "chunk_strategy": "fixed_size"}}, {"text": "e\u00a0i\u00a0<=\u00a03\u00a0:\u00a0\np\u00a0=\u00a0float(input('Enter\u00a0value\u00a0of\u00a0p:\u00a0'))\nn\u00a0=\u00a0int(input('Enter\u00a0value\u00a0of\u00a0n:\u00a0'))\nr\u00a0=\u00a0float(input('Enter\u00a0value\u00a0of\u00a0r:\u00a0'))\nsi\u00a0=\u00a0p\u00a0*\u00a0n\u00a0*\u00a0r\u00a0/\u00a0100\nprint('Simple\u00a0interest\u00a0=\u00a0Rs.\u00a0'\u00a0+\u00a0str\u00a0(si))\ni\u00a0=\u00a0i\u00a0+\u00a01\nOutput\nEnter\u00a0value\u00a0of\u00a0p:\u00a01000\nEnter\u00a0value\u00a0of\u00a0n:\u00a03\nEnter\u00a0value\u00a0of\u00a0r:\u00a015.5\nSimple\u00a0interest\u00a0=\u00a0Rs.\u00a0465.0\nEnter\u00a0value\u00a0of\u00a0p:\u00a02000\nEnter\u00a0value\u00a0of\u00a0n:\u00a05\nEnter\u00a0value\u00a0of\u00a0r:\u00a016.5\nSimple\u00a0interest\u00a0=\u00a0Rs.\u00a01650.0\nEnter\u00a0value\u00a0of\u00a0p:\u00a03000\nChapter 6:\u00a0 Repetition Control\u00a0Instruction\u00a0\n75\nEnter\u00a0value\u00a0of\u00a0n:\u00a02\nEnter\u00a0value\u00a0of\u00a0r:\u00a010.45\nSimple\u00a0interest\u00a0=\u00a0Rs.\u00a0626.9999999999999\n____________________________________________________________________\nProblem\u00a06.2\nWrite\u00a0a\u00a0program\u00a0that\u00a0prints\u00a0numbers\u00a0from\u00a01\u00a0to\u00a010\u00a0using\u00a0an\u00a0infinite\u00a0loop.\u00a0\nAll\u00a0numbers\u00a0should\u00a0get\u00a0printed\u00a0in\u00a0the\u00a0same\u00a0line.\nProgram\ni\u00a0=\u00a01\u00a0\nwhile\u00a01 :\u00a0\nprint(i,\u00a0end = '\u00a0 ')\u00a0\ni\u00a0+=\u00a01\u00a0\nif\u00a0i\u00a0>\u00a010\u00a0:\u00a0\nbreak\nOutput\n1\u00a02\u00a03\u00a04\u00a05\u00a06\u00a07\u00a08\u00a09\u00a010\nTips\nx\nwhile\u00a0 1 creates\u00a0 an\u00a0 infinite\u00a0 loop,\u00a0 as\u00a0 1\u00a0 is\u00a0 non-zero,\u00a0 hence\u00a0 true.\nReplacing\u00a01\u00a0with\u00a0any\u00a0non-zero\u00a0number\u00a0will\u00a0create\u00a0an\u00a0infinite\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_124", "chunk_strategy": "fixed_size"}}, {"text": ")\u00a0\ni\u00a0+=\u00a01\u00a0\nif\u00a0i\u00a0>\u00a010\u00a0:\u00a0\nbreak\nOutput\n1\u00a02\u00a03\u00a04\u00a05\u00a06\u00a07\u00a08\u00a09\u00a010\nTips\nx\nwhile\u00a0 1 creates\u00a0 an\u00a0 infinite\u00a0 loop,\u00a0 as\u00a0 1\u00a0 is\u00a0 non-zero,\u00a0 hence\u00a0 true.\nReplacing\u00a01\u00a0with\u00a0any\u00a0non-zero\u00a0number\u00a0will\u00a0create\u00a0an\u00a0infinite\u00a0loop.\nx\nAnother\u00a0way\u00a0of\u00a0creating\u00a0an\u00a0infinite\u00a0loop\u00a0is\u00a0while\u00a0True.\nx\nend = '\u00a0' in\u00a0print(\u00a0) prints\u00a0a\u00a0space\u00a0 after\u00a0printing\u00a0i in\u00a0each\u00a0iteration.\u00a0\nDefault\u00a0value\u00a0of\u00a0end is\u00a0newline ('\\n').\n____________________________________________________________________\nProblem\u00a06.3\nWrite\u00a0a\u00a0program\u00a0that\u00a0prints\u00a0all\u00a0unique\u00a0combinations\u00a0of\u00a01,\u00a02\u00a0and\u00a03.\nProgram\ni\u00a0=\u00a01\u00a0\nwhile\u00a0i\u00a0<=\u00a03\u00a0:\u00a0\nj\u00a0=\u00a01\u00a0\nwhile\u00a0j\u00a0<=\u00a03\u00a0:\u00a0\nk\u00a0=\u00a01\n76\nLet\u00a0Us\u00a0Python\nwhile\u00a0k\u00a0<=\u00a03\u00a0:\u00a0\nif\u00a0i\u00a0==\u00a0j\u00a0or\u00a0j\u00a0==\u00a0k\u00a0or\u00a0k\u00a0==\u00a0i\u00a0:\u00a0\nk\u00a0+=\u00a01\u00a0\ncontinue\u00a0\nelse\u00a0:\nprint(i,\u00a0j,\u00a0k)\nk\u00a0+=\u00a01\u00a0\nj\u00a0+=\u00a01\ni\u00a0+=\u00a01\u00a0\nOutput\n1\u00a02\u00a03\n1\u00a03\u00a02\n2\u00a01\u00a03\n2\u00a03\u00a01\n3\u00a01\u00a02\n3\u00a02\u00a01\n____________________________________________________________________\nProblem\u00a06.4\nWrite\u00a0a\u00a0program\u00a0that\u00a0obtains\u00a0decimal\u00a0value\u00a0of\u00a0a\u00a0binary\u00a0numeric\u00a0string.\u00a0\nFor\u00a0example,\u00a0decimal\u00a0value\u00a0of\u00a0'1111'\u00a0is\u00a015.\nProgram\nb\u00a0=\u00a0'1111'\ni\u00a0=\u00a00\u00a0\nwhile\u00a0b\u00a0:\u00a0\ni\u00a0=\u00a0i", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_125", "chunk_strategy": "fixed_size"}}, {"text": "_____________________________\nProblem\u00a06.4\nWrite\u00a0a\u00a0program\u00a0that\u00a0obtains\u00a0decimal\u00a0value\u00a0of\u00a0a\u00a0binary\u00a0numeric\u00a0string.\u00a0\nFor\u00a0example,\u00a0decimal\u00a0value\u00a0of\u00a0'1111'\u00a0is\u00a015.\nProgram\nb\u00a0=\u00a0'1111'\ni\u00a0=\u00a00\u00a0\nwhile\u00a0b\u00a0:\u00a0\ni\u00a0=\u00a0i\u00a0*\u00a02\u00a0+\u00a0(ord(b[0])\u00a0- ord('0'))\u00a0\nb\u00a0=\u00a0b[1:]\nprint('Decimal\u00a0value\u00a0=\u00a0' +\u00a0str(i))\u00a0\nOutput\nDecimal\u00a0value\u00a0=\u00a015\nTips\nx\nord(1) is\u00a049,\u00a0whereas\u00a0ord('0') is\u00a00.\nx\nb\u00a0=\u00a0b[1:] strips\u00a0the\u00a0first\u00a0character\u00a0in\u00a0b.\u00a0\n____________________________________________________________________\nChapter 6:\u00a0 Repetition Control\u00a0Instruction\u00a0\n77\nProblem\u00a06.5\nWrite\u00a0a\u00a0program\u00a0that\u00a0generates\u00a0the\u00a0following\u00a0output\u00a0using\u00a0a\u00a0for loop:\nA,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,\nz,y,x,w,v,u,t,s,r,q,p,o,n,m,l,k,j,i,h,g,f,e,d,c,b,a,\nProgram\nfor\u00a0alpha\u00a0in\u00a0range(65, 91)\u00a0:\nprint(chr(alpha),\u00a0end=',')\nprint( )\nfor\u00a0alpha\u00a0in\u00a0range(122, 96,\u00a0-1)\u00a0:\nprint(chr(alpha),\u00a0end=',')\nTips\nx\nUnicode\u00a0 values\u00a0 of\u00a0 alphabets\u00a0 A-Z\u00a0 are\u00a0 65-90.\u00a0 Unicode\u00a0 values\u00a0 of\u00a0\nalphabets\u00a0a-z\u00a0are\u00a097-122.\nx\nEach\u00a0output\u00a0of\u00a0print\u00a0statement\u00a0ends\u00a0with\u00a0a\u00a0comma.\nx\nEmpty\u00a0print", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_126", "chunk_strategy": "fixed_size"}}, {"text": ")\u00a0:\nprint(chr(alpha),\u00a0end=',')\nTips\nx\nUnicode\u00a0 values\u00a0 of\u00a0 alphabets\u00a0 A-Z\u00a0 are\u00a0 65-90.\u00a0 Unicode\u00a0 values\u00a0 of\u00a0\nalphabets\u00a0a-z\u00a0are\u00a097-122.\nx\nEach\u00a0output\u00a0of\u00a0print\u00a0statement\u00a0ends\u00a0with\u00a0a\u00a0comma.\nx\nEmpty\u00a0print(\u00a0) statement\u00a0positions\u00a0the\u00a0cursor\u00a0at\u00a0the\u00a0beginning\u00a0of\u00a0the\u00a0\nnext\u00a0line.\n____________________________________________________________________\n[A] Answer\u00a0the\u00a0following questions:\n(a) When\u00a0does\u00a0the\u00a0else block\u00a0of\u00a0a\u00a0while loop\u00a0go\u00a0to\u00a0work?\n(b) Can\u00a0range(\u00a0) function\u00a0be\u00a0used\u00a0to\u00a0generate\u00a0numbers\u00a0from\u00a00.1\u00a0to\u00a01.0\u00a0\nin\u00a0steps\u00a0of\u00a00.1?\n(c)\nCan\u00a0a\u00a0while loop\u00a0be\u00a0nested\u00a0within\u00a0a\u00a0for loop\u00a0and\u00a0vice\u00a0versa?\n(d) Can\u00a0a\u00a0while/for loop\u00a0be\u00a0used\u00a0in\u00a0an\u00a0if/else and\u00a0vice\u00a0versa?\n(e) Can\u00a0a\u00a0do-while\u00a0loop\u00a0be\u00a0used\u00a0to\u00a0repeat\u00a0a\u00a0set\u00a0of\u00a0statements?\n(f)\nHow\u00a0will\u00a0you\u00a0write\u00a0an\u00a0equivalent\u00a0for loop\u00a0for\u00a0the\u00a0following:\ncount\u00a0=\u00a01\u00a0\nwhile count <= 10 :\nprint(count)\ncount\u00a0=\u00a0count\u00a0+\u00a01\n78\nLet\u00a0Us\u00a0Python\n(g)\nWhat\u00a0will\u00a0be\u00a0the\u00a0output\u00a0of\u00a0the\u00a0following\u00a0code\u00a0snippet?\u00a0\nfor\u00a0index\u00a0in\u00a0range(20,\u00a010,\u00a0-3)\u00a0:\nprint(index,\u00a0end\u00a0=\u00a0'\u00a0 ')\n(h) Why\u00a0 should\u00a0 break and", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_127", "chunk_strategy": "fixed_size"}}, {"text": "<= 10 :\nprint(count)\ncount\u00a0=\u00a0count\u00a0+\u00a01\n78\nLet\u00a0Us\u00a0Python\n(g)\nWhat\u00a0will\u00a0be\u00a0the\u00a0output\u00a0of\u00a0the\u00a0following\u00a0code\u00a0snippet?\u00a0\nfor\u00a0index\u00a0in\u00a0range(20,\u00a010,\u00a0-3)\u00a0:\nprint(index,\u00a0end\u00a0=\u00a0'\u00a0 ')\n(h) Why\u00a0 should\u00a0 break and\u00a0 continue be\u00a0 always\u00a0 used\u00a0 with\u00a0 an\u00a0 if\nembedded\u00a0in\u00a0a\u00a0while or\u00a0for loop?\u00a0\n[B] Point\u00a0out\u00a0the\u00a0errors,\u00a0if\u00a0any,\u00a0in\u00a0the\u00a0following\u00a0programs:\n(a) j =\u00a01\u00a0\nwhile j <=\u00a010 :\nprint(j)\nj++\n(b) while\u00a0true\u00a0:\nprint('Infinite\u00a0loop')\u00a0\n(c)\nlst\u00a0=\u00a0[10,\u00a020,\u00a030,\u00a0 40,\u00a050]\nfor\u00a0count\u00a0=\u00a01\u00a0to\u00a05 :\nprint(lst[\u00a0i\u00a0])\n(d) i\u00a0=\u00a015\nnot\u00a0while\u00a0i\u00a0<\u00a010\u00a0:\nprint(i)\ni\u00a0-=\u00a01\n(e) #\u00a0Print\u00a0alphabets\u00a0from\u00a0A\u00a0to\u00a0Z\nfor\u00a0alpha\u00a0in\u00a0range(65,\u00a091)\u00a0:\nprint(ord(alpha),\u00a0end='\u00a0')\n(f)\nfor\u00a0i\u00a0in\u00a0range(0.1,\u00a01.0,\u00a00.25)\u00a0:\nprint(i)\n(g)\ni\u00a0=\u00a01\nwhile\u00a0i\u00a0<=\u00a010\u00a0:\nj\u00a0=\u00a01\nwhile\u00a0j\u00a0<=\u00a05\u00a0:\nprint(i,\u00a0j\u00a0)\nj\u00a0+=\u00a01\nbreak\nprint(i,\u00a0j)\ni\u00a0+=\u00a01\nChapter 6:\u00a0 Repetition Control\u00a0Instruction\u00a0\n79\n[C] Match\u00a0 the\u00a0 following\u00a0 for\u00a0 the\u00a0 values\u00a0 each\u00a0 range(\u00a0 ) function\u00a0 will\u00a0\ngenerate.\na.\u00a0 range(5)\n1.\u00a0 1,\u00a02,\u00a03,\u00a04\nb.\u00a0 range(1,\u00a010,\u00a03)\n2.\u00a0 0,\u00a01,\u00a02,\u00a03,\u00a04\nc.\u00a0 range(10,\u00a01,\u00a0-2)\n3.\u00a0 Nothing\nd.\u00a0 ra", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_128", "chunk_strategy": "fixed_size"}}, {"text": "ion\u00a0\n79\n[C] Match\u00a0 the\u00a0 following\u00a0 for\u00a0 the\u00a0 values\u00a0 each\u00a0 range(\u00a0 ) function\u00a0 will\u00a0\ngenerate.\na.\u00a0 range(5)\n1.\u00a0 1,\u00a02,\u00a03,\u00a04\nb.\u00a0 range(1,\u00a010,\u00a03)\n2.\u00a0 0,\u00a01,\u00a02,\u00a03,\u00a04\nc.\u00a0 range(10,\u00a01,\u00a0-2)\n3.\u00a0 Nothing\nd.\u00a0 range(1,\u00a05)\n4.\u00a0 10,\u00a08,\u00a06,\u00a04,\u00a02\ne.\u00a0 range(-2)\n5.\u00a0 1,\u00a04,\u00a07\n[D] Attempt\u00a0the\u00a0following questions:\n(a) Write\u00a0a\u00a0program\u00a0to\u00a0print\u00a0first\u00a025\u00a0odd\u00a0numbers\u00a0using\u00a0range(\u00a0).\n(b) Rewrite\u00a0the\u00a0following\u00a0program\u00a0using\u00a0for\u00a0loop.\nlst\u00a0=\u00a0['desert',\u00a0'dessert',\u00a0'to',\u00a0'too',\u00a0'lose',\u00a0'loose']\u00a0\ns\u00a0=\u00a0'Mumbai'\ni\u00a0=\u00a00\nwhile\u00a0i\u00a0<\u00a0len(lst)\u00a0:\nif\u00a0i\u00a0>\u00a03\u00a0:\nbreak\nelse\u00a0:\nprint(i,\u00a0lst[i],\u00a0s[i])\ni\u00a0+=\u00a01\n(c)\nWrite\u00a0a\u00a0program\u00a0to\u00a0count\u00a0the\u00a0number\u00a0of\u00a0alphabets\u00a0and\u00a0number\u00a0of\u00a0\ndigits\u00a0in\u00a0the\u00a0string\u00a0'Nagpur-440010'\u00a0\n(d) A\u00a0 five-digit\u00a0 number\u00a0 is\u00a0 entered\u00a0 through\u00a0 the\u00a0 keyboard.\u00a0 Write\u00a0 a\u00a0\nprogram\u00a0to\u00a0obtain\u00a0the\u00a0reversed\u00a0number\u00a0and\u00a0to\u00a0determine\u00a0whether\u00a0\nthe\u00a0original\u00a0and\u00a0reversed\u00a0numbers\u00a0are\u00a0equal\u00a0or\u00a0not.\n(e) Write\u00a0a\u00a0program\u00a0to\u00a0find\u00a0the\u00a0factorial\u00a0value\u00a0of\u00a0any\u00a0number\u00a0entered\u00a0\nthrough\u00a0the\u00a0keyboard.\n(f)\nWrite\u00a0a\u00a0program\u00a0to\u00a0print\u00a0out\u00a0all\u00a0Armstrong\u00a0nu", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_129", "chunk_strategy": "fixed_size"}}, {"text": "ther\u00a0\nthe\u00a0original\u00a0and\u00a0reversed\u00a0numbers\u00a0are\u00a0equal\u00a0or\u00a0not.\n(e) Write\u00a0a\u00a0program\u00a0to\u00a0find\u00a0the\u00a0factorial\u00a0value\u00a0of\u00a0any\u00a0number\u00a0entered\u00a0\nthrough\u00a0the\u00a0keyboard.\n(f)\nWrite\u00a0a\u00a0program\u00a0to\u00a0print\u00a0out\u00a0all\u00a0Armstrong\u00a0numbers\u00a0between\u00a01\u00a0and\u00a0\n500.\u00a0 If\u00a0 sum\u00a0 of\u00a0cubes\u00a0 of\u00a0 each digit\u00a0 of\u00a0 the\u00a0number\u00a0 is\u00a0 equal\u00a0 to\u00a0the\u00a0\nnumber\u00a0itself,\u00a0then\u00a0the\u00a0number\u00a0is\u00a0called\u00a0an\u00a0Armstrong\u00a0number.\u00a0For\u00a0\nexample,\u00a0153\u00a0=\u00a0(\u00a01\u00a0*\u00a01\u00a0*\u00a01\u00a0)\u00a0+\u00a0(\u00a05\u00a0*\u00a05\u00a0*\u00a05\u00a0)\u00a0+\u00a0(\u00a03\u00a0*\u00a03\u00a0*\u00a03\u00a0).\n(g)\nWrite\u00a0a\u00a0program\u00a0to\u00a0print\u00a0all\u00a0prime\u00a0numbers\u00a0from\u00a01\u00a0to\u00a0300.\u00a0\n(h) Write\u00a0 a\u00a0 program\u00a0 to\u00a0 print\u00a0 the\u00a0 multiplication\u00a0 table\u00a0 of\u00a0 the\u00a0 number\u00a0\nentered\u00a0by\u00a0the\u00a0user.\u00a0The\u00a0table\u00a0should\u00a0get\u00a0displayed\u00a0in\u00a0the\u00a0following\u00a0\nform:\n29\u00a0*\u00a01\u00a0=\u00a029\n29\u00a0*\u00a02\u00a0=\u00a058\n80\nLet\u00a0Us\u00a0Python\n\u2026\n(i)\nWhen\u00a0 interest\u00a0 compounds\u00a0 q times\u00a0 per\u00a0 year\u00a0 at\u00a0 an\u00a0annual\u00a0 rate\u00a0 of\u00a0\nr\u00a0%\u00a0for\u00a0n years,\u00a0the\u00a0principal\u00a0p compounds\u00a0to\u00a0an\u00a0amount\u00a0a as\u00a0per\u00a0\nthe\u00a0following\u00a0formula:\na\u00a0=\u00a0p\u00a0(\u00a01\u00a0+\u00a0r\u00a0/\u00a0q\u00a0)\u00a0nq\nWrite\u00a0 a\u00a0 program\u00a0 to\u00a0read\u00a010\u00a0 sets\u00a0of\u00a0 p,\u00a0 r,\u00a0 n &\u00a0 q and\u00a0 calculate\u00a0the\u00a0\ncorresponding\u00a0as.\n(j)\nWrite\u00a0 a\u00a0 program\u00a0 to\u00a0 gener", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_130", "chunk_strategy": "fixed_size"}}, {"text": "ounds\u00a0to\u00a0an\u00a0amount\u00a0a as\u00a0per\u00a0\nthe\u00a0following\u00a0formula:\na\u00a0=\u00a0p\u00a0(\u00a01\u00a0+\u00a0r\u00a0/\u00a0q\u00a0)\u00a0nq\nWrite\u00a0 a\u00a0 program\u00a0 to\u00a0read\u00a010\u00a0 sets\u00a0of\u00a0 p,\u00a0 r,\u00a0 n &\u00a0 q and\u00a0 calculate\u00a0the\u00a0\ncorresponding\u00a0as.\n(j)\nWrite\u00a0 a\u00a0 program\u00a0 to\u00a0 generate\u00a0 all\u00a0 Pythagorean\u00a0 Triplets\u00a0 with\u00a0 side\u00a0\nlength\u00a0less\u00a0than\u00a0or\u00a0equal\u00a0to\u00a030.\n(k)\nPopulation\u00a0of\u00a0a\u00a0town\u00a0today\u00a0is\u00a0100000.\u00a0The\u00a0population\u00a0has\u00a0increased\u00a0\nsteadily\u00a0 at\u00a0 the\u00a0 rate\u00a0 of\u00a0 10\u00a0 %\u00a0 per\u00a0 year\u00a0 for\u00a0 last\u00a0 10\u00a0 years.\u00a0 Write\u00a0 a\u00a0\nprogram\u00a0to\u00a0determine\u00a0the\u00a0population\u00a0at\u00a0the\u00a0end\u00a0of\u00a0each\u00a0year\u00a0in\u00a0the\u00a0\nlast\u00a0decade.\n(l)\nRamanujan\u00a0number\u00a0is\u00a0the\u00a0smallest\u00a0number\u00a0that\u00a0can\u00a0be\u00a0expressed\u00a0as\u00a0\nsum\u00a0of\u00a0two\u00a0cubes\u00a0in\u00a0two\u00a0different\u00a0ways.\u00a0Write\u00a0a\u00a0program\u00a0to\u00a0print\u00a0all\u00a0\nsuch\u00a0numbers\u00a0up\u00a0to\u00a0a\u00a0reasonable\u00a0limit.\n(m) Write\u00a0a\u00a0program\u00a0to\u00a0print\u00a024\u00a0hours\u00a0of\u00a0day\u00a0with\u00a0suitable\u00a0suffixes\u00a0like\u00a0\nAM,\u00a0PM,\u00a0Noon\u00a0and\u00a0Midnight.\nLet\u00a0Us\nPython\n81\nConsole\nInput/Output\nx\nConsole\u00a0Input\nx\nPrograms\nx\nConsole\u00a0Output\nx\nExercises\nx\nFormatted\u00a0Printing\n7\n\u201cInput\u00a0from\u00a0keyboard,\u00a0output\u00a0to\u00a0screen...\u201d\n82\nLet\u00a0Us\u00a0Python\nx\nConsole\u00a0 Input/Output\u00a0 means\u00a0 ", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_131", "chunk_strategy": "fixed_size"}}, {"text": "thon\n81\nConsole\nInput/Output\nx\nConsole\u00a0Input\nx\nPrograms\nx\nConsole\u00a0Output\nx\nExercises\nx\nFormatted\u00a0Printing\n7\n\u201cInput\u00a0from\u00a0keyboard,\u00a0output\u00a0to\u00a0screen...\u201d\n82\nLet\u00a0Us\u00a0Python\nx\nConsole\u00a0 Input/Output\u00a0 means\u00a0 input\u00a0 from\u00a0 keyboard\u00a0 and\u00a0 output\u00a0 to\u00a0\nscreen.\nConsole\u00a0Input\nx\nConsole\u00a0input\u00a0can\u00a0be\u00a0received\u00a0using\u00a0the built-in input(\u00a0) function.\nx\nGeneral\u00a0form\u00a0of\u00a0input(\u00a0) function\u00a0is\ns\u00a0=\u00a0input('prompt')\nprompt\u00a0is\u00a0a\u00a0string\u00a0that\u00a0is\u00a0displayed\u00a0on\u00a0the\u00a0screen,\u00a0soliciting\u00a0a\u00a0value.\ninput(\u00a0) returns\u00a0a\u00a0string. If\u00a0123\u00a0is\u00a0entered\u00a0as\u00a0input,\u00a0'123'\u00a0is\u00a0returned.\nx\ninput(\u00a0) can\u00a0be\u00a0used\u00a0to\u00a0receive,\u00a01,\u00a0or\u00a0more\u00a0values.\n#\u00a0receive\u00a0full\u00a0name\u00a0\nname\u00a0=\u00a0input('Enter\u00a0full\u00a0name')\u00a0\n#\u00a0separate\u00a0first\u00a0name,\u00a0middle\u00a0name\u00a0and\u00a0surname\nfname,\u00a0mname,\u00a0sname\u00a0=\u00a0input('Enter\u00a0full\u00a0name:\u00a0').split(\u00a0)\nsplit(\u00a0 ) function\u00a0 will\u00a0 split\u00a0 the\u00a0 entered\u00a0 fullname with\u00a0 space\u00a0 as\u00a0 a\u00a0\ndelimiter.\u00a0The\u00a0split\u00a0values\u00a0will\u00a0then\u00a0be\u00a0assigned\u00a0to\u00a0fname,\u00a0mname,\u00a0\nlname.\nx\nIf\u00a0 we\u00a0 are\u00a0 to\u00a0 receive\u00a0 multiple\u00a0 int values,\u00a0 we\u00a0 can\u00a0 receive\u00a0 them\u00a0 as\u00a0\nstrings\u00a0and\u00a0then\u00a0con", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_132", "chunk_strategy": "fixed_size"}}, {"text": "lname with\u00a0 space\u00a0 as\u00a0 a\u00a0\ndelimiter.\u00a0The\u00a0split\u00a0values\u00a0will\u00a0then\u00a0be\u00a0assigned\u00a0to\u00a0fname,\u00a0mname,\u00a0\nlname.\nx\nIf\u00a0 we\u00a0 are\u00a0 to\u00a0 receive\u00a0 multiple\u00a0 int values,\u00a0 we\u00a0 can\u00a0 receive\u00a0 them\u00a0 as\u00a0\nstrings\u00a0and\u00a0then\u00a0convert\u00a0them\u00a0to\u00a0ints.\nn1,\u00a0n2,\u00a0n3\u00a0=\u00a0input('Enter\u00a0three\u00a0values:\u00a0').split(\u00a0)\u00a0\nn1,\u00a0n2,\u00a0n3\u00a0=\u00a0int(n1),\u00a0int(n2),\u00a0int(n3)\nprint(n1\u00a0+\u00a010,\u00a0n2\u00a0+\u00a020,\u00a0n3\u00a0+\u00a030)\nx\nThe\u00a0same\u00a0thing\u00a0can\u00a0be\u00a0done\u00a0using\u00a0in\u00a0a\u00a0more\u00a0compact\u00a0manner\u00a0using\u00a0\na\u00a0feature\u00a0called\u00a0list\u00a0comprehension.\u00a0It\u00a0applies\u00a0int(\u00a0) function\u00a0to\u00a0every\u00a0\nelement\u00a0of\u00a0the\u00a0list\u00a0returned\u00a0by\u00a0the\u00a0split(\u00a0) function.\u00a0\nn1,\u00a0n2,\u00a0n3\u00a0=\u00a0[int(n)\u00a0for\u00a0n\u00a0in\u00a0input('Enter\u00a0three\u00a0values:\u00a0').split(\u00a0)]\u00a0\nprint(n1 + 10,\u00a0n2 + 20,\u00a0n3 + 30)\nThe\u00a0expression\u00a0enclosed\u00a0within\u00a0[\u00a0]\u00a0is\u00a0called\u00a0list\u00a0comprehension.\u00a0It\u00a0is\u00a0\ndiscussed\u00a0in\u00a0detail\u00a0in\u00a0Chapter\u00a012.\nx\ninput(\u00a0) can\u00a0be\u00a0used\u00a0to\u00a0receive\u00a0arbitrary\u00a0number\u00a0of\u00a0values.\nChapter 7:\u00a0Console\u00a0 Input/Output\u00a0\n83\nnumbers\u00a0=\u00a0[int(x)\u00a0for\u00a0x\u00a0in\u00a0input('Enter\u00a0values:\u00a0').split(\u00a0)]\u00a0\nfor\u00a0n\u00a0in\u00a0numbers\u00a0:\nprint(n\u00a0+\u00a010)\nx\ninput(\u00a0) can\u00a0be\u00a0used\u00a0to\u00a0receive\u00a0different\u00a0types\u00a0of\u00a0v", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_133", "chunk_strategy": "fixed_size"}}, {"text": "er\u00a0of\u00a0values.\nChapter 7:\u00a0Console\u00a0 Input/Output\u00a0\n83\nnumbers\u00a0=\u00a0[int(x)\u00a0for\u00a0x\u00a0in\u00a0input('Enter\u00a0values:\u00a0').split(\u00a0)]\u00a0\nfor\u00a0n\u00a0in\u00a0numbers\u00a0:\nprint(n\u00a0+\u00a010)\nx\ninput(\u00a0) can\u00a0be\u00a0used\u00a0to\u00a0receive\u00a0different\u00a0types\u00a0of\u00a0values\u00a0at\u00a0a\u00a0time.\ndata\u00a0=\u00a0input('Enter\u00a0name,\u00a0age,\u00a0salary:\u00a0').split( )\u00a0\nname\u00a0=\u00a0data[0]\nage\u00a0=\u00a0int(data[1])\nsalary\u00a0=\u00a0float(data[2])\nConsole\u00a0Output\nx\nBuilt-in\u00a0function\u00a0print(\u00a0)\u00a0is used\u00a0to\u00a0send\u00a0output\u00a0to\u00a0screen.\nx\nprint(\u00a0)\u00a0function\u00a0has\u00a0this\u00a0form:\nprint(objects,\u00a0sep = '\u00a0 ',\u00a0end = '\\n',\u00a0file = sys.stdout,\u00a0flush = False)\nThis\u00a0 means\u00a0 that\u00a0 by\u00a0 default\u00a0 objects\u00a0 will\u00a0 be\u00a0 printed\u00a0 on screen\u00a0\n(sys.stdout),\u00a0separated\u00a0by\u00a0space\u00a0(sep\u00a0=\u00a0'\u00a0')\u00a0and\u00a0last\u00a0printed\u00a0object\u00a0will\u00a0\nbe\u00a0 followed\u00a0 by\u00a0 a\u00a0newline\u00a0 (end\u00a0 =\u00a0 '\\n').\u00a0flush =\u00a0 False\u00a0 indicates\u00a0that\u00a0\noutput\u00a0stream\u00a0will\u00a0not\u00a0be\u00a0flushed.\nx\nPython\u00a0has\u00a0a\u00a0facility\u00a0to\u00a0call\u00a0functions\u00a0and\u00a0pass\u00a0keyword-based\u00a0values\u00a0\nas\u00a0arguments.\u00a0So\u00a0while\u00a0calling\u00a0print(\u00a0)\u00a0we\u00a0can\u00a0pass\u00a0specific\u00a0values\u00a0for\u00a0\nsep and\u00a0end.\u00a0In\u00a0this\u00a0case,\u00a0default\u00a0values\u00a0will\u00a0not\u00a0be\u00a0used;\u00a0instead\u00a0the\u00a0\nvalues\u00a0tha", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_134", "chunk_strategy": "fixed_size"}}, {"text": "ll\u00a0functions\u00a0and\u00a0pass\u00a0keyword-based\u00a0values\u00a0\nas\u00a0arguments.\u00a0So\u00a0while\u00a0calling\u00a0print(\u00a0)\u00a0we\u00a0can\u00a0pass\u00a0specific\u00a0values\u00a0for\u00a0\nsep and\u00a0end.\u00a0In\u00a0this\u00a0case,\u00a0default\u00a0values\u00a0will\u00a0not\u00a0be\u00a0used;\u00a0instead\u00a0the\u00a0\nvalues\u00a0that\u00a0we\u00a0pass\u00a0will\u00a0be\u00a0used.\nprint(a,\u00a0b,\u00a0c,\u00a0sep\u00a0=\u00a0',',\u00a0end\u00a0=\u00a0'!')\u00a0 #\u00a0prints\u00a0','\u00a0after\u00a0each\u00a0value,\u00a0!\u00a0at\u00a0end\nprint(x,\u00a0y,\u00a0sep\u00a0=\u00a0'...',\u00a0end\u00a0=\u00a0'#')\u00a0 #\u00a0prints\u00a0'...'\u00a0after\u00a0each\u00a0value,\u00a0#\u00a0at\u00a0end\nFormatted\u00a0Printing\nx\nThere\u00a0are\u00a04\u00a0ways\u00a0to\u00a0control\u00a0the\u00a0formatting\u00a0of\u00a0output:\n(a) Using\u00a0formatted\u00a0string\u00a0literals\u00a0- easiest\n(b) Using\u00a0the\u00a0format(\u00a0) method\u00a0- older\n(c) C\u00a0printf(\u00a0) style\u00a0- legacy\n(d) Using\u00a0slicing\u00a0and\u00a0concatenation\u00a0operation\u00a0- difficult\nToday\u00a0(a)\u00a0is\u00a0most\u00a0dominantly\u00a0used\u00a0method\u00a0followed\u00a0by\u00a0(b).\nx\nUsing\u00a0formatted\u00a0string\u00a0literals\u00a0(often\u00a0called\u00a0fstrings):\n84\nLet\u00a0Us\u00a0Python\nr,\u00a0l,\u00a0b\u00a0=\u00a01.5678,\u00a010.5,\u00a012.66\nprint(f'radius\u00a0=\u00a0{r}')\nprint(f'length\u00a0=\u00a0{l}\u00a0breadth\u00a0=\u00a0{b}\u00a0radius\u00a0=\u00a0{r}')\nname\u00a0=\u00a0'Sushant\u00a0Ajay\u00a0Raje'\nfor\u00a0n\u00a0in\u00a0name.split(\u00a0)\u00a0:\nprint(f'{n:10}')\u00a0\n#\u00a0print\u00a0in\u00a010\u00a0columns\nx\nUsing\u00a0format(\u00a0) method\u00a0of\u00a0string\u00a0object", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_135", "chunk_strategy": "fixed_size"}}, {"text": "f'radius\u00a0=\u00a0{r}')\nprint(f'length\u00a0=\u00a0{l}\u00a0breadth\u00a0=\u00a0{b}\u00a0radius\u00a0=\u00a0{r}')\nname\u00a0=\u00a0'Sushant\u00a0Ajay\u00a0Raje'\nfor\u00a0n\u00a0in\u00a0name.split(\u00a0)\u00a0:\nprint(f'{n:10}')\u00a0\n#\u00a0print\u00a0in\u00a010\u00a0columns\nx\nUsing\u00a0format(\u00a0) method\u00a0of\u00a0string\u00a0object:\nr,\u00a0l,\u00a0b\u00a0=\u00a01.5678,\u00a010.5,\u00a012.66\nname,\u00a0age,\u00a0salary\u00a0=\u00a0'Rakshita',\u00a030,\u00a053000.55\n#\u00a0print\u00a0in\u00a0order\u00a0by\u00a0position\u00a0of\u00a0variables\u00a0using\u00a0empty\u00a0{}\nprint('radius\u00a0=\u00a0{}\u00a0length\u00a0=\u00a0{}\u00a0breadth\u00a0={}'.format(r,\u00a0l,\u00a0b))\nprint('name\u00a0=\u00a0{}\u00a0age\u00a0=\u00a0{}\u00a0salary\u00a0=\u00a0{}'.format(name,\u00a0age,\u00a0salary))\n#\u00a0print\u00a0in\u00a0any\u00a0desired\u00a0order\nprint('radius\u00a0=\u00a0{2}\u00a0length\u00a0=\u00a0{1}\u00a0breadth\u00a0={0}'.format(r,\u00a0l,\u00a0b))\nprint('age={1}\u00a0salary={2}\u00a0name={0}'.format(name,\u00a0age,\u00a0salary))\n#\u00a0print\u00a0name\u00a0in\u00a015\u00a0columns,\u00a0salary\u00a0in\u00a010\u00a0columns\nprint('name\u00a0=\u00a0{0:15}\u00a0salary\u00a0=\u00a0{1:10}'.format(name,\u00a0salary))\n#\u00a0print\u00a0radius\u00a0in\u00a010\u00a0columns,\u00a0with\u00a02\u00a0digits\u00a0after\u00a0decimal\u00a0point\nprint('radius\u00a0=\u00a0{0:10.2f}'.format(r))\nOn\u00a0 execution,\u00a0 the\u00a0 above\u00a0 code\u00a0 snippet\u00a0 will\u00a0 produce\u00a0 the\u00a0 following\u00a0\noutput:\nradius\u00a0=\u00a01.5678\u00a0length\u00a0=\u00a010.5\u00a0breadth\u00a0=12.66\nname\u00a0=\u00a0Rakshita\u00a0age\u00a0=\u00a030\u00a0salary\u00a0=\u00a053000.55\nra", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_136", "chunk_strategy": "fixed_size"}}, {"text": "ius\u00a0=\u00a0{0:10.2f}'.format(r))\nOn\u00a0 execution,\u00a0 the\u00a0 above\u00a0 code\u00a0 snippet\u00a0 will\u00a0 produce\u00a0 the\u00a0 following\u00a0\noutput:\nradius\u00a0=\u00a01.5678\u00a0length\u00a0=\u00a010.5\u00a0breadth\u00a0=12.66\nname\u00a0=\u00a0Rakshita\u00a0age\u00a0=\u00a030\u00a0salary\u00a0=\u00a053000.55\nradius\u00a0=\u00a012.66\u00a0length\u00a0=\u00a010.5\u00a0breadth\u00a0=1.5678\nage=30\u00a0salary=53000.55\u00a0name=Rakshita\nname\u00a0=\u00a0Rakshita\u00a0\nsalary\u00a0=\u00a0 53000.55\nradius\u00a0=\u00a0\n1.57\n____________________________________________________________________\nChapter 7:\u00a0Console\u00a0 Input/Output\u00a0\n85\nProblem\u00a07.1\nWrite\u00a0a\u00a0program\u00a0to\u00a0receive\u00a0radius\u00a0of\u00a0a\u00a0circle,\u00a0and\u00a0length\u00a0and\u00a0breadth\u00a0of\u00a0\na\u00a0rectangle\u00a0in\u00a0one\u00a0call\u00a0to\u00a0input(\u00a0).\u00a0Calculate\u00a0and\u00a0print\u00a0the\u00a0circumference\u00a0\nof\u00a0circle\u00a0and\u00a0perimeter\u00a0of\u00a0rectangle.\nProgram\nr,\u00a0l,\u00a0b\u00a0=\u00a0input('Enter\u00a0radius,\u00a0length\u00a0and\u00a0breadth:\u00a0').split(\u00a0)\u00a0\nradius\u00a0=\u00a0int(r)\nlength\u00a0=\u00a0int(l)\nbreadth\u00a0=\u00a0int(b)\ncircumference\u00a0=\u00a02\u00a0*\u00a03.14\u00a0*\u00a0radius\u00a0\nperimeter\u00a0=\u00a02\u00a0*\u00a0(\u00a0length\u00a0+\u00a0breadth\u00a0)\u00a0\nprint(circumference)\nprint(perimeter)\nOutput\nEnter\u00a0radius,\u00a0length\u00a0and\u00a0breadth:\u00a03\u00a04\u00a05\n18.84\n18\nTips\nx\ninput(\u00a0 )\u00a0returns\u00a0 a\u00a0string,\u00a0so\u00a0it\u00a0is\u00a0necessary\u00a0 to\u00a0convert\u00a0it\u00a0into\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_137", "chunk_strategy": "fixed_size"}}, {"text": "er\u00a0=\u00a02\u00a0*\u00a0(\u00a0length\u00a0+\u00a0breadth\u00a0)\u00a0\nprint(circumference)\nprint(perimeter)\nOutput\nEnter\u00a0radius,\u00a0length\u00a0and\u00a0breadth:\u00a03\u00a04\u00a05\n18.84\n18\nTips\nx\ninput(\u00a0 )\u00a0returns\u00a0 a\u00a0string,\u00a0so\u00a0it\u00a0is\u00a0necessary\u00a0 to\u00a0convert\u00a0it\u00a0into\u00a0 int\u00a0 or\u00a0\nfloat\u00a0suitably,\u00a0before\u00a0performing\u00a0arithmetic\u00a0operations.\n____________________________________________________________________\nProblem\u00a07.2\nWrite\u00a0 a\u00a0 program\u00a0 to\u00a0 receive\u00a0 3\u00a0 integers\u00a0using\u00a0 one\u00a0 call\u00a0 to\u00a0 input(\u00a0 ).\u00a0 The\u00a0\nthree\u00a0integers\u00a0 signify\u00a0starting\u00a0value,\u00a0ending\u00a0 value\u00a0and\u00a0step\u00a0value\u00a0for\u00a0 a\u00a0\nrange.\u00a0 The\u00a0program\u00a0 should\u00a0 use\u00a0 these\u00a0 values\u00a0 to\u00a0 print\u00a0 the\u00a0 number,\u00a0 its\u00a0\nsquare\u00a0 and\u00a0 its\u00a0 cube,\u00a0 all\u00a0 properly\u00a0 right-aligned.\u00a0 Also\u00a0 output\u00a0 the\u00a0 same\u00a0\nvalues\u00a0left-aligned.\n86\nLet\u00a0Us\u00a0Python\nProgram\nstart,\u00a0end,\u00a0step\u00a0=\u00a0input('Enter\u00a0start,\u00a0end,\u00a0step\u00a0values:\u00a0').split(\u00a0)\n#\u00a0right\u00a0aligned\u00a0printing\nfor\u00a0n\u00a0in\u00a0range(int(start),\u00a0int(end),\u00a0int(step))\u00a0:\nprint(f'{n:>5}{n**2:>7}{n**3:>8}')\nprint(\u00a0)\u00a0\n#\u00a0left\u00a0aligned\u00a0printing\nfor\u00a0n\u00a0in\u00a0range(int(start),\u00a0int(end),\u00a0int(step))\u00a0:\nprint('{0:<5}{1:<7}{2:<", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_138", "chunk_strategy": "fixed_size"}}, {"text": "rinting\nfor\u00a0n\u00a0in\u00a0range(int(start),\u00a0int(end),\u00a0int(step))\u00a0:\nprint(f'{n:>5}{n**2:>7}{n**3:>8}')\nprint(\u00a0)\u00a0\n#\u00a0left\u00a0aligned\u00a0printing\nfor\u00a0n\u00a0in\u00a0range(int(start),\u00a0int(end),\u00a0int(step))\u00a0:\nprint('{0:<5}{1:<7}{2:<8}'.format(n,\u00a0n\u00a0**\u00a02,\u00a0n\u00a0**\u00a03))\nOutput\nEnter\u00a0start,\u00a0end,\u00a0step\u00a0values: 1\u00a010\u00a02\n1\u00a0\n1\u00a0\n1\n3\u00a0\n9\u00a0\n27\n5\u00a0\n25\u00a0\n125\n7\u00a0\n49\u00a0\n343\n9\u00a0\n81\u00a0\n729\n1\u00a0 1\u00a0\n1\u00a0\n3\u00a0 9\u00a0\n27\u00a0\n5\u00a0 25\u00a0\n125\u00a0\n7\u00a0 49\u00a0\n343\u00a0\n9\u00a0 81\u00a0\n729\u00a0\nTips\nx\n{n:>5} will\u00a0 print\u00a0 n\u00a0 right-justified\u00a0 within\u00a0 5\u00a0 columns.\u00a0 Use\u00a0 <\u00a0 to\u00a0 left-\njustify.\nx\n{0:<5}\u00a0will\u00a0left-justify\u00a00th parameter\u00a0in\u00a0the\u00a0list\u00a0within\u00a05\u00a0columns.\u00a0Use\u00a0\n>\u00a0to\u00a0right-justify.\n____________________________________________________________________\nProblem\u00a07.3\nWrite\u00a0a\u00a0program\u00a0to\u00a0maintain\u00a0names\u00a0and\u00a0cell\u00a0numbers\u00a0of\u00a04\u00a0persons\u00a0and\u00a0\nthen\u00a0print\u00a0them\u00a0systematically\u00a0in\u00a0a\u00a0tabular\u00a0form.\nChapter 7:\u00a0Console\u00a0 Input/Output\u00a0\n87\nProgram\ncontacts = {\n'Dilip' :\u00a09823077892,\u00a0'Shekhar' :\u00a06784512345,\n'Vivek' :\u00a09823011245,\u00a0'Riddhi' :\u00a09766556779\u00a0\n}\nfor\u00a0name,\u00a0cellno\u00a0in\u00a0contacts.items(\u00a0)\u00a0:\nprint(f'{name:15}\u00a0:\u00a0{cellno:10d}')\nOu", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_139", "chunk_strategy": "fixed_size"}}, {"text": "tput\u00a0\n87\nProgram\ncontacts = {\n'Dilip' :\u00a09823077892,\u00a0'Shekhar' :\u00a06784512345,\n'Vivek' :\u00a09823011245,\u00a0'Riddhi' :\u00a09766556779\u00a0\n}\nfor\u00a0name,\u00a0cellno\u00a0in\u00a0contacts.items(\u00a0)\u00a0:\nprint(f'{name:15}\u00a0:\u00a0{cellno:10d}')\nOutput\nDilip\n:\u00a09823077892\nShekhar\n:\u00a06784512345\nVivek\n:\u00a09823011245\nRiddhi\n:\u00a09766556779\n____________________________________________________________________\nProblem\u00a07.4\nSuppose\u00a0there\u00a0are\u00a05\u00a0variables\u00a0 in\u00a0a\u00a0program\u2014max,\u00a0 min,\u00a0mean,\u00a0 sd and\u00a0\nvar,\u00a0 having\u00a0 some\u00a0 suitable\u00a0 values.\u00a0 Write\u00a0 a\u00a0 program\u00a0 to\u00a0 print\u00a0 these\u00a0\nvariables\u00a0properly\u00a0aligned\u00a0using\u00a0multiple\u00a0fstrings,\u00a0but\u00a0one\u00a0call\u00a0to\u00a0print(\u00a0).\u00a0\nProgram\nmin,\u00a0max\u00a0=\u00a025,\u00a075\nmean\u00a0=\u00a035\nsd\u00a0=\u00a00.56\nvar\u00a0 =\u00a00.9\nprint(\nf'\\n{\"Max\u00a0Value:\":<15}{max:>10}',\nf'\\n{\"Min\u00a0Value:\":<15}{min:>10}',\nf'\\n{\"Mean:\":<15}{mean:>10}',\nf'\\n{\"Std\u00a0Dev:\":<15}{sd:>10}',\nf'\\n{\"Variance:\":<15}{var:>10}'\u00a0)\nOutput\nMax\u00a0Value:\u00a0\n75\u00a0\nMin\u00a0Value:\u00a0\n25\u00a0\nMean:\u00a0\n35\u00a0\n88\nLet\u00a0Us\u00a0Python\nStd\u00a0Deviation:\n0.56\u00a0\nVariance:\u00a0\n0.9\n____________________________________________________________________\nProblem\u00a07.5", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_140", "chunk_strategy": "fixed_size"}}, {"text": "<15}{var:>10}'\u00a0)\nOutput\nMax\u00a0Value:\u00a0\n75\u00a0\nMin\u00a0Value:\u00a0\n25\u00a0\nMean:\u00a0\n35\u00a0\n88\nLet\u00a0Us\u00a0Python\nStd\u00a0Deviation:\n0.56\u00a0\nVariance:\u00a0\n0.9\n____________________________________________________________________\nProblem\u00a07.5\nWrite\u00a0a\u00a0program\u00a0that\u00a0prints\u00a0square\u00a0root\u00a0and\u00a0cube\u00a0root\u00a0of\u00a0numbers\u00a0from\u00a0\n1 to\u00a010,\u00a0up\u00a0to\u00a03\u00a0decimal\u00a0places.\u00a0Ensure\u00a0that\u00a0 the\u00a0output\u00a0is\u00a0displayed\u00a0in\u00a0\nseparate\u00a0lines,\u00a0with\u00a0number\u00a0center-justified\u00a0and\u00a0square\u00a0and\u00a0cube\u00a0roots,\u00a0\nright-justified.\nProgram\nimport\u00a0math\nwidth\u00a0=\u00a010\nprecision\u00a0=\u00a04\nfor\u00a0n\u00a0in\u00a0range(1,\u00a010)\u00a0:\ns\u00a0=\u00a0math.sqrt(n)\nc\u00a0=\u00a0math.pow(n,1/3)\nprint(f'{n:^5}{s:{width}.{precision}}{c:{width}.{precision}}')\nOutput\n1\u00a0\n1.0\u00a0\n1.0\n2\u00a0\n1.414\u00a0\n1.26\n3\u00a0\n1.732\u00a0\n1.442\n4\u00a0\n2.0\u00a0\n1.587\n5\u00a0\n2.236\u00a0\n1.71\n6\u00a0\n2.449\u00a0\n1.817\n7\u00a0\n2.646\u00a0\n1.913\n8\u00a0\n2.828\u00a0\n2.0\n9\u00a0\n3.0\u00a0\n2.08\n____________________________________________________________________\n[A] Attempt\u00a0the\u00a0following questions:\n(a) How\u00a0will\u00a0you\u00a0make\u00a0the\u00a0following\u00a0code\u00a0more\u00a0compact?\nprint('Enter\u00a0ages\u00a0of\u00a03\u00a0persons')\nage1\u00a0=\u00a0input(\u00a0)\nage2\u00a0=\u00a0input(\u00a0)\nChapter 7:\u00a0Console\u00a0 Input/Outpu", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_141", "chunk_strategy": "fixed_size"}}, {"text": "___________\n[A] Attempt\u00a0the\u00a0following questions:\n(a) How\u00a0will\u00a0you\u00a0make\u00a0the\u00a0following\u00a0code\u00a0more\u00a0compact?\nprint('Enter\u00a0ages\u00a0of\u00a03\u00a0persons')\nage1\u00a0=\u00a0input(\u00a0)\nage2\u00a0=\u00a0input(\u00a0)\nChapter 7:\u00a0Console\u00a0 Input/Output\u00a0\n89\nage3\u00a0=\u00a0input(\u00a0)\n(b) How\u00a0will\u00a0 you\u00a0print\u00a0 \"Rendezvous\"\u00a0in\u00a0a\u00a0line\u00a0and\u00a0retain\u00a0the\u00a0 cursor\u00a0in\u00a0\nthe\u00a0same\u00a0line\u00a0in\u00a0which\u00a0the\u00a0output\u00a0has\u00a0been\u00a0printed?\n(c) What\u00a0will\u00a0be\u00a0the\u00a0output\u00a0of\u00a0the\u00a0following\u00a0code\u00a0snippet?\u00a0\nl,\u00a0b\u00a0=\u00a01.5678,\u00a010.5\nprint('length\u00a0=\u00a0{l}\u00a0breadth\u00a0=\u00a0{b}')\n(d) In\u00a0the\u00a0following\u00a0statement\u00a0what\u00a0do\u00a0>\u00a05,\u00a0>\u00a07\u00a0and\u00a0>\u00a08\u00a0signify?\nprint(f'{n:>5}{n ** 2:>7}{n ** 3:>8}')\n(e) What\u00a0will\u00a0be\u00a0the\u00a0output\u00a0of\u00a0the\u00a0following\u00a0code\u00a0segment?\nname\u00a0=\u00a0'Sanjay'\ncellno\u00a0=\u00a09823017892\nprint(f'{name:15}\u00a0:\u00a0{cellno:10}')\n(f) How\u00a0will\u00a0you print\u00a0the\u00a0output\u00a0of\u00a0the\u00a0following\u00a0code\u00a0segment using\u00a0\nfstring?\nx,\u00a0y,\u00a0z\u00a0=10,\u00a020,\u00a040\nprint('{0:<5}{1:<7}{2:<8}'.format(x,\u00a0y,\u00a0z))\n(g) How\u00a0will\u00a0you\u00a0receive\u00a0arbitrary\u00a0number\u00a0of\u00a0floats\u00a0from\u00a0keyboard?\n(h) What\u00a0changes\u00a0should\u00a0be\u00a0made\u00a0in\u00a0\nprint(f'{'\\nx =\u00a0':4}{x:>10}{'\\ny =\u00a0':4}{y:>10}')\nto\u00a0pro", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_142", "chunk_strategy": "fixed_size"}}, {"text": "int('{0:<5}{1:<7}{2:<8}'.format(x,\u00a0y,\u00a0z))\n(g) How\u00a0will\u00a0you\u00a0receive\u00a0arbitrary\u00a0number\u00a0of\u00a0floats\u00a0from\u00a0keyboard?\n(h) What\u00a0changes\u00a0should\u00a0be\u00a0made\u00a0in\u00a0\nprint(f'{'\\nx =\u00a0':4}{x:>10}{'\\ny =\u00a0':4}{y:>10}')\nto\u00a0produce\u00a0the\u00a0output\u00a0given\u00a0below:\nx\u00a0=\u00a0\n14.99\u00a0\ny\u00a0=\u00a0\n114.39\u00a0\n(i) How\u00a0will\u00a0you\u00a0receive\u00a0a\u00a0boolean\u00a0value\u00a0as\u00a0input?\n(j) How\u00a0will\u00a0you\u00a0receive\u00a0a\u00a0complex\u00a0number\u00a0as\u00a0input?\n(k) How\u00a0 will\u00a0 you\u00a0 display\u00a0 price in\u00a0 10\u00a0 columns\u00a0 with\u00a0 4 places\u00a0 beyond\u00a0\ndecimal\u00a0points?\u00a0Assume\u00a0value\u00a0of\u00a0price\u00a0to\u00a0be\u00a01.5567894.\n(l) Write\u00a0a\u00a0program\u00a0to\u00a0receive\u00a0an\u00a0arbitrary\u00a0number\u00a0of\u00a0floats\u00a0using\u00a0one\u00a0\ninput(\u00a0) statement.\u00a0Calculate\u00a0the\u00a0average\u00a0of\u00a0floats\u00a0received.\n(m)Write\u00a0 a\u00a0 program\u00a0 to\u00a0 receive\u00a0 the\u00a0 following using\u00a0 one\u00a0 input(\u00a0 )\u00a0\nstatement.\u00a0\n90\nLet\u00a0Us\u00a0Python\nName\u00a0of\u00a0the\u00a0person\nYears\u00a0of\u00a0service\nDiwali\u00a0bonus\u00a0received\nCalculate\u00a0and\u00a0print\u00a0the\u00a0agreement\u00a0deduction\u00a0as\u00a0per\u00a0the\u00a0following\u00a0\nformula:\ndeduction\u00a0=\u00a02\u00a0*\u00a0years\u00a0of\u00a0service\u00a0+\u00a0bonus\u00a0*\u00a05.5\u00a0/\u00a0100\n(n) Which\u00a0 import\u00a0 statement\u00a0 should\u00a0 be\u00a0 added\u00a0 to\u00a0 use\u00a0 the\u00a0 built-in\u00a0\nfunctions\u00a0input(\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_143", "chunk_strategy": "fixed_size"}}, {"text": "t\u00a0the\u00a0agreement\u00a0deduction\u00a0as\u00a0per\u00a0the\u00a0following\u00a0\nformula:\ndeduction\u00a0=\u00a02\u00a0*\u00a0years\u00a0of\u00a0service\u00a0+\u00a0bonus\u00a0*\u00a05.5\u00a0/\u00a0100\n(n) Which\u00a0 import\u00a0 statement\u00a0 should\u00a0 be\u00a0 added\u00a0 to\u00a0 use\u00a0 the\u00a0 built-in\u00a0\nfunctions\u00a0input(\u00a0) and\u00a0print(\u00a0)?\n(o) Is\u00a0the\u00a0following\u00a0statement\u00a0correct?\nprint('Result\u00a0=\u00a0'\u00a0+\u00a04\u00a0>\u00a03)\n(p) Write\u00a0a\u00a0program\u00a0to\u00a0print\u00a0the\u00a0following\u00a0values\na\u00a0=\u00a012.34,\u00a0b\u00a0=\u00a0234.39,\u00a0c\u00a0=\u00a0444.34,\u00a0d\u00a0=\u00a01.23,\u00a0e\u00a0=\u00a034.67\nas shown\u00a0below:\na\u00a0=\u00a0\n12.34\u00a0\nb\u00a0=\u00a0\n234.39\u00a0\nc\u00a0=\u00a0\n444.34\u00a0\nd\u00a0=\u00a0\n1.23\u00a0\ne\u00a0=\u00a0\n34.67\n[B] Match\u00a0the\u00a0following pairs:\na.\u00a0 Default\u00a0value\u00a0of\u00a0sep\u00a0in\u00a0print(\u00a0)\n1.\u00a0 '\u00a0 '\nb.\u00a0 Default\u00a0value\u00a0of\u00a0end\u00a0in\u00a0print(\u00a0)\n2.\u00a0 Using\u00a0fstring\nc.\u00a0 Easiest\u00a0way\u00a0to\u00a0print\u00a0output\n3.\u00a0 Right\u00a0justify\u00a0num\u00a0in\u00a05 columns\nd.\u00a0 Return\u00a0type\u00a0of\u00a0split(\u00a0)\n4.\u00a0 Left\u00a0justify\u00a0num\u00a0in\u00a05\u00a0columns\ne.\u00a0 print('{num:>5}')\n5.\u00a0 list\nf.\u00a0 print('{num:<5}')\n6.\u00a0 \\n\nLists\u00a0\n\u2022\nWhat\u00a0are\u00a0Lists?\u00a0\n\u2022\nSorting\u00a0and\u00a0Reversing\u00a0\n\u2022\nAccessing\u00a0List\u00a0Elements\u00a0\n\u2022\nList\u00a0Varieties\u00a0\n\u2022\nLooping\u00a0in\u00a0Lists\u00a0\n\u2022\nStack\u00a0Data\u00a0Structure\u00a0\n\u2022\nBasic\u00a0List\u00a0Operations\u00a0\n\u2022\nQueue\u00a0Data\u00a0structure\u00a0\n\u2022\nUsing\u00a0Built-in\u00a0Functions", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_144", "chunk_strategy": "fixed_size"}}, {"text": "re\u00a0Lists?\u00a0\n\u2022\nSorting\u00a0and\u00a0Reversing\u00a0\n\u2022\nAccessing\u00a0List\u00a0Elements\u00a0\n\u2022\nList\u00a0Varieties\u00a0\n\u2022\nLooping\u00a0in\u00a0Lists\u00a0\n\u2022\nStack\u00a0Data\u00a0Structure\u00a0\n\u2022\nBasic\u00a0List\u00a0Operations\u00a0\n\u2022\nQueue\u00a0Data\u00a0structure\u00a0\n\u2022\nUsing\u00a0Built-in\u00a0Functions\u00a0on\u00a0Lists\u00a0\n\u2022\nPrograms\u00a0\n\u2022\nList\u00a0Methods\u00a0\n\u2022\nExercises\u00a0\n8\u00a0\n\u201cBringing\u00a0order\u00a0to\u00a0chaos...\u201d\u00a0\n92\nLet\u00a0Us\u00a0Pytho\nWhat\u00a0are\u00a0Lists?\u00a0\n\u2022\nContainer\u00a0is\u00a0an\u00a0entity\u00a0which\u00a0contains\u00a0multiple\u00a0data\u00a0items.\u00a0It\u00a0is\u00a0\nknown\u00a0as\u00a0a\u00a0collection\u00a0or\u00a0a\u00a0compound\u00a0data\u00a0type.\u00a0\n\u2022\nPython\u00a0has\u00a0following\u00a0container\u00a0data\u00a0types:\u00a0\nLists\u00a0\nTuples\u00a0\nSets\u00a0\nDictionaries\u00a0\n\u2022\nA\u00a0list\u00a0can\u00a0grow\u00a0or\u00a0shrink\u00a0during\u00a0execution\u00a0of\u00a0the\u00a0program.\u00a0Hence\nalso\u00a0known\u00a0as\u00a0a\u00a0dynamic\u00a0array.\u00a0Because\u00a0of\u00a0this\u00a0nature\u00a0of\u00a0lists\u00a0t\nare\u00a0commonly\u00a0used\u00a0for\u00a0handling\u00a0variable\u00a0length\u00a0data.\u00a0\n\u2022\nA\u00a0list\u00a0is\u00a0defined\u00a0by\u00a0writing\u00a0comma-separated\u00a0elements\u00a0within\u00a0[\u00a0].\u00a0\nnum\u00a0=\u00a0[10,\u00a025,\u00a030,\u00a040,\u00a0100]\u00a0\nnames\u00a0=\u00a0['Sanjay',\u00a0'Anil',\u00a0'Radha',\u00a0'Suparna']\u00a0\n\u2022\nList\u00a0can\u00a0contain\u00a0dissimilar\u00a0types,\u00a0though\u00a0usually\u00a0they\u00a0are\u00a0a\u00a0collec\nof\u00a0similar\u00a0types.\u00a0For\u00a0example:\u00a0\nanimal\u00a0=\u00a0['Zebra',\u00a0155.55,\u00a0110]\u00a0\n\u2022\nItems\u00a0in\u00a0a\u00a0list\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_145", "chunk_strategy": "fixed_size"}}, {"text": "ames\u00a0=\u00a0['Sanjay',\u00a0'Anil',\u00a0'Radha',\u00a0'Suparna']\u00a0\n\u2022\nList\u00a0can\u00a0contain\u00a0dissimilar\u00a0types,\u00a0though\u00a0usually\u00a0they\u00a0are\u00a0a\u00a0collec\nof\u00a0similar\u00a0types.\u00a0For\u00a0example:\u00a0\nanimal\u00a0=\u00a0['Zebra',\u00a0155.55,\u00a0110]\u00a0\n\u2022\nItems\u00a0in\u00a0a\u00a0list\u00a0can\u00a0be\u00a0repeated,\u00a0i.e.\u00a0a\u00a0list\u00a0may\u00a0contain\u00a0duplicate\u00a0ite\nLike\u00a0printing,\u00a0*\u00a0can\u00a0be\u00a0used\u00a0to\u00a0repeat\u00a0an\u00a0element\u00a0multiple\u00a0times\nempty\u00a0list\u00a0is\u00a0also\u00a0feasible.\u00a0\nages\u00a0=\u00a0[25,\u00a026,\u00a025,\u00a027,\u00a026]\u00a0\n#\u00a0duplicates\u00a0allowed\u00a0\nnum\u00a0=\u00a0[10]\u00a0*\u00a05\u00a0\n#\u00a0stores\u00a0[10,\u00a010,\u00a010,\u00a010,\u00a010]\u00a0\nlst\u00a0=\u00a0[\u00a0]\u00a0\n#\u00a0empty\u00a0list,\u00a0valid\u00a0\nAccessing\u00a0List\u00a0Elements\u00a0\n\u2022\nEntire\u00a0list\u00a0can\u00a0be\u00a0printed\u00a0by\u00a0just\u00a0using\u00a0the\u00a0name\u00a0of\u00a0the\u00a0list.\u00a0\nl\u00a0=\u00a0['Able',\u00a0'was',\u00a0'I',\u00a0'ere',\u00a0'I',\u00a0'saw',\u00a0'elbA']\u00a0\nprint(l)\u00a0\n\u2022\nLike strings individual elements in a list can be accessed u\nChapter\u00a08:\u00a0Lists\u00a0\n9\nprint(animals[1],\u00a0ages[3])\u00a0\n\u2022\nLike\u00a0strings,\u00a0lists\u00a0can\u00a0be\u00a0sliced.\u00a0\nprint(animals[1:3])\u00a0\nprint(ages[3:])\u00a0\nLooping\u00a0in\u00a0Lists\u00a0\n\u2022\nIf\u00a0 we\u00a0wish\u00a0 to\u00a0process\u00a0each\u00a0 item\u00a0 in\u00a0the\u00a0 list,\u00a0we\u00a0should\u00a0 be\u00a0 abl\niterate\u00a0through\u00a0the\u00a0list.\u00a0This\u00a0can\u00a0done\u00a0using\u00a0a\u00a0while or\u00a0for loop.\u00a0\nanimals\u00a0=\u00a0['Zebra',\u00a0'T", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_146", "chunk_strategy": "fixed_size"}}, {"text": "])\u00a0\nprint(ages[3:])\u00a0\nLooping\u00a0in\u00a0Lists\u00a0\n\u2022\nIf\u00a0 we\u00a0wish\u00a0 to\u00a0process\u00a0each\u00a0 item\u00a0 in\u00a0the\u00a0 list,\u00a0we\u00a0should\u00a0 be\u00a0 abl\niterate\u00a0through\u00a0the\u00a0list.\u00a0This\u00a0can\u00a0done\u00a0using\u00a0a\u00a0while or\u00a0for loop.\u00a0\nanimals\u00a0=\u00a0['Zebra',\u00a0'Tiger',\u00a0'Lion',\u00a0'Jackal',\u00a0'Kangaroo']\u00a0\n#\u00a0using\u00a0while\u00a0loop\u00a0\ni\u00a0=\u00a00\u00a0\nwhile\u00a0i\u00a0<\u00a0len(animals)\u00a0:\u00a0\nprint(animals[\u00a0i\u00a0])\u00a0\ni\u00a0+=\u00a01\u00a0\n#\u00a0using\u00a0more\u00a0convenient\u00a0for\u00a0loop\u00a0\nfor\u00a0a\u00a0in\u00a0animals\u00a0:\u00a0\nprint(a)\u00a0\n\u2022\nWhile\u00a0iterating\u00a0 through\u00a0a\u00a0list\u00a0using\u00a0 a\u00a0for loop,\u00a0if\u00a0we\u00a0wish\u00a0to\u00a0k\ntrack\u00a0of\u00a0 index\u00a0of\u00a0the\u00a0 element\u00a0that\u00a0a is\u00a0referring\u00a0 to,\u00a0we\u00a0can\u00a0do\nusing\u00a0the\u00a0built-in\u00a0enumerate(\u00a0) function.\u00a0\nanimals\u00a0=\u00a0['Zebra',\u00a0'Tiger',\u00a0'Lion',\u00a0'Jackal',\u00a0'Kangaroo']\u00a0\nfor\u00a0index,\u00a0a\u00a0in\u00a0enumerate(animals)\u00a0:\u00a0\nprint(index,\u00a0a)\u00a0\nBasic\u00a0List\u00a0Operations\u00a0\n\u2022\nMutability\u00a0 -\u00a0Unlike\u00a0 strings,\u00a0 lists\u00a0are\u00a0 mutable\u00a0 (changeable).\u00a0 So\u00a0\ncan\u00a0be\u00a0updated\u00a0as\u00a0shown\u00a0below:\u00a0\nanimals\u00a0=\u00a0['Zebra',\u00a0'Tiger',\u00a0'Lion',\u00a0'Jackal',\u00a0'Kangaroo']\u00a0\nages\u00a0=\u00a0[25,\u00a026,\u00a025,\u00a027,\u00a026,\u00a028,\u00a025]\u00a0\nanimals[2]\u00a0='Rhinoceros'\u00a0\nages[5]\u00a0=\u00a031\u00a0\nages[2:5] = [24 25 32]\n# sets items 2 to 5 with values 24", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_147", "chunk_strategy": "fixed_size"}}, {"text": "low:\u00a0\nanimals\u00a0=\u00a0['Zebra',\u00a0'Tiger',\u00a0'Lion',\u00a0'Jackal',\u00a0'Kangaroo']\u00a0\nages\u00a0=\u00a0[25,\u00a026,\u00a025,\u00a027,\u00a026,\u00a028,\u00a025]\u00a0\nanimals[2]\u00a0='Rhinoceros'\u00a0\nages[5]\u00a0=\u00a031\u00a0\nages[2:5] = [24 25 32]\n# sets items 2 to 5 with values 24 25\n94\nLet\u00a0Us\u00a0Pytho\n\u2022\nConcatenation\u00a0-\u00a0One\u00a0list\u00a0can\u00a0be\u00a0concatenated\u00a0(appended)\u00a0at\u00a0the\u00a0\nof\u00a0another\u00a0as\u00a0shown\u00a0below:\u00a0\nlst\u00a0=\u00a0[12,\u00a015,\u00a013,\u00a023,\u00a022,\u00a016,\u00a017]\u00a0\nlst\u00a0=\u00a0lst\u00a0+\u00a0[33,\u00a044,\u00a055]\u00a0\nprint(lst)\u00a0\n#\u00a0prints\u00a0[12,\u00a015,\u00a013,\u00a023,\u00a022,\u00a016,\u00a017,\u00a033,\u00a044,\u00a055]\u00a0\n\u2022\nMerging\u00a0-\u00a0Two\u00a0lists\u00a0can\u00a0be\u00a0merged\u00a0to\u00a0create\u00a0a\u00a0new\u00a0list.\u00a0\ns\u00a0=\u00a0[10,\u00a020,\u00a030]\u00a0\nt\u00a0=\u00a0[100,\u00a0200,\u00a0300]\u00a0\nz\u00a0=\u00a0s\u00a0+\u00a0t\u00a0\nprint(z)\u00a0\n#\u00a0prints\u00a0[10,\u00a020,\u00a030,\u00a0100,\u00a0200,\u00a0300]\u00a0\n\u2022\nConversion\u00a0-\u00a0A\u00a0string/tuple/set\u00a0can\u00a0be\u00a0converted\u00a0into\u00a0a\u00a0list\u00a0using\nlist(\u00a0) conversion\u00a0function.\u00a0\nl\u00a0=\u00a0list('Africa')\u00a0\n#\u00a0converts\u00a0the\u00a0string\u00a0to\u00a0a\u00a0list\u00a0['A',\u00a0'f',\u00a0'r',\u00a0'i',\u00a0'c',\u00a0\n\u2022\nAliasing\u00a0-\u00a0On\u00a0assigning\u00a0one\u00a0list\u00a0to\u00a0another,\u00a0both\u00a0refer\u00a0to\u00a0the\u00a0 s\nlist.\u00a0Changing\u00a0one\u00a0changes\u00a0the\u00a0other.\u00a0This\u00a0assignment\u00a0is\u00a0often\u00a0kn\nas\u00a0shallow\u00a0copy\u00a0or\u00a0aliasing.\u00a0\nlst1\u00a0=\u00a0[10,\u00a020,\u00a030,\u00a040,\u00a050]\u00a0\nlst2\u00a0=\u00a0lst1\u00a0\n#\u00a0doesn't\u00a0copy\u00a0list.", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_148", "chunk_strategy": "fixed_size"}}, {"text": "one\u00a0list\u00a0to\u00a0another,\u00a0both\u00a0refer\u00a0to\u00a0the\u00a0 s\nlist.\u00a0Changing\u00a0one\u00a0changes\u00a0the\u00a0other.\u00a0This\u00a0assignment\u00a0is\u00a0often\u00a0kn\nas\u00a0shallow\u00a0copy\u00a0or\u00a0aliasing.\u00a0\nlst1\u00a0=\u00a0[10,\u00a020,\u00a030,\u00a040,\u00a050]\u00a0\nlst2\u00a0=\u00a0lst1\u00a0\n#\u00a0doesn't\u00a0copy\u00a0list.\u00a0lst2\u00a0refers\u00a0to\u00a0same\u00a0list\u00a0as\u00a0lst1\u00a0\nprint(lst1)\u00a0\n#\u00a0prints\u00a0[10,\u00a020,\u00a030,\u00a040,\u00a050]\u00a0\nprint(lst2)\u00a0\n#\u00a0prints\u00a0[10,\u00a020,\u00a030,\u00a040,\u00a050]\u00a0\nlst1[0]\u00a0=\u00a0100\u00a0\nprint(lst1[0],\u00a0lst2[0])\u00a0\n#\u00a0prints\u00a0100\u00a0100\u00a0\n\u2022\nCloning\u00a0 -\u00a0 This\u00a0 involves\u00a0 copying\u00a0 contents\u00a0 of\u00a0 one\u00a0 list\u00a0 into\u00a0 anot\nAfter\u00a0copying\u00a0both\u00a0refer\u00a0to\u00a0different\u00a0lists,\u00a0though\u00a0both\u00a0contain\u00a0s\nvalues.\u00a0Changing\u00a0one\u00a0list,\u00a0doesn't\u00a0change\u00a0another.\u00a0This\u00a0operatio\noften\u00a0known\u00a0as\u00a0deep\u00a0copy.\u00a0\nlst1\u00a0=\u00a0[10,\u00a020,\u00a030,\u00a040,\u00a050]\u00a0\nlst2\u00a0=\u00a0[\u00a0]\u00a0\n#\u00a0empty\u00a0list\u00a0\nlst2\u00a0=\u00a0lst2\u00a0+\u00a0lst1\u00a0\n#\u00a0lst1,\u00a0lst2\u00a0refer\u00a0to\u00a0different\u00a0lists\u00a0\nprint(lst1)\u00a0\n#\u00a0prints\u00a0[10,\u00a020,\u00a030,\u00a040,\u00a050]\u00a0\nprint(lst2)\n# prints [10 20 30 40 50]\nChapter\u00a08:\u00a0Lists\u00a0\n9\n\u2022\nSearching\u00a0 -\u00a0 An\u00a0 element\u00a0 can\u00a0 be\u00a0 searched\u00a0 in\u00a0 a\u00a0 list\u00a0 using\u00a0 th\nmembership\u00a0operator\u00a0as\u00a0shown\u00a0below:\u00a0\nlst\u00a0=\u00a0['a',\u00a0'e',\u00a0'i',\u00a0'o',\u00a0'u']\u00a0\nres\u00a0=\u00a0'a'\u00a0in\u00a0lst\u00a0 #\u00a0return\u00a0T", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_149", "chunk_strategy": "fixed_size"}}, {"text": " 30 40 50]\nChapter\u00a08:\u00a0Lists\u00a0\n9\n\u2022\nSearching\u00a0 -\u00a0 An\u00a0 element\u00a0 can\u00a0 be\u00a0 searched\u00a0 in\u00a0 a\u00a0 list\u00a0 using\u00a0 th\nmembership\u00a0operator\u00a0as\u00a0shown\u00a0below:\u00a0\nlst\u00a0=\u00a0['a',\u00a0'e',\u00a0'i',\u00a0'o',\u00a0'u']\u00a0\nres\u00a0=\u00a0'a'\u00a0in\u00a0lst\u00a0 #\u00a0return\u00a0True\u00a0since\u00a0'a'\u00a0is\u00a0present\u00a0in\u00a0list\u00a0\nres\u00a0=\u00a0'z'\u00a0not\u00a0in\u00a0lst\u00a0 #\u00a0return\u00a0True\u00a0since\u00a0'z'\u00a0is\u00a0absent\u00a0in\u00a0list\u00a0\n\u2022\nIdentity\u00a0-\u00a0Whether\u00a0the\u00a0two\u00a0variables\u00a0are\u00a0referring\u00a0to\u00a0the\u00a0 same\ncan\u00a0be\u00a0checked\u00a0using\u00a0the\u00a0is identity\u00a0operator\u00a0as\u00a0shown\u00a0below:\u00a0\nlst1\u00a0=\u00a0[10,\u00a020,\u00a030,\u00a040,\u00a050]\u00a0\nlst2\u00a0=\u00a0[10,\u00a020,\u00a030,\u00a040,\u00a050]\u00a0\nlst3\u00a0=\u00a0lst1\u00a0\nprint(lst1\u00a0is\u00a0lst2)\u00a0\n#\u00a0prints\u00a0False\u00a0\nprint(lst1\u00a0is\u00a0lst3)\u00a0\n#\u00a0prints\u00a0True\u00a0\nprint(lst1\u00a0is\u00a0not\u00a0lst2)\u00a0\n#\u00a0prints\u00a0True\u00a0\nNote\u00a0the\u00a0difference\u00a0for\u00a0basic\u00a0types\u00a0like\u00a0int or\u00a0str:\u00a0\nnum1\u00a0=\u00a010\u00a0\nnum2\u00a0=\u00a010\u00a0\ns1\u00a0=\u00a0'Hi'\u00a0\ns2\u00a0=\u00a0'Hi'\u00a0\nprint(\u00a0num1\u00a0is\u00a0num2)\u00a0 #\u00a0prints\u00a0True\u00a0\nprint(\u00a0s1\u00a0is\u00a0s2)\u00a0\n#\u00a0prints\u00a0True\u00a0\n\u2022\nComparison\u00a0 -\u00a0 It\u00a0 is\u00a0 possible\u00a0 to\u00a0 compare\u00a0 contents\u00a0 of\u00a0 two\u00a0\nComparison\u00a0 is\u00a0 done\u00a0 item\u00a0 by\u00a0 item\u00a0 till\u00a0 there\u00a0 is\u00a0 a\u00a0 mismatch\nfollowing\u00a0code\u00a0it\u00a0would\u00a0be\u00a0decided\u00a0that\u00a0a is\u00a0less\u00a0than\u00a0b when\u00a03\u00a0a\nare\u00a0compared.\u00a0\na\u00a0=\u00a0[", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_150", "chunk_strategy": "fixed_size"}}, {"text": " is\u00a0 possible\u00a0 to\u00a0 compare\u00a0 contents\u00a0 of\u00a0 two\u00a0\nComparison\u00a0 is\u00a0 done\u00a0 item\u00a0 by\u00a0 item\u00a0 till\u00a0 there\u00a0 is\u00a0 a\u00a0 mismatch\nfollowing\u00a0code\u00a0it\u00a0would\u00a0be\u00a0decided\u00a0that\u00a0a is\u00a0less\u00a0than\u00a0b when\u00a03\u00a0a\nare\u00a0compared.\u00a0\na\u00a0=\u00a0[1,\u00a02,\u00a03,\u00a04]\u00a0\nb\u00a0=\u00a0[1,\u00a02,\u00a05]\u00a0\nprint(a\u00a0<\u00a0b)\u00a0\n#\u00a0prints\u00a0True\u00a0\n\u2022\nEmptiness\u00a0-\u00a0We\u00a0can\u00a0check\u00a0if\u00a0a\u00a0list\u00a0is\u00a0empty\u00a0using\u00a0not operator.\u00a0\nlst\u00a0=\u00a0[\u00a0]\u00a0\nif\u00a0not\u00a0lst\u00a0:\u00a0\n96\nLet\u00a0Us\u00a0Pytho\nlst\u00a0=\u00a0[\u00a0]\u00a0\nprint(bool(lst))\u00a0\n#\u00a0prints\u00a0False\u00a0\n\u2022\nAlso\u00a0note\u00a0that\u00a0the\u00a0following\u00a0values\u00a0are\u00a0considered\u00a0to\u00a0be\u00a0False:\u00a0\nNone\u00a0\nNumber\u00a0equivalent\u00a0to\u00a0zero:\u00a00,\u00a00.0,\u00a00j\u00a0\nEmpty\u00a0string,\u00a0list\u00a0and\u00a0tuple:\u00a0'\u00a0',\u00a0\"\",\u00a0[\u00a0],\u00a0(\u00a0)\u00a0\nEmpty\u00a0set\u00a0and\u00a0dictionary:\u00a0{\u00a0}\u00a0\nUsing\u00a0Built-in\u00a0Functions\u00a0on\u00a0Lists\u00a0\n\u2022\nMany\u00a0built-in\u00a0functions\u00a0can\u00a0be\u00a0used\u00a0with\u00a0lists.\u00a0\nlen(lst)\u00a0\n#\u00a0return\u00a0number\u00a0of\u00a0items\u00a0in\u00a0the\u00a0list\u00a0\nmax(lst)\u00a0\n#\u00a0return\u00a0maximum\u00a0element\u00a0in\u00a0the\u00a0list\u00a0\nmin(lst)\u00a0\n#\u00a0return\u00a0minimum\u00a0element\u00a0in\u00a0the\u00a0list\u00a0\nsum(lst)\u00a0\n#\u00a0return\u00a0sum\u00a0of\u00a0all\u00a0elements\u00a0in\u00a0the\u00a0list\u00a0\nany(lst)\u00a0\n#\u00a0return\u00a0True\u00a0if\u00a0any\u00a0element\u00a0of\u00a0lst\u00a0is\u00a0True\u00a0\nall(lst)\u00a0\n#\u00a0return\u00a0True\u00a0if\u00a0all\u00a0elements\u00a0of\u00a0lst\u00a0are\u00a0True\u00a0\ndel(", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_151", "chunk_strategy": "fixed_size"}}, {"text": "rn\u00a0minimum\u00a0element\u00a0in\u00a0the\u00a0list\u00a0\nsum(lst)\u00a0\n#\u00a0return\u00a0sum\u00a0of\u00a0all\u00a0elements\u00a0in\u00a0the\u00a0list\u00a0\nany(lst)\u00a0\n#\u00a0return\u00a0True\u00a0if\u00a0any\u00a0element\u00a0of\u00a0lst\u00a0is\u00a0True\u00a0\nall(lst)\u00a0\n#\u00a0return\u00a0True\u00a0if\u00a0all\u00a0elements\u00a0of\u00a0lst\u00a0are\u00a0True\u00a0\ndel(\u00a0)\u00a0\n#\u00a0deletes\u00a0element\u00a0or\u00a0slice\u00a0or\u00a0entire\u00a0list\u00a0\nsorted(lst)\u00a0\n#\u00a0return\u00a0sorted\u00a0list,\u00a0lst\u00a0remains\u00a0unchanged\u00a0\nreversed(lst)\u00a0\n#\u00a0used\u00a0for\u00a0reversing\u00a0lst\u00a0\nExcept\u00a0the\u00a0last\u00a03,\u00a0other\u00a0functions\u00a0are\u00a0self-explanatory.\u00a0sorted(\u00a0)\nreversed(\u00a0) are\u00a0discussed\u00a0in\u00a0section\u00a0after\u00a0next.\u00a0del(\u00a0) function's\u00a0us\nis\u00a0shown\u00a0below:\u00a0\nlst1\u00a0=\u00a0[10,\u00a020,\u00a030,\u00a040,\u00a050]\u00a0\nlst\u00a0=\u00a0del(lst[3])\u00a0\n#\u00a0delete\u00a03rd\u00a0item\u00a0in\u00a0the\u00a0list\u00a0\ndel(lst[2:5])\u00a0\n#\u00a0delete\u00a0items\u00a02\u00a0to\u00a04\u00a0from\u00a0the\u00a0list\u00a0\ndel(a[:])\u00a0\n#\u00a0delete\u00a0entire\u00a0list\u00a0\nlst\u00a0=\u00a0[\u00a0]\u00a0\n#\u00a0another\u00a0way\u00a0to\u00a0delete\u00a0an\u00a0entire\u00a0list\u00a0\n\u2022\nIf\u00a0 multiple\u00a0 variables\u00a0 are\u00a0 referring\u00a0 to\u00a0 same\u00a0 list,\u00a0 then\u00a0 deleting\u00a0\ndoesn't\u00a0delete\u00a0the\u00a0others.\u00a0\nlst1\u00a0=\u00a0[10,\u00a020,\u00a030,\u00a040,\u00a050]\u00a0\nlst3\u00a0=\u00a0lst2\u00a0=\u00a0lst1\u00a0\n#\u00a0all\u00a0refer\u00a0to\u00a0same\u00a0list\u00a0\nlst1\u00a0=\u00a0[\u00a0]\u00a0\n#\u00a0lst1\u00a0refers\u00a0to\u00a0empty\u00a0list;\u00a0lst2,\u00a0lst3\u00a0to\u00a0original\u00a0list\u00a0\nprint(lst2)\u00a0\n#\u00a0prints\u00a0[10,\u00a020,\u00a030,\u00a04", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_152", "chunk_strategy": "fixed_size"}}, {"text": "elete\u00a0the\u00a0others.\u00a0\nlst1\u00a0=\u00a0[10,\u00a020,\u00a030,\u00a040,\u00a050]\u00a0\nlst3\u00a0=\u00a0lst2\u00a0=\u00a0lst1\u00a0\n#\u00a0all\u00a0refer\u00a0to\u00a0same\u00a0list\u00a0\nlst1\u00a0=\u00a0[\u00a0]\u00a0\n#\u00a0lst1\u00a0refers\u00a0to\u00a0empty\u00a0list;\u00a0lst2,\u00a0lst3\u00a0to\u00a0original\u00a0list\u00a0\nprint(lst2)\u00a0\n#\u00a0prints\u00a0[10,\u00a020,\u00a030,\u00a040,\u00a050]\u00a0\nChapter\u00a08:\u00a0Lists\u00a0\n9\n\u2022\nIf\u00a0multiple\u00a0variables\u00a0are\u00a0referring\u00a0to\u00a0same\u00a0list\u00a0and\u00a0we\u00a0wish\u00a0to\u00a0de\nall,\u00a0we\u00a0can\u00a0do\u00a0so\u00a0as\u00a0shown\u00a0below:\u00a0\nlst2[:]\u00a0=\u00a0[\u00a0]\u00a0\n#\u00a0list\u00a0is\u00a0emptied\u00a0by\u00a0deleting\u00a0all\u00a0items\u00a0\nprint(lst2)\u00a0\n#\u00a0prints\u00a0[\u00a0]\u00a0\nprint(lst3)\u00a0\n#\u00a0prints\u00a0[\u00a0]\u00a0\nList\u00a0Methods\u00a0\n\u2022\nAny\u00a0list\u00a0is\u00a0an\u00a0object\u00a0of\u00a0type\u00a0list.\u00a0Its\u00a0methods\u00a0can\u00a0be\u00a0accessed\u00a0u\nthe\u00a0 syntax\u00a0 lst.method(\u00a0 ).\u00a0 Usage\u00a0 of\u00a0 some\u00a0 of\u00a0 the\u00a0 commonly\u00a0 u\nmethods\u00a0is\u00a0shown\u00a0below:\u00a0\nlst\u00a0=\u00a0[12,\u00a015,\u00a013,\u00a023,\u00a022,\u00a016,\u00a017]\u00a0 #\u00a0create\u00a0list\u00a0\nlst.append(22)\u00a0\n#\u00a0add\u00a0new\u00a0item\u00a0at\u00a0end\u00a0\nlst.remove(13)\u00a0\n#\u00a0delete\u00a0item\u00a013\u00a0from\u00a0list\u00a0\nlst.remove(30)\u00a0\n#\u00a0reports\u00a0valueError\u00a0as\u00a030\u00a0is\u00a0absent\u00a0in\u00a0lst\u00a0\nlst.pop(\u00a0)\u00a0\n#\u00a0removes\u00a0last\u00a0item\u00a0in\u00a0list\u00a0\nlst.pop(3)\u00a0\n#\u00a0removes\u00a03rd\u00a0item\u00a0in\u00a0the\u00a0list\u00a0\nlst.insert(3,21)\u00a0\n#\u00a0insert\u00a021\u00a0at\u00a03rd\u00a0position\u00a0\nlst.count(23)\u00a0\n#\u00a0return\u00a0no.\u00a0of\u00a0times\u00a023\u00a0appears\u00a0in\u00a0lst\u00a0\n", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_153", "chunk_strategy": "fixed_size"}}, {"text": "ent\u00a0in\u00a0lst\u00a0\nlst.pop(\u00a0)\u00a0\n#\u00a0removes\u00a0last\u00a0item\u00a0in\u00a0list\u00a0\nlst.pop(3)\u00a0\n#\u00a0removes\u00a03rd\u00a0item\u00a0in\u00a0the\u00a0list\u00a0\nlst.insert(3,21)\u00a0\n#\u00a0insert\u00a021\u00a0at\u00a03rd\u00a0position\u00a0\nlst.count(23)\u00a0\n#\u00a0return\u00a0no.\u00a0of\u00a0times\u00a023\u00a0appears\u00a0in\u00a0lst\u00a0\nidx\u00a0=\u00a0lst.index(22)\u00a0\n#\u00a0return\u00a0index\u00a0of\u00a0item\u00a022\u00a0\nidx\u00a0=\u00a0lst.index(50)\u00a0\n#\u00a0reports\u00a0valueError\u00a0as\u00a050\u00a0is\u00a0absent\u00a0in\u00a0lst\u00a0\nSorting\u00a0and\u00a0Reversing\u00a0\n\u2022\nUsage\u00a0of\u00a0list\u00a0 methods\u00a0for\u00a0reversing\u00a0a\u00a0list\u00a0and\u00a0 for\u00a0sorting\u00a0is\u00a0 sh\nbelow:\u00a0\nlst\u00a0=\u00a0[10,\u00a02,\u00a00,\u00a050,\u00a04]\u00a0\nlst.reverse(\u00a0)\u00a0\nprint(lst)\u00a0\n#\u00a0prints\u00a0[4,\u00a050,\u00a00,\u00a02,\u00a010]\u00a0\nlst.sort(\u00a0)\u00a0\nprint(lst)\u00a0\n#\u00a0prints\u00a0[0,\u00a02,\u00a04,\u00a010,\u00a050]\u00a0\nlst.sort(reverse\u00a0=\u00a0True)\u00a0#\u00a0sort\u00a0items\u00a0in\u00a0reverse\u00a0order\u00a0\nprint(lst)\u00a0\n#\u00a0prints\u00a0[50,\u00a010,\u00a04,\u00a02,\u00a00]\u00a0\nNote\u00a0that\u00a0reverse(\u00a0) and\u00a0sort(\u00a0) do\u00a0not\u00a0return\u00a0a\u00a0list.\u00a0Both\u00a0manipu\nthe\u00a0list\u00a0in\u00a0place.\u00a0\n98\nLet\u00a0Us\u00a0Pytho\nprint(sorted(lst))\u00a0\n#\u00a0prints\u00a0[0,\u00a02,\u00a04,\u00a010,\u00a050]\u00a0\nprint(sorted(lst,\u00a0reverse\u00a0=\u00a0True))\u00a0 #\u00a0prints\u00a0[50,\u00a010,\u00a04,\u00a02,\u00a00]\u00a0\nprint(list(reversed(lst)))\u00a0\n#\u00a0prints\u00a0[4,\u00a050,\u00a00,\u00a02,\u00a010]\u00a0\nNote\u00a0that\u00a0sorted(\u00a0) function\u00a0returns\u00a0a\u00a0new\u00a0sorted\u00a0list\u00a0and\u00a0keeps\noriginal\u00a0 list\u00a0 unc", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_154", "chunk_strategy": "fixed_size"}}, {"text": "t(sorted(lst,\u00a0reverse\u00a0=\u00a0True))\u00a0 #\u00a0prints\u00a0[50,\u00a010,\u00a04,\u00a02,\u00a00]\u00a0\nprint(list(reversed(lst)))\u00a0\n#\u00a0prints\u00a0[4,\u00a050,\u00a00,\u00a02,\u00a010]\u00a0\nNote\u00a0that\u00a0sorted(\u00a0) function\u00a0returns\u00a0a\u00a0new\u00a0sorted\u00a0list\u00a0and\u00a0keeps\noriginal\u00a0 list\u00a0 unchanged.\u00a0 Also,\u00a0 reversed(\u00a0 ) function\u00a0 return\nlist_reverseiterator object\u00a0which\u00a0has\u00a0to\u00a0converted\u00a0into\u00a0a\u00a0list\u00a0to\u00a0g\nreversed\u00a0list.\u00a0\n\u2022\nReversal\u00a0is\u00a0also\u00a0possible\u00a0using\u00a0a\u00a0slicing\u00a0operation\u00a0as\u00a0shown\u00a0below\nlst\u00a0=\u00a0[10,\u00a02,\u00a00,\u00a050,\u00a04]\u00a0\nprint(lst[::-1])\u00a0\n#\u00a0prints\u00a0[0,\u00a02,\u00a04,\u00a010,\u00a050]\u00a0\nList\u00a0Varieties\u00a0\n\u2022\nIt\u00a0is\u00a0possible\u00a0to\u00a0create\u00a0a\u00a0list\u00a0of\u00a0lists\u00a0(nested\u00a0lists).\u00a0\na\u00a0=\u00a0[1,\u00a03,\u00a05,\u00a07,\u00a09]\u00a0\nb\u00a0=\u00a0[2,\u00a04,\u00a06,\u00a08,\u00a010]\u00a0\nc\u00a0=\u00a0[a,\u00a0b]\u00a0\nprint(c[0][0],\u00a0c[1][2])\u00a0 #\u00a00th\u00a0element\u00a0of\u00a00th\u00a0list,\u00a02nd\u00a0ele.\u00a0of\u00a01st\u00a0list\n\u2022\nA\u00a0list\u00a0may\u00a0be\u00a0embedded\u00a0in\u00a0another\u00a0list.\u00a0\nx\u00a0=\u00a0[1,\u00a02,\u00a03,\u00a04]\u00a0\ny\u00a0=\u00a0[10,\u00a020,\u00a0x,\u00a030]\u00a0\nprint(y)\u00a0 #\u00a0outputs\u00a0[10,\u00a020,\u00a0[1,\u00a02,\u00a03,\u00a04],\u00a030]\u00a0\n\u2022\nIt\u00a0 is\u00a0 possible\u00a0 to\u00a0 unpack\u00a0 a\u00a0 string\u00a0 or\u00a0 list\u00a0 within\u00a0 a\u00a0 list\u00a0 using\u00a0 th\noperator.\u00a0\ns\u00a0=\u00a0'Hello'\u00a0\nl\u00a0=\u00a0[*s]\u00a0\nprint(l)\u00a0\n#\u00a0outputs\u00a0['H',\u00a0'e',\u00a0'l',\u00a0'l',\u00a0'o']\u00a0\nx\u00a0=\u00a0[1,\u00a02,\u00a03,\u00a04]\u00a0\ny\u00a0=\u00a0[10,\u00a020,\u00a0*x,\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_155", "chunk_strategy": "fixed_size"}}, {"text": "0]\u00a0\n\u2022\nIt\u00a0 is\u00a0 possible\u00a0 to\u00a0 unpack\u00a0 a\u00a0 string\u00a0 or\u00a0 list\u00a0 within\u00a0 a\u00a0 list\u00a0 using\u00a0 th\noperator.\u00a0\ns\u00a0=\u00a0'Hello'\u00a0\nl\u00a0=\u00a0[*s]\u00a0\nprint(l)\u00a0\n#\u00a0outputs\u00a0['H',\u00a0'e',\u00a0'l',\u00a0'l',\u00a0'o']\u00a0\nx\u00a0=\u00a0[1,\u00a02,\u00a03,\u00a04]\u00a0\ny\u00a0=\u00a0[10,\u00a020,\u00a0*x,\u00a030]\u00a0\nprint(y)\u00a0\n#\u00a0outputs\u00a0[10,\u00a020,\u00a01,\u00a02,\u00a03,\u00a04,\u00a030]\u00a0\nChapter\u00a08:\u00a0Lists\u00a0\n9\nStack\u00a0Data\u00a0Structure\u00a0\n\u2022\nA\u00a0 data\u00a0 structure\u00a0 refers\u00a0 to\u00a0 an\u00a0 arrangement\u00a0 of\u00a0 data\u00a0 in\u00a0 mem\nPopular\u00a0data\u00a0structures\u00a0are\u00a0stack,\u00a0queue,\u00a0tree,\u00a0graph\u00a0and\u00a0map.\u00a0\n\u2022\nStack\u00a0is\u00a0a\u00a0last\u00a0in\u00a0first\u00a0out\u00a0(LIFO)\u00a0list,\u00a0i.e.\u00a0last\u00a0element\u00a0that\u00a0is\u00a0adde\nthe\u00a0list\u00a0is\u00a0the\u00a0first\u00a0element\u00a0that\u00a0is\u00a0removed\u00a0from\u00a0it.\u00a0\n\u2022\nAdding\u00a0an\u00a0element\u00a0to\u00a0a\u00a0stack\u00a0is\u00a0called\u00a0push\u00a0operation\u00a0and\u00a0remo\nan\u00a0element\u00a0from\u00a0it\u00a0 is\u00a0called\u00a0 pop\u00a0operation.\u00a0Both\u00a0 these\u00a0operat\nare\u00a0carried\u00a0out\u00a0at\u00a0the\u00a0rear\u00a0end\u00a0of\u00a0the\u00a0list.\u00a0\n\u2022\nPush\u00a0and\u00a0pop\u00a0operations\u00a0can\u00a0be\u00a0carried\u00a0out\u00a0using\u00a0the\u00a0append(\u00a0)\npop(\u00a0) methods\u00a0of\u00a0list\u00a0object.\u00a0This\u00a0is\u00a0demonstrated\u00a0in\u00a0Program\u00a08.3\nQueue\u00a0Data\u00a0Structure\u00a0\n\u2022\nQueue\u00a0is\u00a0a\u00a0first\u00a0in\u00a0first\u00a0out\u00a0(FIFO)\u00a0list,\u00a0i.e.\u00a0first\u00a0element\u00a0that\u00a0is\u00a0ad\nto\u00a0the\u00a0list\u00a0is\u00a0the\u00a0first\u00a0element\u00a0that\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_156", "chunk_strategy": "fixed_size"}}, {"text": "p(\u00a0) methods\u00a0of\u00a0list\u00a0object.\u00a0This\u00a0is\u00a0demonstrated\u00a0in\u00a0Program\u00a08.3\nQueue\u00a0Data\u00a0Structure\u00a0\n\u2022\nQueue\u00a0is\u00a0a\u00a0first\u00a0in\u00a0first\u00a0out\u00a0(FIFO)\u00a0list,\u00a0i.e.\u00a0first\u00a0element\u00a0that\u00a0is\u00a0ad\nto\u00a0the\u00a0list\u00a0is\u00a0the\u00a0first\u00a0element\u00a0that\u00a0is\u00a0removed\u00a0from\u00a0it.\u00a0\n\u2022\nLists\u00a0are\u00a0not\u00a0efficient\u00a0for\u00a0implementation\u00a0of\u00a0queue\u00a0data\u00a0structure\n\u2022\nWith\u00a0lists\u00a0removal\u00a0of\u00a0items\u00a0from\u00a0beginning\u00a0is\u00a0not\u00a0efficient,\u00a0sinc\ninvolves\u00a0shifting\u00a0of\u00a0rest\u00a0of\u00a0the\u00a0elements\u00a0by\u00a01\u00a0position\u00a0after\u00a0deletio\n\u2022\nHence\u00a0for\u00a0fast\u00a0additions\u00a0and\u00a0deletions,\u00a0dequeue\u00a0class\u00a0of\u00a0collect\nmodule\u00a0is\u00a0preferred.\u00a0\n\u2022\nDeque\u00a0stands\u00a0for\u00a0 double\u00a0ended\u00a0queue.\u00a0Addition\u00a0and\u00a0 deletion\u00a0\ndeque\u00a0can\u00a0take\u00a0place\u00a0at\u00a0both\u00a0ends.\u00a0\n\u2022\nUsage\u00a0 of\u00a0 deque\u00a0 class\u00a0 to\u00a0 implement\u00a0 a\u00a0 queue\u00a0 data\u00a0 structur\ndemonstrated\u00a0in\u00a0Program\u00a08.4.\u00a0\n_________________________________________________________________\nProblem\u00a08.1\u00a0\nPerform\u00a0the\u00a0following\u00a0operations\u00a0on\u00a0a\u00a0list\u00a0of\u00a0names.\u00a0\n-\u00a0Create\u00a0a\u00a0list\u00a0of\u00a05\u00a0names\u00a0-\u00a0'Anil',\u00a0'Amol',\u00a0'Aditya',\u00a0'Avi',\u00a0'Alka'\u00a0\n-\u00a0Insert\u00a0a\u00a0name\u00a0'Anuj'\u00a0before\u00a0'Aditya'\u00a0\n100\nLet\u00a0Us\u00a0Pyth\n-\u00a0Sort\u00a0all\u00a0the\u00a0names\u00a0in\u00a0the", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_157", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0the\u00a0following\u00a0operations\u00a0on\u00a0a\u00a0list\u00a0of\u00a0names.\u00a0\n-\u00a0Create\u00a0a\u00a0list\u00a0of\u00a05\u00a0names\u00a0-\u00a0'Anil',\u00a0'Amol',\u00a0'Aditya',\u00a0'Avi',\u00a0'Alka'\u00a0\n-\u00a0Insert\u00a0a\u00a0name\u00a0'Anuj'\u00a0before\u00a0'Aditya'\u00a0\n100\nLet\u00a0Us\u00a0Pyth\n-\u00a0Sort\u00a0all\u00a0the\u00a0names\u00a0in\u00a0the\u00a0list\u00a0\n-\u00a0Print\u00a0reversed\u00a0sorted\u00a0list\u00a0\nProgram\u00a0\n#\u00a0Create\u00a0a\u00a0list\u00a0of\u00a05\u00a0names\u00a0\nnames\u00a0=\u00a0['Anil',\u00a0'Amol',\u00a0'Aditya',\u00a0'Avi',\u00a0'Alka']\u00a0\nprint(names)\u00a0\n#\u00a0insert\u00a0a\u00a0name\u00a0'Anuj'\u00a0before\u00a0'Aditya'\u00a0\nnames.insert(2,'Anuj')\u00a0\nprint(names)\u00a0\n#\u00a0append\u00a0a\u00a0name\u00a0'Zulu'\u00a0\nnames.append('Zulu')\u00a0\nprint(names)\u00a0\n#\u00a0delete\u00a0'Avi'\u00a0from\u00a0the\u00a0list\u00a0\nnames.remove('Avi')\u00a0\nprint(names)\u00a0\n#\u00a0replace\u00a0'Anil'\u00a0with\u00a0'AnilKumar'\u00a0\ni=names.index('Anil')\u00a0\nnames[i]\u00a0=\u00a0'AnilKumar'\u00a0\nprint(names)\u00a0\n#\u00a0sort\u00a0all\u00a0the\u00a0names\u00a0in\u00a0the\u00a0list\u00a0\nnames.sort(\u00a0)\u00a0\nprint(names)\u00a0\n#\u00a0print\u00a0reversed\u00a0sorted\u00a0list\u00a0\nnames.reverse(\u00a0)\u00a0\nprint(names)\u00a0\nOutput\u00a0\n['Anil',\u00a0'Amol',\u00a0'Aditya',\u00a0'Avi',\u00a0'Alka']\u00a0\n['Anil',\u00a0'Amol',\u00a0'Anuj',\u00a0'Aditya',\u00a0'Avi',\u00a0'Alka']\u00a0\n['Anil',\u00a0'Amol',\u00a0'Anuj',\u00a0'Aditya',\u00a0'Avi',\u00a0'Alka',\u00a0'Zulu']\u00a0\nChapter\u00a08:\u00a0Lists\u00a0\n1\n['Zulu',\u00a0'Anuj',\u00a0'AnilKumar',\u00a0'Amol',\u00a0'Alka',\u00a0'Aditya']\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_158", "chunk_strategy": "fixed_size"}}, {"text": "vi',\u00a0'Alka']\u00a0\n['Anil',\u00a0'Amol',\u00a0'Anuj',\u00a0'Aditya',\u00a0'Avi',\u00a0'Alka']\u00a0\n['Anil',\u00a0'Amol',\u00a0'Anuj',\u00a0'Aditya',\u00a0'Avi',\u00a0'Alka',\u00a0'Zulu']\u00a0\nChapter\u00a08:\u00a0Lists\u00a0\n1\n['Zulu',\u00a0'Anuj',\u00a0'AnilKumar',\u00a0'Amol',\u00a0'Alka',\u00a0'Aditya']\u00a0\n_________________________________________________________________\nProblem\u00a08.2\u00a0\nPerform\u00a0the\u00a0following\u00a0operations\u00a0on\u00a0a\u00a0list\u00a0of\u00a0numbers.\u00a0\n-\u00a0Create\u00a0a\u00a0list\u00a0of\u00a05\u00a0odd\u00a0numbers\u00a0\n-\u00a0Create\u00a0a\u00a0list\u00a0of\u00a05\u00a0even\u00a0numbers\u00a0\n-\u00a0Combine\u00a0the\u00a0two\u00a0lists\u00a0\n-\u00a0Add\u00a0prime\u00a0numbers\u00a011,\u00a017,\u00a029\u00a0at\u00a0the\u00a0beginning\u00a0of\u00a0the\u00a0combined\u00a0list\n-\u00a0Report\u00a0how\u00a0many\u00a0elements\u00a0are\u00a0present\u00a0in\u00a0the\u00a0list\u00a0\n-\u00a0Replace\u00a0last\u00a03\u00a0numbers\u00a0in\u00a0the\u00a0list\u00a0with\u00a0100,\u00a0200,\u00a0300\u00a0\n-\u00a0Delete\u00a0all\u00a0the\u00a0numbers\u00a0in\u00a0the\u00a0list\u00a0\n-\u00a0Delete\u00a0the\u00a0list\u00a0\nProgram\u00a0\n#\u00a0create\u00a0a\u00a0list\u00a0of\u00a05\u00a0odd\u00a0numbers\u00a0\na\u00a0=\u00a0[1,\u00a03,\u00a05,\u00a07,\u00a09]\u00a0\nprint(a)\u00a0\n#\u00a0create\u00a0a\u00a0list\u00a0of\u00a05\u00a0even\u00a0numbers\u00a0\nb\u00a0=\u00a0[2,\u00a04,\u00a06,\u00a08,\u00a010]\u00a0\nprint(b)\u00a0\n#\u00a0combine\u00a0the\u00a0two\u00a0lists\u00a0\na\u00a0=\u00a0a\u00a0+\u00a0b\u00a0\nprint(a)\u00a0\n#\u00a0add\u00a0prime\u00a0numbers\u00a011,\u00a017,\u00a029\u00a0at\u00a0the\u00a0beginning\u00a0of\u00a0the\u00a0combined\u00a0list\na\u00a0=\u00a0[11,\u00a017,\u00a029]\u00a0+\u00a0a\u00a0\nprint(a)\u00a0\n#\u00a0report\u00a0how\u00a0many\u00a0elements\u00a0are\u00a0present\u00a0in\u00a0the\u00a0l", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_159", "chunk_strategy": "fixed_size"}}, {"text": "t(b)\u00a0\n#\u00a0combine\u00a0the\u00a0two\u00a0lists\u00a0\na\u00a0=\u00a0a\u00a0+\u00a0b\u00a0\nprint(a)\u00a0\n#\u00a0add\u00a0prime\u00a0numbers\u00a011,\u00a017,\u00a029\u00a0at\u00a0the\u00a0beginning\u00a0of\u00a0the\u00a0combined\u00a0list\na\u00a0=\u00a0[11,\u00a017,\u00a029]\u00a0+\u00a0a\u00a0\nprint(a)\u00a0\n#\u00a0report\u00a0how\u00a0many\u00a0elements\u00a0are\u00a0present\u00a0in\u00a0the\u00a0list\u00a0\nnum\u00a0=\u00a0len(a)\u00a0\nprint(num)\u00a0\n#\u00a0replace\u00a0last\u00a03\u00a0numbers\u00a0in\u00a0the\u00a0list\u00a0with\u00a0100,\u00a0200,\u00a0300\u00a0\na[num-3:num]\u00a0=\u00a0[100,\u00a0200,\u00a0300]\u00a0\nprint(a)\n102\nLet\u00a0Us\u00a0Pyth\nprint(a)\u00a0\n#\u00a0delete\u00a0the\u00a0list\u00a0\ndel\u00a0a\u00a0\nOutput\u00a0\n[1,\u00a03,\u00a05,\u00a07,\u00a09]\u00a0\n[2,\u00a04,\u00a06,\u00a08,\u00a010]\u00a0\n[1,\u00a03,\u00a05,\u00a07,\u00a09,\u00a02,\u00a04,\u00a06,\u00a08,\u00a010]\u00a0\n[11,\u00a017,\u00a029,\u00a01,\u00a03,\u00a05,\u00a07,\u00a09,\u00a02,\u00a04,\u00a06,\u00a08,\u00a010]\u00a0\n13\u00a0\n[11,\u00a017,\u00a029,\u00a01,\u00a03,\u00a05,\u00a07,\u00a09,\u00a02,\u00a04,\u00a0100,\u00a0200,\u00a0300]\u00a0\n[\u00a0]\u00a0\n_________________________________________________________________\nProblem\u00a08.3\u00a0\nWrite\u00a0a\u00a0program\u00a0to\u00a0implement\u00a0a\u00a0Stack\u00a0data\u00a0structure.\u00a0Stack\u00a0is\u00a0a\u00a0Las\nFirst\u00a0 Out\u00a0 (LIFO)\u00a0list\u00a0 in\u00a0 which\u00a0addition\u00a0 and\u00a0 deletion\u00a0takes\u00a0 place\u00a0 at\nsame\u00a0end.\u00a0\nProgram\u00a0\n#\u00a0stack\u00a0-\u00a0LIFO\u00a0list\u00a0\ns\u00a0=\u00a0[\u00a0]\u00a0 #\u00a0empty\u00a0stack\u00a0\n#\u00a0push\u00a0elements\u00a0on\u00a0stack\u00a0\ns.append(10)\u00a0\ns.append(20)\u00a0\ns.append(30)\u00a0\ns.append(40)\u00a0\ns.append(50)\u00a0\nprint(s)\u00a0\n#\u00a0pop\u00a0elements\u00a0from\u00a0stack\u00a0\nprint(s.pop(\u00a0))\u00a0\np", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_160", "chunk_strategy": "fixed_size"}}, {"text": "am\u00a0\n#\u00a0stack\u00a0-\u00a0LIFO\u00a0list\u00a0\ns\u00a0=\u00a0[\u00a0]\u00a0 #\u00a0empty\u00a0stack\u00a0\n#\u00a0push\u00a0elements\u00a0on\u00a0stack\u00a0\ns.append(10)\u00a0\ns.append(20)\u00a0\ns.append(30)\u00a0\ns.append(40)\u00a0\ns.append(50)\u00a0\nprint(s)\u00a0\n#\u00a0pop\u00a0elements\u00a0from\u00a0stack\u00a0\nprint(s.pop(\u00a0))\u00a0\nprint(s.pop(\u00a0))\u00a0\nprint(s.pop(\u00a0))\u00a0\nprint(s)\nChapter\u00a08:\u00a0Lists\u00a0\n1\nOutput\u00a0\n[10,\u00a020,\u00a030,\u00a040,\u00a050]\u00a0\n50\u00a0\n40\u00a0\n30\u00a0\n[10,\u00a020]\u00a0\n_________________________________________________________________\nProblem\u00a08.4\u00a0\nWrite\u00a0a\u00a0program\u00a0to\u00a0implement\u00a0a\u00a0Queue\u00a0data\u00a0structure.\u00a0Queue\u00a0is\u00a0a\u00a0\nIn\u00a0First\u00a0Out\u00a0(FIFO)\u00a0list,\u00a0in\u00a0which\u00a0addition\u00a0takes\u00a0place\u00a0at\u00a0the\u00a0rear\u00a0en\nthe\u00a0queue\u00a0and\u00a0deletion\u00a0takes\u00a0place\u00a0at\u00a0the\u00a0front\u00a0end\u00a0of\u00a0the\u00a0queue.\u00a0\nProgram\u00a0\nimport\u00a0collections\u00a0\nq\u00a0=\u00a0collections.deque(\u00a0)\u00a0\nq.append('Suhana')\u00a0\nq.append('Shabana')\u00a0\nq.append('Shakila')\u00a0\nq.append('Shakira')\u00a0\nq.append('Sameera')\u00a0\nprint(q)\u00a0\nprint(q.popleft(\u00a0))\u00a0\nprint(q.popleft(\u00a0))\u00a0\nprint(q.popleft(\u00a0))\u00a0\nprint(q)\u00a0\nOutput\u00a0\ndeque(['Suhana',\u00a0'Shabana',\u00a0'Shakila',\u00a0'Shakira',\u00a0'Sameera'])\u00a0\nSuhana\u00a0\nShabana\u00a0\nShakila\u00a0\n([' h k\n' '\n'])\n104\nLet\u00a0Us\u00a0Pyth\nProblem\u00a08.5\u00a0\nWrite\u00a0a\u00a0program\u00a0to\u00a0g", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_161", "chunk_strategy": "fixed_size"}}, {"text": "t(\u00a0))\u00a0\nprint(q.popleft(\u00a0))\u00a0\nprint(q)\u00a0\nOutput\u00a0\ndeque(['Suhana',\u00a0'Shabana',\u00a0'Shakila',\u00a0'Shakira',\u00a0'Sameera'])\u00a0\nSuhana\u00a0\nShabana\u00a0\nShakila\u00a0\n([' h k\n' '\n'])\n104\nLet\u00a0Us\u00a0Pyth\nProblem\u00a08.5\u00a0\nWrite\u00a0a\u00a0program\u00a0to\u00a0generate\u00a0and\u00a0store\u00a0in\u00a0a\u00a0list\u00a020\u00a0random\u00a0numbe\nthe\u00a0range\u00a010\u00a0to\u00a0100.\u00a0From\u00a0this\u00a0list\u00a0delete\u00a0all\u00a0those\u00a0entries\u00a0which\u00a0h\nvalue\u00a0between\u00a020\u00a0and\u00a050.\u00a0Print\u00a0the\u00a0remaining\u00a0list.\u00a0\nProgram\u00a0\nimport\u00a0random\u00a0\na\u00a0=\u00a0[\u00a0]\u00a0\ni\u00a0=\u00a01\u00a0\nwhile\u00a0i\u00a0<=\u00a015\u00a0:\u00a0\nnum\u00a0=\u00a0random.randint(10,100)\u00a0\na.append(num)\u00a0\ni\u00a0+=\u00a01\u00a0\nprint(a)\u00a0\nfor\u00a0num\u00a0in\u00a0a\u00a0:\u00a0\nif\u00a0num\u00a0>\u00a020\u00a0and\u00a0num\u00a0<\u00a050\u00a0:\u00a0\na.remove(num)\u00a0\nprint(a)\u00a0\nOutput\u00a0\n[64,\u00a010,\u00a013,\u00a025,\u00a016,\u00a039,\u00a080,\u00a0100,\u00a045,\u00a033,\u00a030,\u00a022,\u00a059,\u00a073,\u00a083]\u00a0\n[64,\u00a010,\u00a013,\u00a016,\u00a080,\u00a0100,\u00a033,\u00a022,\u00a059,\u00a073,\u00a083]\u00a0\n_________________________________________________________________\nProblem\u00a08.6\u00a0\nWrite\u00a0a\u00a0program\u00a0to\u00a0add\u00a0two\u00a03\u00a0x\u00a04\u00a0matrices.\u00a0\nProgram\u00a0\nmat1\u00a0=\u00a0[[1,\u00a02,\u00a03,\u00a04],\u00a0[5,\u00a06,\u00a07,\u00a08],\u00a0[9,\u00a010,\u00a011,\u00a012]]\u00a0\nmat2\u00a0=\u00a0[[1,\u00a02,\u00a03,\u00a04],\u00a0[5,\u00a06,\u00a07,\u00a08],\u00a0[9,\u00a010,\u00a011,\u00a012]]\u00a0\nChapter\u00a08:\u00a0Lists\u00a0\n1\nfor\u00a0i\u00a0in\u00a0range(len(mat1))\u00a0:\u00a0\n#\u00a0iterate\u00a0through\u00a0columns\u00a0\nfor\u00a0j\u00a0in\u00a0ran", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_162", "chunk_strategy": "fixed_size"}}, {"text": "am\u00a0\nmat1\u00a0=\u00a0[[1,\u00a02,\u00a03,\u00a04],\u00a0[5,\u00a06,\u00a07,\u00a08],\u00a0[9,\u00a010,\u00a011,\u00a012]]\u00a0\nmat2\u00a0=\u00a0[[1,\u00a02,\u00a03,\u00a04],\u00a0[5,\u00a06,\u00a07,\u00a08],\u00a0[9,\u00a010,\u00a011,\u00a012]]\u00a0\nChapter\u00a08:\u00a0Lists\u00a0\n1\nfor\u00a0i\u00a0in\u00a0range(len(mat1))\u00a0:\u00a0\n#\u00a0iterate\u00a0through\u00a0columns\u00a0\nfor\u00a0j\u00a0in\u00a0range(len(mat1[0]))\u00a0:\u00a0\nmat3[i][j]\u00a0=\u00a0mat1[i][j]\u00a0+\u00a0mat2[i][j]\u00a0\nprint(mat3)\u00a0\nOutput\u00a0\n[[2,\u00a04,\u00a06,\u00a08],\u00a0[10,\u00a012,\u00a014,\u00a016],\u00a0[18,\u00a020,\u00a022,\u00a024]]\u00a0\n_________________________________________________________________\n[A] What\u00a0will\u00a0be\u00a0the\u00a0output\u00a0of\u00a0the\u00a0following\u00a0programs:\u00a0\n(a) msg\u00a0=\u00a0list('www.kicit.com')\u00a0 (http://www.kicit.com')\u00a0)\nch\u00a0=\u00a0msg[-1]\u00a0\nprint(ch)\u00a0\n(b) msg\u00a0=\u00a0list('kanlabs.teachable.com')\u00a0\ns\u00a0=\u00a0msg[4:6]\u00a0\nprint(s)\u00a0\n(c)\nmsg\u00a0=\u00a0'Online\u00a0Courses\u00a0-\u00a0KanLabs'\u00a0\ns\u00a0=\u00a0list(msg[:3])\u00a0\nprint(s)\u00a0\n(d) msg\u00a0=\u00a0'Rahate\u00a0Colony'\u00a0\ns\u00a0=\u00a0list(msg[-5:-2])\u00a0\nprint(s)\u00a0\n(e) s\u00a0=\u00a0list('KanLabs')\u00a0\nt\u00a0=\u00a0s[::-1]\u00a0\nprint(t)\u00a0\n(f)\nnum1\u00a0=\u00a0[10,\u00a020,\u00a030,\u00a040,\u00a050]\u00a0\nnum2\u00a0=\u00a0num1\u00a0\nprint(id(num1))\u00a0\nprint(type(num2))\u00a0\ni\n(i i\n(\n1 li ))\n106\nLet\u00a0Us\u00a0Pyth\nnum[2:4]\u00a0=\u00a0[\u00a0]\u00a0\nprint(num)\u00a0\n(h) num1\u00a0=\u00a0[10,\u00a020,\u00a030,\u00a040,\u00a050]\u00a0\nnum2\u00a0=\u00a0[60,\u00a070,\u00a080]\u00a0\nnum1.append(num2)\u00a0\nprint(nu", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_163", "chunk_strategy": "fixed_size"}}, {"text": "40,\u00a050]\u00a0\nnum2\u00a0=\u00a0num1\u00a0\nprint(id(num1))\u00a0\nprint(type(num2))\u00a0\ni\n(i i\n(\n1 li ))\n106\nLet\u00a0Us\u00a0Pyth\nnum[2:4]\u00a0=\u00a0[\u00a0]\u00a0\nprint(num)\u00a0\n(h) num1\u00a0=\u00a0[10,\u00a020,\u00a030,\u00a040,\u00a050]\u00a0\nnum2\u00a0=\u00a0[60,\u00a070,\u00a080]\u00a0\nnum1.append(num2)\u00a0\nprint(num1)\u00a0\n(i)\nlst\u00a0=\u00a0[10,\u00a025,\u00a04,\u00a012,\u00a03,\u00a08]\u00a0\nsorted(lst)\u00a0\nprint(lst)\u00a0\n(j)\na\u00a0=\u00a0[1,\u00a02,\u00a03,\u00a04]\u00a0\nb\u00a0=\u00a0[1,\u00a02,\u00a05]\u00a0\nprint(a\u00a0<\u00a0b)\u00a0\n[B] Attempt\u00a0the\u00a0following\u00a0questions:\u00a0\n(a) Which\u00a0of\u00a0the\u00a0following\u00a0is\u00a0a\u00a0valid\u00a0List?\u00a0\n['List']\u00a0\n{\"List\"}\u00a0\n(\"List\")\u00a0\n\"List\"\u00a0\n(b) What\u00a0will\u00a0happen\u00a0on\u00a0execution\u00a0of\u00a0the\u00a0following\u00a0code\u00a0snippet?\u00a0\ns\u00a0=\u00a0list('Hello')\u00a0\ns[1]\u00a0=\u00a0'M'\u00a0\n(c)\nThe\u00a0 following\u00a0code\u00a0 snippet\u00a0deletes\u00a0elements\u00a030\u00a0and\u00a0 40\u00a0from\nlist:\u00a0\nnum\u00a0=\u00a0[10,\u00a020,\u00a030,\u00a040,\u00a050]\u00a0\ndel(num[2:4])\u00a0\nIn\u00a0which\u00a0other\u00a0way\u00a0can\u00a0the\u00a0same\u00a0effect\u00a0be\u00a0obtained?\u00a0\n(d) Which\u00a0of\u00a0the\u00a0following\u00a0is\u00a0an\u00a0INCORRECT\u00a0list?\u00a0\na\u00a0=\u00a0[0,\u00a01,\u00a02,\u00a03,\u00a0[10,\u00a020,\u00a030]]\u00a0\na\u00a0=\u00a0[10,\u00a0'Suraj',\u00a034555.50]\u00a0\na\u00a0=\u00a0[[10,\u00a020,\u00a030],\u00a0[40,\u00a050,\u00a060]]\u00a0\n(e) From\u00a0the\u00a0list\u00a0given\u00a0below\u00a0\nnum1\u00a0=\u00a0[10,\u00a020,\u00a030,\u00a040,\u00a050]\u00a0\nHow will you create the list num2 containing:\nChapter\u00a08:\u00a0Lists\u00a0\n1\n(f)\nGiven\u00a0a\u00a0list\u00a0\nlst\u00a0=\u00a0[10,", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_164", "chunk_strategy": "fixed_size"}}, {"text": "\u00a034555.50]\u00a0\na\u00a0=\u00a0[[10,\u00a020,\u00a030],\u00a0[40,\u00a050,\u00a060]]\u00a0\n(e) From\u00a0the\u00a0list\u00a0given\u00a0below\u00a0\nnum1\u00a0=\u00a0[10,\u00a020,\u00a030,\u00a040,\u00a050]\u00a0\nHow will you create the list num2 containing:\nChapter\u00a08:\u00a0Lists\u00a0\n1\n(f)\nGiven\u00a0a\u00a0list\u00a0\nlst\u00a0=\u00a0[10,\u00a025,\u00a04,\u00a012,\u00a03,\u00a08]\u00a0\nHow\u00a0will\u00a0you\u00a0sort\u00a0it\u00a0in\u00a0descending\u00a0order?\u00a0\n(g) Given\u00a0a\u00a0list\u00a0\nlst\u00a0=\u00a0[10,\u00a025,\u00a04,\u00a012,\u00a03,\u00a08]\u00a0\nHow\u00a0will\u00a0you\u00a0check\u00a0whether\u00a030\u00a0is\u00a0present\u00a0in\u00a0the\u00a0list\u00a0or\u00a0not?\u00a0\n(h) Given\u00a0a\u00a0list\u00a0\nlst\u00a0=\u00a0[10,\u00a025,\u00a04,\u00a012,\u00a03,\u00a08]\u00a0\nHow\u00a0will\u00a0you\u00a0insert\u00a030\u00a0between\u00a025\u00a0and\u00a04?\u00a0\n(i)\nGiven\u00a0a\u00a0string\u00a0\ns\u00a0=\u00a0'Hello'\u00a0\nHow\u00a0will\u00a0you\u00a0obtain\u00a0a\u00a0list\u00a0['H',\u00a0'e',\u00a0'l',\u00a0'l',\u00a0'o']\u00a0from\u00a0it?\u00a0\n[C] Answer\u00a0the\u00a0following\u00a0questions:\u00a0\n(a) Write\u00a0a\u00a0program\u00a0to\u00a0create\u00a0a\u00a0list\u00a0of\u00a05\u00a0odd\u00a0integers.\u00a0Replace\u00a0the\u00a0t\nelement\u00a0with\u00a0a\u00a0list\u00a0of\u00a04\u00a0even\u00a0integers.\u00a0Flatten,\u00a0sort\u00a0and\u00a0print\u00a0the\u00a0l\n(b) Suppose\u00a0a\u00a0list\u00a0contains\u00a020\u00a0integers\u00a0generated\u00a0randomly.\u00a0Recei\nnumber\u00a0from\u00a0the\u00a0keyboard\u00a0and\u00a0report\u00a0position\u00a0of\u00a0all\u00a0occurrence\nthis\u00a0number\u00a0in\u00a0the\u00a0list.\u00a0\n(c) Suppose\u00a0a\u00a0 list\u00a0has\u00a0 20\u00a0numbers.\u00a0 Write\u00a0a\u00a0program\u00a0 that\u00a0remove\nduplicates\u00a0from\u00a0this\u00a0list.\u00a0\n(d) Suppose\u00a0 a\u00a0 l", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_165", "chunk_strategy": "fixed_size"}}, {"text": "umber\u00a0from\u00a0the\u00a0keyboard\u00a0and\u00a0report\u00a0position\u00a0of\u00a0all\u00a0occurrence\nthis\u00a0number\u00a0in\u00a0the\u00a0list.\u00a0\n(c) Suppose\u00a0a\u00a0 list\u00a0has\u00a0 20\u00a0numbers.\u00a0 Write\u00a0a\u00a0program\u00a0 that\u00a0remove\nduplicates\u00a0from\u00a0this\u00a0list.\u00a0\n(d) Suppose\u00a0 a\u00a0 list\u00a0 contains\u00a0 positive\u00a0 and\u00a0 negative\u00a0 numbers.\u00a0 Writ\nprogram\u00a0to\u00a0create\u00a0two\u00a0lists\u2014one\u00a0containing\u00a0positive\u00a0numbers\u00a0\nanother\u00a0containing\u00a0negative\u00a0numbers.\u00a0\n(e) Suppose\u00a0 a\u00a0 list\u00a0 contains\u00a0 5\u00a0 strings.\u00a0 Write\u00a0 a\u00a0 program\u00a0 to\u00a0 conver\nthese\u00a0strings\u00a0to\u00a0uppercase.\u00a0\n(f) Write\u00a0 a\u00a0 program\u00a0 that\u00a0converts\u00a0 list\u00a0 of\u00a0 temperatures\u00a0 in\u00a0 Fahren\ndegrees\u00a0to\u00a0equivalent\u00a0Celsius\u00a0degrees.\u00a0\n(g) Write a program to obtain a median value of a list of numb\n108\nLet\u00a0Us\u00a0Pyth\n(i) Suppose\u00a0 a\u00a0list\u00a0 contains\u00a0several\u00a0 words.\u00a0 Write\u00a0 a\u00a0program\u00a0 to\u00a0cre\nanother\u00a0list\u00a0that\u00a0contains\u00a0first\u00a0character\u00a0of\u00a0each\u00a0word\u00a0present\u00a0in\nfirst\u00a0list.\u00a0\n(j) A\u00a0 list\u00a0 contains\u00a0 10\u00a0 numbers.\u00a0 Write\u00a0 a\u00a0 program\u00a0 to\u00a0 eliminate\nduplicates\u00a0from\u00a0the\u00a0list.\u00a0\n(k) Write\u00a0a\u00a0program\u00a0to\u00a0find\u00a0the\u00a0mean,\u00a0median\u00a0and\u00a0mode\u00a0of\u00a0a\u00a0list\u00a0o\nnumbers.\u00a0\nLet\u00a0Us\nPython\n109\nTuples\n", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_166", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0\n(j) A\u00a0 list\u00a0 contains\u00a0 10\u00a0 numbers.\u00a0 Write\u00a0 a\u00a0 program\u00a0 to\u00a0 eliminate\nduplicates\u00a0from\u00a0the\u00a0list.\u00a0\n(k) Write\u00a0a\u00a0program\u00a0to\u00a0find\u00a0the\u00a0mean,\u00a0median\u00a0and\u00a0mode\u00a0of\u00a0a\u00a0list\u00a0o\nnumbers.\u00a0\nLet\u00a0Us\nPython\n109\nTuples\nx\nWhat\u00a0are\u00a0Tuples?\nx\nTuple\u00a0Methods\nx\nAccessing\u00a0Tuple Elements\nx\nTuple Varieties\nx\nLooping\u00a0in\u00a0Tuples\nx\nPrograms\nx\nBasic\u00a0Tuple Operations\nx\nExercises\nx\nUsing\u00a0Built-in\u00a0Functions\u00a0on\u00a0Tuples\n9\n\u201cOrdered,\u00a0heterogenous,\u00a0immutable....\u201d\n110\nLet\u00a0Us\u00a0Python\nWhat\u00a0are\u00a0Tuples?\nx\nThough\u00a0 a\u00a0 list\u00a0 can\u00a0 store\u00a0 dissimilar\u00a0 data,\u00a0 it\u00a0 is\u00a0 commonly\u00a0 used\u00a0 for\u00a0\nstoring\u00a0similar\u00a0data.\nx\nThough\u00a0a\u00a0tuple\u00a0can\u00a0store\u00a0similar\u00a0data\u00a0it\u00a0is\u00a0commonly\u00a0used\u00a0for\u00a0storing\u00a0\ndissimilar\u00a0data.\u00a0The\u00a0tuple data\u00a0is\u00a0enclosed\u00a0within\u00a0(\u00a0) as\u00a0shown\u00a0below.\na\u00a0=\u00a0(\u00a0)\u00a0\n#\u00a0empty\u00a0tuple\nb\u00a0=\u00a0(10,)\u00a0\n#\u00a0tuple\u00a0with\u00a0one\u00a0item.\u00a0,\u00a0after\u00a010\u00a0is\u00a0necessary\nc\u00a0=\u00a0('Sanjay',\u00a025,\u00a034555.50)\u00a0\n#\u00a0tuple\u00a0with\u00a0dissimilar\u00a0items\nd\u00a0=\u00a0(10,\u00a020,\u00a030,\u00a040)\n#\u00a0tuple\u00a0with\u00a0similar\u00a0items\nWhile\u00a0creating\u00a0the\u00a0tuple\u00a0b, if\u00a0we\u00a0do\u00a0not\u00a0use\u00a0the\u00a0comma\u00a0after\u00a010,\u00a0b is\u00a0\ntreated\u00a0to\u00a0be\u00a0of\u00a0type\u00a0int.\nx\nWhile", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_167", "chunk_strategy": "fixed_size"}}, {"text": ",\u00a025,\u00a034555.50)\u00a0\n#\u00a0tuple\u00a0with\u00a0dissimilar\u00a0items\nd\u00a0=\u00a0(10,\u00a020,\u00a030,\u00a040)\n#\u00a0tuple\u00a0with\u00a0similar\u00a0items\nWhile\u00a0creating\u00a0the\u00a0tuple\u00a0b, if\u00a0we\u00a0do\u00a0not\u00a0use\u00a0the\u00a0comma\u00a0after\u00a010,\u00a0b is\u00a0\ntreated\u00a0to\u00a0be\u00a0of\u00a0type\u00a0int.\nx\nWhile\u00a0initializing\u00a0a\u00a0tuple,\u00a0we\u00a0may\u00a0drop\u00a0(\u00a0).\nc\u00a0=\u00a0'Sanjay',\u00a025,\u00a034555.50\u00a0\n#\u00a0tuple\u00a0with\u00a0multiple\u00a0items\nprint(type(c))\u00a0\n#\u00a0c\u00a0is\u00a0of\u00a0the\u00a0type\u00a0tuple\nx\nItems\u00a0 in\u00a0a\u00a0 tuple\u00a0can\u00a0 be\u00a0repeated,\u00a0 i.e.\u00a0 tuple\u00a0may\u00a0 contain\u00a0duplicate\u00a0\nitems. However,\u00a0unlike\u00a0list,\u00a0tuple\u00a0elements\u00a0cannot\u00a0be\u00a0repeated\u00a0using\u00a0\na\u00a0*.\ntpl1 =\u00a0(10,) *\u00a05\n#\u00a0stores\u00a0(10,\u00a010,\u00a010,\u00a010,\u00a010)\ntpl2 =\u00a0(10)\u00a0*\u00a05\n#\u00a0stores\u00a0(50)\nAccessing\u00a0Tuple\u00a0Elements\nx\nEntire\u00a0tuple\u00a0can\u00a0be\u00a0printed\u00a0by\u00a0just\u00a0using\u00a0the\u00a0name\u00a0of\u00a0the\u00a0tuple.\ntpl\u00a0=\u00a0('Sanjay',\u00a025,\u00a034555.50)\u00a0\nprint(tpl)\nx\nTuple\u00a0is\u00a0an\u00a0ordered\u00a0collection.\u00a0So\u00a0order\u00a0of\u00a0insertion\u00a0of\u00a0elements\u00a0in\u00a0a\u00a0\ntuple\u00a0is\u00a0same\u00a0as\u00a0 the\u00a0order\u00a0of\u00a0access.\u00a0So\u00a0 like\u00a0a\u00a0string\u00a0and\u00a0list,\u00a0 tuple\u00a0\nitems\u00a0too\u00a0can\u00a0be\u00a0accessed\u00a0using\u00a0indices,\u00a0starting\u00a0with\u00a00.\nmsg\u00a0=\u00a0('Handle',\u00a0'Exceptions',\u00a0'Like',\u00a0'a', 'boss')\nprint(msg[1],\u00a0msg[3])\nChapter 9:\u00a0Tuples\n1", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_168", "chunk_strategy": "fixed_size"}}, {"text": "r\u00a0of\u00a0access.\u00a0So\u00a0 like\u00a0a\u00a0string\u00a0and\u00a0list,\u00a0 tuple\u00a0\nitems\u00a0too\u00a0can\u00a0be\u00a0accessed\u00a0using\u00a0indices,\u00a0starting\u00a0with\u00a00.\nmsg\u00a0=\u00a0('Handle',\u00a0'Exceptions',\u00a0'Like',\u00a0'a', 'boss')\nprint(msg[1],\u00a0msg[3])\nChapter 9:\u00a0Tuples\n111\nx\nLike\u00a0strings\u00a0and\u00a0lists,\u00a0tuples\u00a0too\u00a0can\u00a0be\u00a0sliced\u00a0to\u00a0yield\u00a0smaller\u00a0tuples.\nemp\u00a0=\u00a0('Sanjay',\u00a023,\u00a023000,\u00a01760,\u00a02040)\nprint(emp[1:3])\n#\u00a0prints\u00a0(23,\u00a023000)\nprint(emp[3:])\n#\u00a0prints\u00a0 (1760,\u00a02040)\nprint(emp[:3])\n#\u00a0prints\u00a0('Sanjay',\u00a023,\u00a023000)\nLooping\u00a0in\u00a0Tuples\nx\nIf\u00a0 we\u00a0wish\u00a0 to\u00a0process\u00a0 each\u00a0 item\u00a0in\u00a0 a\u00a0 tuple,\u00a0 we\u00a0should\u00a0 be\u00a0 able\u00a0 to\u00a0\niterate\u00a0through\u00a0it.\u00a0This\u00a0can\u00a0be\u00a0done using\u00a0a while\u00a0loop\u00a0or\u00a0for loop.\ntpl\u00a0=\u00a0(10,\u00a020,\u00a030,\u00a040,\u00a050)\ni\u00a0=\u00a00\nwhile\u00a0i\u00a0<\u00a0len(tpl)\u00a0:\nprint(tpl[i])\ni\u00a0+=\u00a01\nfor\u00a0n\u00a0in\u00a0tpl\u00a0:\nprint(n)\nx\nWhile\u00a0iterating\u00a0through\u00a0a\u00a0tuple\u00a0using\u00a0a\u00a0for loop,\u00a0if\u00a0we\u00a0wish\u00a0to\u00a0keep\u00a0\ntrack\u00a0of\u00a0index\u00a0 of\u00a0the\u00a0element\u00a0that\u00a0is\u00a0being\u00a0currently\u00a0processed,\u00a0we\u00a0\ncan\u00a0do\u00a0so\u00a0using\u00a0the built-in enumerate(\u00a0) function.\ntpl\u00a0=\u00a0(10,\u00a020,\u00a030,\u00a040,\u00a050)\nfor\u00a0index,\u00a0n\u00a0in\u00a0enumerate(tpl)\u00a0:\nprint(index,\u00a0n)\nBasic\u00a0Tuple\u00a0Operations\nx\nM", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_169", "chunk_strategy": "fixed_size"}}, {"text": "lement\u00a0that\u00a0is\u00a0being\u00a0currently\u00a0processed,\u00a0we\u00a0\ncan\u00a0do\u00a0so\u00a0using\u00a0the built-in enumerate(\u00a0) function.\ntpl\u00a0=\u00a0(10,\u00a020,\u00a030,\u00a040,\u00a050)\nfor\u00a0index,\u00a0n\u00a0in\u00a0enumerate(tpl)\u00a0:\nprint(index,\u00a0n)\nBasic\u00a0Tuple\u00a0Operations\nx\nMutability\u00a0 - Unlike\u00a0 a\u00a0 list,\u00a0 a\u00a0 tuple is immutable,\u00a0 i.e.\u00a0 it cannot\u00a0 be\u00a0\nmodified.\nmsg\u00a0=\u00a0('Fall',\u00a0'In',\u00a0'Line')\u00a0\nmsg[0]\u00a0='FALL'\u00a0\n#\u00a0error\nmsg[1:3]\u00a0=\u00a0('Above',\u00a0'Mark')\u00a0\n#\u00a0error\nx\nSince\u00a0 a\u00a0 tuple is immutable\u00a0 operations\u00a0 like\u00a0 append,\u00a0 remove\u00a0 and\u00a0\ninsert\u00a0do\u00a0not\u00a0work\u00a0with\u00a0a\u00a0tuple.\nx\nThough\u00a0 a\u00a0 tuple\u00a0itself\u00a0is\u00a0immutable,\u00a0 it\u00a0can\u00a0 contain\u00a0mutable\u00a0objects\u00a0\nlike\u00a0lists.\n112\nLet\u00a0Us\u00a0Python\n#\u00a0mutable\u00a0lists,\u00a0immutable\u00a0string\u2014all\u00a0can\u00a0belong\u00a0to\u00a0tuple\ns\u00a0=\u00a0([1,\u00a02,\u00a03,\u00a04],\u00a0[4,\u00a05],\u00a0'Ocelot')\nx\nIf\u00a0 a\u00a0 tuple\u00a0 contains\u00a0 a\u00a0 list,\u00a0 the\u00a0 list\u00a0 can\u00a0 be\u00a0 modified\u00a0 since\u00a0 list\u00a0 is\u00a0 a\u00a0\nmutable\u00a0object.\u00a0\ns\u00a0=\u00a0([1,\u00a02,\u00a03,\u00a04],\u00a0[10,\u00a020],\u00a0'Oynx')\ns[1][1]\u00a0=\u00a045\n#\u00a0changes\u00a0first\u00a0item\u00a0of\u00a0first\u00a0list,\u00a0i.e.\u00a020\nprint(s)\n#\u00a0prints\u00a0([1,\u00a02,\u00a03,\u00a04],\u00a0[4,\u00a045],\u00a0'Oynx')\n#\u00a0one\u00a0more\u00a0way\u00a0to\u00a0change\u00a0first\u00a0item\u00a0of\u00a0first\u00a0list\np\u00a0=\u00a0s[1]\np[1]\u00a0=\u00a0100\np", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_170", "chunk_strategy": "fixed_size"}}, {"text": "4],\u00a0[10,\u00a020],\u00a0'Oynx')\ns[1][1]\u00a0=\u00a045\n#\u00a0changes\u00a0first\u00a0item\u00a0of\u00a0first\u00a0list,\u00a0i.e.\u00a020\nprint(s)\n#\u00a0prints\u00a0([1,\u00a02,\u00a03,\u00a04],\u00a0[4,\u00a045],\u00a0'Oynx')\n#\u00a0one\u00a0more\u00a0way\u00a0to\u00a0change\u00a0first\u00a0item\u00a0of\u00a0first\u00a0list\np\u00a0=\u00a0s[1]\np[1]\u00a0=\u00a0100\nprint(s)\n#\u00a0prints\u00a0([1,\u00a02,\u00a03,\u00a04],\u00a0[4,\u00a0100],\u00a0'Oynx')\nx\nThe\u00a0other\u00a0basic\u00a0operations\u00a0that\u00a0are\u00a0done\u00a0on\u00a0a\u00a0tuple\u00a0are\u00a0very\u00a0similar\u00a0\nto\u00a0the\u00a0ones\u00a0done\u00a0on\u00a0a\u00a0list.\u00a0These\u00a0operations\u00a0are\u00a0discussed\u00a0in\u00a0Chapter\u00a0\n8.\u00a0You\u00a0may\u00a0try\u00a0the\u00a0following\u00a0operations\u00a0on\u00a0tuples\u00a0as\u00a0an\u00a0exercise:\nConcatenation\nMerging\nConversion\nAliasing\nCloning\nSearching\nIdentity\nComparison\nEmptiness\nUsing\u00a0Built-in\u00a0Functions\u00a0on\u00a0Tuples\nx\nMany\u00a0built-in\u00a0functions\u00a0can\u00a0be\u00a0used\u00a0with\u00a0tuples.\nt\u00a0=\u00a0(12,\u00a015,\u00a013,\u00a023,\u00a022,\u00a016,\u00a017)\u00a0 #\u00a0create\u00a0tuple\nlen(t)\u00a0\n#\u00a0return\u00a0number\u00a0of\u00a0items\u00a0in\u00a0tuple\u00a0t\nmax(t)\u00a0\n#\u00a0return\u00a0maximum\u00a0element\u00a0in\u00a0tuple\u00a0t\nmin(t)\u00a0\n#\u00a0return\u00a0minimum\u00a0element\u00a0in\u00a0tuple\u00a0t\nsum(t)\u00a0\n#\u00a0return\u00a0sum\u00a0of\u00a0all\u00a0elements\u00a0in\u00a0tuple\u00a0t\nany(t)\u00a0\n#\u00a0return\u00a0True\u00a0if\u00a0any\u00a0element\u00a0of\u00a0tpl is\u00a0True\nall(t)\u00a0\n#\u00a0return\u00a0True\u00a0if\u00a0all\u00a0elements\u00a0of\u00a0tpl are\u00a0True\nsorted(t)\u00a0\n#\u00a0return\u00a0sorted\u00a0lis", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_171", "chunk_strategy": "fixed_size"}}, {"text": "ment\u00a0in\u00a0tuple\u00a0t\nsum(t)\u00a0\n#\u00a0return\u00a0sum\u00a0of\u00a0all\u00a0elements\u00a0in\u00a0tuple\u00a0t\nany(t)\u00a0\n#\u00a0return\u00a0True\u00a0if\u00a0any\u00a0element\u00a0of\u00a0tpl is\u00a0True\nall(t)\u00a0\n#\u00a0return\u00a0True\u00a0if\u00a0all\u00a0elements\u00a0of\u00a0tpl are\u00a0True\nsorted(t)\u00a0\n#\u00a0return\u00a0sorted\u00a0list (not\u00a0sorted\u00a0tuple)\nreversed(t)\n#\u00a0used\u00a0for\u00a0reversing\u00a0t\nChapter 9:\u00a0Tuples\n113\nTuple\u00a0Methods\nx\nAny\u00a0 tuple\u00a0 is\u00a0an\u00a0object\u00a0 of\u00a0type\u00a0 tuple.\u00a0 Its\u00a0methods\u00a0 can\u00a0 be\u00a0 accessed\u00a0\nusing\u00a0 the\u00a0 syntax\u00a0 tpl.method(\u00a0 ).\u00a0 Usage\u00a0 of\u00a0 two\u00a0 methods\u00a0 is\u00a0 shown\u00a0\nbelow:\ntpl\u00a0=\u00a0(12,\u00a015,\u00a013,\u00a023,\u00a022)\n#\u00a0create\u00a0tuple\nprint(tpl.count(23))\u00a0\n#\u00a0return\u00a0no.\u00a0of\u00a0times\u00a023\u00a0appears\u00a0in\u00a0lst\nprint(tpl.index(22))\n#\u00a0return\u00a0index\u00a0of\u00a0item\u00a022\nprint(tpl.index(50))\n#\u00a0reports\u00a0valueError\u00a0as\u00a050\u00a0is\u00a0absent\u00a0in\u00a0lst\nTuple\u00a0Varieties\nx\nIt\u00a0is\u00a0possible\u00a0to\u00a0create\u00a0a\u00a0tuple\u00a0of\u00a0tuples.\na\u00a0=\u00a0(1,\u00a03,\u00a05,\u00a07,\u00a09)\nb\u00a0=\u00a0(2,\u00a04,\u00a06,\u00a08,\u00a010)\nc\u00a0=\u00a0(a,\u00a0b)\nprint(c[0][0],\u00a0c[1][2])\u00a0 #\u00a00th element\u00a0of\u00a00th tuple,\u00a02nd ele\u00a0of\u00a01st tuple\nrecords\u00a0=\u00a0(\n('Priyanka',\u00a024,\u00a03455.50),\u00a0('Shailesh',\u00a025,\u00a04555.50),\u00a0\n('Subhash',\u00a025,\u00a04505.50),\u00a0('Sugandh',\u00a027,\u00a04455.55)\u00a0\n)\u00a0\nprint(records[0][0],\u00a0reco", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_172", "chunk_strategy": "fixed_size"}}, {"text": "])\u00a0 #\u00a00th element\u00a0of\u00a00th tuple,\u00a02nd ele\u00a0of\u00a01st tuple\nrecords\u00a0=\u00a0(\n('Priyanka',\u00a024,\u00a03455.50),\u00a0('Shailesh',\u00a025,\u00a04555.50),\u00a0\n('Subhash',\u00a025,\u00a04505.50),\u00a0('Sugandh',\u00a027,\u00a04455.55)\u00a0\n)\u00a0\nprint(records[0][0],\u00a0records[0][1],\u00a0records[0][2])\nprint(records[1][0],\u00a0records[1][1],\u00a0records[1][2])\nfor\u00a0n,\u00a0a,\u00a0s\u00a0in\u00a0records\u00a0:\nprint(n,a,s)\nx\nA\u00a0tuple\u00a0may\u00a0be\u00a0embedded\u00a0in\u00a0another\u00a0tuple.\nx\u00a0=\u00a0(1,\u00a02,\u00a03,\u00a04)\ny\u00a0=\u00a0(10,\u00a020,\u00a0x,\u00a030)\u00a0\nprint(y)\u00a0\n#\u00a0outputs\u00a0(10,\u00a020,\u00a0(1,\u00a02,\u00a03,\u00a04),\u00a030)\nx\nIt\u00a0is\u00a0possible\u00a0to\u00a0unpack\u00a0a\u00a0tuple\u00a0within\u00a0a\u00a0tuple\u00a0using\u00a0the\u00a0*operator.\nx\u00a0=\u00a0(1,\u00a02,\u00a03,\u00a04)\u00a0\ny\u00a0=\u00a0(10,\u00a020,\u00a0*x,\u00a030)\nprint(y)\u00a0\n#\u00a0outputs\u00a0(10,\u00a020,\u00a01,\u00a02,\u00a03,\u00a04,\u00a030)\nx\nIt\u00a0is\u00a0possible\u00a0to\u00a0create\u00a0a\u00a0list\u00a0of\u00a0tuples,\u00a0or\u00a0a\u00a0tuple\u00a0of\u00a0lists.\n114\nLet\u00a0Us\u00a0Python\nlst\u00a0=\u00a0[('Priyanka',\u00a024,\u00a03455.50),\u00a0('Shailesh',\u00a025,\u00a04555.50)]\ntpl\u00a0=\u00a0(['Priyanka',\u00a024,\u00a03455.50],\u00a0['Shailesh',\u00a025,\u00a04555.50])\nx\nIf\u00a0we\u00a0wish\u00a0to\u00a0sort\u00a0a\u00a0list\u00a0of\u00a0tuples\u00a0or\u00a0tuple\u00a0of\u00a0lists,\u00a0it\u00a0can\u00a0be\u00a0done\u00a0as\u00a0\nfollows:\nimport\u00a0operator\n#\u00a0each\u00a0embedded\u00a0tuple/list\u00a0contains\u00a0name,\u00a0age,\u00a0salary\nlst\u00a0=\u00a0[('Shailesh',\u00a024,\u00a03455.50),\u00a0('Priy", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_173", "chunk_strategy": "fixed_size"}}, {"text": "50])\nx\nIf\u00a0we\u00a0wish\u00a0to\u00a0sort\u00a0a\u00a0list\u00a0of\u00a0tuples\u00a0or\u00a0tuple\u00a0of\u00a0lists,\u00a0it\u00a0can\u00a0be\u00a0done\u00a0as\u00a0\nfollows:\nimport\u00a0operator\n#\u00a0each\u00a0embedded\u00a0tuple/list\u00a0contains\u00a0name,\u00a0age,\u00a0salary\nlst\u00a0=\u00a0[('Shailesh',\u00a024,\u00a03455.50),\u00a0('Priyanka',\u00a025,\u00a04555.50)]\ntpl\u00a0=\u00a0(['Shailesh',\u00a024,\u00a03455.50],\u00a0['Priyanka',\u00a025,\u00a04555.50])\nprint(sorted(lst))\nprint(sorted(tpl))\nprint(sorted(lst,\u00a0key\u00a0=\u00a0operator.itemgetter(2)))\nprint(sorted(tpl,\u00a0key\u00a0=\u00a0operator.itemgetter(2)))\nx\nBy\u00a0default,\u00a0sorted(\u00a0) sorts\u00a0by\u00a0first\u00a0item\u00a0in\u00a0list/tuple,\u00a0i.e.\u00a0name.\u00a0\nx\nIf\u00a0 we\u00a0 wish\u00a0 to\u00a0 sort\u00a0 by\u00a0 salary,\u00a0 we\u00a0 need\u00a0 to\u00a0 use the\u00a0 itemgetter( )\nfunction\u00a0of\u00a0operator\u00a0module.\nx\nThe\u00a0key\u00a0parameter\u00a0of\u00a0sorted(\u00a0)\u00a0requires\u00a0a\u00a0key\u00a0function\u00a0(to\u00a0be\u00a0applied\u00a0\nto\u00a0objects\u00a0to\u00a0be\u00a0sorted)\u00a0rather\u00a0than\u00a0a\u00a0single\u00a0key\u00a0value.\nx\noperator.itemgetter(2) will\u00a0 give\u00a0 us a\u00a0 function\u00a0 that\u00a0 fetches salary\nfrom\u00a0a\u00a0list/tuple.\nx\nIn\u00a0general,\u00a0operator.itemgetter(n) constructs\u00a0a\u00a0function\u00a0that\u00a0takes\u00a0a\u00a0\nlist/tuple as\u00a0input,\u00a0and\u00a0fetches\u00a0the\u00a0n-th\u00a0element\u00a0out\u00a0of\u00a0it.\n_________________________________________________", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_174", "chunk_strategy": "fixed_size"}}, {"text": "om\u00a0a\u00a0list/tuple.\nx\nIn\u00a0general,\u00a0operator.itemgetter(n) constructs\u00a0a\u00a0function\u00a0that\u00a0takes\u00a0a\u00a0\nlist/tuple as\u00a0input,\u00a0and\u00a0fetches\u00a0the\u00a0n-th\u00a0element\u00a0out\u00a0of\u00a0it.\n____________________________________________________________________\nProblem\u00a08.1\nPass\u00a0a\u00a0tuple\u00a0to\u00a0the\u00a0divmod(\u00a0) function\u00a0and\u00a0obtain\u00a0the\u00a0quotient\u00a0and\u00a0the\u00a0\nremainder.\nProgram\nresult\u00a0=\u00a0divmod(17,3)\nprint(result)\nt\u00a0=\u00a0(17,\u00a03)\nresult\u00a0=\u00a0divmod(*t)\nChapter 9:\u00a0Tuples\n115\nprint(result)\nOutput\n(5,\u00a02)\n(5,\u00a02)\nTips\nx\nIf\u00a0we\u00a0pass\u00a0t to\u00a0divmod(\u00a0) an\u00a0error\u00a0is\u00a0reported.\u00a0We\u00a0have\u00a0to\u00a0unpack\u00a0the\u00a0\ntuple\u00a0into\u00a0two\u00a0distinct\u00a0values\u00a0and\u00a0then\u00a0pass\u00a0them\u00a0to\u00a0divmod(\u00a0).\nx\ndivmod(\u00a0) returns\u00a0a\u00a0tuple\u00a0consisting\u00a0of\u00a0quotient\u00a0and\u00a0remainder.\n____________________________________________________________________\nProblem\u00a08.2\nWrite\u00a0a\u00a0Python\u00a0program\u00a0to\u00a0perform\u00a0the\u00a0following\u00a0operations:\n-\nPack\u00a0first\u00a010\u00a0multiples\u00a0of\u00a010\u00a0into\u00a0a\u00a0tuple\n-\nUnpack\u00a0the\u00a0tuple\u00a0into\u00a010\u00a0variables,\u00a0each\u00a0holding\u00a01\u00a0value\n-\nUnpack\u00a0the\u00a0tuple\u00a0such\u00a0that\u00a0first\u00a0value\u00a0gets\u00a0stored\u00a0in\u00a0variable\u00a0x,\u00a0last\u00a0\nvalue\u00a0in\u00a0y\u00a0and\u00a0all\u00a0values", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_175", "chunk_strategy": "fixed_size"}}, {"text": "ack\u00a0first\u00a010\u00a0multiples\u00a0of\u00a010\u00a0into\u00a0a\u00a0tuple\n-\nUnpack\u00a0the\u00a0tuple\u00a0into\u00a010\u00a0variables,\u00a0each\u00a0holding\u00a01\u00a0value\n-\nUnpack\u00a0the\u00a0tuple\u00a0such\u00a0that\u00a0first\u00a0value\u00a0gets\u00a0stored\u00a0in\u00a0variable\u00a0x,\u00a0last\u00a0\nvalue\u00a0in\u00a0y\u00a0and\u00a0all\u00a0values\u00a0in\u00a0between\u00a0into\u00a0disposable\u00a0variables\u00a0_\n-\nUnpack\u00a0the\u00a0tuple\u00a0such\u00a0that\u00a0first\u00a0value\u00a0gets\u00a0 stored\u00a0in\u00a0variable\u00a0i,\u00a0last\u00a0\nvalue\u00a0in\u00a0j\u00a0and\u00a0all\u00a0values\u00a0in\u00a0between\u00a0into\u00a0a\u00a0single\u00a0disposable\u00a0variable\u00a0_\nProgram\ntpl\u00a0=\u00a0(10,\u00a020,\u00a030,\u00a040,\u00a050,\u00a060,\u00a070,\u00a08,\u00a090,\u00a0100)\na,\u00a0b,\u00a0c,\u00a0d,\u00a0e,\u00a0f,\u00a0g,\u00a0h,\u00a0i,\u00a0j\u00a0=\u00a0tpl\nprint(tpl)\nprint(a,\u00a0b,\u00a0c,\u00a0d,\u00a0e,\u00a0f,\u00a0g,\u00a0h,\u00a0i,\u00a0j)\nx,\u00a0_,\u00a0_,\u00a0_,\u00a0_,\u00a0_,\u00a0_,\u00a0_,\u00a0_,\u00a0y\u00a0=\u00a0tpl\nprint(x,\u00a0y,\u00a0_)\ni,\u00a0*_,\u00a0j\u00a0=\u00a0tpl\nprint(i,\u00a0j,\u00a0_)\nOutput\n(10,\u00a020,\u00a030,\u00a040,\u00a050,\u00a060,\u00a070,\u00a08,\u00a090,\u00a0100)\n10\u00a020\u00a030\u00a040\u00a050\u00a060\u00a070\u00a08\u00a090\u00a0100\n10\u00a0100\u00a090\n10\u00a0100\u00a0[20,\u00a030,\u00a040,\u00a050,\u00a060,\u00a070,\u00a08,\u00a090]\n116\nLet\u00a0Us\u00a0Python\nTips\nx\nDisposable\u00a0variable\u00a0_\u00a0is\u00a0usally\u00a0used\u00a0when\u00a0you\u00a0do\u00a0not\u00a0wish\u00a0to\u00a0use\u00a0the\u00a0\nvariable\u00a0further,\u00a0and\u00a0is\u00a0being\u00a0used\u00a0only\u00a0as\u00a0a\u00a0place-holder.\n____________________________________________________________________\nProblem\u00a08.3\nA\u00a0list\u00a0contains\u00a0names\u00a0of\u00a0boys\u00a0an", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_176", "chunk_strategy": "fixed_size"}}, {"text": "ou\u00a0do\u00a0not\u00a0wish\u00a0to\u00a0use\u00a0the\u00a0\nvariable\u00a0further,\u00a0and\u00a0is\u00a0being\u00a0used\u00a0only\u00a0as\u00a0a\u00a0place-holder.\n____________________________________________________________________\nProblem\u00a08.3\nA\u00a0list\u00a0contains\u00a0names\u00a0of\u00a0boys\u00a0and\u00a0girls\u00a0as\u00a0its\u00a0elements.\u00a0Boys'\u00a0names\u00a0are\u00a0\nstored\u00a0as\u00a0 tuples.\u00a0Write\u00a0 a\u00a0Python\u00a0 program\u00a0to\u00a0 find\u00a0out\u00a0number\u00a0of\u00a0boys\u00a0\nand\u00a0girls\u00a0in\u00a0the\u00a0list.\nProgram\nlst\u00a0=\u00a0['Shubha',\u00a0'Nisha',\u00a0'Sudha',\u00a0('Suresh',),\u00a0('Rajesh',),\u00a0'Radha']\nboys\u00a0=\u00a00\ngirls\u00a0=\u00a00\nfor\u00a0ele\u00a0in\u00a0lst:\nif\u00a0isinstance(ele,\u00a0tuple):\nboys\u00a0+=\u00a01\nelse\u00a0:\ngirls\u00a0+=\u00a01\nprint('Boys\u00a0=\u00a0',\u00a0boys,\u00a0'Girls\u00a0=\u00a0',\u00a0girls)\nOutput\nBoys\u00a0=\u00a0 2\u00a0Girls\u00a0=\u00a0 4\nTips\nx\nisinstance(\u00a0 ) functions\u00a0 checks\u00a0 whether\u00a0 ele is\u00a0an\u00a0 instance\u00a0 of\u00a0 tuple\u00a0\ntype.\nx\nNote\u00a0that\u00a0since\u00a0the\u00a0tuples\u00a0contain\u00a0a\u00a0single\u00a0element,\u00a0it\u00a0is\u00a0followed\u00a0by\u00a0\na\u00a0comma.\n____________________________________________________________________\nProblem\u00a08.4\nA\u00a0list\u00a0contains\u00a0tuples\u00a0containing\u00a0roll\u00a0number,\u00a0names\u00a0and\u00a0age\u00a0of\u00a0student.\u00a0\nWrite\u00a0 a\u00a0 Python\u00a0 program\u00a0 to\u00a0 gather\u00a0 all\u00a0 the\u00a0 names\u00a0 from\u00a0 this\u00a0 list\u00a0 into\u00a0\nanother\u00a0list.\nChap", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_177", "chunk_strategy": "fixed_size"}}, {"text": "_______________\nProblem\u00a08.4\nA\u00a0list\u00a0contains\u00a0tuples\u00a0containing\u00a0roll\u00a0number,\u00a0names\u00a0and\u00a0age\u00a0of\u00a0student.\u00a0\nWrite\u00a0 a\u00a0 Python\u00a0 program\u00a0 to\u00a0 gather\u00a0 all\u00a0 the\u00a0 names\u00a0 from\u00a0 this\u00a0 list\u00a0 into\u00a0\nanother\u00a0list.\nChapter 9:\u00a0Tuples\n117\nProgram\nlst\u00a0=\u00a0[('A101',\u00a0'Shubha',\u00a023),\u00a0('A104',\u00a0'Nisha',\u00a025),\u00a0('A111',\u00a0'Sudha',\u00a024)]\nnlst =\u00a0[\u00a0]\nfor\u00a0ele\u00a0in\u00a0lst:\nnlst =\u00a0nlst +\u00a0[ele[1]]\nprint(nlst)\nOutput\n['Shubha',\u00a0'Nisha',\u00a0'Sudha']\nTips\nx\nnlst is\u00a0 an\u00a0 empty\u00a0 to\u00a0 begin\u00a0 with.\u00a0 During\u00a0 each\u00a0 iteration\u00a0 name\u00a0 is\u00a0\nextracted\u00a0from\u00a0the\u00a0tuple\u00a0using\u00a0ele[1]\u00a0and\u00a0added\u00a0to\u00a0the\u00a0current\u00a0list\u00a0of\u00a0\nnames\u00a0in\u00a0nlst.\n____________________________________________________________________\nProblem\u00a08.5\nGiven\u00a0the\u00a0following\u00a0tuple\n('F',\u00a0'l',\u00a0'a',\u00a0'b',\u00a0'b',\u00a0'e',\u00a0'r',\u00a0'g',\u00a0'a',\u00a0's',\u00a0't',\u00a0'e',\u00a0'd')\nWrite\u00a0a\u00a0Python\u00a0program\u00a0to\u00a0carry\u00a0out\u00a0the\u00a0following\u00a0operations:\n-\nAdd\u00a0an\u00a0!\u00a0at\u00a0the\u00a0end\u00a0of\u00a0the\u00a0tuple\n-\nConvert\u00a0a\u00a0tuple\u00a0to\u00a0a\u00a0string\n-\nExtract\u00a0('b',\u00a0'b')\u00a0from\u00a0the\u00a0tuple\n-\nFind\u00a0out\u00a0number\u00a0of\u00a0occurrences of\u00a0'e'\u00a0in\u00a0the\u00a0tuple\n-\nCheck\u00a0whether\u00a0'r'\u00a0exists\u00a0in\u00a0the\u00a0tuple\n-\nC", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_178", "chunk_strategy": "fixed_size"}}, {"text": "s:\n-\nAdd\u00a0an\u00a0!\u00a0at\u00a0the\u00a0end\u00a0of\u00a0the\u00a0tuple\n-\nConvert\u00a0a\u00a0tuple\u00a0to\u00a0a\u00a0string\n-\nExtract\u00a0('b',\u00a0'b')\u00a0from\u00a0the\u00a0tuple\n-\nFind\u00a0out\u00a0number\u00a0of\u00a0occurrences of\u00a0'e'\u00a0in\u00a0the\u00a0tuple\n-\nCheck\u00a0whether\u00a0'r'\u00a0exists\u00a0in\u00a0the\u00a0tuple\n-\nConvert\u00a0the\u00a0tuple\u00a0to\u00a0a\u00a0list\n-\nDelete\u00a0characters\u00a0'b,\u00a0'b',\u00a0'e',\u00a0'r'\u00a0from\u00a0the\u00a0tuple\nProgram\ntpl\u00a0=\u00a0('F',\u00a0'l',\u00a0'a',\u00a0'b',\u00a0'b',\u00a0'e',\u00a0'r',\u00a0'g',\u00a0'a',\u00a0's',\u00a0't',\u00a0'e',\u00a0'd')\n#\u00a0addition\u00a0of\u00a0!\u00a0is\u00a0not\u00a0possible\u00a0as\u00a0tuple\u00a0is\u00a0an\u00a0immutable\n#\u00a0so\u00a0to\u00a0add\u00a0!\u00a0we\u00a0need\u00a0to\u00a0create\u00a0a\u00a0new\u00a0tuple\u00a0and\u00a0then\u00a0make\u00a0tpl\u00a0refer\u00a0to\u00a0it\ntpl\u00a0=\u00a0tpl\u00a0+\u00a0('!',)\nprint(tpl)\n118\nLet\u00a0Us\u00a0Python\n#\u00a0convert\u00a0tuple\u00a0to\u00a0string\ns\u00a0=\u00a0''.join(tpl)\nprint(s)\n#\u00a0extract\u00a0('b',\u00a0'b')\u00a0from\u00a0the\u00a0tuple\nt\u00a0=\u00a0tpl[3:5]\nprint(t)\n#\u00a0count\u00a0number\u00a0of\u00a0'e'\u00a0in\u00a0the\u00a0tuple\ncount\u00a0=\u00a0tpl.count('e')\nprint('count\u00a0=\u00a0',\u00a0count)\n#\u00a0check\u00a0whether\u00a0'r'\u00a0exists\u00a0in\u00a0the\u00a0tuple\nprint('r'\u00a0in\u00a0tpl)\n#\u00a0Convert\u00a0the\u00a0tuple\u00a0to\u00a0a\u00a0list\nlst\u00a0=\u00a0list(tpl)\nprint(lst)\n#\u00a0tuples\u00a0are\u00a0immutable,\u00a0so\u00a0we\u00a0cannot\u00a0remove\u00a0elements\u00a0from\u00a0it\n#\u00a0we\u00a0need\u00a0to\u00a0split\u00a0the\u00a0tuple,\u00a0eliminate\u00a0the\u00a0unwanted\u00a0element\u00a0and\u00a0then\u00a0\nmerge\u00a0the\u00a0tuples\ntpl\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_179", "chunk_strategy": "fixed_size"}}, {"text": "the\u00a0tuple\u00a0to\u00a0a\u00a0list\nlst\u00a0=\u00a0list(tpl)\nprint(lst)\n#\u00a0tuples\u00a0are\u00a0immutable,\u00a0so\u00a0we\u00a0cannot\u00a0remove\u00a0elements\u00a0from\u00a0it\n#\u00a0we\u00a0need\u00a0to\u00a0split\u00a0the\u00a0tuple,\u00a0eliminate\u00a0the\u00a0unwanted\u00a0element\u00a0and\u00a0then\u00a0\nmerge\u00a0the\u00a0tuples\ntpl\u00a0=\u00a0tpl[:3]\u00a0+\u00a0tpl[7:]\nprint(tpl)\nOutput\n('F',\u00a0'l',\u00a0'a',\u00a0'b',\u00a0'b',\u00a0'e',\u00a0'r',\u00a0'g',\u00a0'a',\u00a0's',\u00a0't',\u00a0'e',\u00a0'd',\u00a0'!')\nFlabbergasted!\n('b',\u00a0'b')\ncount\u00a0=\u00a0 2\nTrue\n['F',\u00a0'l',\u00a0'a',\u00a0'b',\u00a0'b',\u00a0'e',\u00a0'r',\u00a0'g',\u00a0'a',\u00a0's',\u00a0't',\u00a0'e',\u00a0'd',\u00a0'!']\n('F',\u00a0'l',\u00a0'a',\u00a0'g',\u00a0'a',\u00a0's',\u00a0't',\u00a0'e',\u00a0'd',\u00a0'!')\n____________________________________________________________________\nChapter 9:\u00a0Tuples\n119\n[A] Which\u00a0of\u00a0the\u00a0following\u00a0properties\u00a0apply\u00a0to\u00a0string,\u00a0list\u00a0and\u00a0tuple?\n-\nIterable\n-\nSliceable\n-\nIndexable\n-\nImmutable\n-\nSequence\n-\nCan\u00a0be\u00a0empty\n-\nSorted\u00a0collection\n-\nOrdered\u00a0collection\n-\nUnordered\u00a0collection\n-\nElements\u00a0can\u00a0be\u00a0accessed\u00a0using\u00a0their\u00a0position\u00a0in\u00a0the\u00a0collection\n[B] Which\u00a0of\u00a0the\u00a0following\u00a0operations\u00a0can\u00a0be\u00a0performed\u00a0on\u00a0string,\u00a0list\u00a0\nand\u00a0tuple?\n-\na\u00a0=\u00a0b\u00a0+\u00a0c\n-\na\u00a0+=\u00a0b\n-\nAppending\u00a0a\u00a0new\u00a0element\u00a0at\u00a0the\u00a0end\n-\nDeletion\u00a0of\u00a0an\u00a0elem", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_180", "chunk_strategy": "fixed_size"}}, {"text": "sing\u00a0their\u00a0position\u00a0in\u00a0the\u00a0collection\n[B] Which\u00a0of\u00a0the\u00a0following\u00a0operations\u00a0can\u00a0be\u00a0performed\u00a0on\u00a0string,\u00a0list\u00a0\nand\u00a0tuple?\n-\na\u00a0=\u00a0b\u00a0+\u00a0c\n-\na\u00a0+=\u00a0b\n-\nAppending\u00a0a\u00a0new\u00a0element\u00a0at\u00a0the\u00a0end\n-\nDeletion\u00a0of\u00a0an\u00a0element\u00a0at\u00a0the\u00a00th\u00a0position\n-\nModification\u00a0of\u00a0last\u00a0element\n-\nIn\u00a0place\u00a0reversal\n[C] Answer\u00a0the\u00a0following questions:\n(a) Is\u00a0this\u00a0a\u00a0valid\u00a0tuple?\ntpl\u00a0=\u00a0('Square')\n(b) What\u00a0will\u00a0be\u00a0the\u00a0output\u00a0of\u00a0the\u00a0following\u00a0code\u00a0snippet?\u00a0\nnum1\u00a0=\u00a0num2\u00a0=\u00a0(10,\u00a020,\u00a030,\u00a040,\u00a050)\nprint(id(num1),\u00a0type(num2))\nprint(isinstance(num1,\u00a0tuple))\nprint(num1\u00a0is\u00a0num2)\nprint(num1\u00a0is\u00a0not\u00a0num2)\nprint(20\u00a0in\u00a0num1)\nprint(30\u00a0not\u00a0in\u00a0num2)\n(c) Suppose\u00a0a\u00a0date\u00a0is\u00a0represented\u00a0as\u00a0a\u00a0tuple\u00a0(d,\u00a0m,\u00a0y).\u00a0Write\u00a0a\u00a0program\u00a0\nto\u00a0create\u00a0two\u00a0date\u00a0tuples\u00a0and\u00a0find\u00a0the\u00a0number\u00a0of\u00a0days\u00a0between\u00a0the\u00a0\ntwo\u00a0dates.\n120\nLet\u00a0Us\u00a0Python\n(d) Create\u00a0 a\u00a0 list\u00a0 of\u00a0 tuples.\u00a0 Each\u00a0 tuple\u00a0 should\u00a0 contain\u00a0 an\u00a0 item\u00a0 and\u00a0 its\u00a0\nprice\u00a0in\u00a0float.\u00a0Write\u00a0a\u00a0program\u00a0to\u00a0sort\u00a0the\u00a0tuples\u00a0in\u00a0descending\u00a0order\u00a0\nby\u00a0price.\u00a0Hint:\u00a0Use\u00a0operator.itemgetter(\u00a0).\n(e) Store\u00a0the\u00a0data\u00a0about\u00a0shares\u00a0held\u00a0b", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_181", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0 tuple\u00a0 should\u00a0 contain\u00a0 an\u00a0 item\u00a0 and\u00a0 its\u00a0\nprice\u00a0in\u00a0float.\u00a0Write\u00a0a\u00a0program\u00a0to\u00a0sort\u00a0the\u00a0tuples\u00a0in\u00a0descending\u00a0order\u00a0\nby\u00a0price.\u00a0Hint:\u00a0Use\u00a0operator.itemgetter(\u00a0).\n(e) Store\u00a0the\u00a0data\u00a0about\u00a0shares\u00a0held\u00a0by\u00a0a\u00a0user\u00a0as\u00a0tuples\u00a0containing\u00a0the\u00a0\nfollowing\u00a0information\u00a0about\u00a0shares:\nShare\u00a0name\nDate\u00a0of\u00a0purchase\nCost\u00a0price\nNumber\u00a0of\u00a0shares\nSelling\u00a0price\nWrite\u00a0a\u00a0program\u00a0to\u00a0determine:\n- Total\u00a0cost\u00a0of\u00a0the\u00a0portfolio.\n- Total\u00a0amount\u00a0gained\u00a0or\u00a0lost.\n- Percentage\u00a0profit\u00a0made\u00a0or\u00a0loss\u00a0incurred.\n(f) Write a\u00a0program\u00a0to\u00a0remove\u00a0empty\u00a0tuple\u00a0from\u00a0a\u00a0list\u00a0of\u00a0tuples.\n(g) Write\u00a0a\u00a0program\u00a0to\u00a0create\u00a0following\u00a03\u00a0lists:\n- a\u00a0list\u00a0of\u00a0names\n- a\u00a0list\u00a0of\u00a0roll\u00a0numbers\u00a0\n- a\u00a0list\u00a0of\u00a0marks\nGenerate\u00a0and\u00a0print\u00a0a\u00a0list\u00a0of\u00a0tuples\u00a0containing\u00a0name,\u00a0roll\u00a0number\u00a0and\u00a0\nmarks\u00a0 from\u00a0 the\u00a0 3\u00a0 lists.\u00a0 From\u00a0 this\u00a0 list\u00a0 generate\u00a0 3\u00a0 tuples\u2014one\u00a0\ncontaining\u00a0all\u00a0names,\u00a0another\u00a0containing\u00a0 all\u00a0roll\u00a0numbers\u00a0and\u00a0third\u00a0\ncontaining\u00a0all\u00a0marks.\n[D] Match\u00a0the\u00a0following pairs:\na.\u00a0 tpl1\u00a0=\u00a0('A',)\n1.\u00a0 tuple\u00a0of\u00a0length\u00a06\nb.\u00a0 tpl1\u00a0=\u00a0('A')\n2.\u00a0 tuple\u00a0of\u00a0lists\nc.\u00a0 t\u00a0=", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_182", "chunk_strategy": "fixed_size"}}, {"text": "ning\u00a0all\u00a0names,\u00a0another\u00a0containing\u00a0 all\u00a0roll\u00a0numbers\u00a0and\u00a0third\u00a0\ncontaining\u00a0all\u00a0marks.\n[D] Match\u00a0the\u00a0following pairs:\na.\u00a0 tpl1\u00a0=\u00a0('A',)\n1.\u00a0 tuple\u00a0of\u00a0length\u00a06\nb.\u00a0 tpl1\u00a0=\u00a0('A')\n2.\u00a0 tuple\u00a0of\u00a0lists\nc.\u00a0 t\u00a0=\u00a0tpl[::-1]\n3.\u00a0 Tuple\nd.\u00a0 ('A',\u00a0'B',\u00a0'C',\u00a0'D')\n4.\u00a0 list\u00a0of\u00a0tuples\ne.\u00a0 [(1,\u00a02),\u00a0(2,\u00a03),\u00a0(4,\u00a05)]\n5.\u00a0 String\nf.\u00a0 tpl\u00a0=\u00a0tuple(range(2,\u00a05))\n6.\u00a0 Sorts\u00a0tuple\ng.\u00a0 ([1,\u00a02],\u00a0[3,\u00a04],\u00a0[5,\u00a06])\n7.\u00a0 (2,\u00a03,\u00a04)\nh.\u00a0 t\u00a0=\u00a0tuple('Ajooba')\n8.\u00a0 tuple\u00a0of\u00a0strings\ni.\u00a0 [*a,\u00a0*b,\u00a0*c]\n9.\u00a0 Unpacking\u00a0of\u00a0tuples\u00a0in\u00a0a\u00a0list\nj.\u00a0 (*a,\u00a0*b,\u00a0*c)\n10.\u00a0Unpacking\u00a0of\u00a0lists\u00a0in\u00a0a\u00a0tuple\nLet\u00a0Us\nPython\n121\nSets\nx\nWhat\u00a0are\u00a0Sets?\nx\nMathematical\u00a0Set\u00a0Operations\nx\nAccessing\u00a0Set Elements\nx\nUpdating\u00a0Set\u00a0Operations\nx\nLooping\u00a0in\u00a0Sets\nx\nSet\u00a0Varieties\nx\nBasic\u00a0Set Operations\nx\nPrograms\nx\nUsing\u00a0Built-in\u00a0Functions\u00a0on\u00a0Sets\nx\nExercises\nx\nSet\u00a0Methods\n10\n\u201cChic\u00a0and\u00a0unique....\u201d\n122\nLet\u00a0Us\u00a0Python\nWhat\u00a0are\u00a0Sets?\nx\nSets\u00a0 are\u00a0 like\u00a0 lists,\u00a0 with\u00a0 an\u00a0 exception\u00a0 that\u00a0 they\u00a0 do\u00a0 not\u00a0 contain\u00a0\nduplicate\u00a0entries.\na\u00a0=\u00a0set(\u00a0)\u00a0\n#\u00a0empty\u00a0set,\u00a0use\u00a0(\u00a0)\u00a0instead\u00a0of\u00a0{\u00a0}\nb\u00a0=\u00a0{20", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_183", "chunk_strategy": "fixed_size"}}, {"text": "nd\u00a0unique....\u201d\n122\nLet\u00a0Us\u00a0Python\nWhat\u00a0are\u00a0Sets?\nx\nSets\u00a0 are\u00a0 like\u00a0 lists,\u00a0 with\u00a0 an\u00a0 exception\u00a0 that\u00a0 they\u00a0 do\u00a0 not\u00a0 contain\u00a0\nduplicate\u00a0entries.\na\u00a0=\u00a0set(\u00a0)\u00a0\n#\u00a0empty\u00a0set,\u00a0use\u00a0(\u00a0)\u00a0instead\u00a0of\u00a0{\u00a0}\nb\u00a0=\u00a0{20}\u00a0\n#\u00a0set\u00a0with\u00a0one\u00a0item\nc\u00a0=\u00a0{'Sanjay',\u00a025,\u00a034555.50}\u00a0\n#\u00a0set\u00a0with\u00a0multiple\u00a0items\nd\u00a0=\u00a0{10,\u00a010,\u00a010,\u00a010}\u00a0\n#\u00a0only\u00a0one\u00a010\u00a0gets\u00a0stored\nx\nWhile\u00a0storing\u00a0an\u00a0element\u00a0in\u00a0a\u00a0set,\u00a0its\u00a0hash\u00a0value\u00a0is\u00a0computed\u00a0using\u00a0a\u00a0\nhashing\u00a0technique\u00a0to\u00a0determine\u00a0where\u00a0it\u00a0should\u00a0be\u00a0stored\u00a0in\u00a0the\u00a0set.\u00a0\nx\nSince\u00a0 hash\u00a0value\u00a0of\u00a0 an\u00a0element\u00a0will\u00a0always\u00a0be\u00a0 same,\u00a0no\u00a0 matter\u00a0in\u00a0\nwhich\u00a0order\u00a0we\u00a0insert\u00a0the\u00a0elements\u00a0in\u00a0a\u00a0set,\u00a0they\u00a0get\u00a0stored\u00a0in\u00a0the\u00a0\nsame\u00a0order.\ns\u00a0=\u00a0{12,\u00a023,\u00a045,\u00a016,\u00a052}\nt\u00a0=\u00a0{16,\u00a052,\u00a012,\u00a023,\u00a045}\nu\u00a0=\u00a0{52,\u00a012,\u00a016,\u00a045,\u00a023}\nprint(s)\n#\u00a0prints\u00a0{12,\u00a045,\u00a016,\u00a052,\u00a023}\nprint(t)\n#\u00a0prints\u00a0{12,\u00a045,\u00a016,\u00a052,\u00a023}\nprint(u)\n#\u00a0prints\u00a0{12,\u00a045,\u00a016,\u00a052,\u00a023}\nx\nIt\u00a0is\u00a0possible\u00a0 to\u00a0create\u00a0a\u00a0set\u00a0of\u00a0strings\u00a0and\u00a0tuples,\u00a0but\u00a0not\u00a0a\u00a0set\u00a0of\u00a0\nlists.\ns1\u00a0=\u00a0{'Morning',\u00a0'Evening'}\n#\u00a0works\ns2\u00a0=\u00a0{(12,\u00a023),\u00a0(15,\u00a025),\u00a0(17,\u00a034)}\n#\u00a0works\ns3\u00a0=\u00a0{[12,\u00a023],\u00a0[15,\u00a025", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_184", "chunk_strategy": "fixed_size"}}, {"text": "5,\u00a016,\u00a052,\u00a023}\nx\nIt\u00a0is\u00a0possible\u00a0 to\u00a0create\u00a0a\u00a0set\u00a0of\u00a0strings\u00a0and\u00a0tuples,\u00a0but\u00a0not\u00a0a\u00a0set\u00a0of\u00a0\nlists.\ns1\u00a0=\u00a0{'Morning',\u00a0'Evening'}\n#\u00a0works\ns2\u00a0=\u00a0{(12,\u00a023),\u00a0(15,\u00a025),\u00a0(17,\u00a034)}\n#\u00a0works\ns3\u00a0=\u00a0{[12,\u00a023],\u00a0[15,\u00a025],\u00a0[17,\u00a034]}\n#\u00a0error\nSince\u00a0 strings\u00a0 and\u00a0 tuples\u00a0 are\u00a0 immutable,\u00a0 their\u00a0 hash\u00a0 value\u00a0 remains\u00a0\nsame\u00a0 at\u00a0 all\u00a0 times.\u00a0 Hence\u00a0 a\u00a0 set\u00a0 of\u00a0 strings\u00a0 or\u00a0 tuples\u00a0 is\u00a0 permitted.\u00a0\nHowever,\u00a0a\u00a0list\u00a0may\u00a0change,\u00a0so\u00a0its\u00a0hash\u00a0value\u00a0may\u00a0change,\u00a0hence\u00a0a\u00a0\nset\u00a0of\u00a0lists\u00a0is\u00a0not\u00a0permitted.\nx\nSets\u00a0 are\u00a0 commonly\u00a0 used\u00a0 for\u00a0 eliminating\u00a0 duplicate\u00a0 entries\u00a0 and\u00a0\nmembership\u00a0testing.\nChapter 10:\u00a0Sets\u00a0\n123\nAccessing\u00a0Set\u00a0Elements\nx\nEntire\u00a0set\u00a0can\u00a0be\u00a0printed\u00a0by\u00a0just\u00a0using\u00a0the\u00a0name\u00a0of\u00a0the\u00a0set. Set\u00a0is\u00a0an\u00a0\nunordered\u00a0 collection.\u00a0 Hence\u00a0order\u00a0 of\u00a0 insertion\u00a0 is\u00a0 not\u00a0same\u00a0 as\u00a0 the\u00a0\norder\u00a0of\u00a0access.\ns\u00a0=\u00a0{15,\u00a025,\u00a035,\u00a045,\u00a055}\u00a0\nprint(s)\u00a0\n#\u00a0prints\u00a0{35,\u00a045,\u00a015,\u00a055,\u00a025}\nx\nBeing\u00a0 an\u00a0 unordered\u00a0 collection,\u00a0 items\u00a0 in\u00a0 a\u00a0 set\u00a0 cannot\u00a0 be\u00a0 accessed\u00a0\nusing\u00a0indices.\nx\nSets\u00a0cannot\u00a0be\u00a0sliced\u00a0using\u00a0[\u00a0].\nLooping\u00a0in\u00a0Sets\nx\nLike\u00a0strings", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_185", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0\nprint(s)\u00a0\n#\u00a0prints\u00a0{35,\u00a045,\u00a015,\u00a055,\u00a025}\nx\nBeing\u00a0 an\u00a0 unordered\u00a0 collection,\u00a0 items\u00a0 in\u00a0 a\u00a0 set\u00a0 cannot\u00a0 be\u00a0 accessed\u00a0\nusing\u00a0indices.\nx\nSets\u00a0cannot\u00a0be\u00a0sliced\u00a0using\u00a0[\u00a0].\nLooping\u00a0in\u00a0Sets\nx\nLike\u00a0strings,\u00a0lists\u00a0and\u00a0tuples,\u00a0sets\u00a0too\u00a0can\u00a0be\u00a0iterated\u00a0over\u00a0using\u00a0a\u00a0for\nloop.\ns\u00a0=\u00a0{12,\u00a015,\u00a013,\u00a023,\u00a022,\u00a016,\u00a017}\u00a0\nfor\u00a0ele\u00a0in\u00a0s\u00a0:\nprint(ele)\nx\nNote\u00a0 that\u00a0 unlike\u00a0a\u00a0string,\u00a0 list\u00a0or\u00a0 tuple,\u00a0a\u00a0 while loop\u00a0should\u00a0 not\u00a0be\u00a0\nused\u00a0to\u00a0access\u00a0the\u00a0set\u00a0elements.\u00a0This\u00a0is\u00a0because\u00a0we\u00a0cannot\u00a0access\u00a0a\u00a0\nset\u00a0element\u00a0using\u00a0an\u00a0index,\u00a0as\u00a0in\u00a0s[i].\nx\nBuilt-in\u00a0 function\u00a0 enumerate(\u00a0 ) can\u00a0 be\u00a0 used\u00a0 with\u00a0 a\u00a0 set.\u00a0 The\u00a0\nenumeration\u00a0is\u00a0done\u00a0on\u00a0access\u00a0order,\u00a0not\u00a0insertion\u00a0order.\nBasic\u00a0Set\u00a0Operations\nx\nSets\u00a0like\u00a0lists\u00a0are\u00a0mutable.\u00a0Their\u00a0contents\u00a0can\u00a0be\u00a0changed.\ns\u00a0=\u00a0{'gate',\u00a0'fate',\u00a0'late'}\ns.add('rate')\u00a0\n#\u00a0adds\u00a0one\u00a0more\u00a0element\u00a0to\u00a0set\u00a0s\nx\nIf\u00a0we\u00a0want\u00a0an\u00a0immutable\u00a0set,\u00a0we\u00a0should\u00a0use\u00a0a\u00a0frozenset.\ns\u00a0=\u00a0frozenset({'gate',\u00a0'fate',\u00a0'late'})\ns.add('rate')\u00a0 #\u00a0error\nx\nGiven\u00a0below\u00a0are\u00a0the\u00a0operations\u00a0that\u00a0work\u00a0on\u00a0lists\u00a0and\u00a0tuples.\u00a0These\u00a0\noper", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_186", "chunk_strategy": "fixed_size"}}, {"text": "t\u00a0s\nx\nIf\u00a0we\u00a0want\u00a0an\u00a0immutable\u00a0set,\u00a0we\u00a0should\u00a0use\u00a0a\u00a0frozenset.\ns\u00a0=\u00a0frozenset({'gate',\u00a0'fate',\u00a0'late'})\ns.add('rate')\u00a0 #\u00a0error\nx\nGiven\u00a0below\u00a0are\u00a0the\u00a0operations\u00a0that\u00a0work\u00a0on\u00a0lists\u00a0and\u00a0tuples.\u00a0These\u00a0\noperations\u00a0are\u00a0discussed\u00a0in\u00a0detail\u00a0in\u00a0Chapter\u00a08.\u00a0Try\u00a0these\u00a0operations\u00a0\non\u00a0sets\u00a0too.\u00a0\n124\nLet\u00a0Us\u00a0Python\nConcatenation\u00a0- doesn't\u00a0work\nMerging\u00a0- doesn't\u00a0work\nConversion\u00a0- works\nAliasing\u00a0- works\nCloning\u00a0- works\u00a0\nSearching\u00a0- works\nIdentity\u00a0- works\nComparison\u00a0- works\nEmptiness\u00a0- works\nx\nTwo\u00a0sets\u00a0cannot\u00a0be\u00a0concatenated\u00a0using\u00a0+.\nx\nTwo\u00a0sets\u00a0cannot\u00a0be\u00a0merged\u00a0using\u00a0the\u00a0form\u00a0z\u00a0=\u00a0s\u00a0+\u00a0t.\nx\nWhile\u00a0converting\u00a0a\u00a0set\u00a0using\u00a0set(\u00a0),\u00a0repetitions\u00a0are\u00a0eliminated.\nlst\u00a0=\u00a0[10,\u00a020,\u00a010,\u00a030,\u00a040,\u00a050,\u00a030]\ns\u00a0=\u00a0set(lst)\n#\u00a0will\u00a0create\u00a0set\u00a0containing\u00a010,\u00a020,\u00a030,\u00a040,\u00a050\nUsing\u00a0Built-in\u00a0Functions\u00a0on\u00a0Sets\nx\nMany\u00a0built-in\u00a0functions\u00a0can\u00a0be\u00a0used\u00a0with\u00a0sets.\ns\u00a0=\u00a0{10,\u00a020,\u00a030,\u00a040,\u00a050}\nlen(s)\u00a0\n#\u00a0return\u00a0number\u00a0of\u00a0items\u00a0in\u00a0set\u00a0s\nmax(s)\u00a0\n#\u00a0return\u00a0maximum\u00a0element\u00a0in\u00a0set\u00a0s\nmin(s)\u00a0\n#\u00a0return\u00a0minimum\u00a0element\u00a0in\u00a0set\u00a0s\nsorted(s)\u00a0\n#\u00a0return\u00a0sorted\u00a0list", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_187", "chunk_strategy": "fixed_size"}}, {"text": "e\u00a0used\u00a0with\u00a0sets.\ns\u00a0=\u00a0{10,\u00a020,\u00a030,\u00a040,\u00a050}\nlen(s)\u00a0\n#\u00a0return\u00a0number\u00a0of\u00a0items\u00a0in\u00a0set\u00a0s\nmax(s)\u00a0\n#\u00a0return\u00a0maximum\u00a0element\u00a0in\u00a0set\u00a0s\nmin(s)\u00a0\n#\u00a0return\u00a0minimum\u00a0element\u00a0in\u00a0set\u00a0s\nsorted(s)\u00a0\n#\u00a0return\u00a0sorted\u00a0list\u00a0(not\u00a0sorted\u00a0set)\nsum(s)\u00a0\n# return\u00a0sum\u00a0of\u00a0all\u00a0elements\u00a0in\u00a0set\u00a0s\nany(t)\u00a0\n#\u00a0return\u00a0True\u00a0if\u00a0any\u00a0element\u00a0of\u00a0s\u00a0is\u00a0True\nall(t)\u00a0\n#\u00a0return\u00a0True\u00a0if\u00a0all\u00a0elements\u00a0of\u00a0s\u00a0are\u00a0True\nNote\u00a0that\u00a0reversed(\u00a0) built-in\u00a0function\u00a0doesn't\u00a0work\u00a0on\u00a0sets.\nSet\u00a0Methods\nx\nAny\u00a0set\u00a0is\u00a0an\u00a0object\u00a0of\u00a0type\u00a0set.\u00a0Its\u00a0methods\u00a0can\u00a0be\u00a0accessed\u00a0using\u00a0\nthe\u00a0 syntax\u00a0 s.method(\u00a0 ).\u00a0 Usage\u00a0 of\u00a0 commonly\u00a0 used\u00a0 set\u00a0 methods\u00a0 is\u00a0\nshown\u00a0below:\ns\u00a0=\u00a0{12,\u00a015,\u00a013,\u00a023,\u00a022,\u00a016,\u00a017}\u00a0\nt\u00a0=\u00a0{'A',\u00a0'B',\u00a0'C'}\nu\u00a0=\u00a0set\u00a0(\u00a0)\n#\u00a0empty\u00a0set\ns.add('Hello')\u00a0\n#\u00a0adds\u00a0'Hello'\u00a0to\u00a0s\u00a0\ns.update(t)\u00a0\n#\u00a0adds\u00a0elements\u00a0of\u00a0t\u00a0to\u00a0s\nChapter 10:\u00a0Sets\u00a0\n125\nu\u00a0=\u00a0s.copy(\u00a0)\n#\u00a0performs\u00a0deep\u00a0copy\u00a0(cloning)\ns.remove(15)\u00a0\n#\u00a0deletes\u00a015\u00a0from\u00a0s\ns.remove(101)\u00a0\n#\u00a0would\u00a0raise\u00a0error,\u00a0as\u00a0101\u00a0is\u00a0not\u00a0a\u00a0member\u00a0of\u00a0s\ns.discard(12)\n#\u00a0removes\u00a012\u00a0from\u00a0s\ns.discard(101)\n# won't\u00a0raise\u00a0an\u00a0error,\u00a0though\u00a0101\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_188", "chunk_strategy": "fixed_size"}}, {"text": "ep\u00a0copy\u00a0(cloning)\ns.remove(15)\u00a0\n#\u00a0deletes\u00a015\u00a0from\u00a0s\ns.remove(101)\u00a0\n#\u00a0would\u00a0raise\u00a0error,\u00a0as\u00a0101\u00a0is\u00a0not\u00a0a\u00a0member\u00a0of\u00a0s\ns.discard(12)\n#\u00a0removes\u00a012\u00a0from\u00a0s\ns.discard(101)\n# won't\u00a0raise\u00a0an\u00a0error,\u00a0though\u00a0101\u00a0is\u00a0not in\u00a0s\ns.clear(\u00a0)\u00a0\n#\u00a0removes\u00a0all\u00a0elements\nx\nFollowing\u00a0methods\u00a0can\u00a0be\u00a0used\u00a0on\u00a02\u00a0sets\u00a0to\u00a0check\u00a0the\u00a0relationship\u00a0\nbetween\u00a0them:\ns\u00a0=\u00a0{12,\u00a015,\u00a013,\u00a023,\u00a022,\u00a016,\u00a017}\u00a0\nt\u00a0=\u00a0{13,\u00a015,\u00a022}\nprint(s.issuperset(t))\n#\u00a0prints\u00a0True\nprint(s.issubset(t))\n#\u00a0prints\u00a0False\nprint(s.isdisjoint(t))\n#\u00a0prints\u00a0False\nSince\u00a0all\u00a0elements\u00a0of\u00a0t are\u00a0present\u00a0in\u00a0s,\u00a0s is\u00a0a\u00a0superset\u00a0of\u00a0t and\u00a0t is\u00a0\nsubset\u00a0 of\u00a0 s.\u00a0 If\u00a0 intersection\u00a0 of\u00a0 two\u00a0 sets\u00a0 is\u00a0 null,\u00a0 the\u00a0 sets\u00a0 are\u00a0 called\u00a0\ndisjoint\u00a0sets.\nMathematical\u00a0Set\u00a0Operations\nx\nFollowing\u00a0 union,\u00a0 intersection\u00a0 and difference\u00a0 operations\u00a0 can\u00a0 be\u00a0\ncarried\u00a0out\u00a0on\u00a0sets:\n#\u00a0sets\u00a0\nengineers\u00a0=\u00a0{'Vijay',\u00a0'Sanjay',\u00a0'Ajay',\u00a0'Sujay',\u00a0'Dinesh'}\nmanagers\u00a0=\u00a0{'Aditya',\u00a0'Sanjay'}\n#\u00a0union\u00a0- all\u00a0people\u00a0in\u00a0both\u00a0categories\u00a0\nprint(engineers\u00a0|\u00a0managers)\n#\u00a0intersection\u00a0- who\u00a0are\u00a0engineers and\u00a0managers", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_189", "chunk_strategy": "fixed_size"}}, {"text": "rs\u00a0=\u00a0{'Vijay',\u00a0'Sanjay',\u00a0'Ajay',\u00a0'Sujay',\u00a0'Dinesh'}\nmanagers\u00a0=\u00a0{'Aditya',\u00a0'Sanjay'}\n#\u00a0union\u00a0- all\u00a0people\u00a0in\u00a0both\u00a0categories\u00a0\nprint(engineers\u00a0|\u00a0managers)\n#\u00a0intersection\u00a0- who\u00a0are\u00a0engineers and\u00a0managers\u00a0\nprint(engineers\u00a0&\u00a0managers)\n#\u00a0difference\u00a0- engineers\u00a0who\u00a0are\u00a0not\u00a0managers\u00a0\nprint(engineers\u00a0- managers)\n#\u00a0difference\u00a0- managers\u00a0who\u00a0are\u00a0not\u00a0engineers\u00a0\nprint(managers\u00a0- engineers)\n#\u00a0symmetric\u00a0difference\u00a0- managers\u00a0who\u00a0are\u00a0not\u00a0engineers\n#\u00a0and\u00a0engineers\u00a0who\u00a0are\u00a0not\u00a0managers\nprint(managers\u00a0^\u00a0engineers)\na\u00a0=\u00a0{1,\u00a02,\u00a03,\u00a04,\u00a05}\n126\nLet\u00a0Us\u00a0Python\nb\u00a0=\u00a0{2,\u00a04,\u00a05}\nprint(a\u00a0>=\u00a0b)\u00a0\n#\u00a0prints\u00a0True\u00a0as\u00a0a\u00a0is\u00a0superset\u00a0of\u00a0b\nprint(a\u00a0<=\u00a0b)\u00a0\n#\u00a0prints\u00a0False\u00a0as\u00a0a\u00a0is\u00a0not\u00a0a\u00a0subset\u00a0of\u00a0b\nUpdating\u00a0Set\u00a0Operations\nx\nMathematical\u00a0set\u00a0operations\u00a0can\u00a0be\u00a0extended\u00a0to\u00a0update\u00a0an\u00a0existing\u00a0\nset.\na\u00a0|=\u00a0b\u00a0\n#\u00a0update\u00a0a\u00a0with\u00a0the\u00a0result\u00a0of\u00a0a\u00a0|\u00a0b\na\u00a0&=\u00a0b\u00a0\n#\u00a0update\u00a0a\u00a0with\u00a0the\u00a0result\u00a0of\u00a0a\u00a0&\u00a0b\na\u00a0-=\u00a0b\u00a0\n#\u00a0update\u00a0a\u00a0with\u00a0the\u00a0result\u00a0of\u00a0a\u00a0- b\na\u00a0^=\u00a0b\u00a0\n#\u00a0update\u00a0a\u00a0with\u00a0the\u00a0result\u00a0of\u00a0a\u00a0^\u00a0b\nSet\u00a0Varieties\nx\nUnlike\u00a0a\u00a0list\u00a0and\u00a0tuple,\u00a0a set\u00a0cannot\u00a0contain\u00a0a\u00a0se", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_190", "chunk_strategy": "fixed_size"}}, {"text": "b\na\u00a0&=\u00a0b\u00a0\n#\u00a0update\u00a0a\u00a0with\u00a0the\u00a0result\u00a0of\u00a0a\u00a0&\u00a0b\na\u00a0-=\u00a0b\u00a0\n#\u00a0update\u00a0a\u00a0with\u00a0the\u00a0result\u00a0of\u00a0a\u00a0- b\na\u00a0^=\u00a0b\u00a0\n#\u00a0update\u00a0a\u00a0with\u00a0the\u00a0result\u00a0of\u00a0a\u00a0^\u00a0b\nSet\u00a0Varieties\nx\nUnlike\u00a0a\u00a0list\u00a0and\u00a0tuple,\u00a0a set\u00a0cannot\u00a0contain\u00a0a\u00a0set\u00a0embedded\u00a0in\u00a0it.\ns\u00a0=\u00a0{'gate',\u00a0'fate',\u00a0{10,\u00a020,\u00a030},\u00a0'late'}\u00a0\n#\u00a0error,\u00a0nested\u00a0sets\nx\nIt\u00a0is\u00a0possible\u00a0to\u00a0unpack\u00a0a\u00a0set\u00a0using\u00a0the\u00a0*operator.\nx\u00a0=\u00a0{1,\u00a02,\u00a03,\u00a04}\u00a0\nprint(*x)\u00a0\n#\u00a0outputs\u00a01,\u00a02,\u00a03,\u00a04\n____________________________________________________________________\nProblem\u00a010.1\nWhat\u00a0will\u00a0be\u00a0the\u00a0output\u00a0of\u00a0the\u00a0following\u00a0program?\na\u00a0=\u00a0{10,\u00a020,\u00a030,\u00a040,\u00a050,\u00a060,\u00a070}\nb\u00a0=\u00a0{33,\u00a044,\u00a051,\u00a010,\u00a020,50,\u00a030,\u00a033}\nprint(a\u00a0|\u00a0b)\nprint(a\u00a0&\u00a0b)\nprint(a\u00a0- b)\nprint(b\u00a0- a)\nprint(a\u00a0^ b)\nprint(a\u00a0>=\u00a0b)\nprint(a\u00a0<=\u00a0b)\nChapter 10:\u00a0Sets\u00a0\n127\nOutput\n{33,\u00a070,\u00a040,\u00a010,\u00a044,\u00a050,\u00a051,\u00a020,\u00a060,\u00a030}\n{10,\u00a050,\u00a020,\u00a030}\n{40,\u00a060,\u00a070}\n{33,\u00a051,\u00a044}\n{33,\u00a070,\u00a040,\u00a044,\u00a051,\u00a060}\nFalse\nFalse\n____________________________________________________________________\nProblem\u00a010.2\nWhat\u00a0will\u00a0be the\u00a0output\u00a0of\u00a0the\u00a0following\u00a0program?\na\u00a0=\u00a0{1,\u00a02,\u00a03,\u00a04,\u00a05,\u00a06,\u00a07}\nb\u00a0=\u00a0{1,\u00a02,\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_191", "chunk_strategy": "fixed_size"}}, {"text": "0,\u00a040,\u00a044,\u00a051,\u00a060}\nFalse\nFalse\n____________________________________________________________________\nProblem\u00a010.2\nWhat\u00a0will\u00a0be the\u00a0output\u00a0of\u00a0the\u00a0following\u00a0program?\na\u00a0=\u00a0{1,\u00a02,\u00a03,\u00a04,\u00a05,\u00a06,\u00a07}\nb\u00a0=\u00a0{1,\u00a02,\u00a03,\u00a04,\u00a05,\u00a06,\u00a07}\nc\u00a0=\u00a0{1,\u00a02,\u00a03,\u00a04,\u00a05,\u00a06,\u00a07}\nd\u00a0=\u00a0{1,\u00a02,\u00a03,\u00a04,\u00a05,\u00a06,\u00a07}\ne\u00a0=\u00a0{3,\u00a04,\u00a01,\u00a00,\u00a02,\u00a05,\u00a08,\u00a09}\na\u00a0|=\u00a0e\nprint(a)\nb\u00a0&=\u00a0e\nprint(b)\nc\u00a0-=\u00a0e\nprint(c)\nd\u00a0^=\u00a0e\nprint(d)\nOutput\n{0,\u00a01,\u00a02,\u00a03, 4,\u00a05,\u00a06,\u00a07,\u00a08,\u00a09}\n{1,\u00a02,\u00a03,\u00a04,\u00a05}\n{6,\u00a07}\n{0,\u00a06,\u00a07,\u00a08,\u00a09}\n____________________________________________________________________\nProblem\u00a010.3\nWrite\u00a0a\u00a0program\u00a0to\u00a0carry\u00a0out\u00a0the\u00a0following\u00a0operations\u00a0on\u00a0the\u00a0given\u00a0set\u00a0\ns\u00a0=\u00a0{10,\u00a02,\u00a0-3,\u00a04,\u00a05,\u00a088}\n- number\u00a0of\u00a0items in\u00a0set\u00a0s\n- maximum\u00a0element\u00a0in\u00a0set\u00a0s\n- minimum\u00a0element\u00a0in\u00a0set\u00a0s\n128\nLet\u00a0Us\u00a0Python\n- sum of\u00a0all\u00a0elements\u00a0in\u00a0set\u00a0s\n- obtain\u00a0a\u00a0new\u00a0sorted\u00a0set from\u00a0s,\u00a0set\u00a0s\u00a0remaining unchanged\n- report\u00a0whether\u00a0100\u00a0is\u00a0an\u00a0element\u00a0of\u00a0set\u00a0s\n- report\u00a0whether\u00a0-3\u00a0is\u00a0an\u00a0element\u00a0of\u00a0set\u00a0s\nProgram\ns\u00a0=\u00a0{10,\u00a02,\u00a0-3,\u00a04,\u00a05,\u00a088}\nprint(len(s))\nprint(max(s))\nprint(min(s))\nprint(sum(s))\nt\u00a0=\u00a0sorted(s)\npr", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_192", "chunk_strategy": "fixed_size"}}, {"text": "hanged\n- report\u00a0whether\u00a0100\u00a0is\u00a0an\u00a0element\u00a0of\u00a0set\u00a0s\n- report\u00a0whether\u00a0-3\u00a0is\u00a0an\u00a0element\u00a0of\u00a0set\u00a0s\nProgram\ns\u00a0=\u00a0{10,\u00a02,\u00a0-3,\u00a04,\u00a05,\u00a088}\nprint(len(s))\nprint(max(s))\nprint(min(s))\nprint(sum(s))\nt\u00a0=\u00a0sorted(s)\nprint(t)\nprint(100\u00a0in\u00a0s)\nprint(-3\u00a0not\u00a0in\u00a0s)\nOutput\n6\n88\n-3\n106\n[-3,\u00a02,\u00a04,\u00a05,\u00a010,\u00a088]\nFalse\nFalse\n____________________________________________________________________\nProblem\u00a010.4\nWhat\u00a0will\u00a0be\u00a0the\u00a0output\u00a0of\u00a0the\u00a0following\u00a0program?\nProgram\nl\u00a0=\u00a0[10,\u00a020,\u00a030,\u00a040,\u00a050]\nt\u00a0=\u00a0('Sundeep',\u00a025,\u00a079.58)\u00a0\ns\u00a0=\u00a0'set\u00a0theory'\ns1\u00a0=\u00a0set(l)\ns2\u00a0=\u00a0set(t)\ns3\u00a0=\u00a0set(s)\nprint(s1)\nprint(s2)\nprint(s3)\nChapter 10:\u00a0Sets\u00a0\n129\nOutput\n{40,\u00a010,\u00a050,\u00a020,\u00a030}\n{25,\u00a079.58,\u00a0'Sundeep'}\n{'h',\u00a0's',\u00a0't',\u00a0'y',\u00a0'\u00a0',\u00a0'r',\u00a0'e',\u00a0'o'}\n____________________________________________________________________\n[A] What\u00a0will\u00a0be\u00a0the\u00a0output\u00a0of\u00a0the\u00a0following\u00a0programs:\n(a) s\u00a0=\u00a0{1,\u00a02,\u00a03,\u00a07,\u00a06,\u00a04}\ns.discard(10)\ns.remove(10)\nprint(s)\n(b) s1\u00a0=\u00a0{10,\u00a020,\u00a030,\u00a040,\u00a050}\ns2 =\u00a0{10,\u00a020,\u00a030,\u00a040,\u00a050}\nprint(id(s1),\u00a0id(s2))\n(c)\ns1\u00a0=\u00a0{10,\u00a020,\u00a030,\u00a040,\u00a050}\ns2 =\u00a0{10,\u00a020,\u00a030,\u00a040", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_193", "chunk_strategy": "fixed_size"}}, {"text": "rograms:\n(a) s\u00a0=\u00a0{1,\u00a02,\u00a03,\u00a07,\u00a06,\u00a04}\ns.discard(10)\ns.remove(10)\nprint(s)\n(b) s1\u00a0=\u00a0{10,\u00a020,\u00a030,\u00a040,\u00a050}\ns2 =\u00a0{10,\u00a020,\u00a030,\u00a040,\u00a050}\nprint(id(s1),\u00a0id(s2))\n(c)\ns1\u00a0=\u00a0{10,\u00a020,\u00a030,\u00a040,\u00a050}\ns2 =\u00a0{10,\u00a020,\u00a030,\u00a040,\u00a050}\ns3\u00a0=\u00a0{*s1,\u00a0*s2}\nprint(s3)\n(d) s\u00a0=\u00a0set('KanLabs')\nt\u00a0=\u00a0s[::-1]\nprint(t)\n(e) num\u00a0=\u00a0{10,\u00a020,\u00a0{30,\u00a040},\u00a050}\nprint(num)\n(f)\ns\u00a0=\u00a0{'Tiger',\u00a0'Lion',\u00a0'Jackal'}\ndel(s)\nprint(s)\n(g)\nfruits\u00a0=\u00a0{'Kiwi',\u00a0'Jack\u00a0Fruit',\u00a0'Lichi'}\nfruits.clear(\u00a0)\nprint(fruits)\n(h) s =\u00a0{10,\u00a025,\u00a04,\u00a012,\u00a03,\u00a08}\nsorted(s)\nprint(s)\n(i)\ns\u00a0=\u00a0{\u00a0}\nt\u00a0=\u00a0{1,\u00a04,\u00a05,\u00a02,\u00a03}\n130\nLet\u00a0Us\u00a0Python\nprint(type(s),\u00a0type(t))\n[B] Answer\u00a0the\u00a0following questions:\n(a) A\u00a0set\u00a0contains\u00a0 names\u00a0which\u00a0 begin\u00a0either\u00a0 with\u00a0A\u00a0or\u00a0with\u00a0B.\u00a0write\u00a0a\u00a0\nprogram\u00a0 to\u00a0separate\u00a0 out\u00a0the\u00a0 names\u00a0into\u00a0 two\u00a0sets,\u00a0 one\u00a0 containing\u00a0\nnames\u00a0 beginning\u00a0 with\u00a0 A\u00a0 and\u00a0 another\u00a0 containing\u00a0names\u00a0 beginning\u00a0\nwith\u00a0B.\n(b) Create\u00a0an\u00a0empty\u00a0set.\u00a0Write\u00a0a\u00a0program\u00a0that\u00a0adds\u00a0five\u00a0new\u00a0names\u00a0to\u00a0\nthis\u00a0set,\u00a0modifies\u00a0one\u00a0existing\u00a0name\u00a0and\u00a0deletes\u00a0two\u00a0names\u00a0existing\u00a0\nin\u00a0it.\u00a0\n(c) What\u00a0 is\u00a0 the\u00a0 diffe", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_194", "chunk_strategy": "fixed_size"}}, {"text": "ng\u00a0names\u00a0 beginning\u00a0\nwith\u00a0B.\n(b) Create\u00a0an\u00a0empty\u00a0set.\u00a0Write\u00a0a\u00a0program\u00a0that\u00a0adds\u00a0five\u00a0new\u00a0names\u00a0to\u00a0\nthis\u00a0set,\u00a0modifies\u00a0one\u00a0existing\u00a0name\u00a0and\u00a0deletes\u00a0two\u00a0names\u00a0existing\u00a0\nin\u00a0it.\u00a0\n(c) What\u00a0 is\u00a0 the\u00a0 difference\u00a0 between\u00a0 the\u00a0 two\u00a0set\u00a0 functions\u2014discard(\u00a0 )\nand\u00a0remove( ).\n(d) Write\u00a0a\u00a0program\u00a0to\u00a0create\u00a0a\u00a0set\u00a0containing\u00a010\u00a0randomly\u00a0generated\u00a0\nnumbers\u00a0in\u00a0the\u00a0range\u00a015\u00a0to\u00a045.\u00a0Count\u00a0how\u00a0many\u00a0of\u00a0these\u00a0numbers\u00a0\nare\u00a0less\u00a0than\u00a030.\u00a0Delete\u00a0all\u00a0numbers\u00a0which\u00a0are\u00a0greater\u00a0than\u00a035.\n(e) What\u00a0do\u00a0the\u00a0following\u00a0set\u00a0operators\u00a0do?\n|,\u00a0&,\u00a0^,\u00a0~\n(f) What\u00a0do\u00a0the\u00a0following\u00a0set\u00a0operators\u00a0do?\n|=,\u00a0&=,\u00a0^=,\u00a0-=\n(g) How\u00a0will\u00a0you\u00a0remove\u00a0all\u00a0duplicate\u00a0elements\u00a0present\u00a0in\u00a0a\u00a0string,\u00a0a\u00a0list\u00a0\nand\u00a0a\u00a0tuple?\n(h) Which\u00a0operator\u00a0is\u00a0used\u00a0for\u00a0determining\u00a0whether\u00a0a\u00a0set\u00a0is\u00a0a\u00a0subset\u00a0of\u00a0\nanother\u00a0set?\n(i) What\u00a0will\u00a0be\u00a0the\u00a0output\u00a0of\u00a0the\u00a0following\u00a0program?\ns\u00a0=\u00a0{'Mango',\u00a0'Banana',\u00a0'Guava',\u00a0'Kiwi'}\ns.clear(\u00a0)\nprint(s)\ndel(s)\nprint(s)\n(j) Which\u00a0of\u00a0the\u00a0following\u00a0is\u00a0the\u00a0correct\u00a0way\u00a0to\u00a0create\u00a0an\u00a0empty\u00a0set?\ns1\u00a0=\u00a0set(\u00a0)\ns2\u00a0=\u00a0{\u00a0}\nWhat\u00a0are\u00a0the\u00a0types\u00a0of\u00a0s1", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_195", "chunk_strategy": "fixed_size"}}, {"text": "rogram?\ns\u00a0=\u00a0{'Mango',\u00a0'Banana',\u00a0'Guava',\u00a0'Kiwi'}\ns.clear(\u00a0)\nprint(s)\ndel(s)\nprint(s)\n(j) Which\u00a0of\u00a0the\u00a0following\u00a0is\u00a0the\u00a0correct\u00a0way\u00a0to\u00a0create\u00a0an\u00a0empty\u00a0set?\ns1\u00a0=\u00a0set(\u00a0)\ns2\u00a0=\u00a0{\u00a0}\nWhat\u00a0are\u00a0the\u00a0types\u00a0of\u00a0s1 and\u00a0s2?\u00a0How\u00a0will\u00a0you\u00a0confirm\u00a0the\u00a0type?\nLet\u00a0Us\nPython\n131\nDictionaries\nx\nWhat\u00a0are\u00a0Dictionaries?\nx\nDictionary\u00a0Methods\nx\nAccessing\u00a0Dictionary Elements\nx\nDictionary\u00a0Varieties\nx\nLooping\u00a0in\u00a0Dictionaries\nx\nPrograms\nx\nBasic\u00a0Dictionary Operations\nx\nExercises\nx\nUsing\u00a0Built-in\u00a0Functions\u00a0on\u00a0\nDictionaries\n11\n\u201cVersatility,\u00a0thy\u00a0names\u00a0is\u00a0dictionary...\u201d\n132\nLet\u00a0Us\u00a0Python\nWhat\u00a0are\u00a0Dictionaries?\nx\nDictionary\u00a0is\u00a0a\u00a0collection\u00a0of\u00a0key-value\u00a0pairs.\u00a0\nx\nDictionaries\u00a0are\u00a0also\u00a0known\u00a0as\u00a0maps\u00a0or\u00a0associative\u00a0arrays.\nx\nA\u00a0 dictionary\u00a0 contains\u00a0 comma\u00a0 separated\u00a0key\u00a0 :\u00a0 value\u00a0 pairs\u00a0 enclosed\u00a0\nwithin\u00a0{\u00a0}.\nd1 =\u00a0{\u00a0}\u00a0\n#\u00a0empty\u00a0dictionary\nd2 =\u00a0{'A101'\u00a0:\u00a0'Amol',\u00a0'A102'\u00a0:\u00a0'Anil',\u00a0'B103'\u00a0:\u00a0'Ravi'}\nHere,\u00a0 'A101',\u00a0 'A102',\u00a0 'B103'\u00a0are\u00a0 keys,\u00a0whereas,\u00a0 'Amol',\u00a0 'Anil',\u00a0 'Ravi'\u00a0\nare\u00a0values.\u00a0\nx\nDifferent\u00a0keys\u00a0may\u00a0have\u00a0same\u00a0values.\nd\u00a0=", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_196", "chunk_strategy": "fixed_size"}}, {"text": "ctionary\nd2 =\u00a0{'A101'\u00a0:\u00a0'Amol',\u00a0'A102'\u00a0:\u00a0'Anil',\u00a0'B103'\u00a0:\u00a0'Ravi'}\nHere,\u00a0 'A101',\u00a0 'A102',\u00a0 'B103'\u00a0are\u00a0 keys,\u00a0whereas,\u00a0 'Amol',\u00a0 'Anil',\u00a0 'Ravi'\u00a0\nare\u00a0values.\u00a0\nx\nDifferent\u00a0keys\u00a0may\u00a0have\u00a0same\u00a0values.\nd\u00a0=\u00a0{10\u00a0:\u00a0'A',\u00a020\u00a0:\u00a0'A',\u00a030\u00a0:\u00a0'Z'}\u00a0\n#\u00a0ok\nx\nKeys\u00a0 must\u00a0 be\u00a0 unique.\u00a0 If\u00a0 keys\u00a0 are\u00a0 same,\u00a0 but\u00a0 values\u00a0 are\u00a0 different,\u00a0\nlatest\u00a0key\u00a0value\u00a0pair\u00a0gets\u00a0stored.\nd\u00a0=\u00a0{10\u00a0:\u00a0'A',\u00a020\u00a0:\u00a0'B',\u00a010\u00a0:\u00a0'Z'}\u00a0\n#\u00a0will\u00a0store\u00a0{10\u00a0:\u00a0'Z',\u00a020\u00a0:\u00a0'B'}\nx\nIf\u00a0key\u00a0value\u00a0pairs\u00a0are\u00a0repeated,\u00a0then\u00a0only\u00a0one\u00a0pair\u00a0gets\u00a0stored.\nd\u00a0=\u00a0{10\u00a0:\u00a0'A',\u00a020\u00a0:\u00a0'B',\u00a010\u00a0:\u00a0'A'}\u00a0\n#\u00a0will\u00a0store\u00a0{10\u00a0:\u00a0'A',\u00a020\u00a0:\u00a0'B'}\nAccessing\u00a0Dictionary\u00a0Elements\nx\nEntire\u00a0 dictionary\u00a0 can\u00a0 be\u00a0 printed\u00a0 by\u00a0 just\u00a0 using\u00a0 the\u00a0 name\u00a0 of\u00a0 the\u00a0\ndictionary.\u00a0\nd\u00a0=\u00a0{'A101'\u00a0:\u00a0'Amol',\u00a0'A102'\u00a0:\u00a0'Anil',\u00a0'B103'\u00a0:\u00a0'Ravi'}\nprint(d)\u00a0\nx\nUnlike\u00a0 sets,\u00a0 dictionaries\u00a0 preserve\u00a0 insertion\u00a0 order.\nHowever,\u00a0\nelements\u00a0are\u00a0not\u00a0accessed\u00a0using\u00a0the\u00a0position,\u00a0but\u00a0using\u00a0the\u00a0key.\nd =\u00a0{'A101'\u00a0:\u00a0'Dinesh',\u00a0'A102'\u00a0:\u00a0'Shrikant',\u00a0'B103'\u00a0:\u00a0'Sudhir'}\nprint(d['A102'])\u00a0\n#\u00a0prints\u00a0value\u00a0for\u00a0key\u00a0'A102'\nChapter 1", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_197", "chunk_strategy": "fixed_size"}}, {"text": "er.\nHowever,\u00a0\nelements\u00a0are\u00a0not\u00a0accessed\u00a0using\u00a0the\u00a0position,\u00a0but\u00a0using\u00a0the\u00a0key.\nd =\u00a0{'A101'\u00a0:\u00a0'Dinesh',\u00a0'A102'\u00a0:\u00a0'Shrikant',\u00a0'B103'\u00a0:\u00a0'Sudhir'}\nprint(d['A102'])\u00a0\n#\u00a0prints\u00a0value\u00a0for\u00a0key\u00a0'A102'\nChapter 11:\u00a0Dictionaries\u00a0\n133\nThus,\u00a0elements\u00a0are\u00a0not\u00a0position\u00a0indexed,\u00a0but\u00a0key\u00a0indexed.\nx\nDictionaries cannot\u00a0be\u00a0sliced\u00a0using\u00a0[\u00a0].\nLooping\u00a0in\u00a0Dictionaries\nx\nLike\u00a0 strings,\u00a0lists,\u00a0 tuples\u00a0 and\u00a0sets,\u00a0 dictionaries\u00a0 too\u00a0 can\u00a0 be\u00a0 iterated\u00a0\nover\u00a0using\u00a0a\u00a0for loop.\u00a0There\u00a0are three\u00a0ways to\u00a0do\u00a0so:\ncourses\u00a0=\u00a0{'DAA'\u00a0:\u00a0'CS',\u00a0'AOA'\u00a0:\u00a0'ME',\u00a0'SVY'\u00a0:\u00a0'CE'\u00a0}\n#\u00a0iterate\u00a0over\u00a0key-value\u00a0pairs\nfor\u00a0k,\u00a0v\u00a0in\u00a0courses.items(\u00a0)\u00a0:\nprint(k,\u00a0v)\n#\u00a0iterate\u00a0over\u00a0keys\nfor\u00a0k\u00a0in\u00a0courses.keys(\u00a0)\u00a0:\nprint(k)\n#\u00a0iterate\u00a0over\u00a0keys\u00a0- shorter\u00a0way\nfor\u00a0k\u00a0in\u00a0courses\u00a0:\nprint(k)\n#\u00a0iterate\u00a0over\u00a0values\nfor\u00a0v\u00a0in\u00a0courses.values(\u00a0)\u00a0:\nprint(v)\nx\nWhile\u00a0 iterating\u00a0through\u00a0 a\u00a0dictionary\u00a0using\u00a0a\u00a0for loop,\u00a0if\u00a0we\u00a0 wish\u00a0to\u00a0\nkeep\u00a0track\u00a0of\u00a0index\u00a0of\u00a0the\u00a0key-value\u00a0 pairs\u00a0that\u00a0is\u00a0being\u00a0referred\u00a0to,\u00a0\nwe\u00a0can\u00a0do\u00a0so\u00a0using\u00a0the\u00a0built-in\u00a0enumerate(\u00a0) function.\ncourses\u00a0=\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_198", "chunk_strategy": "fixed_size"}}, {"text": "rating\u00a0through\u00a0 a\u00a0dictionary\u00a0using\u00a0a\u00a0for loop,\u00a0if\u00a0we\u00a0 wish\u00a0to\u00a0\nkeep\u00a0track\u00a0of\u00a0index\u00a0of\u00a0the\u00a0key-value\u00a0 pairs\u00a0that\u00a0is\u00a0being\u00a0referred\u00a0to,\u00a0\nwe\u00a0can\u00a0do\u00a0so\u00a0using\u00a0the\u00a0built-in\u00a0enumerate(\u00a0) function.\ncourses\u00a0=\u00a0{'DAA'\u00a0:\u00a0'CS',\u00a0'AOA'\u00a0:\u00a0'ME',\u00a0'SVY'\u00a0:\u00a0'CE'\u00a0}\nfor\u00a0i,\u00a0(k,\u00a0v)\u00a0in\u00a0enumerate(courses.items(\u00a0)) :\nprint(i,k)\nNote\u00a0that\u00a0(\u00a0)\u00a0around\u00a0k, v are\u00a0necessary.\nBasic\u00a0Dictionary\u00a0Operations\nx\nDictionaries\u00a0 are\u00a0 mutable.\u00a0 So\u00a0 we\u00a0 can\u00a0 perform\u00a0 add/delete/modify\u00a0\noperations\u00a0on\u00a0a\u00a0dictionary.\ncourses\u00a0=\u00a0{ 'CS101'\u00a0:\u00a0'CPP',\u00a0'CS102'\u00a0:\u00a0'DS',\u00a0'CS201'\u00a0:\u00a0'OOP',\n'CS226'\u00a0:\u00a0'DAA',\u00a0'CS601'\u00a0:\u00a0'Crypt',\u00a0'CS442'\u00a0:\u00a0'Web'}\u00a0\n#\u00a0add,\u00a0modify,\u00a0delete\ncourses['CS444']\u00a0=\u00a0'Web\u00a0Services'\u00a0\n#\u00a0add\u00a0new\u00a0key-value\u00a0pair\n134\nLet\u00a0Us\u00a0Python\ncourses['CS201']\u00a0=\u00a0'OOP\u00a0Using\u00a0java'\u00a0\n#\u00a0modify\u00a0value\u00a0for\u00a0a\u00a0key\ndel(courses['CS102'])\u00a0\n#\u00a0delete\u00a0a\u00a0key-value pair\ndel(courses)\u00a0\n#\u00a0delete\u00a0dictionary\u00a0object\nx\nNote\u00a0that\u00a0any\u00a0new\u00a0addition\u00a0will\u00a0take\u00a0place\u00a0at\u00a0the\u00a0end\u00a0of\u00a0the\u00a0existing\u00a0\ndictionary,\u00a0since\u00a0dictionary\u00a0preserves\u00a0the\u00a0insertion\u00a0order.\nx\nDictionary\u00a0keys\u00a0cannot\u00a0be\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_199", "chunk_strategy": "fixed_size"}}, {"text": "l(courses)\u00a0\n#\u00a0delete\u00a0dictionary\u00a0object\nx\nNote\u00a0that\u00a0any\u00a0new\u00a0addition\u00a0will\u00a0take\u00a0place\u00a0at\u00a0the\u00a0end\u00a0of\u00a0the\u00a0existing\u00a0\ndictionary,\u00a0since\u00a0dictionary\u00a0preserves\u00a0the\u00a0insertion\u00a0order.\nx\nDictionary\u00a0keys\u00a0cannot\u00a0be\u00a0changed\u00a0in\u00a0place.\u00a0\nx\nGiven\u00a0below\u00a0are\u00a0the\u00a0operations\u00a0that\u00a0work\u00a0on\u00a0lists\u00a0and\u00a0tuples.\u00a0These\u00a0\noperations\u00a0are\u00a0discussed\u00a0in\u00a0detail\u00a0in\u00a0Chapter\u00a08.\u00a0Try\u00a0these\u00a0operations\u00a0\non\u00a0dictionaries\u00a0as\u00a0an\u00a0exercise.\nConcatenation\u00a0- doesn't\u00a0work\nMerging\u00a0- doesn't\u00a0work\nConversion\u00a0- works\nAliasing\u00a0- works\nCloning\u00a0- works\u00a0\nSearching\u00a0- works\nIdentity\u00a0- works\nComparison\u00a0- doesn't\u00a0work\nEmptiness\u00a0- works\nx\nTwo\u00a0dictionaries cannot\u00a0be\u00a0concatenated\u00a0using\u00a0+.\nx\nTwo\u00a0dictionaries cannot\u00a0be\u00a0merged\u00a0using\u00a0the\u00a0form\u00a0z\u00a0=\u00a0s\u00a0+\u00a0t.\nx\nTwo\u00a0dictionary\u00a0objects\u00a0cannot\u00a0be\u00a0compared\u00a0using\u00a0<,\u00a0>.\nUsing\u00a0Built-in\u00a0Functions\u00a0on\u00a0Dictionaries\nx\nMany\u00a0built-in\u00a0functions\u00a0can\u00a0be\u00a0used\u00a0with\u00a0dictionaries.\nd\u00a0=\u00a0{\u00a0'CS101'\u00a0:\u00a0'CPP',\u00a0'CS102'\u00a0:\u00a0'DS',\u00a0'CS201'\u00a0:\u00a0'OOP'}\nlen(d)\u00a0\n#\u00a0return\u00a0number\u00a0of\u00a0key-value\u00a0pairs\nmax(d)\u00a0\n#\u00a0return\u00a0maximum\u00a0key\u00a0in\u00a0dictionary\u00a0d\nmin(d)\u00a0\n# re", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_200", "chunk_strategy": "fixed_size"}}, {"text": "in\u00a0functions\u00a0can\u00a0be\u00a0used\u00a0with\u00a0dictionaries.\nd\u00a0=\u00a0{\u00a0'CS101'\u00a0:\u00a0'CPP',\u00a0'CS102'\u00a0:\u00a0'DS',\u00a0'CS201'\u00a0:\u00a0'OOP'}\nlen(d)\u00a0\n#\u00a0return\u00a0number\u00a0of\u00a0key-value\u00a0pairs\nmax(d)\u00a0\n#\u00a0return\u00a0maximum\u00a0key\u00a0in\u00a0dictionary\u00a0d\nmin(d)\u00a0\n# return\u00a0minimum\u00a0key\u00a0in\u00a0dictionary\u00a0d\nsorted(d)\u00a0\n#\u00a0return\u00a0sorted\u00a0list\u00a0of\u00a0keys\nsum(d)\u00a0\n#\u00a0return\u00a0sum\u00a0of\u00a0all\u00a0keys\u00a0if\u00a0keys\u00a0are\u00a0numbers\nany(d)\u00a0\n#\u00a0return\u00a0True\u00a0if\u00a0any\u00a0key of\u00a0dictionary\u00a0d\u00a0is\u00a0True\nall(d)\u00a0\n#\u00a0return\u00a0True\u00a0if\u00a0all\u00a0keys of\u00a0dictionary\u00a0d are\u00a0True\nreversed(d)\n#\u00a0can\u00a0be\u00a0used\u00a0for\u00a0reversing\u00a0dict/keys/values\nx\nUse\u00a0 of\u00a0 reversed\u00a0 function\u00a0to\u00a0reverse\u00a0 a\u00a0dictionary\u00a0 by\u00a0 keys\u00a0is\u00a0 shown\u00a0\nbelow:\ncourses\u00a0=\u00a0{ 'CS101'\u00a0:\u00a0'CPP',\u00a0'CS102'\u00a0:\u00a0'DS',\u00a0'CS201'\u00a0:\u00a0'OOP'}\nfor\u00a0k,\u00a0v\u00a0in\u00a0reversed(courses.items(\u00a0))\u00a0:\nprint(k,\u00a0v)\nChapter 11:\u00a0Dictionaries\u00a0\n135\nDictionary\u00a0Methods\nx\nThere\u00a0 are\u00a0 many\u00a0 dictionary\u00a0 methods.\u00a0 Many\u00a0 of\u00a0 the\u00a0 operations\u00a0\nperformed\u00a0by\u00a0them\u00a0can\u00a0also\u00a0be\u00a0performed\u00a0using\u00a0built-in\u00a0functions.\u00a0\nThe\u00a0useful\u00a0dictionary\u00a0methods\u00a0are\u00a0shown\u00a0below:\nc\u00a0=\u00a0{ 'CS101'\u00a0:\u00a0'CPP',\u00a0'CS102'\u00a0:\u00a0'DS',\u00a0'CS201'\u00a0:\u00a0'OOP'}\nd\u00a0=\u00a0{\u00a0'ME126'\u00a0:", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_201", "chunk_strategy": "fixed_size"}}, {"text": "e\u00a0 operations\u00a0\nperformed\u00a0by\u00a0them\u00a0can\u00a0also\u00a0be\u00a0performed\u00a0using\u00a0built-in\u00a0functions.\u00a0\nThe\u00a0useful\u00a0dictionary\u00a0methods\u00a0are\u00a0shown\u00a0below:\nc\u00a0=\u00a0{ 'CS101'\u00a0:\u00a0'CPP',\u00a0'CS102'\u00a0:\u00a0'DS',\u00a0'CS201'\u00a0:\u00a0'OOP'}\nd\u00a0=\u00a0{\u00a0'ME126'\u00a0:\u00a0'HPE',\u00a0'ME102'\u00a0:\u00a0'TOM',\u00a0'ME234'\u00a0:\u00a0'AEM'}\nprint(c.get('CS102',\u00a0'Absent'))\n#\u00a0prints\u00a0DS\nprint(c.get('EE102',\u00a0'Absent'))\n#\u00a0prints\u00a0Absent\nprint(c['EE102'])\n#\u00a0raises\u00a0keyerror\nc.update(d)\u00a0\n#\u00a0updates\u00a0c\u00a0with\u00a0items\u00a0in\u00a0d\nprint(c.popitem(\u00a0))\n#\u00a0removes and\u00a0returns\u00a0item\u00a0in\u00a0LIFO\u00a0order\nprint(c.pop('CS102')\n#\u00a0removes\u00a0key\u00a0and\u00a0returns\u00a0its\u00a0value\nc.clear(\u00a0)\u00a0\n#\u00a0clears\u00a0all\u00a0dictionary\u00a0entries\nNote\u00a0 that\u00a0 while\u00a0updating\u00a0 a\u00a0 dictionary\u00a0if\u00a0keys\u00a0are\u00a0 same,\u00a0 values\u00a0 are\u00a0\noverwritten.\npopitem(\u00a0) is\u00a0useful\u00a0in\u00a0destructively\u00a0iterate\u00a0through\u00a0a\u00a0dictionary.\nDictionary Varieties\nx\nKeys\u00a0 in\u00a0 a\u00a0 dictionary\u00a0 must\u00a0 be\u00a0 unique\u00a0 and\u00a0 immutable.\u00a0 Numbers,\u00a0\nstrings\u00a0 or\u00a0 tuples\u00a0 can\u00a0 be\u00a0 used\u00a0 as\u00a0 keys.\u00a0 If\u00a0 tuple\u00a0 is\u00a0 used\u00a0 as\u00a0 a\u00a0 key\u00a0 it\u00a0\nshould\u00a0not\u00a0contain\u00a0any\u00a0mutable\u00a0element\u00a0like\u00a0list.\nd\u00a0=\u00a0{\u00a0(1,\u00a05)\u00a0:\u00a0'ME126',\u00a0(3,\u00a02)\u00a0 : 'ME102',\u00a0(", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_202", "chunk_strategy": "fixed_size"}}, {"text": "immutable.\u00a0 Numbers,\u00a0\nstrings\u00a0 or\u00a0 tuples\u00a0 can\u00a0 be\u00a0 used\u00a0 as\u00a0 keys.\u00a0 If\u00a0 tuple\u00a0 is\u00a0 used\u00a0 as\u00a0 a\u00a0 key\u00a0 it\u00a0\nshould\u00a0not\u00a0contain\u00a0any\u00a0mutable\u00a0element\u00a0like\u00a0list.\nd\u00a0=\u00a0{\u00a0(1,\u00a05)\u00a0:\u00a0'ME126',\u00a0(3,\u00a02)\u00a0 : 'ME102',\u00a0(5,\u00a04)\u00a0: 'ME234'}\nx\nDictionaries\u00a0can\u00a0be\u00a0nested.\ncontacts\u00a0=\u00a0{\n'Anil':\u00a0{'DOB'\u00a0:\u00a0'17/11/98',\u00a0'Favorite'\u00a0:\u00a0'Igloo'},\n'Amol':\u00a0{'DOB'\u00a0:\u00a0'14/10/99',\u00a0'Favorite'\u00a0:\u00a0'Tundra'},\n'Ravi':\u00a0{'DOB'\u00a0:\u00a0'19/11/97',\u00a0'Favorite'\u00a0:\u00a0'Artic'}\n}\nx\nTwo\u00a0 dictionaries\u00a0 can\u00a0 be\u00a0 merged\u00a0 to\u00a0 create\u00a0 a\u00a0 third\u00a0 dictionary\u00a0 by\u00a0\nunpacking\u00a0the\u00a0two\u00a0dictionaries\u00a0using\u00a0**. If\u00a0we\u00a0use\u00a0*\u00a0only\u00a0keys\u00a0will\u00a0be\u00a0\nunpacked.\nanimals =\u00a0{'Tiger'\u00a0:\u00a0141,\u00a0'Lion'\u00a0:\u00a0152,\u00a0'Leopard'\u00a0:\u00a0110}\nbirds =\u00a0{'Eagle'\u00a0:\u00a038,\u00a0'Crow':\u00a03,\u00a0'Parrot'\u00a0:\u00a02}\n136\nLet\u00a0Us\u00a0Python\ncombined\u00a0=\u00a0{** animals,\u00a0** birds }\nx\nA\u00a0 dictionary\u00a0 containing\u00a0 different\u00a0 keys\u00a0 but\u00a0 same\u00a0 values\u00a0 can\u00a0 be\u00a0\ncreated\u00a0using\u00a0a\u00a0fromkeys(\u00a0) function\u00a0as\u00a0shown\u00a0below:\nlst\u00a0=\u00a0[12,\u00a013,\u00a014,\u00a015,\u00a016]\nd =\u00a0dict.fromkeys(lst,\u00a025)\u00a0 #\u00a0keys\u00a0- list\u00a0items,\u00a0all\u00a0values\u00a0set\u00a0to\u00a025\n__________________________________________", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_203", "chunk_strategy": "fixed_size"}}, {"text": "an\u00a0 be\u00a0\ncreated\u00a0using\u00a0a\u00a0fromkeys(\u00a0) function\u00a0as\u00a0shown\u00a0below:\nlst\u00a0=\u00a0[12,\u00a013,\u00a014,\u00a015,\u00a016]\nd =\u00a0dict.fromkeys(lst,\u00a025)\u00a0 #\u00a0keys\u00a0- list\u00a0items,\u00a0all\u00a0values\u00a0set\u00a0to\u00a025\n____________________________________________________________________\nProblem\u00a011.1\nCreate\u00a0a\u00a0dictionary\u00a0called\u00a0students containing\u00a0names\u00a0and\u00a0ages.\u00a0Copy\u00a0the\u00a0\ndictionary\u00a0into\u00a0stud.\u00a0Empty\u00a0the\u00a0students dictionary,\u00a0as\u00a0stud continues\u00a0to\u00a0\nhold\u00a0the\u00a0data.\nProgram\nstudents\u00a0=\u00a0{'Anil' :\u00a023,\u00a0'Sanjay' :\u00a028,\u00a0'Ajay' :\u00a025}\nstud\u00a0=\u00a0students\n#\u00a0shallow\u00a0copy,\u00a0stud\u00a0starts\u00a0referring\u00a0to\u00a0same\u00a0dictionary\nstudents\u00a0=\u00a0{\u00a0}\n#\u00a0students\u00a0now\u00a0refers\u00a0to\u00a0an\u00a0empty\u00a0dictionary\nprint(stud)\nOutput\n{'Anil':\u00a023,\u00a0'Sanjay':\u00a028,\u00a0'Ajay':\u00a025}\u00a0\nTips\nx\nBy\u00a0making\u00a0a\u00a0shallow\u00a0copy,\u00a0a\u00a0new\u00a0dictionary\u00a0is\u00a0not\u00a0created.\u00a0stud just\u00a0\nstarts\u00a0referring\u00a0(pointing) to\u00a0the\u00a0same\u00a0data\u00a0to\u00a0which\u00a0students was\u00a0\nreferring\u00a0(pointing).\nx\nHad\u00a0we\u00a0used\u00a0students.clear(\u00a0) it\u00a0would\u00a0have\u00a0cleared\u00a0all\u00a0the\u00a0data,\u00a0so\u00a0\nstudents and\u00a0stud both\u00a0would\u00a0have\u00a0referred to\u00a0an\u00a0empty\u00a0dictionary.\n______________________________________", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_204", "chunk_strategy": "fixed_size"}}, {"text": "\nreferring\u00a0(pointing).\nx\nHad\u00a0we\u00a0used\u00a0students.clear(\u00a0) it\u00a0would\u00a0have\u00a0cleared\u00a0all\u00a0the\u00a0data,\u00a0so\u00a0\nstudents and\u00a0stud both\u00a0would\u00a0have\u00a0referred to\u00a0an\u00a0empty\u00a0dictionary.\n____________________________________________________________________\nProblem\u00a011.2\nCreate\u00a0a\u00a0list\u00a0of\u00a0cricketers.\u00a0Use\u00a0this\u00a0list\u00a0to\u00a0create\u00a0a\u00a0dictionary\u00a0in\u00a0which\u00a0the\u00a0\nlist\u00a0values\u00a0become\u00a0keys of\u00a0the\u00a0dictionary.\u00a0Set\u00a0the\u00a0values\u00a0of\u00a0all\u00a0keys\u00a0to\u00a050\u00a0\nin\u00a0the\u00a0dictionary\u00a0created.\nChapter 11:\u00a0Dictionaries\u00a0\n137\nProgram\nlst\u00a0=\u00a0['Sunil',\u00a0'Sachin',\u00a0'Rahul',\u00a0'Kapil',\u00a0'Sunil',\u00a0'Rahul']\nd =\u00a0dict.fromkeys(lst,\u00a050)\nprint(len(lst))\nprint(len(d))\nprint(d)\nOutput\n6\n4\n{'Sunil':\u00a050,\u00a0'Sachin':\u00a050,\u00a0'Rahul':\u00a050,\u00a0'Kapil':\u00a050}\nTips\nx\nThe\u00a0 list\u00a0 may\u00a0 contain\u00a0 duplicate\u00a0 items,\u00a0 whereas\u00a0a\u00a0 dictionary\u00a0 always\u00a0\ncontains\u00a0unique\u00a0keys.\u00a0Hence\u00a0when\u00a0the\u00a0dictionary\u00a0is\u00a0created\u00a0from\u00a0list,\u00a0\nduplicates\u00a0are\u00a0eliminated,\u00a0as\u00a0seen\u00a0in\u00a0the\u00a0output.\n____________________________________________________________________\nProblem\u00a011.3\nWrite\u00a0a\u00a0program\u00a0 to\u00a0sort\u00a0a\u00a0dictionary\u00a0in\u00a0ascending/desce", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_205", "chunk_strategy": "fixed_size"}}, {"text": "from\u00a0list,\u00a0\nduplicates\u00a0are\u00a0eliminated,\u00a0as\u00a0seen\u00a0in\u00a0the\u00a0output.\n____________________________________________________________________\nProblem\u00a011.3\nWrite\u00a0a\u00a0program\u00a0 to\u00a0sort\u00a0a\u00a0dictionary\u00a0in\u00a0ascending/descending\u00a0order\u00a0by\u00a0\nkey\u00a0and\u00a0ascending/descending\u00a0order\u00a0by\u00a0value.\nProgram\nimport\u00a0operator\nd\u00a0=\u00a0{'Oil' :\u00a0230,\u00a0'Clip' :\u00a0150,\u00a0'Stud' :\u00a0175,\u00a0'Nut' :\u00a035}\nprint('Original\u00a0dictionary\u00a0:\u00a0', d)\n#\u00a0sorting\u00a0by\u00a0key\nd1\u00a0=\u00a0sorted(d.items( ))\nprint('Asc.\u00a0order\u00a0by\u00a0key\u00a0:\u00a0',\u00a0d1)\nd2\u00a0=\u00a0sorted(d.items( ),\u00a0reverse\u00a0=\u00a0True)\nprint('Des.\u00a0order\u00a0by\u00a0key\u00a0:\u00a0',\u00a0d2)\n#\u00a0sorting\u00a0by\u00a0value\nd1\u00a0=\u00a0sorted(d.items( ),\u00a0key\u00a0=\u00a0operator.itemgetter(1))\nprint('Asc.\u00a0order\u00a0by\u00a0value\u00a0:\u00a0',\u00a0d1)\nd2\u00a0=\u00a0sorted(d.items( ),\u00a0key\u00a0=\u00a0operator.itemgetter(1),\u00a0reverse\u00a0=\u00a0True)\n138\nLet\u00a0Us\u00a0Python\nprint('Des.\u00a0order\u00a0by\u00a0value\u00a0:\u00a0',\u00a0d2)\nOutput\nOriginal\u00a0dictionary\u00a0:\u00a0 {'Oil':\u00a0230,\u00a0'Clip':\u00a0150,\u00a0'Stud':\u00a0175,\u00a0'Nut':\u00a035}\nAsc.\u00a0order\u00a0by\u00a0key\u00a0:\u00a0 [('Clip',\u00a0150),\u00a0('Nut',\u00a035),\u00a0('Oil',\u00a0230),\u00a0('Stud',\u00a0175)]\nDes.\u00a0order\u00a0by\u00a0key\u00a0:\u00a0 [('Stud',\u00a0175),\u00a0('Oil',\u00a0230),\u00a0('Nut',\u00a035),\u00a0('Clip',\u00a0150)]\nAs", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_206", "chunk_strategy": "fixed_size"}}, {"text": "0,\u00a0'Clip':\u00a0150,\u00a0'Stud':\u00a0175,\u00a0'Nut':\u00a035}\nAsc.\u00a0order\u00a0by\u00a0key\u00a0:\u00a0 [('Clip',\u00a0150),\u00a0('Nut',\u00a035),\u00a0('Oil',\u00a0230),\u00a0('Stud',\u00a0175)]\nDes.\u00a0order\u00a0by\u00a0key\u00a0:\u00a0 [('Stud',\u00a0175),\u00a0('Oil',\u00a0230),\u00a0('Nut',\u00a035),\u00a0('Clip',\u00a0150)]\nAsc.\u00a0order\u00a0by\u00a0value\u00a0:\u00a0 [('Nut',\u00a035),\u00a0('Clip',\u00a0150),\u00a0('Stud',\u00a0175),\u00a0('Oil',\u00a0230)]\nDes.\u00a0order\u00a0by\u00a0value\u00a0:\u00a0 [('Oil',\u00a0230),\u00a0('Stud',\u00a0175),\u00a0('Clip',\u00a0150),\u00a0('Nut', 35)]\nTips\nx\nBy\u00a0default\u00a0items\u00a0in\u00a0a\u00a0dictionary\u00a0would\u00a0be\u00a0sorted\u00a0as\u00a0per\u00a0the\u00a0key.\nx\nTo\u00a0sort\u00a0by\u00a0values\u00a0we\u00a0need\u00a0to\u00a0use\u00a0operator.itemgetter(1).\nx\nThe\u00a0key\u00a0parameter\u00a0of\u00a0sorted(\u00a0)\u00a0requires\u00a0a\u00a0key\u00a0function\u00a0(to\u00a0be\u00a0applied\u00a0\nto\u00a0be\u00a0objects\u00a0to\u00a0be\u00a0sorted)\u00a0rather\u00a0than\u00a0a\u00a0single\u00a0key\u00a0value.\nx\noperator.itemgetter(1) gives a\u00a0 function\u00a0 that\u00a0 grabs\u00a0 the\u00a0 first\u00a0 item\u00a0\nfrom\u00a0a\u00a0list-like\u00a0object.\nx\nIn\u00a0 general,\u00a0 operator.itemgetter(n)\nconstructs\u00a0 a\u00a0 callable\u00a0 that\u00a0\nassumes\u00a0an\u00a0iterable\u00a0object\u00a0(e.g.\u00a0list,\u00a0tuple,\u00a0set)\u00a0as\u00a0input,\u00a0and\u00a0fetches\u00a0\nthe\u00a0nth element\u00a0out\u00a0of\u00a0it.\n____________________________________________________________________\nProblem\u00a011.4\nWrite\u00a0a\u00a0program\u00a0to\u00a0crea", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_207", "chunk_strategy": "fixed_size"}}, {"text": "s\u00a0an\u00a0iterable\u00a0object\u00a0(e.g.\u00a0list,\u00a0tuple,\u00a0set)\u00a0as\u00a0input,\u00a0and\u00a0fetches\u00a0\nthe\u00a0nth element\u00a0out\u00a0of\u00a0it.\n____________________________________________________________________\nProblem\u00a011.4\nWrite\u00a0a\u00a0program\u00a0to\u00a0create\u00a0three\u00a0dictionaries\u00a0and\u00a0concatenate\u00a0them\u00a0to\u00a0\ncreate\u00a0fourth\u00a0dictionary.\nProgram\nd1\u00a0=\u00a0{'Mango'\u00a0:\u00a030,\u00a0'Guava':\u00a020}\nd2\u00a0=\u00a0{'Apple'\u00a0:\u00a070,\u00a0'Pineapple'\u00a0:\u00a050}\nd3\u00a0=\u00a0{'Kiwi'\u00a0:\u00a090,\u00a0'Banana'\u00a0:\u00a035}\nd4\u00a0=\u00a0{\u00a0}\nfor\u00a0d\u00a0in\u00a0(d1,\u00a0d2,\u00a0d3)\u00a0:\u00a0\nd4.update(d)\nprint(d4)\n#\u00a0one\u00a0more\u00a0way\nd5\u00a0=\u00a0{\u00a0**d1,\u00a0**d2,\u00a0**d3}\nChapter 11:\u00a0Dictionaries\u00a0\n139\nprint(d5)\n#\u00a0will\u00a0unpack\u00a0only\u00a0the\u00a0keys\u00a0into\u00a0the\u00a0list\nd6\u00a0=\u00a0list({*d1,\u00a0*d2,\u00a0*d3})\nprint(d6)\nOutput\n{'Mango':\u00a0 30,\u00a0 'Guava':\u00a0 20,\u00a0 'Apple':\u00a0 70,\u00a0 'Pineapple':\u00a0 50,\u00a0 'Kiwi':\u00a0 90,\u00a0\n'Banana':\u00a035}\n{'Mango':\u00a0 30,\u00a0 'Guava':\u00a0 20,\u00a0 'Apple':\u00a0 70,\u00a0 'Pineapple':\u00a0 50,\u00a0 'Kiwi':\u00a0 90,\u00a0\n'Banana':\u00a035}\n[Apple',\u00a0'Guava',\u00a0'Kiwi', 'Mango',\u00a0'Banana',\u00a0'Pineapple']\nTips\nx\nFrom\u00a0the\u00a0output\u00a0it\u00a0can\u00a0be\u00a0observed\u00a0that\u00a0the\u00a0dictionaries\u00a0are\u00a0merged\u00a0\nin\u00a0the\u00a0order\u00a0listed\u00a0in\u00a0the\u00a0expression.\nx\nNote\u00a0that\u00a0 list\u00a0of\u00a0keys\u00a0is\u00a0con", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_208", "chunk_strategy": "fixed_size"}}, {"text": "e',\u00a0'Guava',\u00a0'Kiwi', 'Mango',\u00a0'Banana',\u00a0'Pineapple']\nTips\nx\nFrom\u00a0the\u00a0output\u00a0it\u00a0can\u00a0be\u00a0observed\u00a0that\u00a0the\u00a0dictionaries\u00a0are\u00a0merged\u00a0\nin\u00a0the\u00a0order\u00a0listed\u00a0in\u00a0the\u00a0expression.\nx\nNote\u00a0that\u00a0 list\u00a0of\u00a0keys\u00a0is\u00a0constructed\u00a0from\u00a0a\u00a0dictionary\u00a0they\u00a0are\u00a0not\u00a0\nstored\u00a0in\u00a0the\u00a0order\u00a0listed\u00a0in\u00a0the\u00a0expression.\n____________________________________________________________________\nProblem\u00a011.5\nWrite\u00a0a\u00a0program\u00a0to\u00a0check\u00a0whether\u00a0a\u00a0dictionary\u00a0is\u00a0empty\u00a0or\u00a0not.\nProgram\nd1\u00a0=\u00a0{'Anil' :\u00a045,\u00a0'Amol' :\u00a032}\nif\u00a0bool(d1)\u00a0:\nprint('Dictionary\u00a0is\u00a0not\u00a0empty')\nd2\u00a0=\u00a0{ }\nif\u00a0not\u00a0bool(d2)\u00a0:\nprint('Dictionary\u00a0is\u00a0empty')\nOutput\nDictionary\u00a0is\u00a0not\u00a0empty\nDictionary\u00a0is\u00a0empty\n____________________________________________________________________\n140\nLet\u00a0Us\u00a0Python\nProblem\u00a011.6\nSuppose\u00a0 there\u00a0 are\u00a0 two\u00a0 dictionaries\u00a0 called\u00a0 boys and\u00a0 girls containing\u00a0\nnames\u00a0as\u00a0keys\u00a0and\u00a0ages\u00a0as\u00a0values.\u00a0Write\u00a0a\u00a0program\u00a0to\u00a0 merge\u00a0the\u00a0two\u00a0\ndictionaries\u00a0into\u00a0a\u00a0third\u00a0dictionary.\nProgram\nboys\u00a0=\u00a0{'Nilesh'\u00a0:\u00a041,\u00a0'Soumitra'\u00a0:\u00a042,\u00a0'Nadeem'\u00a0:\u00a047}\ngirls\u00a0=\u00a0{'Rasika'\u00a0:\u00a038,\u00a0'Raj", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_209", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0\nnames\u00a0as\u00a0keys\u00a0and\u00a0ages\u00a0as\u00a0values.\u00a0Write\u00a0a\u00a0program\u00a0to\u00a0 merge\u00a0the\u00a0two\u00a0\ndictionaries\u00a0into\u00a0a\u00a0third\u00a0dictionary.\nProgram\nboys\u00a0=\u00a0{'Nilesh'\u00a0:\u00a041,\u00a0'Soumitra'\u00a0:\u00a042,\u00a0'Nadeem'\u00a0:\u00a047}\ngirls\u00a0=\u00a0{'Rasika'\u00a0:\u00a038,\u00a0'Rajashree':\u00a043,\u00a0'Rasika'\u00a0:\u00a045}\ncombined\u00a0=\u00a0{**boys,\u00a0**girls}\nprint(combined)\ncombined\u00a0=\u00a0{**girls,\u00a0**boys}\nprint(combined)\nOutput\n{'Nilesh':\u00a041,\u00a0'Soumitra':\u00a042,\u00a0'Nadeem':\u00a047,\u00a0'Rasika':\u00a045,\u00a0'Rajashree':\u00a043}\n{'Rasika':\u00a045,\u00a0'Rajashree':\u00a043,\u00a0'Nilesh':\u00a041,\u00a0'Soumitra':\u00a042,\u00a0'Nadeem':\u00a047}\nTips\nx\nFrom\u00a0the\u00a0output\u00a0it\u00a0can\u00a0be\u00a0observed\u00a0that\u00a0the\u00a0dictionaries\u00a0are\u00a0merged\u00a0\nin\u00a0the\u00a0order\u00a0listed\u00a0in\u00a0the\u00a0expression.\nx\nAs\u00a0the\u00a0merging\u00a0takes\u00a0place,\u00a0duplicates\u00a0get\u00a0overwritten\u00a0from\u00a0left\u00a0to\u00a0\nright.\u00a0So\u00a0Rasika\u00a0:\u00a038\u00a0got\u00a0overwritten\u00a0with\u00a0Rasika\u00a0:\u00a045.\n____________________________________________________________________\nProblem\u00a011.7\nFor\u00a0the\u00a0 following\u00a0dictionary,\u00a0 write\u00a0a\u00a0 program\u00a0 to\u00a0 report\u00a0the\u00a0 maximum\u00a0\nand\u00a0minimum\u00a0salary.\nProgram\nd\u00a0=\u00a0{\n'anuj'\u00a0:\u00a0{'salary'\u00a0:\u00a010000,\u00a0'age'\u00a0:\u00a020,\u00a0'height'\u00a0:\u00a06},\u00a0\n'aditya'\u00a0:\u00a0{'salary'\u00a0:\u00a06000,\u00a0'age'", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_210", "chunk_strategy": "fixed_size"}}, {"text": "\nFor\u00a0the\u00a0 following\u00a0dictionary,\u00a0 write\u00a0a\u00a0 program\u00a0 to\u00a0 report\u00a0the\u00a0 maximum\u00a0\nand\u00a0minimum\u00a0salary.\nProgram\nd\u00a0=\u00a0{\n'anuj'\u00a0:\u00a0{'salary'\u00a0:\u00a010000,\u00a0'age'\u00a0:\u00a020,\u00a0'height'\u00a0:\u00a06},\u00a0\n'aditya'\u00a0:\u00a0{'salary'\u00a0:\u00a06000,\u00a0'age'\u00a0 :\u00a026,\u00a0'height'\u00a0:\u00a05.6},\n'rahul'\u00a0:\u00a0 {'salary'\u00a0:\u00a07000,\u00a0'age'\u00a0 :\u00a026,\u00a0'height'\u00a0:\u00a05.9}\n}\nlst\u00a0=\u00a0[\u00a0]\nfor\u00a0v\u00a0in\u00a0d.values(\u00a0) :\nChapter 11:\u00a0Dictionaries\u00a0\n141\nlst.append(v['salary'])\nprint(max(lst))\nprint(min(lst))\nOutput\n10000\n6000\n____________________________________________________________________\nProblem\u00a011.8\nSuppose\u00a0 a\u00a0 dictionary\u00a0 contains\u00a0 roll\u00a0 numbers\u00a0 and\u00a0 names\u00a0 of\u00a0 students.\u00a0\nWrite\u00a0 a\u00a0 program\u00a0 to\u00a0 receive\u00a0 the\u00a0 roll\u00a0 number,\u00a0 extract\u00a0 the\u00a0 name\u00a0\ncorresponding\u00a0to\u00a0the\u00a0roll\u00a0number\u00a0and\u00a0display\u00a0a\u00a0message\u00a0congratulating\u00a0\nthe\u00a0 student\u00a0 by\u00a0 his\u00a0 name.\u00a0 If\u00a0 the\u00a0 roll\u00a0 number\u00a0 doesn't\u00a0 exist\u00a0 in\u00a0 the\u00a0\ndictionary, the\u00a0message\u00a0should\u00a0be\u00a0'Congratulations\u00a0Student!'.\nProgram\nstudents\u00a0=\u00a0{554\u00a0:\u00a0'Ajay',\u00a0350:\u00a0'Ramesh',\u00a0395:\u00a0'Rakesh'}\nrollno\u00a0=\u00a0int(input('Enter\u00a0roll\u00a0number:\u00a0'))\nname\u00a0=\u00a0students.get(rollno,\u00a0'S", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_211", "chunk_strategy": "fixed_size"}}, {"text": "\ndictionary, the\u00a0message\u00a0should\u00a0be\u00a0'Congratulations\u00a0Student!'.\nProgram\nstudents\u00a0=\u00a0{554\u00a0:\u00a0'Ajay',\u00a0350:\u00a0'Ramesh',\u00a0395:\u00a0'Rakesh'}\nrollno\u00a0=\u00a0int(input('Enter\u00a0roll\u00a0number:\u00a0'))\nname\u00a0=\u00a0students.get(rollno,\u00a0'Student')\nprint(f'Congratulations\u00a0{name}!')\nrollno\u00a0=\u00a0int(input('Enter\u00a0roll\u00a0number:\u00a0'))\nname\u00a0=\u00a0students.get(rollno,\u00a0'Student')\nprint(f'Congratulations\u00a0{name}!')\nOutput\nEnter\u00a0roll\u00a0number:\u00a0350\nCongratulations\u00a0Ramesh!\nEnter\u00a0roll\u00a0number:\u00a0450\nCongratulations\u00a0Student!\n____________________________________________________________________\n[A] State\u00a0whether\u00a0the\u00a0following\u00a0statements\u00a0are\u00a0True\u00a0or\u00a0False:\n(a) Dictionary\u00a0elements\u00a0can\u00a0be\u00a0accessed\u00a0using\u00a0position-based\u00a0index.\n142\nLet\u00a0Us\u00a0Python\n(b) Dictionaries\u00a0are\u00a0immutable.\n(c) Insertion\u00a0order\u00a0is\u00a0preserved\u00a0by\u00a0a\u00a0dictionary.\n(d) The\u00a0very\u00a0first\u00a0key\u00a0- value\u00a0pair\u00a0in\u00a0a\u00a0dictionary\u00a0d can\u00a0be\u00a0accessed\u00a0using\u00a0\nthe\u00a0expression\u00a0d[0].\n(e) courses.clear(\u00a0) will\u00a0delete\u00a0the\u00a0dictionary\u00a0object\u00a0called\u00a0courses.\n(f) It\u00a0is\u00a0possible\u00a0to\u00a0nest\u00a0dictionaries.\n(g) It\u00a0is\u00a0possible\u00a0to\u00a0hold\u00a0mul", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_212", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0dictionary\u00a0d can\u00a0be\u00a0accessed\u00a0using\u00a0\nthe\u00a0expression\u00a0d[0].\n(e) courses.clear(\u00a0) will\u00a0delete\u00a0the\u00a0dictionary\u00a0object\u00a0called\u00a0courses.\n(f) It\u00a0is\u00a0possible\u00a0to\u00a0nest\u00a0dictionaries.\n(g) It\u00a0is\u00a0possible\u00a0to\u00a0hold\u00a0multiple\u00a0values\u00a0against\u00a0a\u00a0key\u00a0in\u00a0a\u00a0dictionary.\n[B] Attempt\u00a0the\u00a0following questions:\n(a) Write\u00a0a\u00a0program\u00a0that\u00a0reads\u00a0a\u00a0string\u00a0from\u00a0the\u00a0keyboard\u00a0and\u00a0creates\ndictionary\u00a0 containing\u00a0 frequency\u00a0of\u00a0 each\u00a0character\u00a0occurring\u00a0 in\u00a0the\u00a0\nstring.\u00a0Also\u00a0print\u00a0these\u00a0occurrences\u00a0in\u00a0the\u00a0form\u00a0of\u00a0a\u00a0histogram.\n(b) Create\u00a0 a\u00a0 dictionary\u00a0 containing\u00a0 names\u00a0 of\u00a0 students\u00a0 and\u00a0 marks\u00a0\nobtained\u00a0by\u00a0them\u00a0in\u00a0three\u00a0subjects.\u00a0Write\u00a0a\u00a0program\u00a0to\u00a0replace\u00a0the\u00a0\nmarks\u00a0in\u00a0three\u00a0subjects\u00a0with\u00a0the\u00a0total\u00a0in\u00a0three\u00a0subjects,\u00a0and\u00a0average\u00a0\nmarks.\u00a0Also\u00a0report\u00a0the\u00a0topper\u00a0of\u00a0the\u00a0class.\n(c) Given\u00a0the\u00a0following\u00a0dictionary:\nportfolio\u00a0=\u00a0{\u00a0\n'accounts'\u00a0:\u00a0 ['SBI',\u00a0'IOB'],\n'shares'\u00a0:\u00a0'\u00a0 [HDFC,\u00a0'ICICI',\u00a0'TM',\u00a0'TCS'],\n'ornaments'\u00a0:\u00a0['10\u00a0gm\u00a0gold',\u00a0'1\u00a0kg\u00a0silver']\n}\nWrite\u00a0a\u00a0program\u00a0to\u00a0perform\u00a0the\u00a0following\u00a0operations:\n- Add\u00a0a\u00a0key\u00a0to\u00a0portfolio\u00a0called\u00a0'", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_213", "chunk_strategy": "fixed_size"}}, {"text": "nts'\u00a0:\u00a0 ['SBI',\u00a0'IOB'],\n'shares'\u00a0:\u00a0'\u00a0 [HDFC,\u00a0'ICICI',\u00a0'TM',\u00a0'TCS'],\n'ornaments'\u00a0:\u00a0['10\u00a0gm\u00a0gold',\u00a0'1\u00a0kg\u00a0silver']\n}\nWrite\u00a0a\u00a0program\u00a0to\u00a0perform\u00a0the\u00a0following\u00a0operations:\n- Add\u00a0a\u00a0key\u00a0to\u00a0portfolio\u00a0called\u00a0'MF'\u00a0with\u00a0values\u00a0'Relaince'\u00a0and\u00a0'ABSL'.\n- Set\u00a0the\u00a0value\u00a0of\u00a0'accounts'\u00a0to\u00a0a\u00a0list\u00a0containing\u00a0'Axis'\u00a0and\u00a0'BOB'.\n- Sort\u00a0the\u00a0items\u00a0in\u00a0the\u00a0list\u00a0stored\u00a0under\u00a0the\u00a0'shares'\u00a0key.\n- Delete\u00a0the\u00a0list\u00a0stored\u00a0under\u00a0'ornaments'\u00a0key.\n(d) Create\u00a0 two\u00a0 dictionaries\u2014one\u00a0 containing\u00a0 grocery\u00a0 items\u00a0 and\u00a0 their\u00a0\nprices\u00a0and\u00a0another\u00a0containing\u00a0grocery\u00a0items\u00a0and\u00a0quantity\u00a0purchased.\u00a0\nBy\u00a0using\u00a0 the\u00a0values\u00a0from\u00a0these\u00a0two\u00a0dictionaries\u00a0compute\u00a0the\u00a0total\u00a0\nbill.\n(e) Which\u00a0 functions\u00a0 will\u00a0 you\u00a0 use\u00a0 to\u00a0 fetch\u00a0 all\u00a0keys,\u00a0 all\u00a0 values\u00a0 and\u00a0 key\u00a0\nvalue\u00a0pairs\u00a0from\u00a0a\u00a0given\u00a0dictionary?\nChapter 11:\u00a0Dictionaries\u00a0\n143\n(f) Create\u00a0 a\u00a0 dictionary\u00a0 of\u00a0 10\u00a0 user\u00a0 names\u00a0and\u00a0 passwords.\u00a0 Receive\u00a0 the\u00a0\nuser\u00a0name\u00a0and\u00a0password\u00a0from\u00a0keyboard\u00a0and\u00a0search\u00a0for\u00a0them\u00a0in\u00a0the\u00a0\ndictionary.\u00a0 Print\u00a0 appropriate\u00a0 message\u00a0 on\u00a0 the\u00a0 screen\u00a0 based\u00a0 on\u00a0\nwhe", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_214", "chunk_strategy": "fixed_size"}}, {"text": "ictionary\u00a0 of\u00a0 10\u00a0 user\u00a0 names\u00a0and\u00a0 passwords.\u00a0 Receive\u00a0 the\u00a0\nuser\u00a0name\u00a0and\u00a0password\u00a0from\u00a0keyboard\u00a0and\u00a0search\u00a0for\u00a0them\u00a0in\u00a0the\u00a0\ndictionary.\u00a0 Print\u00a0 appropriate\u00a0 message\u00a0 on\u00a0 the\u00a0 screen\u00a0 based\u00a0 on\u00a0\nwhether\u00a0a\u00a0match\u00a0is\u00a0found\u00a0or\u00a0not.\n(g) Given\u00a0the\u00a0following\u00a0dictionary\nmarks =\u00a0{\n'Subu'\u00a0:\u00a0{'Maths'\u00a0:\u00a088,\u00a0'Eng'\u00a0:\u00a060,\u00a0'SSt'\u00a0:\u00a095},\n'Amol'\u00a0:\u00a0{'Maths'\u00a0:\u00a078,\u00a0'Eng'\u00a0:\u00a068,\u00a0'SSt'\u00a0:\u00a089},\n'Raka'\u00a0:\u00a0{'Maths'\u00a0:\u00a056,\u00a0'Eng'\u00a0:\u00a066,\u00a0'SSt'\u00a0:\u00a077}\n}\nWrite\u00a0a\u00a0program\u00a0to\u00a0perform\u00a0the\u00a0following\u00a0operations:\u00a0\n- Print\u00a0marks\u00a0obtained\u00a0by\u00a0Amol\u00a0in\u00a0English.\n- Set\u00a0marks\u00a0obtained\u00a0by\u00a0Raka\u00a0in\u00a0Maths\u00a0to\u00a077.\n- Sort\u00a0the\u00a0dictionary\u00a0by\u00a0name.\n(h) Create\u00a0a\u00a0dictionary\u00a0which\u00a0stores\u00a0the\u00a0following\u00a0data:\nInterface\nIP\u00a0Address status\neth0\n1.1.1.1\nup\neth1\n2.2.2.2\nup\nwlan0\n3.3.3.3\ndown\nwlan1\n4.4.4.4\nup\nWrite\u00a0a\u00a0program\u00a0to\u00a0perform\u00a0the\u00a0following\u00a0operations:\n- Find\u00a0the\u00a0status\u00a0of\u00a0a\u00a0given\u00a0interface.\n- Find\u00a0interface\u00a0and\u00a0IP\u00a0of\u00a0all\u00a0interfaces\u00a0which\u00a0are\u00a0up.\n- Find\u00a0the\u00a0total\u00a0number\u00a0of\u00a0interfaces.\n- Add\u00a0two\u00a0new\u00a0entries\u00a0to\u00a0the\u00a0dictionary.\n(i) Suppose\u00a0a\u00a0dictiona", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_215", "chunk_strategy": "fixed_size"}}, {"text": ":\n- Find\u00a0the\u00a0status\u00a0of\u00a0a\u00a0given\u00a0interface.\n- Find\u00a0interface\u00a0and\u00a0IP\u00a0of\u00a0all\u00a0interfaces\u00a0which\u00a0are\u00a0up.\n- Find\u00a0the\u00a0total\u00a0number\u00a0of\u00a0interfaces.\n- Add\u00a0two\u00a0new\u00a0entries\u00a0to\u00a0the\u00a0dictionary.\n(i) Suppose\u00a0a\u00a0dictionary\u00a0contains\u00a05\u00a0key-value\u00a0pairs\u00a0of\u00a0name\u00a0and\u00a0marks.\u00a0\nWrite\u00a0 a\u00a0 program\u00a0 to\u00a0 print\u00a0 them\u00a0 from\u00a0 last\u00a0 pair\u00a0 to\u00a0 first\u00a0 pair.\u00a0 Keep\u00a0\ndeleting\u00a0 every\u00a0 pair\u00a0 printed,\u00a0 such\u00a0 that\u00a0 the\u00a0 end\u00a0 of\u00a0 printing\u00a0 the\u00a0\ndictionary\u00a0falls\u00a0empty.\n[C] Answer the\u00a0following\u00a0questions:\n(a) What\u00a0will\u00a0be\u00a0the\u00a0output\u00a0of\u00a0the\u00a0following\u00a0code\u00a0snippet?\u00a0\nd\u00a0=\u00a0{\u00a0'Milk'\u00a0:\u00a01,\u00a0'Soap'\u00a0:\u00a02,\u00a0'Towel'\u00a0:\u00a03,\u00a0'Shampoo'\u00a0:\u00a04,\u00a0'Milk'\u00a0:\u00a07}\nprint(d[0],\u00a0d[1],\u00a0d[2])\n(b) Which\u00a0of\u00a0the\u00a0following\u00a0statements\u00a0are\u00a0CORRECT?\n144\nLet\u00a0Us\u00a0Python\ni.\u00a0 A\u00a0dictionary\u00a0will\u00a0always\u00a0contain\u00a0unique\u00a0keys.\nii.\u00a0 Each\u00a0key\u00a0in\u00a0a\u00a0dictionary\u00a0may\u00a0have\u00a0multiple\u00a0values.\niii.\u00a0 If\u00a0same\u00a0key\u00a0is\u00a0assigned\u00a0a\u00a0different\u00a0value,\u00a0latest\u00a0value\u00a0will\u00a0prevail.\n(c) How\u00a0 will\u00a0 you\u00a0 create\u00a0 an\u00a0 empty\u00a0 list,\u00a0 empty\u00a0 tuple,\u00a0 empty\u00a0 set\u00a0 and\u00a0\nempty\u00a0dictionary?\n(d) How\u00a0will\u00a0you\u00a0create\u00a0a\u00a0list,\u00a0tuple", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_216", "chunk_strategy": "fixed_size"}}, {"text": "same\u00a0key\u00a0is\u00a0assigned\u00a0a\u00a0different\u00a0value,\u00a0latest\u00a0value\u00a0will\u00a0prevail.\n(c) How\u00a0 will\u00a0 you\u00a0 create\u00a0 an\u00a0 empty\u00a0 list,\u00a0 empty\u00a0 tuple,\u00a0 empty\u00a0 set\u00a0 and\u00a0\nempty\u00a0dictionary?\n(d) How\u00a0will\u00a0you\u00a0create\u00a0a\u00a0list,\u00a0tuple,\u00a0set\u00a0and\u00a0dictionary,\u00a0each\u00a0containing\u00a0\none\u00a0element?\n(e) Given\u00a0the\u00a0following\u00a0dictionary:\nd =\u00a0{\u00a0'd1':\u00a0{'Fruitname' :\u00a0'Mango',\u00a0'Season' :\u00a0'Summer'},\u00a0\n'd2':\u00a0{'Fruitname' :\u00a0'Orange',\u00a0'Season' :\u00a0'Winter'}}\nHow\u00a0will\u00a0you\u00a0access\u00a0and\u00a0print\u00a0Mango\u00a0and\u00a0Winter?\n(f) In\u00a0the\u00a0following\u00a0table\u00a0check\u00a0the\u00a0box\u00a0if\u00a0a\u00a0property\u00a0is\u00a0enjoyed\u00a0by\u00a0the\u00a0\ndata\u00a0types\u00a0mentioned\u00a0in\u00a0columns?\nProperty\nstr\nlist\ntuple\nset\ndict\nObject\nCollection\nMutable\nOrdered\nIndexed\u00a0by\u00a0position\nIndexed\u00a0by\u00a0key\nIterable\nSlicing allowed\nNesting\u00a0allowed\nHomogeneous\u00a0elements\nHeterogeneous\u00a0elements\n(g) What\u00a0 is\u00a0 the\u00a0 most\u00a0 common\u00a0 usage\u00a0 of\u00a0 the\u00a0 data\u00a0 types\u00a0 mentioned\u00a0\nbelow?\nstr\nlist\ntuple\nset\ndict\nLet\u00a0Us\nPython\n145\nComprehensions\nx\nWhat\u00a0are\u00a0Comprehensions?\nx\nDictionary\u00a0Comprehension\nx\nList\u00a0Comprehension\nx\nPrograms\nx\nSet\u00a0Comprehension\nx\nExercises\n12\n", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_217", "chunk_strategy": "fixed_size"}}, {"text": "es\u00a0 mentioned\u00a0\nbelow?\nstr\nlist\ntuple\nset\ndict\nLet\u00a0Us\nPython\n145\nComprehensions\nx\nWhat\u00a0are\u00a0Comprehensions?\nx\nDictionary\u00a0Comprehension\nx\nList\u00a0Comprehension\nx\nPrograms\nx\nSet\u00a0Comprehension\nx\nExercises\n12\n\u201cAdd\u00a0punch\u00a0to\u00a0your\u00a0thought...\u201d\n146\nLet\u00a0Us\u00a0Python\nWhat\u00a0are\u00a0comprehensions?\nx\nComprehensions\u00a0 offer\u00a0 an\u00a0 easy\u00a0 and\u00a0 compact\u00a0 way\u00a0 of\u00a0 creating\u00a0 lists,\u00a0\nsets\u00a0and\u00a0dictionaries.\u00a0\nx\nA\u00a0 comprehension\u00a0 works\u00a0 by\u00a0 looping\u00a0 or\u00a0 iterating\u00a0 over\u00a0 items\u00a0 and\u00a0\nassigning\u00a0them\u00a0to\u00a0a\u00a0container\u00a0like\u00a0list,\u00a0set\u00a0or\u00a0dictionary.\u00a0\nx\nThis\u00a0container\u00a0cannot\u00a0be\u00a0a\u00a0tuple\u00a0as\u00a0tuple\u00a0being\u00a0immutable\u00a0is\u00a0unable\u00a0\nto\u00a0receive\u00a0assignments.\u00a0\nList\u00a0Comprehension\nx\nList\u00a0 comprehension\u00a0 consists of\u00a0 brackets\u00a0 containing\u00a0 an\u00a0 expression\u00a0\nfollowed\u00a0by\u00a0a for clause,\u00a0and\u00a0zero\u00a0or\u00a0more for or if clauses.\nx\nSo\u00a0general\u00a0form\u00a0of\u00a0a\u00a0list\u00a0comprehension\u00a0is\nlst\u00a0=\u00a0[expression\u00a0for\u00a0var\u00a0in\u00a0sequence\u00a0[optional\u00a0for\u00a0and/or\u00a0if]]\nx\nExamples\u00a0of\u00a0list\u00a0comprehension:\n#\u00a0generate\u00a020\u00a0random\u00a0numbers\u00a0in\u00a0the\u00a0range\u00a010\u00a0to\u00a0100\na\u00a0=\u00a0[random.randint(10,\u00a0100)\u00a0for\u00a0n\u00a0in\u00a0range(20", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_218", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0is\nlst\u00a0=\u00a0[expression\u00a0for\u00a0var\u00a0in\u00a0sequence\u00a0[optional\u00a0for\u00a0and/or\u00a0if]]\nx\nExamples\u00a0of\u00a0list\u00a0comprehension:\n#\u00a0generate\u00a020\u00a0random\u00a0numbers\u00a0in\u00a0the\u00a0range\u00a010\u00a0to\u00a0100\na\u00a0=\u00a0[random.randint(10,\u00a0100)\u00a0for\u00a0n\u00a0in\u00a0range(20)]\n#\u00a0generate\u00a0square\u00a0and\u00a0cube\u00a0of\u00a0all\u00a0numbers\u00a0between\u00a00\u00a0and\u00a010\na\u00a0=\u00a0[(\u00a0x,\u00a0x**2,\u00a0x**3)\u00a0for\u00a0x\u00a0in\u00a0range(10)]\n#\u00a0convert\u00a0a\u00a0list\u00a0of\u00a0strings\u00a0to\u00a0a\u00a0list\u00a0of\u00a0integers\na\u00a0=\u00a0[int(x)\u00a0for\u00a0x\u00a0in\u00a0['10',\u00a0'20',\u00a0'30',\u00a0'40']\u00a0\nx\nExamples\u00a0of\u00a0use\u00a0of\u00a0if\u00a0in\u00a0list\u00a0comprehension:\n#\u00a0generate\u00a0a\u00a0list\u00a0of\u00a0even\u00a0numbers\u00a0in\u00a0the\u00a0range\u00a010\u00a0to\u00a030\na\u00a0=\u00a0[n\u00a0for\u00a0n\u00a0in\u00a0range(10,\u00a030)\u00a0if\u00a0n\u00a0%\u00a02\u00a0==\u00a00]\n#\u00a0from\u00a0a\u00a0list\u00a0delete\u00a0all\u00a0numbers\u00a0having\u00a0a\u00a0value\u00a0between\u00a020\u00a0and\u00a050\na\u00a0=\u00a0[num\u00a0for\u00a0num\u00a0in\u00a0a\u00a0if\u00a0num\u00a0<\u00a020\u00a0or\u00a0num\u00a0>\u00a050]\nx\nExample\u00a0of\u00a0use\u00a0of\u00a0if-else\u00a0in\u00a0list\u00a0comprehension:\n#\u00a0when if-else\u00a0both\u00a0are\u00a0used,\u00a0place\u00a0them\u00a0before\u00a0for\n#\u00a0replace\u00a0a\u00a0vowel\u00a0in\u00a0a\u00a0string\u00a0with\u00a0!\na\u00a0=\u00a0['!'\u00a0if\u00a0alphabet\u00a0in\u00a0'aeiou'\u00a0else\u00a0alphabet\u00a0for\u00a0alphabet\u00a0in\u00a0'Technical'\u00a0]\nChapter 12:\u00a0Comprehensions\u00a0\n147\nx\nExample\u00a0of\u00a0use\u00a0of\u00a0multiple\u00a0fors\u00a0and\u00a0if\u00a0in\u00a0list\u00a0comprehension:\n#\u00a0flatten\u00a0a\u00a0list\u00a0of\u00a0lists\n", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_219", "chunk_strategy": "fixed_size"}}, {"text": "!\na\u00a0=\u00a0['!'\u00a0if\u00a0alphabet\u00a0in\u00a0'aeiou'\u00a0else\u00a0alphabet\u00a0for\u00a0alphabet\u00a0in\u00a0'Technical'\u00a0]\nChapter 12:\u00a0Comprehensions\u00a0\n147\nx\nExample\u00a0of\u00a0use\u00a0of\u00a0multiple\u00a0fors\u00a0and\u00a0if\u00a0in\u00a0list\u00a0comprehension:\n#\u00a0flatten\u00a0a\u00a0list\u00a0of\u00a0lists\narr\u00a0=\u00a0[[1,2,3,4],\u00a0[5,6,7,8],\u00a0[10,\u00a011,\u00a012,\u00a013]]\nb\u00a0=\u00a0[n\u00a0for\u00a0ele\u00a0in\u00a0arr\u00a0for\u00a0n\u00a0in\u00a0ele]\u00a0\n#\u00a0one\u00a0way\n#\u00a0*\u00a0can\u00a0be\u00a0used\u00a0to\u00a0unpack\u00a0a\u00a0list\nc\u00a0=\u00a0[*arr[0],\u00a0*arr[1],\u00a0*arr[2]]\u00a0\n#\u00a0one\u00a0more\u00a0way\nx\nNote\u00a0the\u00a0difference\u00a0between\u00a0nested\u00a0for in\u00a0a\u00a0list\u00a0comprehension\u00a0and\u00a0\na\u00a0nested\u00a0comprehension:\n#\u00a0produces\u00a0[4,\u00a05,\u00a06,\u00a05,\u00a06,\u00a07,\u00a06,\u00a07,\u00a08].\u00a0Uses\u00a0nested\u00a0for\nlst\u00a0=\u00a0[a\u00a0+\u00a0b\u00a0for\u00a0a\u00a0in\u00a0[1,\u00a02,\u00a03]\u00a0for\u00a0b\u00a0in\u00a0[3,\u00a04,\u00a05]]\n#\u00a0produces\u00a0[[4,\u00a05,\u00a06],\u00a0[5,\u00a06,\u00a07],\u00a0[6,\u00a07,\u00a08]].\u00a0Uses\u00a0nested\u00a0comprehension\nlst\u00a0=\u00a0[[a\u00a0+\u00a0b\u00a0for\u00a0a\u00a0in\u00a0[1,\u00a02,\u00a03]]\u00a0for\u00a0b\u00a0in\u00a0[3,\u00a04,\u00a05]]\nThink\u00a0of\u00a0first\u00a0for as\u00a0outer loop\u00a0and\u00a0second\u00a0for as\u00a0inner\u00a0loop.\nx\nExample\u00a0of\u00a0use\u00a0of\u00a0multiple\u00a0fors\u00a0and\u00a0if\u00a0in\u00a0list\u00a0comprehension:\n#\u00a0generate\u00a0all\u00a0unique\u00a0combinations\u00a0of\u00a01,\u00a02\u00a0and\u00a03\na\u00a0=\u00a0[(i,\u00a0j,\u00a0k)\u00a0for\u00a0i\u00a0in\u00a0[1,2,3]\u00a0for\u00a0j\u00a0in\u00a0[1,2,3]\u00a0for\u00a0k\u00a0in\u00a0[1,\u00a02,\u00a03]\u00a0if\u00a0i\u00a0!=\u00a0j\u00a0\\\nand\u00a0j\u00a0!=k\u00a0and\u00a0k\u00a0!=\u00a0i]\nSet\u00a0Comprehension\nx", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_220", "chunk_strategy": "fixed_size"}}, {"text": "and\u00a0if\u00a0in\u00a0list\u00a0comprehension:\n#\u00a0generate\u00a0all\u00a0unique\u00a0combinations\u00a0of\u00a01,\u00a02\u00a0and\u00a03\na\u00a0=\u00a0[(i,\u00a0j,\u00a0k)\u00a0for\u00a0i\u00a0in\u00a0[1,2,3]\u00a0for\u00a0j\u00a0in\u00a0[1,2,3]\u00a0for\u00a0k\u00a0in\u00a0[1,\u00a02,\u00a03]\u00a0if\u00a0i\u00a0!=\u00a0j\u00a0\\\nand\u00a0j\u00a0!=k\u00a0and\u00a0k\u00a0!=\u00a0i]\nSet\u00a0Comprehension\nx\nLike\u00a0 list\u00a0comprehensions,\u00a0set\u00a0comprehensions\u00a0offer\u00a0an\u00a0easy\u00a0way\u00a0of\u00a0\ncreating\u00a0sets.\u00a0It\u00a0consists of\u00a0braces\u00a0containing\u00a0an\u00a0expression\u00a0followed\u00a0\nby\u00a0a for clause,\u00a0and\u00a0zero\u00a0or\u00a0more for or if clauses.\nx\nSo\u00a0general\u00a0form\u00a0of\u00a0a\u00a0set\u00a0comprehension\u00a0is\ns\u00a0=\u00a0{expression\u00a0for\u00a0var\u00a0in\u00a0sequence\u00a0[optional\u00a0for\u00a0and/or\u00a0if]}\nx\nExamples\u00a0of\u00a0set\u00a0comprehension:\n#\u00a0generate\u00a0a\u00a0set\u00a0containing\u00a0square\u00a0of\u00a0all\u00a0numbers\u00a0between\u00a00\u00a0and\u00a010\na\u00a0=\u00a0{x**2\u00a0for\u00a0x\u00a0in\u00a0range(10)}\n#\u00a0from\u00a0a\u00a0set\u00a0delete\u00a0all\u00a0numbers\u00a0between\u00a020\u00a0and\u00a050\na\u00a0=\u00a0{num\u00a0for\u00a0num\u00a0in\u00a0a\u00a0if\u00a0num\u00a0>\u00a020\u00a0and\u00a0num\u00a0<\u00a050}\n148\nLet\u00a0Us\u00a0Python\nDictionary\u00a0Comprehension\nx\nGeneral\u00a0form\u00a0of\u00a0a\u00a0dictionary\u00a0comprehension\u00a0is\u00a0as\u00a0follows:\ndict_var\u00a0=\u00a0{key:value\u00a0for\u00a0(key, value)\u00a0in\u00a0dictonary.items( )}\nx\nExamples\u00a0of\u00a0dictionary\u00a0comprehension:\nd\u00a0=\u00a0{'a':\u00a01,\u00a0'b':\u00a02,\u00a0'c':\u00a03,\u00a0'd':\u00a04}\n#\u00a0obtain\u00a0dictionary\u00a0with\u00a0each\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_221", "chunk_strategy": "fixed_size"}}, {"text": "y\u00a0comprehension\u00a0is\u00a0as\u00a0follows:\ndict_var\u00a0=\u00a0{key:value\u00a0for\u00a0(key, value)\u00a0in\u00a0dictonary.items( )}\nx\nExamples\u00a0of\u00a0dictionary\u00a0comprehension:\nd\u00a0=\u00a0{'a':\u00a01,\u00a0'b':\u00a02,\u00a0'c':\u00a03,\u00a0'd':\u00a04}\n#\u00a0obtain\u00a0dictionary\u00a0with\u00a0each\u00a0value\u00a0cubed\u00a0\nd1\u00a0=\u00a0{k\u00a0:\u00a0v\u00a0**\u00a03\u00a0for\u00a0(k,\u00a0v)\u00a0in\u00a0d.items(\u00a0)}\nprint(d1)\n#\u00a0prints\u00a0{'a':\u00a01,\u00a0'b':\u00a08,\u00a0'c':\u00a027,\u00a0'd':\u00a064}\n#\u00a0obtain\u00a0dictionary\u00a0with\u00a0each\u00a0value\u00a0cubed\u00a0if\u00a0value\u00a0>\u00a03\nd2\u00a0=\u00a0{k\u00a0:\u00a0v\u00a0**\u00a03\u00a0for\u00a0(k,\u00a0v)\u00a0in\u00a0d.items(\u00a0)\u00a0if\u00a0v\u00a0>\u00a03}\nprint(d2)\n#\u00a0prints\u00a0{'d':\u00a064}\n#\u00a0Identify\u00a0odd\u00a0and\u00a0even\u00a0entries\u00a0in\u00a0the\u00a0dictionary\nd3\u00a0=\u00a0{k\u00a0:\u00a0('Even'\u00a0if\u00a0v\u00a0%\u00a02\u00a0==\u00a00\u00a0else\u00a0'Odd')\u00a0for\u00a0(k,\u00a0v)\u00a0in\u00a0d.items(\u00a0)}\nprint(d3)\n#\u00a0prints\u00a0{'a':\u00a0'Odd',\u00a0'b':\u00a0'Even',\u00a0'c':\u00a0'Odd',\u00a0'd':\u00a0'Even'}\n____________________________________________________________________\nProblem\u00a012.1\nUsing\u00a0list\u00a0comprehension,\u00a0write\u00a0a\u00a0program\u00a0to\u00a0generate\u00a0a\u00a0list\u00a0of\u00a0numbers\nin\u00a0the\u00a0range\u00a02\u00a0to\u00a050\u00a0that\u00a0are\u00a0divisible\u00a0by\u00a02\u00a0and\u00a04.\nProgram\nlst\u00a0=\u00a0[num\u00a0for\u00a0num\u00a0in\u00a0range(2,51)\u00a0if\u00a0num\u00a0%\u00a02\u00a0==\u00a00\u00a0and\u00a0num\u00a0%\u00a04\u00a0==\u00a00]\nprint(lst)\nOutput\n[4,\u00a08,\u00a012,\u00a016,\u00a020,\u00a024,\u00a028,\u00a032,\u00a036,\u00a040,\u00a044,\u00a048]\n_________________", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_222", "chunk_strategy": "fixed_size"}}, {"text": "ge\u00a02\u00a0to\u00a050\u00a0that\u00a0are\u00a0divisible\u00a0by\u00a02\u00a0and\u00a04.\nProgram\nlst\u00a0=\u00a0[num\u00a0for\u00a0num\u00a0in\u00a0range(2,51)\u00a0if\u00a0num\u00a0%\u00a02\u00a0==\u00a00\u00a0and\u00a0num\u00a0%\u00a04\u00a0==\u00a00]\nprint(lst)\nOutput\n[4,\u00a08,\u00a012,\u00a016,\u00a020,\u00a024,\u00a028,\u00a032,\u00a036,\u00a040,\u00a044,\u00a048]\n____________________________________________________________________\nProblem\u00a012.2\nWrite\u00a0a\u00a0program\u00a0to\u00a0flatten\u00a0the\u00a0following\u00a0list\u00a0using\u00a0list\u00a0comprehension:\nmat =\u00a0[[1,\u00a02,\u00a03,\u00a04], [5,\u00a06,\u00a07,\u00a08], [9,\u00a010,\u00a011,\u00a012]]\nChapter 12:\u00a0Comprehensions\u00a0\n149\nProgram\nmat\u00a0=\u00a0[[1,\u00a02,\u00a03,\u00a04],\u00a0[5,\u00a06,\u00a07,\u00a08],\u00a0[9,\u00a010,\u00a011,\u00a012]]\na\u00a0=\u00a0[num\u00a0for\u00a0lst\u00a0in\u00a0mat\u00a0for\u00a0num\u00a0in\u00a0lst]\nprint(a)\nOutput\n[1,\u00a02,\u00a03,\u00a04,\u00a05,\u00a06,\u00a07,\u00a08,\u00a09,\u00a010,\u00a011,\u00a012]\n____________________________________________________________________\nProblem\u00a012.3\nWrite\u00a0a\u00a0 program\u00a0to\u00a0create\u00a0a\u00a0 set\u00a0containing\u00a0some\u00a0randomly\u00a0generated\u00a0\nnumbers\u00a0in\u00a0the\u00a0range\u00a015\u00a0to\u00a045.\u00a0Count\u00a0how\u00a0many\u00a0of\u00a0these\u00a0numbers\u00a0are\u00a0\nless\u00a0than\u00a030.\u00a0Delete\u00a0all\u00a0numbers\u00a0which\u00a0are\u00a0less\u00a0than\u00a030.\nProgram\nimport\u00a0random\nr\u00a0=\u00a0{int(15\u00a0+\u00a030\u00a0*\u00a0random.random(\u00a0))\u00a0for\u00a0num\u00a0in\u00a0range(10)}\nprint(r)\ncount\u00a0=\u00a0len({num\u00a0for\u00a0num\u00a0in\u00a0r\u00a0if\u00a0num\u00a0<\u00a030})\nprint(count)", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_223", "chunk_strategy": "fixed_size"}}, {"text": "s\u00a0than\u00a030.\u00a0Delete\u00a0all\u00a0numbers\u00a0which\u00a0are\u00a0less\u00a0than\u00a030.\nProgram\nimport\u00a0random\nr\u00a0=\u00a0{int(15\u00a0+\u00a030\u00a0*\u00a0random.random(\u00a0))\u00a0for\u00a0num\u00a0in\u00a0range(10)}\nprint(r)\ncount\u00a0=\u00a0len({num\u00a0for\u00a0num\u00a0in\u00a0r\u00a0if\u00a0num\u00a0<\u00a030})\nprint(count)\ns\u00a0=\u00a0{num\u00a0for\u00a0num\u00a0in\u00a0r\u00a0if\u00a0num\u00a0<\u00a030}\nr\u00a0=\u00a0r\u00a0- s\nprint(r)\nOutput\n{32,\u00a035,\u00a036,\u00a038,\u00a041,\u00a043,\u00a021,\u00a023,\u00a025,\u00a026}\n4\n{32,\u00a035,\u00a036,\u00a038,\u00a041,\u00a043}\nTips\nx\nDeletion\u00a0of\u00a0elements\u00a0cannot\u00a0be\u00a0done\u00a0while\u00a0iterating\u00a0the\u00a0set.\u00a0Hence\u00a0a\u00a0\nseparate\u00a0set\u00a0s containing\u00a0elements\u00a0below\u00a030\u00a0is\u00a0first\u00a0created\u00a0and\u00a0then\u00a0\nr\u00a0=\u00a0r\u00a0- s is done\u00a0to\u00a0delete\u00a0set\u00a0s\u00a0elements\u00a0from\u00a0set\u00a0r.\n____________________________________________________________________\n150\nLet\u00a0Us\u00a0Python\nProblem\u00a012.4\nWrite\u00a0 a\u00a0 program\u00a0 using\u00a0 list\u00a0 comprehension\u00a0 to\u00a0 eliminate\u00a0 empty\u00a0 tuples\u00a0\nfrom\u00a0a\u00a0list\u00a0of\u00a0tuples.\nProgram\nlst\u00a0=\u00a0[(\u00a0),\u00a0(\u00a0),\u00a0(10),\u00a0(10,\u00a020),\u00a0('',),\u00a0(10,\u00a020,\u00a030),\u00a0(40,\u00a050),\u00a0(\u00a0),\u00a0(45)]\nlst\u00a0=\u00a0[tpl\u00a0for\u00a0tpl\u00a0in\u00a0lst\u00a0if\u00a0tpl]\nprint(lst)\nOutput\n[10,\u00a0(10,\u00a020),\u00a0('',),\u00a0(10,\u00a020,\u00a030),\u00a0(40,\u00a050),\u00a045]\nTips\nx\nif\u00a0tpl returns\u00a0True if\u00a0the\u00a0tuple\u00a0is\u00a0not\u00a0empty.\n____________________________", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_224", "chunk_strategy": "fixed_size"}}, {"text": "50),\u00a0(\u00a0),\u00a0(45)]\nlst\u00a0=\u00a0[tpl\u00a0for\u00a0tpl\u00a0in\u00a0lst\u00a0if\u00a0tpl]\nprint(lst)\nOutput\n[10,\u00a0(10,\u00a020),\u00a0('',),\u00a0(10,\u00a020,\u00a030),\u00a0(40,\u00a050),\u00a045]\nTips\nx\nif\u00a0tpl returns\u00a0True if\u00a0the\u00a0tuple\u00a0is\u00a0not\u00a0empty.\n____________________________________________________________________\nProblem\u00a012.5\nGiven\u00a0 a\u00a0 string,\u00a0 split\u00a0 it\u00a0 on\u00a0 whitespace,\u00a0 capitalize\u00a0 each\u00a0 element\u00a0 of\u00a0 the\u00a0\nresulting\u00a0 list\u00a0 and\u00a0 join\u00a0 them\u00a0 back\u00a0 into\u00a0 a\u00a0 string.\u00a0 Your\u00a0 implementation\u00a0\nshould\u00a0use\u00a0a\u00a0list\u00a0comprehension.\nProgram\ns1 =\u00a0'dreams\u00a0may\u00a0change,\u00a0but\u00a0friends\u00a0are\u00a0forever'\ns2 =\u00a0[' '.join(w.capitalize( )\u00a0for\u00a0w\u00a0in\u00a0s1.split( ))]\ns3\u00a0=\u00a0s2[0]\nprint(s3)\nOutput\n'Dreams May Change, But Friends Are Forever'\nTips\nx\nTo\u00a0 rebuild\u00a0the\u00a0 list\u00a0 from\u00a0capitalized\u00a0 elements,\u00a0 start\u00a0with\u00a0 an\u00a0 empty\u00a0\nstring.\n____________________________________________________________________\nChapter 12:\u00a0Comprehensions\u00a0\n151\nProblem\u00a012.6\nFrom a\u00a0 dictionary\u00a0 with\u00a0 string\u00a0 keys\u00a0 create\u00a0 a\u00a0 new\u00a0 dictionary\u00a0 with\u00a0 the\u00a0\nvowels\u00a0removed\u00a0from\u00a0the\u00a0keys.\u00a0\nProgram\nwords\u00a0=\u00a0{\u00a0'Tub'\u00a0:\u00a01,\u00a0'Toothbrush'\u00a0:\u00a02,\u00a0'Tow", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_225", "chunk_strategy": "fixed_size"}}, {"text": "r 12:\u00a0Comprehensions\u00a0\n151\nProblem\u00a012.6\nFrom a\u00a0 dictionary\u00a0 with\u00a0 string\u00a0 keys\u00a0 create\u00a0 a\u00a0 new\u00a0 dictionary\u00a0 with\u00a0 the\u00a0\nvowels\u00a0removed\u00a0from\u00a0the\u00a0keys.\u00a0\nProgram\nwords\u00a0=\u00a0{\u00a0'Tub'\u00a0:\u00a01,\u00a0'Toothbrush'\u00a0:\u00a02,\u00a0'Towel'\u00a0:\u00a03,\u00a0'Nailcutter'\u00a0:\u00a04}\nd\u00a0=\u00a0{''.join(alpha\u00a0for\u00a0alpha\u00a0in\u00a0k\u00a0if\u00a0alpha\u00a0not\u00a0in\u00a0'aeiou'):\u00a0v\u00a0for\u00a0(k,\u00a0v)\u00a0in\u00a0\nwords.items( )}\nprint(d)\nOutput\n{'Tb':\u00a01,\u00a0'Tthbrsh':\u00a02,\u00a0'Twl':\u00a03,\u00a0'Nlcttr':\u00a04}\nTips\nx\nWe\u00a0 have\u00a0 use\u00a0 a\u00a0 list\u00a0 comprehension\u00a0 nested\u00a0 inside\u00a0 a\u00a0 dictionary\ncomprehension.\nx\nThe\u00a0 list\u00a0 comprehension\u00a0 builds\u00a0 a\u00a0 new\u00a0 key\u00a0 starting\u00a0 with\u00a0 an\u00a0 empty\u00a0\nstring,\u00a0 adding\u00a0 only\u00a0 those\u00a0 characters\u00a0 from\u00a0 the\u00a0 key\u00a0 which\u00a0 are\u00a0 not\u00a0\nvowels.\u00a0\nx\nThe\u00a0 list\u00a0 comprehension\u00a0 is\u00a0 fed\u00a0 with\u00a0 keys\u00a0 by\u00a0 the\u00a0 dictionary\u00a0\ncomprehension.\n____________________________________________________________________\nProblem\u00a012.7\nWrite\u00a0a\u00a0program\u00a0to\u00a0add\u00a0two\u00a03\u00a0x\u00a04\u00a0matrices\u00a0using\n(a) lists\n(b) list\u00a0comprehension\nProgram\nmat1\u00a0=\u00a0[[1,\u00a02,\u00a03,\u00a04], [5,\u00a06,\u00a07,\u00a08], [9,\u00a010,\u00a011,\u00a012]]\nmat2\u00a0=\u00a0[[1,\u00a02,\u00a03,\u00a04], [5,\u00a06,\u00a07,\u00a08], [9,\u00a010,\u00a011,\u00a012]]\nmat3", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_226", "chunk_strategy": "fixed_size"}}, {"text": "\nWrite\u00a0a\u00a0program\u00a0to\u00a0add\u00a0two\u00a03\u00a0x\u00a04\u00a0matrices\u00a0using\n(a) lists\n(b) list\u00a0comprehension\nProgram\nmat1\u00a0=\u00a0[[1,\u00a02,\u00a03,\u00a04], [5,\u00a06,\u00a07,\u00a08], [9,\u00a010,\u00a011,\u00a012]]\nmat2\u00a0=\u00a0[[1,\u00a02,\u00a03,\u00a04], [5,\u00a06,\u00a07,\u00a08], [9,\u00a010,\u00a011,\u00a012]]\nmat3\u00a0=\u00a0[[0, 0, 0, 0],\u00a0[0, 0, 0, 0],\u00a0[0, 0, 0, 0]]\n#\u00a0iterate\u00a0through\u00a0rows\nfor\u00a0i\u00a0in\u00a0range(len(mat1))\u00a0:\n152\nLet\u00a0Us\u00a0Python\n#\u00a0iterate\u00a0through\u00a0columns\nfor\u00a0j\u00a0in\u00a0range(len(mat1[0]))\u00a0:\nmat3[i][j]\u00a0=\u00a0mat1[i][j]\u00a0+\u00a0mat2[i][j]\nprint(mat3)\nmat3\u00a0=\u00a0[[mat1[i][j]\u00a0+\u00a0mat2[i][j]\u00a0for\u00a0j\u00a0in\u00a0range(len(mat1[0]))]\nfor\u00a0i\u00a0in\u00a0range(len(mat1))]\nprint(mat3)\nOutput\n[[2,\u00a04,\u00a06,\u00a08],\u00a0[10,\u00a012,\u00a014,\u00a016],\u00a0[18,\u00a020,\u00a022,\u00a024]]\n[[2,\u00a04,\u00a06,\u00a08],\u00a0[10,\u00a012,\u00a014,\u00a016],\u00a0[18,\u00a020,\u00a022,\u00a024]]\nTips\nx\nNested\u00a0list comprehension is\u00a0evaluated\u00a0in\u00a0the\u00a0context\u00a0of\u00a0the\u00a0for that\u00a0\nfollows\u00a0it.\n____________________________________________________________________\nProblem\u00a012.8\nSuppose\u00a0a\u00a0dictionary\u00a0contains\u00a0following\u00a0information\u00a0for\u00a05\u00a0employees:\nemp\u00a0=\u00a0{\u00a0\n'A101'\u00a0:\u00a0{'name'\u00a0:\u00a0'Ashish',\u00a0'age'\u00a0:\u00a030,\u00a0'salary'\u00a0:\u00a021000},\n'B102'\u00a0:\u00a0{'name'\u00a0:\u00a0'Dinesh',\u00a0'age'\u00a0:\u00a025,\u00a0'salary'\u00a0:\u00a012200}", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_227", "chunk_strategy": "fixed_size"}}, {"text": "2.8\nSuppose\u00a0a\u00a0dictionary\u00a0contains\u00a0following\u00a0information\u00a0for\u00a05\u00a0employees:\nemp\u00a0=\u00a0{\u00a0\n'A101'\u00a0:\u00a0{'name'\u00a0:\u00a0'Ashish',\u00a0'age'\u00a0:\u00a030,\u00a0'salary'\u00a0:\u00a021000},\n'B102'\u00a0:\u00a0{'name'\u00a0:\u00a0'Dinesh',\u00a0'age'\u00a0:\u00a025,\u00a0'salary'\u00a0:\u00a012200},\n'A103'\u00a0:\u00a0{'name'\u00a0:\u00a0'Ramesh',\u00a0'age'\u00a0:\u00a028,\u00a0'salary'\u00a0:\u00a011000},\n'D104'\u00a0:\u00a0{'name'\u00a0:\u00a0'Akheel',\u00a0'age'\u00a0:\u00a030,\u00a0'salary'\u00a0:\u00a018000},\n'A105'\u00a0:\u00a0{'name'\u00a0:\u00a0'Akaash',\u00a0'age'\u00a0:\u00a032,\u00a0'salary'\u00a0:\u00a020000}\n}\nUsing\u00a0dictionary\u00a0comprehensions,\u00a0write\u00a0a\u00a0program\u00a0to create:\n-\nDictionary\u00a0of\u00a0all\u00a0those\u00a0codes\u00a0and\u00a0values,\u00a0where\u00a0codes\u00a0that\u00a0start\u00a0with\u00a0\n'A'.\n-\nDictionary\u00a0of\u00a0all\u00a0codes\u00a0and\u00a0names.\n-\nDictionary\u00a0of\u00a0all\u00a0codes\u00a0and\u00a0ages.\n-\nDictionary\u00a0of\u00a0all\u00a0codes\u00a0and\u00a0ages,\u00a0where\u00a0age\u00a0is\u00a0more\u00a0than\u00a030.\n-\nDictionary\u00a0of\u00a0all\u00a0codes\u00a0and\u00a0names,\u00a0where\u00a0names\u00a0start\u00a0with\u00a0'A'.\n-\nDictionary\u00a0 of\u00a0 all\u00a0 codes\u00a0 and\u00a0 salaries,\u00a0 where\u00a0 salary\u00a0 is\u00a0 in\u00a0 the\u00a0 range\u00a0\n13000\u00a0to\u00a020000.\nChapter 12:\u00a0Comprehensions\u00a0\n153\nProgram\nemp\u00a0=\u00a0{\u00a0\n'A101'\u00a0:\u00a0{'name'\u00a0:\u00a0'Ashish',\u00a0'age'\u00a0:\u00a030,\u00a0'salary'\u00a0:\u00a021000},\n'B102'\u00a0:\u00a0{'name'\u00a0:\u00a0'Dinesh',\u00a0'age'\u00a0:\u00a025,\u00a0'salary'\u00a0:\u00a012200},\n'A103'\u00a0:\u00a0{'n", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_228", "chunk_strategy": "fixed_size"}}, {"text": "e\u00a0\n13000\u00a0to\u00a020000.\nChapter 12:\u00a0Comprehensions\u00a0\n153\nProgram\nemp\u00a0=\u00a0{\u00a0\n'A101'\u00a0:\u00a0{'name'\u00a0:\u00a0'Ashish',\u00a0'age'\u00a0:\u00a030,\u00a0'salary'\u00a0:\u00a021000},\n'B102'\u00a0:\u00a0{'name'\u00a0:\u00a0'Dinesh',\u00a0'age'\u00a0:\u00a025,\u00a0'salary'\u00a0:\u00a012200},\n'A103'\u00a0:\u00a0{'name'\u00a0:\u00a0'Ramesh',\u00a0'age'\u00a0:\u00a028,\u00a0'salary'\u00a0:\u00a011000},\n'D104'\u00a0:\u00a0{'name'\u00a0:\u00a0'Akheel',\u00a0'age'\u00a0:\u00a030,\u00a0'salary'\u00a0:\u00a018000},\n}\nd1\u00a0=\u00a0{k\u00a0:\u00a0v\u00a0for\u00a0(k,\u00a0v)\u00a0in\u00a0emp.items(\u00a0)\u00a0if\u00a0k.startswith('A')}\nd2\u00a0=\u00a0{k\u00a0:\u00a0v['name']\u00a0for\u00a0(k,\u00a0v)\u00a0in\u00a0emp.items(\u00a0)}\nd3\u00a0=\u00a0{k\u00a0:\u00a0v['age']\u00a0for\u00a0(k,\u00a0v)\u00a0in\u00a0emp.items(\u00a0)}\nd4\u00a0=\u00a0{k\u00a0:\u00a0v['age']\u00a0for\u00a0(k,\u00a0v)\u00a0in\u00a0emp.items(\u00a0)\u00a0if\u00a0v['age']\u00a0>\u00a030}\nd5\u00a0=\u00a0{k\u00a0:\u00a0v['name']\u00a0for\u00a0(k,\u00a0v)\u00a0in\u00a0emp.items(\u00a0)\u00a0if\u00a0v['name'].startswith('A')}\nd6\u00a0 =\u00a0 {k\u00a0:\u00a0 v['salary']\u00a0for\u00a0 (k,\u00a0v)\u00a0in\u00a0 emp.items(\u00a0)\u00a0if\u00a0v['salary']\u00a0 >\u00a0 13000\u00a0and\u00a0\nv['salary']\u00a0<=\u00a020000}\nprint(d1)\nprint(d2)\nprint(d3)\nprint(d4)\nprint(d5)\nprint(d6)\nOutput\n{'A101':\u00a0 {'name':\u00a0 'Ashish',\u00a0 'age':\u00a0 30,\u00a0 'salary':\u00a0 21000},\u00a0 'A103':\u00a0 {'name':\u00a0\n'Ramesh',\u00a0'age':\u00a028,\u00a0'salary':\u00a011000}}\n{'A101':\u00a0'Ashish',\u00a0'B102':\u00a0'Dinesh',\u00a0'A103':\u00a0'Ramesh',\u00a0'D104':\u00a0'Akheel'}\n{'A101':\u00a030,\u00a0'B102':\u00a025,\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_229", "chunk_strategy": "fixed_size"}}, {"text": "'Ashish',\u00a0 'age':\u00a0 30,\u00a0 'salary':\u00a0 21000},\u00a0 'A103':\u00a0 {'name':\u00a0\n'Ramesh',\u00a0'age':\u00a028,\u00a0'salary':\u00a011000}}\n{'A101':\u00a0'Ashish',\u00a0'B102':\u00a0'Dinesh',\u00a0'A103':\u00a0'Ramesh',\u00a0'D104':\u00a0'Akheel'}\n{'A101':\u00a030,\u00a0'B102':\u00a025,\u00a0'A103':\u00a028,\u00a0'D104':\u00a030}\n{}\n{'A101':\u00a0'Ashish',\u00a0'D104':\u00a0'Akheel'}\n{'D104':\u00a018000}\nTips\nx\nNote\u00a0that\u00a0the\u00a0data\u00a0has\u00a0been\u00a0organized\u00a0in\u00a0nested\u00a0directories.\nx\nTo\u00a0access\u00a0'Ashish'\u00a0we\u00a0need\u00a0to\u00a0use\u00a0the\u00a0syntax\u00a0emp['A101']['name']\nx\nTo\u00a0access\u00a032\u00a0we\u00a0need\u00a0to\u00a0use\u00a0the\u00a0syntax\u00a0emp['A105']['age']\n____________________________________________________________________\n154\nLet\u00a0Us\u00a0Python\n[A] State\u00a0whether\u00a0the\u00a0following\u00a0statements\u00a0are\u00a0True\u00a0or\u00a0False:\n(a) Tuple\u00a0 comprehension\u00a0offers\u00a0a\u00a0fast\u00a0and\u00a0compact\u00a0way\u00a0to\u00a0generate\u00a0a\u00a0\ntuple.\n(b) List\u00a0comprehension\u00a0and\u00a0dictionary\u00a0comprehension\u00a0can\u00a0be\u00a0nested.\n(c) A\u00a0list\u00a0being\u00a0used\u00a0in\u00a0a\u00a0list\u00a0comprehension\u00a0cannot\u00a0be\u00a0modified\u00a0when\u00a0it\u00a0\nis\u00a0being\u00a0iterated.\n(d) Sets\u00a0being\u00a0immutable\u00a0cannot\u00a0be\u00a0used\u00a0in\u00a0comprehension.\n(e) Comprehensions\u00a0can\u00a0be\u00a0used\u00a0create\u00a0a\u00a0list,\u00a0set\u00a0or\u00a0a\u00a0dictionary.\n[B] Answer\u00a0the", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_230", "chunk_strategy": "fixed_size"}}, {"text": "comprehension\u00a0cannot\u00a0be\u00a0modified\u00a0when\u00a0it\u00a0\nis\u00a0being\u00a0iterated.\n(d) Sets\u00a0being\u00a0immutable\u00a0cannot\u00a0be\u00a0used\u00a0in\u00a0comprehension.\n(e) Comprehensions\u00a0can\u00a0be\u00a0used\u00a0create\u00a0a\u00a0list,\u00a0set\u00a0or\u00a0a\u00a0dictionary.\n[B] Answer\u00a0the\u00a0following questions:\n(a) Write\u00a0 a\u00a0program\u00a0 that\u00a0generates\u00a0a\u00a0list\u00a0of\u00a0integer\u00a0coordinates\u00a0for\u00a0all\u00a0\npoints\u00a0 in\u00a0 the\u00a0 first\u00a0 quadrant\u00a0 from\u00a0 (1,\u00a0 1)\u00a0 to\u00a0 (5,\u00a0 5).\u00a0 Use\u00a0 list\u00a0\ncomprehension.\n(b) Using\u00a0 list\u00a0 comprehension,\u00a0 write\u00a0 a\u00a0 program\u00a0 to\u00a0 create\u00a0 a\u00a0 list\u00a0 by\u00a0\nmultiplying\u00a0each\u00a0element\u00a0in\u00a0the\u00a0list\u00a0by\u00a010.\n(c) Write\u00a0 a\u00a0 program\u00a0 to\u00a0 generate\u00a0first\u00a0 20\u00a0 Fibonacci\u00a0 numbers\u00a0 using\u00a0 list\u00a0\ncomprehension.\n(d) Write\u00a0a\u00a0program\u00a0to\u00a0generate\u00a0two\u00a0lists\u00a0using\u00a0list\u00a0comprehension.\u00a0One\u00a0\nlist\u00a0should\u00a0contain\u00a0first\u00a020\u00a0odd\u00a0numbers\u00a0and\u00a0another\u00a0should\u00a0contain\u00a0\nfirst\u00a020\u00a0even\u00a0numbers.\n(e) Suppose\u00a0 a\u00a0 list\u00a0 contains\u00a0 positive\u00a0 and\u00a0 negative\u00a0 numbers.\u00a0 Write\u00a0 a\u00a0\nprogram\u00a0to\u00a0create\u00a0two\u00a0lists\u2014one\u00a0containing\u00a0 positive\u00a0 numbers\u00a0 and\u00a0\nanother\u00a0containing\u00a0negative\u00a0numbers.\n(f) Suppose\u00a0 a\u00a0 list\u00a0 contains\u00a0 5\u00a0 strings.\u00a0 Write", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_231", "chunk_strategy": "fixed_size"}}, {"text": "positive\u00a0 and\u00a0 negative\u00a0 numbers.\u00a0 Write\u00a0 a\u00a0\nprogram\u00a0to\u00a0create\u00a0two\u00a0lists\u2014one\u00a0containing\u00a0 positive\u00a0 numbers\u00a0 and\u00a0\nanother\u00a0containing\u00a0negative\u00a0numbers.\n(f) Suppose\u00a0 a\u00a0 list\u00a0 contains\u00a0 5\u00a0 strings.\u00a0 Write\u00a0 a\u00a0 program\u00a0 to\u00a0 convert\u00a0 all\u00a0\nthese\u00a0strings\u00a0to\u00a0uppercase.\n(g) Write\u00a0 a\u00a0 program that\u00a0 converts\u00a0 list\u00a0 of\u00a0 temperatures\u00a0 in\u00a0 Fahrenheit\u00a0\ndegrees\u00a0to\u00a0equivalent\u00a0Celsius\u00a0degrees\u00a0using\u00a0list\u00a0comprehension.\n(h) Write\u00a0 a\u00a0 program\u00a0 to\u00a0 generate\u00a0 a\u00a0 2D\u00a0matrix\u00a0of\u00a0 size\u00a04\u00a0x\u00a0 5\u00a0containing\u00a0\nrandom\u00a0multiples\u00a0of\u00a04\u00a0in\u00a0the\u00a0range\u00a040\u00a0to\u00a0160.\nChapter 12:\u00a0Comprehensions\u00a0\n155\n(i) Write\u00a0a\u00a0program\u00a0that\u00a0converts\u00a0words present\u00a0in\u00a0a\u00a0list\u00a0into\u00a0uppercase\u00a0\nand\u00a0stores\u00a0them\u00a0in\u00a0a\u00a0set.\n[C] Attempt\u00a0the\u00a0following\u00a0questions:\n(a)\nConsider\u00a0the\u00a0following\u00a0code\u00a0snippet:\u00a0\ns\u00a0=\u00a0set([int(n)\u00a0for\u00a0n\u00a0in\u00a0input('Enter\u00a0values:\u00a0').split(\u00a0)])\nprint(s)\nWhat\u00a0will\u00a0be\u00a0the\u00a0output\u00a0of\u00a0the\u00a0above\u00a0code\u00a0snippet if\u00a0input\u00a0provided\u00a0\nto\u00a0it\u00a0is 1\u00a02\u00a03\u00a04\u00a05\u00a06\u00a07\u00a02\u00a04\u00a05\u00a00?\n(b)\nHow\u00a0will\u00a0you\u00a0convert\u00a0the\u00a0following\u00a0code\u00a0into\u00a0a\u00a0list\u00a0comprehension?\na\u00a0=\u00a0[\u00a0]\nfor\u00a0n\u00a0in\u00a0range", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_232", "chunk_strategy": "fixed_size"}}, {"text": "nt(s)\nWhat\u00a0will\u00a0be\u00a0the\u00a0output\u00a0of\u00a0the\u00a0above\u00a0code\u00a0snippet if\u00a0input\u00a0provided\u00a0\nto\u00a0it\u00a0is 1\u00a02\u00a03\u00a04\u00a05\u00a06\u00a07\u00a02\u00a04\u00a05\u00a00?\n(b)\nHow\u00a0will\u00a0you\u00a0convert\u00a0the\u00a0following\u00a0code\u00a0into\u00a0a\u00a0list\u00a0comprehension?\na\u00a0=\u00a0[\u00a0]\nfor\u00a0n\u00a0in\u00a0range(10,\u00a030)\u00a0:\nif\u00a0n\u00a0%\u00a02\u00a0==\u00a00\u00a0:\na.append(n)\n(c)\nHow\u00a0will\u00a0you\u00a0convert\u00a0the\u00a0following\u00a0code\u00a0into\u00a0a\u00a0set\u00a0comprehension?\na\u00a0=\u00a0set(\u00a0)\nfor\u00a0n\u00a0in\u00a0range(21,\u00a040)\u00a0:\nif\u00a0n\u00a0%\u00a02\u00a0==\u00a00\u00a0:\na.add(n)\nprint(a)\n(d)\nWhat\u00a0will\u00a0be\u00a0the\u00a0output\u00a0of\u00a0the\u00a0following\u00a0code\u00a0snippet?\u00a0\ns\u00a0=\u00a0[a\u00a0+\u00a0b\u00a0for\u00a0a\u00a0in\u00a0['They\u00a0',\u00a0'We\u00a0']\u00a0for\u00a0b\u00a0in\u00a0['are\u00a0gone!',\u00a0'have\u00a0come!']]\nprint(s)\n(e)\nFrom\u00a0the\u00a0sentence\nsent\u00a0=\u00a0'Pack\u00a0my\u00a0box\u00a0with\u00a0five\u00a0dozen\u00a0liquor\u00a0jugs'\nhow\u00a0will\u00a0you\u00a0generate\u00a0a\u00a0set\u00a0given\u00a0below?\n{'liquor',\u00a0'jugs',\u00a0'with',\u00a0'five',\u00a0'dozen',\u00a0'Pack'}\n(f)\nWhich\u00a0 of\u00a0\nthe\u00a0 following\u00a0 the\u00a0 correct\u00a0 form\u00a0 of\u00a0 dictionary\u00a0\ncomprehension?\ni.\u00a0 dict_var\u00a0=\u00a0{key : value\u00a0for\u00a0(key,\u00a0value)\u00a0in\u00a0dictonary.items(\u00a0)}\nii.\u00a0 dict_var\u00a0=\u00a0{key : value\u00a0for\u00a0(key,\u00a0value)\u00a0in\u00a0dictonary}\niii.\u00a0 dict_var\u00a0=\u00a0{key : value\u00a0for\u00a0(key,\u00a0value)\u00a0in\u00a0dictonary.keys(\u00a0)}\n(g)\nUsing\u00a0comprehension\u00a0how\u00a0will\u00a0y", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_233", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0(key,\u00a0value)\u00a0in\u00a0dictonary.items(\u00a0)}\nii.\u00a0 dict_var\u00a0=\u00a0{key : value\u00a0for\u00a0(key,\u00a0value)\u00a0in\u00a0dictonary}\niii.\u00a0 dict_var\u00a0=\u00a0{key : value\u00a0for\u00a0(key,\u00a0value)\u00a0in\u00a0dictonary.keys(\u00a0)}\n(g)\nUsing\u00a0comprehension\u00a0how\u00a0will\u00a0you\u00a0convert\n156\nLet\u00a0Us\u00a0Python\n{'a' :\u00a01,\u00a0'b' :\u00a02,\u00a0'c' :\u00a03,\u00a0'd' :\u00a04,\u00a0'e' :\u00a05}\ninto\n{'A' :\u00a0100,\u00a0'B' :\u00a0200,\u00a0'C' :\u00a0300,\u00a0'D' :\u00a0400,\u00a0'E' :\u00a0500}?\n(h)\nWhat\u00a0will\u00a0be\u00a0the\u00a0output\u00a0of\u00a0the\u00a0following\u00a0code\u00a0snippet?\u00a0\nlst\u00a0=\u00a0[2,\u00a07,\u00a08,\u00a06,\u00a05,\u00a05,\u00a04,\u00a04,\u00a08]\ns\u00a0=\u00a0{True\u00a0if\u00a0n\u00a0%\u00a02\u00a0==\u00a00\u00a0else\u00a0False\u00a0for\u00a0n\u00a0in\u00a0lst}\nprint(s)\n(i)\nHow\u00a0will\u00a0you\u00a0convert\u00a0\nd\u00a0=\u00a0{'AMOL' :\u00a020,\u00a0'ANIL' :\u00a012,\u00a0'SUNIL' : 13,\u00a0'RAMESH' :\u00a010}\ninto\n{'Amol' :\u00a0400,\u00a0'Anil' :\u00a0144,\u00a0'Sunil' :\u00a0169,\u00a0'Ramesh' :\u00a0100}\n(j)\nHow\u00a0 will\u00a0 you convert\u00a0 words\u00a0 present\u00a0 in\u00a0 a\u00a0 list\u00a0 given\u00a0 below\u00a0 into\u00a0\nuppercase\u00a0and\u00a0store\u00a0them\u00a0in\u00a0a\u00a0set?\nlst\u00a0=\u00a0['Amol',\u00a0'Vijay',\u00a0'Vinay',\u00a0'Rahul',\u00a0'Sandeep']\nLet\u00a0Us\nPython\n157\nFunctions\nx\nWhat\u00a0are\u00a0Functions?\nx\nUnpacking\u00a0Arguments\nx\nCommunication\u00a0with\u00a0Functions\nx\nPrograms\nx\nTypes\u00a0of\u00a0Arguments\nx\nExercises\n13\n\u201cThink\u00a0modular,\u00a0think\u00a0of\u00a0functions...\u201d\n158\nLe", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_234", "chunk_strategy": "fixed_size"}}, {"text": "ep']\nLet\u00a0Us\nPython\n157\nFunctions\nx\nWhat\u00a0are\u00a0Functions?\nx\nUnpacking\u00a0Arguments\nx\nCommunication\u00a0with\u00a0Functions\nx\nPrograms\nx\nTypes\u00a0of\u00a0Arguments\nx\nExercises\n13\n\u201cThink\u00a0modular,\u00a0think\u00a0of\u00a0functions...\u201d\n158\nLet\u00a0Us\u00a0Python\nWhat\u00a0are\u00a0Functions?\nx\nPython\u00a0function\u00a0is\u00a0a\u00a0block\u00a0of\u00a0code\u00a0that\u00a0performs\u00a0a\u00a0specific\u00a0and\u00a0well-\ndefined\u00a0task.\u00a0\nx\nTwo\u00a0main\u00a0advantages\u00a0of\u00a0function\u00a0are:\n(a) They\u00a0help\u00a0us\u00a0divide\u00a0our\u00a0program\u00a0into\u00a0multiple\u00a0tasks.\u00a0For\u00a0each\u00a0\ntask\u00a0we\u00a0can\u00a0define\u00a0a\u00a0function.\u00a0This\u00a0makes\u00a0the\u00a0code\u00a0modular.\n(b) Functions\u00a0provide\u00a0a\u00a0reuse\u00a0mechanism.\u00a0The\u00a0same\u00a0function\u00a0can\u00a0be\u00a0\ncalled\u00a0any\u00a0number\u00a0of\u00a0times.\nx\nThere\u00a0are\u00a0two\u00a0types\u00a0of\u00a0Python\u00a0functions:\n(a) Built-in\u00a0functions\u00a0- Ex.\u00a0len(\u00a0),\u00a0sorted(\u00a0),\u00a0min(\u00a0),\u00a0max(\u00a0),\u00a0etc.\n(b) User-defined\u00a0functions\nx\nGiven\u00a0below\u00a0 is\u00a0an\u00a0example\u00a0of\u00a0user-defined\u00a0function.\u00a0Note\u00a0that\u00a0the\u00a0\nbody\u00a0of\u00a0the\u00a0function\u00a0must\u00a0be\u00a0indented\u00a0suitably.\n#\u00a0function\u00a0definition\ndef\u00a0fun(\u00a0)\u00a0:\nprint('My\u00a0opinions\u00a0may\u00a0have\u00a0changed')\nprint('But\u00a0not\u00a0the\u00a0fact\u00a0that\u00a0I\u00a0am\u00a0right')\nx\nA\u00a0function\u00a0can\u00a0be\u00a0called\u00a0any\u00a0number\u00a0of\u00a0times.\n", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_235", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0function\u00a0must\u00a0be\u00a0indented\u00a0suitably.\n#\u00a0function\u00a0definition\ndef\u00a0fun(\u00a0)\u00a0:\nprint('My\u00a0opinions\u00a0may\u00a0have\u00a0changed')\nprint('But\u00a0not\u00a0the\u00a0fact\u00a0that\u00a0I\u00a0am\u00a0right')\nx\nA\u00a0function\u00a0can\u00a0be\u00a0called\u00a0any\u00a0number\u00a0of\u00a0times.\nfun(\u00a0)\u00a0\n#\u00a0first\u00a0call\nfun(\u00a0)\u00a0\n#\u00a0second\u00a0call\nx\nWhen\u00a0a\u00a0function\u00a0is\u00a0called,\u00a0control\u00a0is\u00a0transferred\u00a0to\u00a0the\u00a0function,\u00a0its\u00a0\nstatements\u00a0 are\u00a0 executed\u00a0 and\u00a0 control\u00a0 is\u00a0 returned\u00a0 to\u00a0 place\u00a0 from\u00a0\nwhere\u00a0the\u00a0call\u00a0originated.\nx\nPython\u00a0convention\u00a0for\u00a0function\u00a0names:\n-\nAlways\u00a0use\u00a0lowercase\u00a0characters\n-\nConnect\u00a0multiple\u00a0words\u00a0using\u00a0_\nExample:\u00a0cal_si(\u00a0),\u00a0split_data(\u00a0),\u00a0etc.\nx\nA\u00a0 function\u00a0 can\u00a0 be\u00a0 redefined.\u00a0 While\u00a0 calling\u00a0 the\u00a0 function\u00a0 its\u00a0 latest\u00a0\ndefinition\u00a0will\u00a0be\u00a0called.\nChapter 13:\u00a0Functions\u00a0\n159\nx\nFunction\u00a0 definitions\u00a0 can\u00a0 be\u00a0 nested. When\u00a0 we\u00a0 do\u00a0 so,\u00a0 the\u00a0 inner\u00a0\nfunction\u00a0is\u00a0able\u00a0to\u00a0access\u00a0the\u00a0variables\u00a0of\u00a0outer\u00a0function. The\u00a0outer\u00a0\nfunction\u00a0has\u00a0to\u00a0be\u00a0called\u00a0for the\u00a0inner\u00a0function\u00a0to\u00a0execute.\ndef\u00a0fun1(\u00a0)\u00a0:\nprint('Reached\u00a0fun1')\ndef\u00a0fun2(\u00a0)\u00a0:\n#\u00a0nested\u00a0definition\nprint('Inner\u00a0avatar')\nprint(", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_236", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0variables\u00a0of\u00a0outer\u00a0function. The\u00a0outer\u00a0\nfunction\u00a0has\u00a0to\u00a0be\u00a0called\u00a0for the\u00a0inner\u00a0function\u00a0to\u00a0execute.\ndef\u00a0fun1(\u00a0)\u00a0:\nprint('Reached\u00a0fun1')\ndef\u00a0fun2(\u00a0)\u00a0:\n#\u00a0nested\u00a0definition\nprint('Inner\u00a0avatar')\nprint('Outer\u00a0avatar')\nfun2(\u00a0)\nfun1(\u00a0)\n#\u00a0ok\nfun2(\u00a0)\n#\u00a0cannot\u00a0call\u00a0inner\u00a0function\u00a0from\u00a0here\nprint(type(fun1))\n#\u00a0nested\u00a0call\nx\nSuppose\u00a0 we\u00a0wish\u00a0to\u00a0 develop\u00a0a\u00a0 function\u00a0 myrandom(\u00a0) to\u00a0generate\u00a0\nrandom\u00a0 numbers.\u00a0While\u00a0 executing\u00a0 this\u00a0 function\u00a0 we\u00a0wish\u00a0 to\u00a0 check\u00a0\nwhether\u00a0 a\u00a0 number\u00a0 is\u00a0 a\u00a0 prime\u00a0 number\u00a0 or\u00a0 not.\u00a0 We\u00a0 can\u00a0 do\u00a0 so\u00a0 by\u00a0\ndefining\u00a0a\u00a0function\u00a0isprime(\u00a0).\u00a0But\u00a0we\u00a0do\u00a0not\u00a0want\u00a0want\u00a0isprime(\u00a0) to\u00a0\nbe\u00a0callable\u00a0from\u00a0outside\u00a0myrandom(\u00a0).\u00a0In\u00a0a\u00a0way\u00a0we\u00a0wish\u00a0to\u00a0protect\u00a0\nit.\u00a0In\u00a0such\u00a0a\u00a0case\u00a0we\u00a0can\u00a0define\u00a0isprime(\u00a0)\u00a0as\u00a0an\u00a0inner\u00a0function.\nx\nAnother\u00a0use\u00a0of\u00a0inner\u00a0functions\u00a0is\u00a0in\u00a0creating\u00a0decorators.\u00a0This\u00a0usage\u00a0is\u00a0\ndiscussed\u00a0in\u00a0Chapter\u00a024.\nCommunication\u00a0with\u00a0Functions\nx\nCommunication\u00a0with\u00a0functions\u00a0is\u00a0done\u00a0using\u00a0parameters/arguments\u00a0\npassed\u00a0to\u00a0it\u00a0and\u00a0the\u00a0value(s)\u00a0returned\u00a0from\u00a0it.\nx\nThe\u00a0 way\u00a0 to\u00a0 pass\u00a0 v", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_237", "chunk_strategy": "fixed_size"}}, {"text": "age\u00a0is\u00a0\ndiscussed\u00a0in\u00a0Chapter\u00a024.\nCommunication\u00a0with\u00a0Functions\nx\nCommunication\u00a0with\u00a0functions\u00a0is\u00a0done\u00a0using\u00a0parameters/arguments\u00a0\npassed\u00a0to\u00a0it\u00a0and\u00a0the\u00a0value(s)\u00a0returned\u00a0from\u00a0it.\nx\nThe\u00a0 way\u00a0 to\u00a0 pass\u00a0 values\u00a0 to\u00a0 a\u00a0 function\u00a0 and\u00a0 return\u00a0 value\u00a0 from\u00a0 it\u00a0 is\u00a0\nshown\u00a0below:\ndef\u00a0cal_sum(x,\u00a0y,\u00a0z)\u00a0:\nreturn\u00a0x\u00a0+\u00a0y\u00a0+\u00a0z\u00a0\n#\u00a0pass\u00a010,\u00a020,\u00a030\u00a0to\u00a0cal_sum(\u00a0),\u00a0collect\u00a0value\u00a0returned\u00a0by\u00a0it\ns1\u00a0=\u00a0cal_sum(10,\u00a020,\u00a030)\u00a0\n#\u00a0pass\u00a0a,\u00a0b,\u00a0c\u00a0to\u00a0cal_sum(\u00a0),\u00a0collect\u00a0value\u00a0returned\u00a0by\u00a0it\na,\u00a0b,\u00a0c\u00a0=\u00a01,\u00a02,\u00a03\ns2\u00a0=\u00a0cal_sum(a,\u00a0b,\u00a0c)\n160\nLet\u00a0Us\u00a0Python\nx\nreturn statement\u00a0returns\u00a0control\u00a0and\u00a0value\u00a0from\u00a0a\u00a0function.\u00a0return\nwithout\u00a0an\u00a0expression\u00a0returns\u00a0None.\nx\nTo\u00a0 return\u00a0multiple\u00a0 values\u00a0from\u00a0a\u00a0function\u00a0we\u00a0can\u00a0 put\u00a0them\u00a0into\u00a0 a\u00a0\nlist/tuple/set/dictionary\u00a0and\u00a0then\u00a0return\u00a0it.\nx\nSuppose\u00a0we\u00a0pass\u00a0arguments\u00a0a,\u00a0b,\u00a0c to\u00a0 a\u00a0function\u00a0and\u00a0collect\u00a0them\u00a0in\u00a0\nx,\u00a0y,\u00a0z.\u00a0Changing\u00a0x,\u00a0y,\u00a0z in\u00a0the\u00a0function\u00a0body,\u00a0does\u00a0not\u00a0change\u00a0a,\u00a0b,\u00a0c.\u00a0\nThus\u00a0a\u00a0function\u00a0is\u00a0always\u00a0called\u00a0by\u00a0value.\nx\nA\u00a0 function\u00a0 can\u00a0 return\u00a0 different\u00a0 types\u00a0 through\u00a0 different\u00a0 retur", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_238", "chunk_strategy": "fixed_size"}}, {"text": "ct\u00a0them\u00a0in\u00a0\nx,\u00a0y,\u00a0z.\u00a0Changing\u00a0x,\u00a0y,\u00a0z in\u00a0the\u00a0function\u00a0body,\u00a0does\u00a0not\u00a0change\u00a0a,\u00a0b,\u00a0c.\u00a0\nThus\u00a0a\u00a0function\u00a0is\u00a0always\u00a0called\u00a0by\u00a0value.\nx\nA\u00a0 function\u00a0 can\u00a0 return\u00a0 different\u00a0 types\u00a0 through\u00a0 different\u00a0 return\u00a0\nstatements.\nx\nA\u00a0function\u00a0that\u00a0reaches\u00a0end\u00a0of\u00a0execution\u00a0without\u00a0a\u00a0return statement\u00a0\nwill\u00a0always\u00a0return\u00a0None.\nTypes\u00a0of\u00a0Arguments\nx\nArguments\u00a0in\u00a0a\u00a0Python\u00a0function\u00a0can\u00a0be\u00a0of\u00a04\u00a0types:\n(a) Positional\u00a0arguments\u00a0\n(b) Keyword\u00a0arguments\n(c) Variable-length\u00a0positional\u00a0arguments\n(d) Variable-length\u00a0keyword\u00a0arguments\nPositional\u00a0 and\u00a0 keyword\u00a0 arguments\u00a0 are\u00a0 often\u00a0 called\u00a0 'required'\u00a0\narguments,\u00a0whereas,\u00a0variable-length\u00a0arguments\u00a0are\u00a0called\u00a0'optional'\u00a0\narguments.\nx\nPositional\u00a0arguments\u00a0must\u00a0be\u00a0passed\u00a0in\u00a0correct\u00a0positional\u00a0order.\u00a0For\u00a0\nexample,\u00a0if\u00a0a\u00a0function\u00a0expects\u00a0an\u00a0int,\u00a0float\u00a0and\u00a0string\u00a0to\u00a0be\u00a0passed\u00a0to\u00a0\nit,\u00a0then\u00a0while\u00a0calling\u00a0this\u00a0function\u00a0the\u00a0arguments\u00a0must\u00a0be\u00a0passed\u00a0in\u00a0\nthe\u00a0same\u00a0order.\ndef fun(i, j, k) :\nprint(i + j)\nprint(k.upper( ))\nfun(10,\u00a03.14,\u00a0'Rigmarole')\u00a0\n#\u00a0correct\u00a0call\nfun('Rigmarole',\u00a03", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_239", "chunk_strategy": "fixed_size"}}, {"text": "o\u00a0\nit,\u00a0then\u00a0while\u00a0calling\u00a0this\u00a0function\u00a0the\u00a0arguments\u00a0must\u00a0be\u00a0passed\u00a0in\u00a0\nthe\u00a0same\u00a0order.\ndef fun(i, j, k) :\nprint(i + j)\nprint(k.upper( ))\nfun(10,\u00a03.14,\u00a0'Rigmarole')\u00a0\n#\u00a0correct\u00a0call\nfun('Rigmarole',\u00a03.14,\u00a010)\u00a0\n#\u00a0error,\u00a0incorrect\u00a0order\nWhile\u00a0 passing\u00a0 positional\u00a0 arguments,\u00a0 number\u00a0of\u00a0 arguments\u00a0 passed\nmust\u00a0match\u00a0with\u00a0number\u00a0of\u00a0arguments\u00a0received.\nChapter 13:\u00a0Functions\u00a0\n161\nx\nKeyword\u00a0arguments\u00a0can\u00a0be\u00a0passed\u00a0out\u00a0of\u00a0order.\u00a0Python\u00a0interpreter\u00a0\nuses\u00a0keywords\u00a0(variable\u00a0names)\u00a0to\u00a0match\u00a0the\u00a0values\u00a0passed\u00a0with\u00a0the\u00a0\narguments\u00a0used\u00a0in\u00a0the\u00a0function\u00a0definition.\u00a0\ndef\u00a0print_it(i,\u00a0a,\u00a0str)\u00a0:\nprint(i,\u00a0a,\u00a0str)\nprint_it(a\u00a0=\u00a03.14,\u00a0i\u00a0=\u00a010,\u00a0str\u00a0=\u00a0'Sicilian')\u00a0\n#\u00a0keyword,\u00a0ok\nprint_it(str\u00a0=\u00a0'Sicilian',\u00a0a\u00a0=\u00a03.14,\u00a0i\u00a0=\u00a010)\u00a0\n#\u00a0keyword,\u00a0ok\nprint_it(str\u00a0=\u00a0'Sicilian',\u00a0i\u00a0=\u00a010,\u00a0a\u00a0=\u00a03.14)\u00a0\n#\u00a0keyword,\u00a0ok\nprint_it(s\u00a0=\u00a0'Sicilian',\u00a0j\u00a0=\u00a010,\u00a0a\u00a0=\u00a03.14)\n#\u00a0error, keyword\u00a0name\nAn\u00a0error\u00a0is\u00a0reported\u00a0in\u00a0the\u00a0last\u00a0call\u00a0since\u00a0the\u00a0variable\u00a0names\u00a0in\u00a0the\u00a0\ncall\u00a0and\u00a0the\u00a0definition\u00a0do\u00a0not\u00a0match.\nx\nIn\u00a0a\u00a0call\u00a0we\u00a0can\u00a0use\u00a0positional\u00a0as\u00a0well\u00a0as\u00a0k", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_240", "chunk_strategy": "fixed_size"}}, {"text": "an',\u00a0j\u00a0=\u00a010,\u00a0a\u00a0=\u00a03.14)\n#\u00a0error, keyword\u00a0name\nAn\u00a0error\u00a0is\u00a0reported\u00a0in\u00a0the\u00a0last\u00a0call\u00a0since\u00a0the\u00a0variable\u00a0names\u00a0in\u00a0the\u00a0\ncall\u00a0and\u00a0the\u00a0definition\u00a0do\u00a0not\u00a0match.\nx\nIn\u00a0a\u00a0call\u00a0we\u00a0can\u00a0use\u00a0positional\u00a0as\u00a0well\u00a0as\u00a0keyword\u00a0arguments.\u00a0If\u00a0we\u00a0\ndo\u00a0so,\u00a0the\u00a0positional\u00a0arguments\u00a0must\u00a0precede\u00a0keyword\u00a0arguments.\ndef\u00a0print_it(i,\u00a0a,\u00a0str)\u00a0:\nprint(i,\u00a0a,\u00a0str)\nprint_it(10,\u00a0a\u00a0=\u00a03.14,\u00a0str\u00a0=\u00a0'Ngp')\u00a0\n#\u00a0ok\nprint_it(10,\u00a0str\u00a0=\u00a0'Ngp',\u00a0a\u00a0=\u00a03.14)\u00a0\n#\u00a0ok\nprint_it(str\u00a0=\u00a0'Ngp',\u00a010,\u00a0a\u00a0=\u00a03.14)\u00a0\n#\u00a0error,\u00a0positional\u00a0after\u00a0keyword\nprint_it(str\u00a0=\u00a0'Ngp',\u00a0a\u00a0=\u00a03.14,\u00a010)\n#\u00a0error,\u00a0positional\u00a0after\u00a0keyword\nx\nSometimes\u00a0 number\u00a0 of\u00a0 positional\u00a0 arguments\u00a0 to\u00a0 be\u00a0 passed\u00a0 to\u00a0 a\u00a0\nfunction\u00a0 is\u00a0 not\u00a0 certain.\u00a0 In\u00a0 such\u00a0 cases,\u00a0 variable-length\u00a0 positional\u00a0\narguments\u00a0can\u00a0be\u00a0received\u00a0using\u00a0*args.\ndef\u00a0print_it(*args)\u00a0:\nprint(\u00a0)\nfor\u00a0var\u00a0in\u00a0args\u00a0:\nprint(var,\u00a0end\u00a0=\u00a0'\u00a0')\nprint_it(10)\n#\u00a01\u00a0arg,\u00a0ok\nprint_it(10,\u00a03.14)\u00a0\n#\u00a02\u00a0args,\u00a0ok\nprint_it(10,\u00a03.14,'Sicilian')\u00a0\n#\u00a03\u00a0args,\u00a0ok\nprint_it(10,\u00a03.14,\u00a0'Sicilian',\u00a0'Punekar')\u00a0\n#\u00a04\u00a0args,\u00a0ok\n162\nLet\u00a0Us\u00a0Python\nargs used\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_241", "chunk_strategy": "fixed_size"}}, {"text": "r,\u00a0end\u00a0=\u00a0'\u00a0')\nprint_it(10)\n#\u00a01\u00a0arg,\u00a0ok\nprint_it(10,\u00a03.14)\u00a0\n#\u00a02\u00a0args,\u00a0ok\nprint_it(10,\u00a03.14,'Sicilian')\u00a0\n#\u00a03\u00a0args,\u00a0ok\nprint_it(10,\u00a03.14,\u00a0'Sicilian',\u00a0'Punekar')\u00a0\n#\u00a04\u00a0args,\u00a0ok\n162\nLet\u00a0Us\u00a0Python\nargs used\u00a0in\u00a0definition\u00a0of\u00a0print_it(\u00a0) is\u00a0a\u00a0tuple.\u00a0*\u00a0indicates\u00a0that\u00a0it\u00a0will\u00a0\nhold\u00a0 all\u00a0 the\u00a0 arguments\u00a0 passed\u00a0 to\u00a0 print_it(\u00a0 ).\u00a0 The\u00a0 tuple\u00a0 can\u00a0 be\u00a0\niterated\u00a0through\u00a0using\u00a0a\u00a0for loop.\nx\nSometimes\u00a0 number\u00a0 of\u00a0 keyword\u00a0 arguments\u00a0 to\u00a0 be\u00a0 passed\u00a0 to\u00a0 a\u00a0\nfunction\u00a0 is\u00a0 not\u00a0 certain.\u00a0 In\u00a0 such\u00a0 cases,\u00a0 variable-length\u00a0 keyword\u00a0\narguments\u00a0can\u00a0be\u00a0received\u00a0using\u00a0**kwargs.\ndef\u00a0print_it(**kwargs)\u00a0:\nprint(\u00a0)\nfor\u00a0name,\u00a0value\u00a0in\u00a0kwargs.items(\u00a0)\u00a0:\nprint(name,\u00a0value,\u00a0end\u00a0=\u00a0'\u00a0')\nprint_it(a\u00a0=\u00a010)\u00a0\n#\u00a0keyword,\u00a0ok\nprint_it(a\u00a0=\u00a010,\u00a0b\u00a0=\u00a03.14)\u00a0\n#\u00a0keyword,\u00a0ok\nprint_it(a\u00a0=\u00a010,\u00a0b\u00a0=\u00a03.14,\u00a0s\u00a0=\u00a0'Sicilian')\u00a0\n#\u00a0keyword,\u00a0ok\ndct\u00a0=\u00a0{'Student'\u00a0:\u00a0'Ajay',\u00a0'Age'\u00a0:\u00a023}\nprint_it(**dct)\u00a0\n#\u00a0ok\nkwargs used\u00a0 in\u00a0 definition\u00a0 of\u00a0 print_it(\u00a0 ) is\u00a0 a\u00a0 dictionary\u00a0 containing\u00a0\nvariable\u00a0names\u00a0as\u00a0keys\u00a0and\u00a0their\u00a0values\u00a0as\u00a0values.\u00a0** indicates\u00a0that\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_242", "chunk_strategy": "fixed_size"}}, {"text": "'Student'\u00a0:\u00a0'Ajay',\u00a0'Age'\u00a0:\u00a023}\nprint_it(**dct)\u00a0\n#\u00a0ok\nkwargs used\u00a0 in\u00a0 definition\u00a0 of\u00a0 print_it(\u00a0 ) is\u00a0 a\u00a0 dictionary\u00a0 containing\u00a0\nvariable\u00a0names\u00a0as\u00a0keys\u00a0and\u00a0their\u00a0values\u00a0as\u00a0values.\u00a0** indicates\u00a0that\u00a0it\u00a0\nwill\u00a0hold\u00a0all\u00a0the\u00a0arguments\u00a0passed\u00a0to\u00a0print_it(\u00a0).\u00a0\nx\nWe\u00a0can\u00a0use\u00a0any\u00a0other\u00a0names\u00a0in\u00a0place\u00a0of\u00a0args and\u00a0kwargs.\u00a0We\u00a0cannot\u00a0\nuse\u00a0more\u00a0than\u00a0one\u00a0args and\u00a0more\u00a0than\u00a0one\u00a0kwargs while\u00a0defining\u00a0a\u00a0\nfunction.\nx\nIf\u00a0 a\u00a0 function\u00a0 is\u00a0 to\u00a0receive\u00a0 required\u00a0 as\u00a0 well\u00a0 as\u00a0optional\u00a0 arguments\u00a0\nthen\u00a0they\u00a0must\u00a0occur\u00a0in\u00a0following\u00a0order:\n-\npositional\u00a0arguments\n-\nvariable-length\u00a0positional\u00a0arguments\n-\nkeyword\u00a0arguments\n-\nvariable-length\u00a0keyword\u00a0arguments\ndef print_it(i, j, *args, x, y, **kwargs) :\nprint( )\nprint(i, j, end = ' ')\nfor var in args :\nprint(var, end = ' ')\nprint(x, y, end = ' ')\nfor name, value in kwargs.items( ) :\nprint(name, value, end = ' ')\nChapter 13:\u00a0Functions\u00a0\n163\n#\u00a0nothing\u00a0goes\u00a0to\u00a0args,\u00a0kwargs\nprint_it(10, 20, x = 30, y = 40)\n#\u00a0100,\u00a0200\u00a0go\u00a0to\u00a0args,\u00a0nothing\u00a0goes\u00a0to\u00a0kwargs\nprint_it(10, 20, 1", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_243", "chunk_strategy": "fixed_size"}}, {"text": "rgs.items( ) :\nprint(name, value, end = ' ')\nChapter 13:\u00a0Functions\u00a0\n163\n#\u00a0nothing\u00a0goes\u00a0to\u00a0args,\u00a0kwargs\nprint_it(10, 20, x = 30, y = 40)\n#\u00a0100,\u00a0200\u00a0go\u00a0to\u00a0args,\u00a0nothing\u00a0goes\u00a0to\u00a0kwargs\nprint_it(10, 20, 100, 200, x = 30, y = 40)\n#\u00a0100,\u00a0200\u00a0go\u00a0to\u00a0args,\u00a0nothing\u00a0goes\u00a0to\u00a0kwargs\nprint_it(10, 20, 100, 200, y = 40, x = 30)\n#\u00a0100,\u00a0200\u00a0go\u00a0to\u00a0args.\u00a0'a' : 5,\u00a0' b'\u00a0: 6,\u00a0'c'\u00a0: 7\u00a0go\u00a0to\u00a0kwargs\nprint_it(10, 20, 100, 200, x = 30, y = 40, a = 5, b = 6, c = 7)\n# error,\u00a030\u00a040\u00a0go\u00a0to\u00a0args,\u00a0nothing\u00a0left\u00a0for\u00a0required\u00a0arguments\u00a0x,\u00a0y\u00a0\nprint_it(10, 20, 30, 40)\nx\nWhile\u00a0 defining\u00a0a\u00a0function\u00a0default\u00a0value\u00a0can\u00a0be\u00a0given\u00a0to\u00a0arguments.\u00a0\nDefault\u00a0 value\u00a0 will\u00a0 be\u00a0 used\u00a0 if\u00a0 we\u00a0 do\u00a0 not\u00a0 pass\u00a0 the\u00a0 value\u00a0 for\u00a0 that\u00a0\nargument\u00a0during\u00a0the\u00a0call.\u00a0\ndef\u00a0fun(a,\u00a0b\u00a0=\u00a0100,\u00a0c\u00a0=\u00a03.14) :\nreturn\u00a0a\u00a0+\u00a0b\u00a0+\u00a0c\nw\u00a0=\u00a0fun(10)\n# passes\u00a010\u00a0to\u00a0a,\u00a0b\u00a0is\u00a0taken\u00a0as\u00a0100,\u00a0c\u00a0as\u00a03.14\nx\u00a0=\u00a0fun(20,\u00a050)\n#\u00a0passes\u00a020,\u00a050\u00a0to\u00a0a,\u00a0b.\u00a0c\u00a0is\u00a0taken\u00a0as\u00a03.14\ny\u00a0=\u00a0fun(30,\u00a060,\u00a06.28)\n#\u00a0passes\u00a030,\u00a060,\u00a06.28\u00a0to\u00a0a,\u00a0b,\u00a0c\nz\u00a0=\u00a0fun(1,\u00a0c\u00a0=\u00a03,\u00a0b\u00a0=\u00a05) #\u00a0passes\u00a01\u00a0to\u00a0a,\u00a05\u00a0to\u00a0b,\u00a03\u00a0to\u00a0c\nx\nNote\u00a0 t", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_244", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0as\u00a0100,\u00a0c\u00a0as\u00a03.14\nx\u00a0=\u00a0fun(20,\u00a050)\n#\u00a0passes\u00a020,\u00a050\u00a0to\u00a0a,\u00a0b.\u00a0c\u00a0is\u00a0taken\u00a0as\u00a03.14\ny\u00a0=\u00a0fun(30,\u00a060,\u00a06.28)\n#\u00a0passes\u00a030,\u00a060,\u00a06.28\u00a0to\u00a0a,\u00a0b,\u00a0c\nz\u00a0=\u00a0fun(1,\u00a0c\u00a0=\u00a03,\u00a0b\u00a0=\u00a05) #\u00a0passes\u00a01\u00a0to\u00a0a,\u00a05\u00a0to\u00a0b,\u00a03\u00a0to\u00a0c\nx\nNote\u00a0 that\u00a0while\u00a0defining\u00a0 a\u00a0function\u00a0default\u00a0arguments\u00a0 must\u00a0follow\u00a0\nnon-default\u00a0arguments.\nUnpacking\u00a0Arguments\nx\nSuppose\u00a0 a\u00a0 function\u00a0 is\u00a0 expecting\u00a0 positional\u00a0 arguments\u00a0 and\u00a0 the\u00a0\narguments\u00a0to\u00a0be\u00a0passed\u00a0are\u00a0in\u00a0a\u00a0list,\u00a0tuple or\u00a0set.\u00a0In\u00a0such\u00a0a\u00a0case\u00a0we\u00a0\nneed\u00a0to\u00a0unpack\u00a0the\u00a0list/tuple/set using\u00a0*\u00a0operator\u00a0before\u00a0passing\u00a0it\u00a0\nto\u00a0the\u00a0function.\ndef\u00a0print_it(a,\u00a0b,\u00a0c,\u00a0d,\u00a0e)\u00a0:\nprint(a,\u00a0b,\u00a0c,\u00a0d,\u00a0e)\nlst\u00a0=\u00a0[10,\u00a020,\u00a030,\u00a040,\u00a050]\ntpl\u00a0=\u00a0('A',\u00a0'B',\u00a0'C',\u00a0'D',\u00a0'E')\ns\u00a0=\u00a0{1,\u00a02,\u00a03,\u00a04,\u00a05}\nprint_it(*lst)\n164\nLet\u00a0Us\u00a0Python\nprint_it(*tpl)\nprint_it(*s)\nx\nSuppose\u00a0 a\u00a0 function\u00a0 is\u00a0 expecting\u00a0 keyword\u00a0 arguments\u00a0 and\u00a0 the\u00a0\narguments\u00a0to\u00a0be\u00a0passed\u00a0are\u00a0in\u00a0a\u00a0dictionary.\u00a0In\u00a0such\u00a0a\u00a0case\u00a0we\u00a0need\u00a0\nto\u00a0unpack\u00a0the\u00a0dictionary\u00a0using\u00a0**\u00a0operator\u00a0before\u00a0passing\u00a0it\u00a0to\u00a0the\u00a0\nfunction.\ndef\u00a0print_it(name\u00a0=\u00a0'Sanjay',\u00a0marks\u00a0=\u00a075)\u00a0:\nprint(name,\u00a0m", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_245", "chunk_strategy": "fixed_size"}}, {"text": "ments\u00a0to\u00a0be\u00a0passed\u00a0are\u00a0in\u00a0a\u00a0dictionary.\u00a0In\u00a0such\u00a0a\u00a0case\u00a0we\u00a0need\u00a0\nto\u00a0unpack\u00a0the\u00a0dictionary\u00a0using\u00a0**\u00a0operator\u00a0before\u00a0passing\u00a0it\u00a0to\u00a0the\u00a0\nfunction.\ndef\u00a0print_it(name\u00a0=\u00a0'Sanjay',\u00a0marks\u00a0=\u00a075)\u00a0:\nprint(name,\u00a0marks)\nd\u00a0=\u00a0{'name'\u00a0:\u00a0'Anil',\u00a0'marks'\u00a0:\u00a050}\nprint_it(*d)\u00a0\nprint_it(**d)\nThe\u00a0first\u00a0call\u00a0to\u00a0print_it(\u00a0) passes\u00a0keys\u00a0to\u00a0it,\u00a0whereas,\u00a0the\u00a0second\u00a0call\u00a0\npasses\u00a0values.\n____________________________________________________________________\nProblem\u00a013.1\nWrite\u00a0a\u00a0program\u00a0to\u00a0receive\u00a0three\u00a0integers\u00a0from\u00a0keyboard\u00a0and\u00a0get\u00a0their\u00a0\nsum\u00a0 and\u00a0 product\u00a0 calculated\u00a0 through\u00a0 a\u00a0 user-defined\u00a0 function\u00a0\ncal_sum_prod(\u00a0).\nProgram\ndef\u00a0cal_sum_prod(x,\u00a0y,\u00a0z)\u00a0:\nss\u00a0=\u00a0x\u00a0+\u00a0y\u00a0+\u00a0z\u00a0\npp\u00a0=\u00a0x\u00a0*\u00a0y\u00a0*\u00a0z\nreturn\u00a0ss,\u00a0pp\n#\u00a0or\u00a0return(ss,\u00a0pp)\na\u00a0=\u00a0int(input('Enter\u00a0a:\u00a0'))\nb\u00a0=\u00a0int(input('Enter\u00a0b:\u00a0'))\nc\u00a0=\u00a0int(input('Enter\u00a0c:\u00a0'))\u00a0\ns,\u00a0p\u00a0=\u00a0cal_sum_prod(a,\u00a0b,\u00a0c)\u00a0\nprint(s,\u00a0p)\nChapter 13:\u00a0Functions\u00a0\n165\nOutput\nEnter\u00a0a:\u00a010\nEnter\u00a0b:\u00a020\nEnter\u00a0c:\u00a030\n60\u00a06000\nTips\nx\nMultiple\u00a0values\u00a0can\u00a0be\u00a0returned\u00a0from\u00a0a\u00a0function\u00a0as\u00a0a tuple.\n______________________________", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_246", "chunk_strategy": "fixed_size"}}, {"text": "od(a,\u00a0b,\u00a0c)\u00a0\nprint(s,\u00a0p)\nChapter 13:\u00a0Functions\u00a0\n165\nOutput\nEnter\u00a0a:\u00a010\nEnter\u00a0b:\u00a020\nEnter\u00a0c:\u00a030\n60\u00a06000\nTips\nx\nMultiple\u00a0values\u00a0can\u00a0be\u00a0returned\u00a0from\u00a0a\u00a0function\u00a0as\u00a0a tuple.\n____________________________________________________________________\nProblem\u00a013.2\nPangram\u00a0is\u00a0 a\u00a0sentence\u00a0that\u00a0 uses\u00a0every\u00a0 letter\u00a0of\u00a0 the\u00a0alphabet.\u00a0 Write\u00a0a\u00a0\nprogram\u00a0that\u00a0checks\u00a0whether\u00a0a\u00a0given\u00a0string\u00a0is\u00a0pangram\u00a0or\u00a0not,\u00a0through\u00a0a\u00a0\nuser-defined\u00a0function\u00a0ispangram(\u00a0).\nProgram\ndef\u00a0ispangram(s)\u00a0:\nalphaset\u00a0=\u00a0set('abcdefghijklmnopqrstuvwxyz')\nreturn\u00a0alphaset\u00a0<=\u00a0set(s.lower( ))\nprint(ispangram('The\u00a0quick\u00a0brown\u00a0fox\u00a0jumps\u00a0over\u00a0the\u00a0lazy\u00a0dog'))\nprint(ispangram('Crazy\u00a0 Fredrick\u00a0 bought\u00a0 many\u00a0 very\u00a0 exquisite\u00a0 opal\u00a0\njewels'))\nOutput\nTrue\nTrue\nTips\nx\nset(\u00a0 ) converts\u00a0 the\u00a0 string\u00a0 into\u00a0 a\u00a0 set\u00a0 of\u00a0 characters\u00a0 present\u00a0 in\u00a0 the\u00a0\nstring.\nx\n<=\u00a0checks\u00a0whether\u00a0alphaset is\u00a0a\u00a0subset\u00a0of\u00a0the\u00a0given\u00a0string.\n____________________________________________________________________\nProblem\u00a013.3\nWrite\u00a0a\u00a0Python\u00a0program\u00a0that\u00a0accepts\u00a0 a\u00a0hyphen-separated\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_247", "chunk_strategy": "fixed_size"}}, {"text": "x\n<=\u00a0checks\u00a0whether\u00a0alphaset is\u00a0a\u00a0subset\u00a0of\u00a0the\u00a0given\u00a0string.\n____________________________________________________________________\nProblem\u00a013.3\nWrite\u00a0a\u00a0Python\u00a0program\u00a0that\u00a0accepts\u00a0 a\u00a0hyphen-separated\u00a0sequence\u00a0of\u00a0\nwords\u00a0as\u00a0input\u00a0 and\u00a0calls a\u00a0function\u00a0convert(\u00a0) which\u00a0converts\u00a0 it\u00a0into\u00a0a\u00a0\n166\nLet\u00a0Us\u00a0Python\nhyphen-separated\u00a0 sequence\u00a0 after\u00a0 sorting\u00a0 them\u00a0 alphabetically. For\u00a0\nexample,\u00a0if\u00a0the\u00a0input\u00a0string\u00a0is\u00a0\n'here-come-the-dots-followed-by-dashes'\nthen,\u00a0the\u00a0converted\u00a0string\u00a0should\u00a0be\u00a0\n'by-come-dashes-dots-followed-here-the'\nProgram\ndef\u00a0convert(s1)\u00a0:\nitems = [s for\u00a0s in\u00a0s1.split('-')]\nitems.sort( )\ns2\u00a0=\u00a0'-'.join(items)\nreturn\u00a0s2\u00a0\ns\u00a0=\u00a0'here-come-the-dots-followed-by-dashes'\nt\u00a0=\u00a0convert(s)\nprint(t)\nOutput\nby-come-dashes-dots-followed-here-the\nTips\nx\nWe\u00a0have\u00a0used\u00a0list\u00a0comprehension\u00a0to\u00a0create\u00a0a\u00a0list\u00a0of\u00a0words\u00a0present\u00a0in\u00a0\nthe\u00a0string\u00a0s1.\nx\nThe\u00a0join(\u00a0) method\u00a0returns\u00a0a\u00a0string\u00a0concatenated\u00a0with\u00a0the\u00a0elements\u00a0\nof\u00a0an\u00a0iterable. In\u00a0our\u00a0case\u00a0the\u00a0iterable\u00a0is\u00a0the\u00a0list\u00a0called\u00a0items.\n_______________________", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_248", "chunk_strategy": "fixed_size"}}, {"text": "ist\u00a0of\u00a0words\u00a0present\u00a0in\u00a0\nthe\u00a0string\u00a0s1.\nx\nThe\u00a0join(\u00a0) method\u00a0returns\u00a0a\u00a0string\u00a0concatenated\u00a0with\u00a0the\u00a0elements\u00a0\nof\u00a0an\u00a0iterable. In\u00a0our\u00a0case\u00a0the\u00a0iterable\u00a0is\u00a0the\u00a0list\u00a0called\u00a0items.\n____________________________________________________________________\nProblem\u00a013.4\nWrite\u00a0a\u00a0Python\u00a0function\u00a0to\u00a0create\u00a0and\u00a0return\u00a0a\u00a0list\u00a0containing\u00a0tuples\u00a0of\u00a0\nthe\u00a0form\u00a0(x,\u00a0x2,\u00a0x3)\u00a0for\u00a0all\u00a0x\u00a0between\u00a01\u00a0and\u00a020\u00a0(both\u00a0included).\nProgram\ndef\u00a0generate_list( ):\nlst\u00a0=\u00a0list(\u00a0)\n#\u00a0or\u00a0lst\u00a0=\u00a0[\u00a0]\nfor\u00a0i\u00a0in\u00a0range(1, 11):\nlst.append((i,\u00a0i\u00a0**\u00a02,\u00a0i\u00a0**\u00a03))\nChapter 13:\u00a0Functions\u00a0\n167\nreturn\u00a0lst\nl\u00a0=\u00a0generate_list(\u00a0)\nprint(l)\nOutput\n[(1,\u00a01,\u00a01),\u00a0(2,\u00a04,\u00a08),\u00a0(3,\u00a09,\u00a027),\u00a0(4,\u00a016,\u00a064),\u00a0(5,\u00a025,\u00a0125),\u00a0(6,\u00a036,\u00a0216),\u00a0\n(7,\u00a049,\u00a0343),\u00a0(8,\u00a064,\u00a0512),\u00a0(9,\u00a081,\u00a0729),\u00a0(10,\u00a0100,\u00a01000)]\nTips\nx\nrange(1,\u00a011) produces\u00a0a\u00a0list\u00a0of\u00a0numbers\u00a0from\u00a01\u00a0to\u00a010.\nx\nappend(\u00a0) adds\u00a0a\u00a0new\u00a0tuple\u00a0to\u00a0the\u00a0list\u00a0in\u00a0each\u00a0iteration.\n____________________________________________________________________\nProblem\u00a013.5\nA\u00a0 palindrome\u00a0 is\u00a0 a\u00a0 word\u00a0 or\u00a0 phrase\u00a0 which\u00a0 reads\u00a0 the\u00a0 same\u00a0 in\u00a0 both\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_249", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0a\u00a0new\u00a0tuple\u00a0to\u00a0the\u00a0list\u00a0in\u00a0each\u00a0iteration.\n____________________________________________________________________\nProblem\u00a013.5\nA\u00a0 palindrome\u00a0 is\u00a0 a\u00a0 word\u00a0 or\u00a0 phrase\u00a0 which\u00a0 reads\u00a0 the\u00a0 same\u00a0 in\u00a0 both\u00a0\ndirections. Given\u00a0below\u00a0are\u00a0some\u00a0palindromic\u00a0strings:\ndeed\nlevel\nMalayalam\nRats\u00a0live\u00a0on\u00a0no\u00a0evil\u00a0star\nMurder\u00a0for\u00a0a\u00a0jar\u00a0of\u00a0red\u00a0rum\nWrite\u00a0a\u00a0 program\u00a0that\u00a0 defines\u00a0 a\u00a0function\u00a0ispalindrome(\u00a0 ) which\u00a0checks\u00a0\nwhether\u00a0a\u00a0given\u00a0string\u00a0is\u00a0a\u00a0palindrome\u00a0or\u00a0not.\u00a0Ignore\u00a0spaces\u00a0and\u00a0case\u00a0\nmismatch\u00a0while\u00a0checking\u00a0for\u00a0palindrome.\u00a0\nProgram\ndef\u00a0ispalindrome(s):\nt\u00a0=\u00a0s.lower(\u00a0)\nleft\u00a0=\u00a00\nright\u00a0=\u00a0len(t)\u00a0- 1\nwhile\u00a0right\u00a0>=\u00a0left\u00a0:\nif\u00a0t[left]\u00a0==\u00a0'\u00a0'\u00a0:\nleft\u00a0+=\u00a01\nif\u00a0t[right]\u00a0==\u00a0'\u00a0'\u00a0:\nright\u00a0-=\u00a01\n168\nLet\u00a0Us\u00a0Python\nif\u00a0t[left]\u00a0!=\u00a0t[right]:\nreturn\u00a0False\nleft\u00a0+=\u00a01\nright\u00a0-=\u00a01\nreturn\u00a0True\nprint(ispalindrome('Malayalam'))\nprint(ispalindrome('Rats\u00a0live\u00a0on\u00a0no\u00a0evil\u00a0star'))\nprint(ispalindrome('Murder\u00a0for\u00a0a\u00a0jar\u00a0of\u00a0red\u00a0rum'))\nOutput\nTrue\nTrue\nTrue\nTips\nx\nSince\u00a0strings\u00a0are\u00a0immutable\u00a0the\u00a0string\u00a0converted\u00a0to\u00a0lowercase\u00a0has\u00a0to\u00a0\nbe\u00a0colle", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_250", "chunk_strategy": "fixed_size"}}, {"text": "spalindrome('Rats\u00a0live\u00a0on\u00a0no\u00a0evil\u00a0star'))\nprint(ispalindrome('Murder\u00a0for\u00a0a\u00a0jar\u00a0of\u00a0red\u00a0rum'))\nOutput\nTrue\nTrue\nTrue\nTips\nx\nSince\u00a0strings\u00a0are\u00a0immutable\u00a0the\u00a0string\u00a0converted\u00a0to\u00a0lowercase\u00a0has\u00a0to\u00a0\nbe\u00a0collected\u00a0in\u00a0another\u00a0string\u00a0t.\n____________________________________________________________________\nProblem\u00a013.6\nWrite\u00a0a\u00a0program\u00a0that\u00a0defines\u00a0a\u00a0function\u00a0convert(\u00a0) that\u00a0receives\u00a0a\u00a0string\u00a0\ncontaining\u00a0 a\u00a0 sequence\u00a0 of\u00a0 whitespace\u00a0 separated\u00a0 words and\u00a0 returns\u00a0 a\u00a0\nstring\u00a0 after\u00a0 removing\u00a0 all\u00a0 duplicate\u00a0 words\u00a0 and\u00a0 sorting\u00a0 them\u00a0\nalphanumerically.\nFor\u00a0example,\u00a0if\u00a0the\u00a0string\u00a0passed\u00a0to\u00a0convert(\u00a0) is\u00a0\ns\u00a0=\u00a0'Sakhi\u00a0 was\u00a0a\u00a0singer\u00a0because\u00a0her\u00a0mother\u00a0was\u00a0a\u00a0singer,\u00a0 and\u00a0Sakhi\\'s\u00a0\nmother\u00a0was\u00a0a\u00a0singer\u00a0because\u00a0her\u00a0father\u00a0was\u00a0a\u00a0singer'\nthen,\u00a0the\u00a0output\u00a0should\u00a0be:\nSakhi\u00a0Sakhi's\u00a0a\u00a0and\u00a0because\u00a0father\u00a0her\u00a0mother\u00a0singer\u00a0singer,\u00a0was\nProgram\ndef\u00a0convert(s)\u00a0:\nwords\u00a0=\u00a0[word\u00a0for\u00a0word\u00a0in\u00a0s.split(' ')]\nreturn\u00a0' '.join(sorted(list(set(words))))\nChapter 13:\u00a0Functions\u00a0\n169\ns\u00a0=\u00a0 'I\u00a0felt\u00a0 happy\u00a0 because\u00a0I\u00a0 saw\u00a0 the\u00a0 others\u00a0we", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_251", "chunk_strategy": "fixed_size"}}, {"text": "er\u00a0singer,\u00a0was\nProgram\ndef\u00a0convert(s)\u00a0:\nwords\u00a0=\u00a0[word\u00a0for\u00a0word\u00a0in\u00a0s.split(' ')]\nreturn\u00a0' '.join(sorted(list(set(words))))\nChapter 13:\u00a0Functions\u00a0\n169\ns\u00a0=\u00a0 'I\u00a0felt\u00a0 happy\u00a0 because\u00a0I\u00a0 saw\u00a0 the\u00a0 others\u00a0were\u00a0 happy\u00a0 and\u00a0 because\u00a0 I\u00a0\nknew\u00a0I\u00a0should\u00a0feel\u00a0happy,\u00a0but\u00a0I\u00a0wasn\\'t\u00a0really\u00a0happy'\nt\u00a0=\u00a0convert(s)\nprint(t)\ns\u00a0=\u00a0'Sakhi\u00a0 was\u00a0a\u00a0singer\u00a0because\u00a0her\u00a0mother\u00a0 was\u00a0a\u00a0singer,\u00a0and\u00a0Sakhi\\'s\u00a0\nmother\u00a0was\u00a0a\u00a0singer\u00a0because\u00a0her\u00a0father\u00a0was\u00a0a\u00a0singer'\nt\u00a0=\u00a0convert(s)\nprint(t)\nOutput\nI\u00a0and\u00a0because\u00a0but\u00a0feel\u00a0felt\u00a0happy\u00a0happy,\u00a0knew\u00a0others\u00a0really\u00a0saw\u00a0should\u00a0\nthe\u00a0wasn't\u00a0were\nSakhi\u00a0Sakhi's\u00a0a\u00a0and\u00a0because\u00a0father\u00a0her\u00a0mother\u00a0singer\u00a0singer,\u00a0was\nTips\nx\nset(\u00a0) removes duplicate\u00a0data\u00a0automatically.\nx\nlist(\u00a0) converts\u00a0the\u00a0set\u00a0into\u00a0a\u00a0list.\nx\nsorted(\u00a0) sorts\u00a0the\u00a0list\u00a0data and\u00a0returns\u00a0sorted\u00a0list.\nx\nSorted\u00a0 data\u00a0list\u00a0is\u00a0converted\u00a0to\u00a0a\u00a0string\u00a0 using a\u00a0 str method join(\u00a0),\u00a0\nappending\u00a0a\u00a0space\u00a0at\u00a0the\u00a0end\u00a0of\u00a0each\u00a0word,\u00a0except\u00a0the\u00a0last.\n____________________________________________________________________\nProblem\u00a013.7\nWrite\u00a0a\u00a0program\u00a0t", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_252", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0a\u00a0string\u00a0 using a\u00a0 str method join(\u00a0),\u00a0\nappending\u00a0a\u00a0space\u00a0at\u00a0the\u00a0end\u00a0of\u00a0each\u00a0word,\u00a0except\u00a0the\u00a0last.\n____________________________________________________________________\nProblem\u00a013.7\nWrite\u00a0a\u00a0program\u00a0that\u00a0defines\u00a0a\u00a0function\u00a0count_alphabets_digits(\u00a0) that\u00a0\naccepts\u00a0a\u00a0string\u00a0and\u00a0calculates\u00a0the\u00a0number\u00a0of\u00a0alphabets and\u00a0digits\u00a0in\u00a0it.\u00a0It\u00a0\nshould\u00a0 return\u00a0these\u00a0values\u00a0 as\u00a0a\u00a0dictionary.\u00a0 Call\u00a0 this\u00a0function\u00a0for\u00a0 some\u00a0\nsample\u00a0strings.\nProgram\ndef\u00a0count_alphabets_digits(s)\u00a0:\nd={'Digits' :\u00a00,\u00a0'Alphabets' :\u00a00}\nfor\u00a0ch\u00a0in\u00a0s:\nif\u00a0ch.isalpha( ) :\nd['Alphabets']\u00a0+=\u00a01\nelif\u00a0ch.isdigit( ) :\nd['Digits']\u00a0+=\u00a01\n170\nLet\u00a0Us\u00a0Python\nelse :\npass\nreturn(d)\nd\u00a0=\u00a0count_alphabets_digits('James\u00a0Bond\u00a0007')\u00a0\nprint(d)\nd\u00a0=\u00a0count_alphabets_digits('Kholi\u00a0Number\u00a0420')\u00a0\nprint(d)\nOutput\n{'Digits':\u00a03,\u00a0'Alphabets':\u00a09}\n{'Digits':\u00a03,\u00a0'Alphabets':\u00a011}\nTips\nx\npass doesn't\u00a0do\u00a0anything\u00a0on\u00a0execution.\n____________________________________________________________________\nProblem\u00a013.8\nWrite\u00a0 a\u00a0 program\u00a0 that\u00a0 defines\u00a0 a\u00a0 function\u00a0 called\u00a0 freque", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_253", "chunk_strategy": "fixed_size"}}, {"text": "bets':\u00a011}\nTips\nx\npass doesn't\u00a0do\u00a0anything\u00a0on\u00a0execution.\n____________________________________________________________________\nProblem\u00a013.8\nWrite\u00a0 a\u00a0 program\u00a0 that\u00a0 defines\u00a0 a\u00a0 function\u00a0 called\u00a0 frequency(\u00a0 ) which\u00a0\ncomputes\u00a0the\u00a0frequency\u00a0of\u00a0words\u00a0present\u00a0in\u00a0a\u00a0string\u00a0passed\u00a0to\u00a0it.\u00a0The\u00a0\nfrequencies\u00a0should\u00a0be\u00a0returned\u00a0in\u00a0sorted\u00a0order\u00a0by\u00a0words\u00a0in\u00a0the\u00a0string.\nProgram\ndef\u00a0frequency(s)\u00a0:\nfreq\u00a0=\u00a0{\u00a0}\nfor\u00a0word\u00a0in\u00a0s.split(\u00a0)\u00a0:\nfreq[word]\u00a0=\u00a0freq.get(word,\u00a00)\u00a0+\u00a01\nreturn\u00a0freq\nsentence\u00a0=\u00a0'It\u00a0is\u00a0true\u00a0for\u00a0all\u00a0that\u00a0that\u00a0that\u00a0that\u00a0\\\nthat\u00a0that\u00a0that\u00a0refers\u00a0to\u00a0is\u00a0not\u00a0the\u00a0same\u00a0that\u00a0\\\nthat\u00a0that\u00a0that\u00a0refers\u00a0to'\nd\u00a0=\u00a0frequency(sentence)\nwords\u00a0=\u00a0sorted(d)\nfor\u00a0w\u00a0in\u00a0words:\nprint\u00a0('%s:%d' %\u00a0(w,\u00a0d[w]))\nChapter 13:\u00a0Functions\u00a0\n171\nOutput\nIt:1\nall:1\nfor:1\nis:2\nnot:1\nrefers:2\nsame:1\nthat:11\nthe:1\nto:2\ntrue:1\nTips\nx\nWe\u00a0 did\u00a0not\u00a0use\u00a0freq[word]\u00a0=\u00a0 freq[word]\u00a0+\u00a01 because\u00a0we\u00a0have\u00a0not\u00a0\ninitialized\u00a0all\u00a0word\u00a0counts\u00a0for\u00a0each\u00a0unique\u00a0word\u00a0to\u00a00\u00a0to\u00a0begin\u00a0with.\nx\nWhen\u00a0we\u00a0use\u00a0freq.get(word,\u00a00),\u00a0get(\u00a0) searches\u00a0the\u00a0word.\u00a0If\u00a0it\u00a0is\u00a0not\u00a0\nf", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_254", "chunk_strategy": "fixed_size"}}, {"text": "ot\u00a0use\u00a0freq[word]\u00a0=\u00a0 freq[word]\u00a0+\u00a01 because\u00a0we\u00a0have\u00a0not\u00a0\ninitialized\u00a0all\u00a0word\u00a0counts\u00a0for\u00a0each\u00a0unique\u00a0word\u00a0to\u00a00\u00a0to\u00a0begin\u00a0with.\nx\nWhen\u00a0we\u00a0use\u00a0freq.get(word,\u00a00),\u00a0get(\u00a0) searches\u00a0the\u00a0word.\u00a0If\u00a0it\u00a0is\u00a0not\u00a0\nfound,\u00a0the\u00a0second\u00a0parameter,\u00a0i.e.\u00a00\u00a0will\u00a0be\u00a0returned.\u00a0Thus,\u00a0for\u00a0first\u00a0\ncall\u00a0for\u00a0each\u00a0unique\u00a0word,\u00a0the\u00a0word\u00a0count\u00a0is\u00a0properly\u00a0initialized\u00a0to\u00a00.\nx\nsorted(\u00a0) returns\u00a0a\u00a0sorted\u00a0list\u00a0of\u00a0key\u00a0values\u00a0in\u00a0the\u00a0dictionary.\nx\nw, d[w] yields\u00a0 the\u00a0 word\u00a0 and\u00a0 its\u00a0 frequency\u00a0 count\u00a0 stored\u00a0 in\u00a0 the\u00a0\ndictionary\u00a0d.\n____________________________________________________________________\nProblem\u00a013.9\nWrite\u00a0a\u00a0program\u00a0that\u00a0defines\u00a0two\u00a0functions\u00a0called\u00a0create_sent1( ) and\u00a0\ncreate_sent2(\u00a0).\u00a0Both\u00a0receive\u00a0following\u00a03\u00a0lists:\nsubjects\u00a0=\u00a0['He',\u00a0'She']\nverbs\u00a0=\u00a0['loves',\u00a0'hates']\nobjects\u00a0=\u00a0['TV\u00a0Serials','Netflix']\nBoth\u00a0functions\u00a0 should\u00a0form\u00a0sentences\u00a0 by\u00a0 picking\u00a0elements\u00a0 from\u00a0these\u00a0\nlists\u00a0 and\u00a0 return\u00a0 them.\u00a0 Use\u00a0 for loops\u00a0 in\u00a0 create_sent1(\u00a0 ) and\u00a0 list\u00a0\ncomprehension\u00a0in\u00a0create_sent2(\u00a0).\n172\nLet\u00a0Us\u00a0Python\nProgram\ndef\u00a0cr", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_255", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0 should\u00a0form\u00a0sentences\u00a0 by\u00a0 picking\u00a0elements\u00a0 from\u00a0these\u00a0\nlists\u00a0 and\u00a0 return\u00a0 them.\u00a0 Use\u00a0 for loops\u00a0 in\u00a0 create_sent1(\u00a0 ) and\u00a0 list\u00a0\ncomprehension\u00a0in\u00a0create_sent2(\u00a0).\n172\nLet\u00a0Us\u00a0Python\nProgram\ndef\u00a0create_sent1(sub,\u00a0ver,\u00a0obj) :\nlst\u00a0=\u00a0[\u00a0]\nfor\u00a0i\u00a0in\u00a0range(len(sub)) :\nfor\u00a0j\u00a0in\u00a0range(len(ver)) :\nfor\u00a0k\u00a0in\u00a0range(len(obj)) :\nsent\u00a0=\u00a0sub[i]\u00a0+\u00a0'\u00a0'\u00a0+\u00a0ver[j]\u00a0+\u00a0'\u00a0'\u00a0+\u00a0obj[k]\nlst.append(sent)\nreturn\u00a0lst\ndef\u00a0create_sent2(sub,\u00a0ver,\u00a0obj) :\nreturn\u00a0[(s\u00a0+\u00a0' ' +\u00a0v\u00a0+\u00a0'\u00a0 ' +\u00a0o)\u00a0for\u00a0s\u00a0in\u00a0sub\u00a0for\u00a0v\u00a0in\u00a0ver\u00a0for\u00a0o\u00a0in\u00a0obj]\nsubjects\u00a0=\u00a0['He',\u00a0'She']\nverbs\u00a0=\u00a0['loves',\u00a0'hates']\nobjects\u00a0=\u00a0['TV\u00a0Serials','Netflix']\nlst1\u00a0=\u00a0create_sent1(\u00a0subjects,\u00a0verbs,\u00a0objects)\nfor\u00a0l\u00a0in\u00a0lst1\u00a0:\nprint(l)\nprint(\u00a0)\nlst2\u00a0=\u00a0create_sent2(\u00a0subjects,\u00a0verbs,\u00a0objects)\nfor\u00a0l\u00a0in\u00a0lst2\u00a0:\nprint(l)\nOutput\nHe\u00a0loves\u00a0TV\u00a0Serials\nHe\u00a0loves\u00a0Netflix\nHe\u00a0hates\u00a0TV\u00a0Serials\nHe\u00a0hates\u00a0Netflix\nShe\u00a0loves\u00a0TV\u00a0Serials\nShe\u00a0loves\u00a0Netflix\nShe\u00a0hates\u00a0TV\u00a0Serials\nShe\u00a0hates\u00a0Netflix\nHe\u00a0loves\u00a0TV\u00a0Serials\nHe\u00a0loves\u00a0Netflix\nHe\u00a0hates\u00a0TV\u00a0Serials\nChapter 13:\u00a0Functions\u00a0\n173\nHe\u00a0hates\u00a0Netflix\nSh", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_256", "chunk_strategy": "fixed_size"}}, {"text": "s\nHe\u00a0hates\u00a0Netflix\nShe\u00a0loves\u00a0TV\u00a0Serials\nShe\u00a0loves\u00a0Netflix\nShe\u00a0hates\u00a0TV\u00a0Serials\nShe\u00a0hates\u00a0Netflix\nHe\u00a0loves\u00a0TV\u00a0Serials\nHe\u00a0loves\u00a0Netflix\nHe\u00a0hates\u00a0TV\u00a0Serials\nChapter 13:\u00a0Functions\u00a0\n173\nHe\u00a0hates\u00a0Netflix\nShe\u00a0loves\u00a0TV\u00a0Serials\nShe\u00a0loves\u00a0Netflix\nShe\u00a0hates\u00a0TV\u00a0Serials\nShe\u00a0hates\u00a0Netflix\n____________________________________________________________________\n[A] Answer\u00a0the\u00a0following questions:\n(a) Write\u00a0a\u00a0program\u00a0that\u00a0defines\u00a0a\u00a0function\u00a0count_lower_upper(\u00a0) that\u00a0\naccepts\u00a0 a\u00a0 string\u00a0 and\u00a0 calculates\u00a0 the\u00a0 number\u00a0 of\u00a0 uppercase\u00a0 and\u00a0\nlowercase\u00a0 alphabets in\u00a0 it.\u00a0 It\u00a0 should\u00a0 return\u00a0 these\u00a0 values\u00a0 as\u00a0 a\u00a0\ndictionary.\u00a0Call\u00a0this\u00a0function\u00a0for\u00a0some\u00a0sample\u00a0strings.\n(b) Write\u00a0a\u00a0program\u00a0that\u00a0defines\u00a0a\u00a0function\u00a0compute(\u00a0) that\u00a0calculates\u00a0\nthe\u00a0value\u00a0of\u00a0n\u00a0+\u00a0nn\u00a0+\u00a0nnn\u00a0+\u00a0nnnn,\u00a0where\u00a0n\u00a0is\u00a0digit\u00a0received\u00a0by\u00a0the\u00a0\nfunction.\u00a0Test\u00a0the\u00a0function\u00a0for\u00a0digits\u00a04\u00a0and\u00a07.\n(c) Write\u00a0 a\u00a0program\u00a0 that\u00a0 defines\u00a0 a\u00a0 function\u00a0create_array(\u00a0 ) to\u00a0 create\u00a0\nand\u00a0return\u00a0a\u00a03D\u00a0array\u00a0whose\u00a0dimensions\u00a0are\u00a0passed\u00a0to\u00a0the\u00a0function.\u00a0\nAlso\u00a0 initialize", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_257", "chunk_strategy": "fixed_size"}}, {"text": "Test\u00a0the\u00a0function\u00a0for\u00a0digits\u00a04\u00a0and\u00a07.\n(c) Write\u00a0 a\u00a0program\u00a0 that\u00a0 defines\u00a0 a\u00a0 function\u00a0create_array(\u00a0 ) to\u00a0 create\u00a0\nand\u00a0return\u00a0a\u00a03D\u00a0array\u00a0whose\u00a0dimensions\u00a0are\u00a0passed\u00a0to\u00a0the\u00a0function.\u00a0\nAlso\u00a0 initialize\u00a0each\u00a0element\u00a0 of\u00a0 this\u00a0 array\u00a0 to\u00a0 a\u00a0 value\u00a0passed\u00a0 to\u00a0 the\u00a0\nfunction.\n(d) Write\u00a0a\u00a0program\u00a0that\u00a0defines\u00a0a\u00a0function\u00a0create_list(\u00a0) to\u00a0create\u00a0and\u00a0\nreturn\u00a0a\u00a0list\u00a0which\u00a0is\u00a0an\u00a0intersection\u00a0of\u00a0two\u00a0lists\u00a0passed\u00a0to\u00a0it.\n(e) Write\u00a0a\u00a0program\u00a0that\u00a0defines\u00a0a\u00a0function\u00a0sanitize_list(\u00a0) to\u00a0remove\u00a0all\u00a0\nduplicate\u00a0entries\u00a0from\u00a0the\u00a0list\u00a0that\u00a0it\u00a0receives.\n(f) Which\u00a0of\u00a0the\u00a0calls\u00a0to\u00a0print_it(\u00a0) in\u00a0the\u00a0following\u00a0program\u00a0will\u00a0report\u00a0\nerrors.\ndef\u00a0print_it(i,\u00a0a,\u00a0s,\u00a0*args)\u00a0:\nprint(\u00a0)\nprint(i,\u00a0a,\u00a0s,\u00a0end\u00a0=\u00a0'\u00a0')\nfor\u00a0var\u00a0in\u00a0args\u00a0:\nprint(var,\u00a0end\u00a0=\u00a0'\u00a0')\nprint_it(10,\u00a03.14)\nprint_it(20,\u00a0s\u00a0=\u00a0'Hi',\u00a0a\u00a0=\u00a06.28)\nprint_it(a\u00a0=\u00a06.28,\u00a0s\u00a0=\u00a0'Hello',\u00a0i\u00a0=\u00a030)\nprint_it(40,\u00a02.35,\u00a0'Nag',\u00a0'Mum',\u00a010)\n174\nLet\u00a0Us\u00a0Python\n(g) Which\u00a0 of\u00a0 the\u00a0 calls\u00a0 to\u00a0 fun(\u00a0 ) in\u00a0 the\u00a0 following\u00a0 program\u00a0 will\u00a0 report\u00a0\nerrors.\ndef\u00a0fun(a,\u00a0*args,\u00a0s\u00a0=\u00a0'!')\u00a0:\nprint(", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_258", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0=\u00a0'Hello',\u00a0i\u00a0=\u00a030)\nprint_it(40,\u00a02.35,\u00a0'Nag',\u00a0'Mum',\u00a010)\n174\nLet\u00a0Us\u00a0Python\n(g) Which\u00a0 of\u00a0 the\u00a0 calls\u00a0 to\u00a0 fun(\u00a0 ) in\u00a0 the\u00a0 following\u00a0 program\u00a0 will\u00a0 report\u00a0\nerrors.\ndef\u00a0fun(a,\u00a0*args,\u00a0s\u00a0=\u00a0'!')\u00a0:\nprint(a,\u00a0s)\nfor\u00a0i\u00a0in\u00a0args\u00a0:\nprint(i,\u00a0s)\nfun(10)\nfun(10,\u00a020)\nfun(10,\u00a020,\u00a030)\nfun(10,\u00a020,\u00a030,\u00a040,\u00a0s\u00a0=\u00a0'+')\n[B] Attempt\u00a0the\u00a0following\u00a0questions:\n(a) What\u00a0is\u00a0being\u00a0passed\u00a0to\u00a0function\u00a0fun(\u00a0) in\u00a0the\u00a0following\u00a0code?\nint\u00a0a\u00a0=\u00a020\nlst\u00a0=\u00a0[10,\u00a020,\u00a030,\u00a040,\u00a050]\nfun(a,\u00a0lst)\n(b) Which\u00a0of\u00a0the\u00a0following\u00a0are\u00a0valid\u00a0return statements?\nreturn\u00a0(a,\u00a0b,\u00a0c)\nreturn\u00a0a\u00a0+\u00a0b\u00a0+\u00a0c\u00a0\nreturn a,\u00a0b,\u00a0c\n(c) What\u00a0will\u00a0be\u00a0the\u00a0output\u00a0of\u00a0the\u00a0following\u00a0program?\ndef\u00a0fun(\u00a0)\u00a0:\nprint('First\u00a0avatar')\nfun(\u00a0)\ndef\u00a0fun(\u00a0)\u00a0:\nprint('New\u00a0avatar')\nfun(\u00a0)\n(d) How\u00a0will\u00a0you\u00a0define\u00a0a\u00a0function\u00a0containing\u00a0three\u00a0return statements,\u00a0\neach\u00a0returning\u00a0a\u00a0different\u00a0type\u00a0of\u00a0value?\n(e) Can\u00a0function\u00a0definitions\u00a0 be\u00a0nested?\u00a0If\u00a0yes,\u00a0why\u00a0would\u00a0you\u00a0want\u00a0to\u00a0\ndo\u00a0so?\n(f) How\u00a0will\u00a0you\u00a0call\u00a0print_it(\u00a0) to\u00a0print\u00a0elements\u00a0of tpl?\ndef\u00a0print_it(a,\u00a0b,\u00a0c,\u00a0d,\u00a0e)\u00a0:\nprint(a,\u00a0b,\u00a0c,\u00a0d,\u00a0e)\nt", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_259", "chunk_strategy": "fixed_size"}}, {"text": "f\u00a0value?\n(e) Can\u00a0function\u00a0definitions\u00a0 be\u00a0nested?\u00a0If\u00a0yes,\u00a0why\u00a0would\u00a0you\u00a0want\u00a0to\u00a0\ndo\u00a0so?\n(f) How\u00a0will\u00a0you\u00a0call\u00a0print_it(\u00a0) to\u00a0print\u00a0elements\u00a0of tpl?\ndef\u00a0print_it(a,\u00a0b,\u00a0c,\u00a0d,\u00a0e)\u00a0:\nprint(a,\u00a0b,\u00a0c,\u00a0d,\u00a0e)\ntpl\u00a0=\u00a0('A',\u00a0'B',\u00a0'C',\u00a0'D',\u00a0'E')\nLet\u00a0Us\nPython\n175\nRecursion\nx\nRepetitions\nx\nTypes\u00a0of\u00a0Recursion\nx\nRecursive Function\nx\nRecursion\u00a0Limit\nx\nWhen\u00a0to\u00a0use\u00a0Recursion\nx\nIteration\u00a0to\u00a0Recursion\nx\nProblem\u00a0as\u00a0Similar\u00a0Sub-problems\u00a0\nx\nPrograms\nx\nRecursive\u00a0Factorial\u00a0Function\nx\nExercises\nx\nProblem\u00a0with\u00a0Unknown\u00a0Loops\n14\n\u201cTo\u00a0iterate\u00a0is\u00a0human,\u00a0to\u00a0recurse\u00a0divine...\u201d\n176\nLet\u00a0Us\u00a0Python\nRepetitions\nx\nThere\u00a0are\u00a0two\u00a0ways\u00a0to\u00a0repeat\u00a0a\u00a0set\u00a0of\u00a0statements\u00a0in\u00a0a\u00a0function:\n-\nBy\u00a0using\u00a0while or\u00a0for loop\n-\nBy\u00a0calling\u00a0the\u00a0function\u00a0from\u00a0within\u00a0itself\nx\nThe\u00a0first\u00a0method\u00a0is\u00a0known\u00a0as\u00a0iteration,\u00a0whereas\u00a0the\u00a0second\u00a0is\u00a0known\u00a0\nas\u00a0recursion.\nx\nThe\u00a0 functions\u00a0 that\u00a0 use\u00a0 iteration\u00a0 are\u00a0 called\u00a0 iterative\u00a0 functions\u00a0 and\u00a0\nthose\u00a0that\u00a0use\u00a0recursion\u00a0are\u00a0called\u00a0recursive\u00a0functions.\nRecursive\u00a0Function\nx\nA\u00a0Python\u00a0function\u00a0can\u00a0be\u00a0called\u00a0from\u00a0wit", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_260", "chunk_strategy": "fixed_size"}}, {"text": ".\nx\nThe\u00a0 functions\u00a0 that\u00a0 use\u00a0 iteration\u00a0 are\u00a0 called\u00a0 iterative\u00a0 functions\u00a0 and\u00a0\nthose\u00a0that\u00a0use\u00a0recursion\u00a0are\u00a0called\u00a0recursive\u00a0functions.\nRecursive\u00a0Function\nx\nA\u00a0Python\u00a0function\u00a0can\u00a0be\u00a0called\u00a0from\u00a0within\u00a0its\u00a0body.\u00a0When\u00a0we\u00a0do\u00a0so\u00a0\nit\u00a0is\u00a0called\u00a0a\u00a0recursive\u00a0function.\ndef\u00a0fun(\u00a0)\u00a0:\n#\u00a0some\u00a0statements\nfun(\u00a0)\u00a0 #\u00a0recursive\u00a0call\nx\nRecursive\u00a0call\u00a0keeps\u00a0calling\u00a0the\u00a0function\u00a0again\u00a0and\u00a0again,\u00a0leading to\u00a0\nan\u00a0infinite\u00a0loop.\u00a0\nx\nA provision\u00a0must\u00a0be\u00a0made\u00a0to\u00a0get\u00a0outside\u00a0this\u00a0infinite\u00a0recursive\u00a0loop.\u00a0\nThis\u00a0is\u00a0done\u00a0by\u00a0making\u00a0the\u00a0recursive\u00a0call\u00a0either\u00a0in\u00a0if\u00a0block\u00a0or\u00a0in\u00a0else\u00a0\nblock as\u00a0shown\u00a0below:\ndef\u00a0fun(\u00a0)\u00a0:\ndef\u00a0fun(\u00a0)\u00a0:\nif\u00a0condition\u00a0:\nif\u00a0condition\u00a0:\n#\u00a0some\u00a0statements\nfun(\u00a0)\nelse\nelse\nfun(\u00a0)\u00a0 #\u00a0recursive\u00a0call\n#\u00a0some\u00a0statements\nx\nThe\u00a0case\u00a0when\u00a0a\u00a0recursive\u00a0call\u00a0is\u00a0made\u00a0is\u00a0called\u00a0the\u00a0recursive\u00a0case,\u00a0\nwhereas\u00a0the\u00a0other\u00a0case\u00a0is\u00a0called\u00a0the\u00a0base\u00a0case.\u00a0\nx\nIf\u00a0recursive\u00a0call\u00a0is\u00a0made\u00a0in\u00a0if\u00a0block (recursive\u00a0case),\u00a0else\u00a0block\u00a0should\u00a0\ncontain\u00a0 the\u00a0 base\u00a0 case logic.\u00a0If\u00a0 recursive\u00a0 call\u00a0 is\u00a0made\u00a0 in\u00a0else\u00a0 block\n(recursive\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_261", "chunk_strategy": "fixed_size"}}, {"text": "her\u00a0case\u00a0is\u00a0called\u00a0the\u00a0base\u00a0case.\u00a0\nx\nIf\u00a0recursive\u00a0call\u00a0is\u00a0made\u00a0in\u00a0if\u00a0block (recursive\u00a0case),\u00a0else\u00a0block\u00a0should\u00a0\ncontain\u00a0 the\u00a0 base\u00a0 case logic.\u00a0If\u00a0 recursive\u00a0 call\u00a0 is\u00a0made\u00a0 in\u00a0else\u00a0 block\n(recursive\u00a0case),\u00a0if\u00a0block\u00a0should\u00a0contain\u00a0the\u00a0base\u00a0case logic.\nChapter 14:\u00a0Recursion\n177\nWhen\u00a0to\u00a0use\u00a0Recursion\nx\nRecursion\u00a0is\u00a0useful\u00a0in\u00a02 scenarios:\n-\nWhen\u00a0a\u00a0problem\u00a0can\u00a0be\u00a0solved\u00a0by\u00a0breaking\u00a0it\u00a0down\u00a0into\u00a0similar\u00a0\nsub-problems.\n-\nWhen\u00a0a\u00a0problem\u00a0requires\u00a0an\u00a0unknown\u00a0number\u00a0of\u00a0loops.\nx\nExamples\u00a0of\u00a0problem\u00a0as\u00a0similar\u00a0sub-problems:\n-\nFinding\u00a0factorial\u00a0value\u00a0of\u00a0a\u00a0number\n-\nFinding\u00a0sum\u00a0of\u00a0digits\u00a0of\u00a0an\u00a0integer\n-\nFinding\u00a0binary\u00a0equivalent\u00a0of\u00a0a\u00a0number\nx\nExamples\u00a0of\u00a0unknown\u00a0number\u00a0of\u00a0nested\u00a0loops:\n-\nFinding\u00a0all\u00a0combinations of\u00a01\u00a0to\u00a0n,\u00a0where\u00a0n\u00a0is\u00a0received\u00a0as\u00a0input\n-\nTraversing\u00a0a\u00a0binary\u00a0tree\u00a0data\u00a0structure\n-\nTraversing\u00a0a\u00a0graph\u00a0data\u00a0structure\nx\nIn\u00a0 this\u00a0 book\u00a0 we\u00a0 would\u00a0 cover\u00a0 both\u00a0 sets\u00a0 of\u00a0 problems\u00a0 that\u00a0 can\u00a0 be\u00a0\nsolved\u00a0using\u00a0recursion.\nProblem\u00a0as\u00a0Similar\u00a0Sub-problems\nx\nIn\u00a0problem\u00a0that\u00a0can\u00a0be\u00a0solved\u00a0by\u00a0breakin", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_262", "chunk_strategy": "fixed_size"}}, {"text": "g\u00a0a\u00a0graph\u00a0data\u00a0structure\nx\nIn\u00a0 this\u00a0 book\u00a0 we\u00a0 would\u00a0 cover\u00a0 both\u00a0 sets\u00a0 of\u00a0 problems\u00a0 that\u00a0 can\u00a0 be\u00a0\nsolved\u00a0using\u00a0recursion.\nProblem\u00a0as\u00a0Similar\u00a0Sub-problems\nx\nIn\u00a0problem\u00a0that\u00a0can\u00a0be\u00a0solved\u00a0by\u00a0breaking\u00a0it\u00a0down\u00a0into\u00a0similar\u00a0sub-\nproblems\u00a0the computation\u00a0of\u00a0a\u00a0function\u00a0is\u00a0described\u00a0in\u00a0terms\u00a0of\u00a0the\u00a0\nfunction\u00a0itself.\nx\nFor\u00a0example,\u00a0suppose\u00a0we\u00a0wish\u00a0to\u00a0calculate\u00a0factorial\u00a0value\u00a0of\u00a0n.\u00a0Then\nn!\u00a0=\u00a0n\u00a0*\u00a0(n\u00a0- 1)\u00a0*\u00a0(n\u00a0- 2)\u00a0*\u00a0(n\u00a0- 3)\u00a0*\u00a0...\u00a0*\u00a02\u00a0*\u00a01\nWe\u00a0can\u00a0write\u00a0this\u00a0as:\nn!\u00a0=\u00a01\u00a0\nif\u00a0n\u00a0=\u00a00\n=\u00a0n\u00a0*\u00a0(n\u00a0-1)!\u00a0\nif\u00a0n\u00a0>\u00a00\u00a0\nx\nIn\u00a0terms\u00a0of\u00a0function\u00a0this\u00a0can\u00a0be\u00a0written\u00a0as:\nfactorial(n)\u00a0=\u00a01\u00a0\nif\u00a0n\u00a0=\u00a00\n(base\u00a0case)\n=\u00a0n\u00a0*\u00a0factorial(n\u00a0- 1)\u00a0\nif\u00a0n\u00a0>\u00a00\n(recursive\u00a0case)\nx\nIf\u00a0we\u00a0are\u00a0to\u00a0obtain\u00a0sum\u00a0of\u00a0digits\u00a0of\u00a0an\u00a0integer\u00a0n, then\u00a0the\u00a0recursive\u00a0\nfunction\u00a0can\u00a0be\u00a0written\u00a0as\u00a0\nsumdig(n)\u00a0=\u00a00\u00a0\nif\u00a0n\u00a0=\u00a00 (base\u00a0case)\n=\u00a0n\u00a0%\u00a010\u00a0+\u00a0sumdig(n\u00a0/\u00a010)\u00a0\nif\u00a0n\u00a0>\u00a00 (recursive\u00a0case)\n178\nLet\u00a0Us\u00a0Python\nx\nFollowing\u00a0tips\u00a0will\u00a0help\u00a0you\u00a0understand\u00a0recursive\u00a0functions\u00a0better:\n-\nA\u00a0 fresh\u00a0 set\u00a0 of\u00a0 variables\u00a0 are\u00a0 born\u00a0 during\u00a0 each\u00a0 function\u00a0 call\u2014\nnormal\u00a0call\u00a0a", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_263", "chunk_strategy": "fixed_size"}}, {"text": "if\u00a0n\u00a0>\u00a00 (recursive\u00a0case)\n178\nLet\u00a0Us\u00a0Python\nx\nFollowing\u00a0tips\u00a0will\u00a0help\u00a0you\u00a0understand\u00a0recursive\u00a0functions\u00a0better:\n-\nA\u00a0 fresh\u00a0 set\u00a0 of\u00a0 variables\u00a0 are\u00a0 born\u00a0 during\u00a0 each\u00a0 function\u00a0 call\u2014\nnormal\u00a0call\u00a0as\u00a0well\u00a0as\u00a0recursive\u00a0call.\n-\nVariables\u00a0created\u00a0in\u00a0a\u00a0function\u00a0die\u00a0when\u00a0control\u00a0returns\u00a0from\u00a0a\u00a0\nfunction.\n-\nRecursive\u00a0function\u00a0may\u00a0or\u00a0may\u00a0not\u00a0have\u00a0a\u00a0return\u00a0statement.\n-\nTypically,\u00a0 during\u00a0 execution\u00a0 of\u00a0 a\u00a0 recursive\u00a0 function\u00a0 many\u00a0\nrecursive\u00a0calls\u00a0happen,\u00a0 so\u00a0several\u00a0 sets\u00a0of\u00a0variables\u00a0get\u00a0created.\u00a0\nThis\u00a0increases\u00a0the\u00a0space\u00a0requirement\u00a0of\u00a0the\u00a0function.\n-\nRecursive\u00a0 functions\u00a0 are\u00a0 inherently\u00a0 slow\u00a0 since\u00a0 passing\u00a0 value(s)\u00a0\nand\u00a0control\u00a0to\u00a0a\u00a0function\u00a0and\u00a0returning\u00a0value(s)\u00a0and\u00a0control\u00a0will\u00a0\nslow\u00a0down\u00a0the\u00a0execution\u00a0of\u00a0the\u00a0function.\n-\nRecursive calls\u00a0 terminate\u00a0 when\u00a0 the\u00a0 base\u00a0 case\u00a0 condition\u00a0 is\u00a0\nsatisfied.\nRecursive\u00a0Factorial\u00a0Function\nx\nA\u00a0simple\u00a0program\u00a0that\u00a0calculates\u00a0factorial\u00a0of\u00a0a\u00a0given\u00a0number\u00a0using\u00a0a\u00a0\nrecursive\u00a0function\u00a0is\u00a0given\u00a0below,\u00a0followed\u00a0by\u00a0a\u00a0brief\u00a0explanation\u00a0of\u00a0\nits\u00a0working.\u00a0\n", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_264", "chunk_strategy": "fixed_size"}}, {"text": "s\u00a0\nsatisfied.\nRecursive\u00a0Factorial\u00a0Function\nx\nA\u00a0simple\u00a0program\u00a0that\u00a0calculates\u00a0factorial\u00a0of\u00a0a\u00a0given\u00a0number\u00a0using\u00a0a\u00a0\nrecursive\u00a0function\u00a0is\u00a0given\u00a0below,\u00a0followed\u00a0by\u00a0a\u00a0brief\u00a0explanation\u00a0of\u00a0\nits\u00a0working.\u00a0\ndef\u00a0refact(n) :\nif\u00a0n\u00a0==\u00a00\u00a0:\u00a0\nreturn\u00a01\u00a0\nelse\u00a0:\np\u00a0=\u00a0n\u00a0*\u00a0refact(n\u00a0- 1)\nreturn\u00a0p\nnum\u00a0=\u00a0int(input('Enter\u00a0any\u00a0number:\u00a0'))\nfact\u00a0=\u00a0refact(num)\nprint('Factorial\u00a0value\u00a0=\u00a0',\u00a0fact)\nx\nSuppose\u00a02\u00a0is\u00a0supplied\u00a0as\u00a0input,\u00a0we\u00a0should\u00a0get\u00a0the\u00a0output\u00a0as\u00a02,\u00a0since\u00a0\n2!\u00a0evaluates\u00a0to\u00a02.\u00a0\nx\nIt\u00a0becomes\u00a0easier\u00a0to\u00a0follow\u00a0the\u00a0working\u00a0of\u00a0a\u00a0recursive\u00a0function\u00a0if\u00a0we\u00a0\nmake\u00a0copies\u00a0of\u00a0the\u00a0function\u00a0on\u00a0paper\u00a0and\u00a0then\u00a0perform\u00a0a\u00a0dry\u00a0run\u00a0of\u00a0\nthe\u00a0program\u00a0to\u00a0follow\u00a0the\u00a0control\u00a0flow.\u00a0In\u00a0reality\u00a0multiple\u00a0copies\u00a0of\u00a0\nfunction\u00a0are\u00a0not\u00a0created\u00a0in\u00a0memory.\nChapter 14:\u00a0Recursion\n179\nx\nTrace\u00a0 the\u00a0 control\u00a0flow\u00a0 of\u00a0the\u00a0 recursive\u00a0 factorial\u00a0function\u00a0 in\u00a0Figure\u00a0\n14.1.\u00a0Assume\u00a0that\u00a0we\u00a0are\u00a0trying\u00a0to\u00a0find\u00a0factorial\u00a0value\u00a0of\u00a02.\u00a0The\u00a0solid\u00a0\narrows\u00a0 indicate\u00a0 the\u00a0 call\u00a0 to\u00a0 the\u00a0 function,\u00a0 whereas\u00a0 dashed\u00a0 arrows\u00a0\nindicate\u00a0return\u00a0from\u00a0the\u00a0function.\nx\nNot", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_265", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0 in\u00a0Figure\u00a0\n14.1.\u00a0Assume\u00a0that\u00a0we\u00a0are\u00a0trying\u00a0to\u00a0find\u00a0factorial\u00a0value\u00a0of\u00a02.\u00a0The\u00a0solid\u00a0\narrows\u00a0 indicate\u00a0 the\u00a0 call\u00a0 to\u00a0 the\u00a0 function,\u00a0 whereas\u00a0 dashed\u00a0 arrows\u00a0\nindicate\u00a0return\u00a0from\u00a0the\u00a0function.\nx\nNote\u00a0 that\u00a0return\u00a01 goes\u00a0to\u00a0work\u00a0only\u00a0during\u00a0 the\u00a0last\u00a0call.\u00a0All\u00a0other\u00a0\ncalls\u00a0return\u00a0via\u00a0return\u00a0p.\ndef refact(n):\nif n == 0 :\nreturn 1\nelse :\np = n * refact(n - 1)\nreturn p\nfact = refact(2)\ndef refact(n) :\nif n == 0 :\nreturn 1\nelse :\np =n *refact(n - 1)\nreturn p\ndef refact(n) :\nif n == 0:\nreturn 1\nelse :\np = n * refact(n - 1)\nreturn p\n1\n0\n2\n1\n1\n2\nStart\nhere\nFigure\u00a014.1\nProblem\u00a0with\u00a0Unknown\u00a0Loops\nx\nIf\u00a0we\u00a0are\u00a0to\u00a0define\u00a0a\u00a0function\u00a0which\u00a0generates\u00a0and\u00a0returns\u00a0a\u00a0list\u00a0of\u00a0\nlists\u00a0containing\u00a0all\u00a0possible\u00a0combinations\u00a0of\u00a0numbers\u00a01,\u00a02\u00a0and\u00a03\u00a0we\u00a0\ncan\u00a0do\u00a0so\u00a0through\u00a0following\u00a0program:\ndef\u00a0generate(n)\u00a0:\nlol\u00a0=\u00a0[[\u00a0]\u00a0for\u00a0i\u00a0in\u00a0range(n\u00a0**\u00a0n)]\npos\u00a0=\u00a00\nfor\u00a0i\u00a0in\u00a0range(1,\u00a0n\u00a0+\u00a01)\u00a0:\u00a0\nfor\u00a0j\u00a0in\u00a0range(1,\u00a0n\u00a0+\u00a01)\u00a0:\nfor\u00a0k\u00a0in\u00a0range(1,\u00a0n\u00a0+\u00a01)\u00a0:\nt\u00a0=\u00a0[i,\u00a0j,\u00a0k]\nlol[pos]\u00a0=\u00a0t\npos\u00a0+=\u00a01\nreturn\u00a0lol\n180\nLet\u00a0Us\u00a0Python\nl\u00a0=\u00a0generate(3)\npr", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_266", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0]\u00a0for\u00a0i\u00a0in\u00a0range(n\u00a0**\u00a0n)]\npos\u00a0=\u00a00\nfor\u00a0i\u00a0in\u00a0range(1,\u00a0n\u00a0+\u00a01)\u00a0:\u00a0\nfor\u00a0j\u00a0in\u00a0range(1,\u00a0n\u00a0+\u00a01)\u00a0:\nfor\u00a0k\u00a0in\u00a0range(1,\u00a0n\u00a0+\u00a01)\u00a0:\nt\u00a0=\u00a0[i,\u00a0j,\u00a0k]\nlol[pos]\u00a0=\u00a0t\npos\u00a0+=\u00a01\nreturn\u00a0lol\n180\nLet\u00a0Us\u00a0Python\nl\u00a0=\u00a0generate(3)\nprint(l)\nSince\u00a0we\u00a0can\u00a0generate\u00a027\u00a0combinations\u00a0out\u00a0of\u00a01,\u00a02,\u00a03\u00a0([1,\u00a01,\u00a01],\u00a0[1,\u00a01,\u00a0\n2],\u00a0 ...\u00a0 [3,\u00a0 3,\u00a03]),\u00a0 list\u00a0 of\u00a0 lists\u00a0lol is\u00a0 set\u00a0up\u00a0 with\u00a027\u00a0 empty\u00a0 lists.\u00a0 Then\u00a0\nthrough\u00a03\u00a0for loops\u00a0we\u00a0have\u00a0generated\u00a0each\u00a0sub-list\u00a0and\u00a0inserted\u00a0it\u00a0\nin\u00a0lol.\nx\nIf\u00a0we\u00a0are\u00a0to\u00a0generate\u00a0all\u00a0possible\u00a0combinations\u00a0of\u00a01,\u00a02,\u00a03,\u00a04\u00a0then\u00a0we\u00a0\nwill\u00a0have\u00a0to\u00a0introduce\u00a0one\u00a0more\u00a0for loop.\u00a0If\u00a0generate(\u00a0) is\u00a0to\u00a0remain\u00a0\ngeneric\u00a0we\u00a0cannot\u00a0dynamically\u00a0add\u00a0this\u00a0loop.\nx\nWe\u00a0can\u00a0make\u00a0generate(\u00a0) function\u00a0create\u00a0the\u00a0desired\u00a0combinations\u00a0\nby\u00a0 using\u00a0 recursion\u00a0 in\u00a0 place\u00a0 of\u00a0 loops\u00a0 as\u00a0 shown\u00a0 in\u00a0 the\u00a0 following\u00a0\nprogram:\ndef\u00a0generate(n)\u00a0:\nt\u00a0=\u00a0[\u00a0]\nlol\u00a0=\u00a0[[ ]\u00a0for\u00a0i\u00a0in\u00a0range(n\u00a0**\u00a0n)]\nhelper(n,\u00a0t,\u00a0lol)\nreturn(lol)\ndef\u00a0helper(n,\u00a0t,\u00a0lol)\u00a0:\nglobal\u00a0j\nif\u00a0len(t)\u00a0==\u00a0n\u00a0:\nlol[\u00a0j\u00a0]\u00a0=\u00a0lol[\u00a0j\u00a0]\u00a0+\u00a0t\nj\u00a0+= 1\nreturn\u00a0\nfor\u00a0i\u00a0in\u00a0range(1,\u00a0n\u00a0+\u00a01)\u00a0:\nt.append(", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_267", "chunk_strategy": "fixed_size"}}, {"text": ":\nt\u00a0=\u00a0[\u00a0]\nlol\u00a0=\u00a0[[ ]\u00a0for\u00a0i\u00a0in\u00a0range(n\u00a0**\u00a0n)]\nhelper(n,\u00a0t,\u00a0lol)\nreturn(lol)\ndef\u00a0helper(n,\u00a0t,\u00a0lol)\u00a0:\nglobal\u00a0j\nif\u00a0len(t)\u00a0==\u00a0n\u00a0:\nlol[\u00a0j\u00a0]\u00a0=\u00a0lol[\u00a0j\u00a0]\u00a0+\u00a0t\nj\u00a0+= 1\nreturn\u00a0\nfor\u00a0i\u00a0in\u00a0range(1,\u00a0n\u00a0+\u00a01)\u00a0:\nt.append(i)\nhelper(n,\u00a0t,\u00a0lol);\nt.pop(\u00a0)\nj\u00a0=\u00a00\nl\u00a0=\u00a0generate(3)\nprint(l)\nIn\u00a0 addition\u00a0 to\u00a0generate(\u00a0 ) we\u00a0have\u00a0 defined the\u00a0 helper(\u00a0 ) function\u00a0\nsince\u00a0 we\u00a0wish\u00a0to\u00a0build\u00a0 each\u00a0sub-list\u00a0 incrementally\u00a0and\u00a0generate(\u00a0 )\nreceives\u00a0only\u00a0n.\nChapter 14:\u00a0Recursion\n181\nAfter\u00a0generating\u00a0a\u00a0sub-list\u00a0like\u00a0[1,\u00a01,\u00a01], list method\u00a0pop(\u00a0) has\u00a0been\u00a0\ncalled\u00a0to\u00a0remove\u00a0the\u00a0last\u00a01\u00a0from\u00a0this\u00a0sub-list\u00a0and\u00a0create\u00a0the\u00a0next\u00a0sub-\nlist\u00a0[1,\u00a01,\u00a02].\nTypes\u00a0of\u00a0Recursion\nx\nTwo\u00a0types\u00a0of\u00a0recursions\u00a0can\u00a0exist:\n(a) Head\u00a0recursion\n(b) Tail\u00a0recursion\nx\nHead\u00a0recursion\u00a0- In\u00a0this\u00a0type\u00a0of\u00a0recursion\u00a0the\u00a0recursive\u00a0call\u00a0is\u00a0made\u00a0\nbefore\u00a0other\u00a0processing\u00a0in\u00a0the\u00a0function.\ndef\u00a0headprint(n)\u00a0:\nif\u00a0n\u00a0==\u00a00\u00a0:\u00a0\nreturn\nelse\u00a0:\u00a0\nheadprint(n\u00a0- 1)\nprint(n)\nheadprint(10)\nHere\u00a0 firstly\u00a0 the\u00a0recursive\u00a0 calls\u00a0happen\u00a0 and\u00a0 then\u00a0the\u00a0 printing\u00a0takes\u00a0\nplace.\u00a0Hence\u00a0last\u00a0va", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_268", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0in\u00a0the\u00a0function.\ndef\u00a0headprint(n)\u00a0:\nif\u00a0n\u00a0==\u00a00\u00a0:\u00a0\nreturn\nelse\u00a0:\u00a0\nheadprint(n\u00a0- 1)\nprint(n)\nheadprint(10)\nHere\u00a0 firstly\u00a0 the\u00a0recursive\u00a0 calls\u00a0happen\u00a0 and\u00a0 then\u00a0the\u00a0 printing\u00a0takes\u00a0\nplace.\u00a0Hence\u00a0last\u00a0value\u00a0of\u00a0n,\u00a0i.e.\u00a01 gets\u00a0printed\u00a0first.\u00a0So\u00a0numbers\u00a0get\u00a0\nprinted\u00a0in\u00a0the\u00a0order\u00a01\u00a0to\u00a010.\nx\nTail\u00a0 recursion\u00a0 - In\u00a0 this\u00a0type\u00a0 of\u00a0 recursion\u00a0processing\u00a0 is\u00a0done\u00a0before\u00a0\nthe\u00a0recursive\u00a0call.\u00a0The\u00a0tail\u00a0recursion\u00a0is similar\u00a0to\u00a0a\u00a0loop\u2014the\u00a0function\u00a0\nexecutes\u00a0all\u00a0the\u00a0statements\u00a0before\u00a0making\u00a0the\u00a0recursive\u00a0call.\ndef\u00a0tailprint(n)\u00a0:\nif\u00a0n\u00a0==\u00a011 :\u00a0\nreturn\nelse\u00a0:\u00a0\nprint(n)\ntailprint(n\u00a0+ 1)\ntailprint(1)\nHere firstly\u00a0printing\u00a0takes\u00a0place\u00a0and\u00a0then\u00a0the\u00a0recursive\u00a0call\u00a0is\u00a0made.\u00a0\nHence\u00a0first\u00a0value\u00a0of\u00a0n,\u00a0i.e.\u00a01 gets\u00a0printed\u00a0first and\u00a0then\u00a0the\u00a0recursive\u00a0\ncall\u00a0is\u00a0done.\u00a0So\u00a0once\u00a0again\u00a0numbers\u00a0get\u00a0printed\u00a0in\u00a0the\u00a0order\u00a01\u00a0to\u00a010.\n182\nLet\u00a0Us\u00a0Python\nRecursion\u00a0Limit\nx\nIn\u00a0head\u00a0recursion\u00a0we\u00a0don't\u00a0get\u00a0the\u00a0result\u00a0of\u00a0our\u00a0calculation\u00a0until\u00a0we\nhave\u00a0returned\u00a0from\u00a0every\u00a0recursive\u00a0call. So\u00a0the\u00a0state\u00a0(local\u00a0variables)\u00a0\nhas\u00a0to\u00a0be\u00a0saved\u00a0befor", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_269", "chunk_strategy": "fixed_size"}}, {"text": "182\nLet\u00a0Us\u00a0Python\nRecursion\u00a0Limit\nx\nIn\u00a0head\u00a0recursion\u00a0we\u00a0don't\u00a0get\u00a0the\u00a0result\u00a0of\u00a0our\u00a0calculation\u00a0until\u00a0we\nhave\u00a0returned\u00a0from\u00a0every\u00a0recursive\u00a0call. So\u00a0the\u00a0state\u00a0(local\u00a0variables)\u00a0\nhas\u00a0to\u00a0be\u00a0saved\u00a0before\u00a0making\u00a0the\u00a0next\u00a0recursive\u00a0call.\u00a0This\u00a0results\u00a0in\u00a0\nconsumption\u00a0of\u00a0more\u00a0memory. Too\u00a0many\u00a0recursive\u00a0calls\u00a0may\u00a0result\u00a0\ninto\u00a0an\u00a0error.\u00a0\nx\nDefault\u00a0 recursion\u00a0 limit\u00a0 in\u00a0 Python\u00a0 is\u00a0 usually\u00a0 set\u00a0 to\u00a0 a\u00a0 small\u00a0 value\u00a0\n(approximately,\u00a0 10 ** 4).\u00a0 So\u00a0 if\u00a0 we\u00a0 provide\u00a0 a\u00a0 large\u00a0 input\u00a0 to\u00a0 the\u00a0\nrecursive\u00a0function,\u00a0a\u00a0RecursionError will\u00a0be\u00a0raised.\u00a0\nx\nThe\u00a0setrecursionlimit( ) function\u00a0in\u00a0sys module\u00a0permits\u00a0us\u00a0to\u00a0set\u00a0the\u00a0\nrecursion\u00a0 limit.\u00a0 Once\u00a0 set\u00a0 to\u00a0 10^6\u00a0 large\u00a0 inputs\u00a0 can\u00a0 be\u00a0 handled\u00a0\nwithout\u00a0any\u00a0errors.\nIteration\u00a0to\u00a0Recursion\nx\nGiven\u00a0 below\u00a0 are\u00a0 the\u00a0 steps\u00a0 that\u00a0 should\u00a0 be\u00a0 followed\u00a0 if\u00a0 we\u00a0 are\u00a0 to\u00a0\nconvert\u00a0an\u00a0iterative\u00a0function\u00a0to\u00a0a\u00a0recursive\u00a0function:\n-\nUse\u00a0the\u00a0local\u00a0variables\u00a0in\u00a0the\u00a0iterative\u00a0function\u00a0as\u00a0parameters\u00a0of\u00a0\nthe\u00a0recursive\u00a0function.\n-\nIdentify\u00a0 the\u00a0 main\u00a0 loop\u00a0 in\u00a0 the\u00a0 itera", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_270", "chunk_strategy": "fixed_size"}}, {"text": "re\u00a0 to\u00a0\nconvert\u00a0an\u00a0iterative\u00a0function\u00a0to\u00a0a\u00a0recursive\u00a0function:\n-\nUse\u00a0the\u00a0local\u00a0variables\u00a0in\u00a0the\u00a0iterative\u00a0function\u00a0as\u00a0parameters\u00a0of\u00a0\nthe\u00a0recursive\u00a0function.\n-\nIdentify\u00a0 the\u00a0 main\u00a0 loop\u00a0 in\u00a0 the\u00a0 iterative\u00a0 function.\u00a0 This\u00a0 loop\u00a0\ntypically\u00a0modifies\u00a0one\u00a0or\u00a0more\u00a0variables\u00a0and\u00a0returns\u00a0some\u00a0final\u00a0\nvalue(s).\n-\nWrite\u00a0the\u00a0condition\u00a0in\u00a0the\u00a0loop\u00a0as\u00a0the\u00a0base\u00a0case\u00a0and\u00a0the body\u00a0of\u00a0\nthe\u00a0loop\u00a0as\u00a0the\u00a0recursive\u00a0case.\n-\nRun to\u00a0 check\u00a0 whether\u00a0 recursive\u00a0 function\u00a0 achieves the desired\u00a0\nresult.\n-\nRemove\u00a0any\u00a0unnecessary\u00a0variables\u00a0and\u00a0improve\u00a0the\u00a0structure of\u00a0\nthe\u00a0recursive\u00a0function.\n____________________________________________________________________\nProblem\u00a014.1\nIf\u00a0a\u00a0positive\u00a0integer\u00a0is\u00a0entered\u00a0through\u00a0the\u00a0keyboard,\u00a0write\u00a0a\u00a0recursive\u00a0\nfunction\u00a0to\u00a0obtain\u00a0the\u00a0prime\u00a0factors\u00a0of\u00a0the\u00a0number.\nChapter 14:\u00a0Recursion\n183\nProgram\ndef\u00a0factorize(n,\u00a0i)\u00a0:\nif\u00a0i\u00a0<=\u00a0n\u00a0:\nif\u00a0n\u00a0%\u00a0i\u00a0==\u00a00\u00a0:\nprint(\u00a0i,\u00a0end\u00a0=',\u00a0'\u00a0)\u00a0\nn\u00a0=\u00a0n\u00a0//\u00a0i\u00a0\nelse\u00a0:\ni\u00a0+=\u00a01\nfactorize(n,\u00a0i)\nnum\u00a0=\u00a0int(input('Enter\u00a0a\u00a0number:\u00a0'))\nprint('Prime\u00a0factors\u00a0are:')\nfactoriz", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_271", "chunk_strategy": "fixed_size"}}, {"text": "183\nProgram\ndef\u00a0factorize(n,\u00a0i)\u00a0:\nif\u00a0i\u00a0<=\u00a0n\u00a0:\nif\u00a0n\u00a0%\u00a0i\u00a0==\u00a00\u00a0:\nprint(\u00a0i,\u00a0end\u00a0=',\u00a0'\u00a0)\u00a0\nn\u00a0=\u00a0n\u00a0//\u00a0i\u00a0\nelse\u00a0:\ni\u00a0+=\u00a01\nfactorize(n,\u00a0i)\nnum\u00a0=\u00a0int(input('Enter\u00a0a\u00a0number:\u00a0'))\nprint('Prime\u00a0factors\u00a0are:')\nfactorize(num,\u00a02)\nOutput\nEnter\u00a0a\u00a0number:\u00a050\nPrime\u00a0factors\u00a0are:\n2,\u00a05,\u00a05,\u00a0\nEnter\u00a0a\u00a0number:\u00a024\nPrime\u00a0factors\u00a0are:\n2,\u00a02,\u00a02,\u00a03,\nTips\nx\nIn\u00a0factorize(\u00a0) we\u00a0keep\u00a0checking,\u00a0starting\u00a0with\u00a02,\u00a0whether\u00a0i is\u00a0a\u00a0factor\u00a0\nof\u00a0n (means,\u00a0can\u00a0i divide\u00a0n exactly).\u00a0If\u00a0so,\u00a0we\u00a0print\u00a0that\u00a0factor,\u00a0reduce\u00a0\nn and\u00a0again\u00a0call\u00a0factorize(\u00a0 ) recursively.\u00a0If\u00a0 not,\u00a0we\u00a0increment\u00a0 i and\u00a0\ncall\u00a0factorize(\u00a0) to\u00a0check\u00a0whether\u00a0the\u00a0new\u00a0i is\u00a0a\u00a0factor\u00a0of n.\n____________________________________________________________________\nProblem\u00a014.2\nA\u00a0 positive\u00a0 integer\u00a0 is\u00a0entered\u00a0 through\u00a0 the\u00a0 keyboard,\u00a0 write\u00a0 a\u00a0 recursive\u00a0\nfunction\u00a0to\u00a0calculate\u00a0sum\u00a0of\u00a0digits\u00a0of\u00a0the\u00a05-digit\u00a0number.\nProgram\ndef\u00a0rsum(num)\u00a0:\u00a0\nif\u00a0num\u00a0!=\u00a00\u00a0:\ndigit\u00a0=\u00a0num\u00a0%\u00a010\u00a0\n184\nLet\u00a0Us\u00a0Python\nnum\u00a0=\u00a0int(num\u00a0/\u00a010)\nsum\u00a0=\u00a0digit\u00a0+\u00a0rsum(num)\nelse\u00a0:\nreturn\u00a00\nreturn\u00a0sum\nn\u00a0=\u00a0int(input('Enter\u00a0numb", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_272", "chunk_strategy": "fixed_size"}}, {"text": "igits\u00a0of\u00a0the\u00a05-digit\u00a0number.\nProgram\ndef\u00a0rsum(num)\u00a0:\u00a0\nif\u00a0num\u00a0!=\u00a00\u00a0:\ndigit\u00a0=\u00a0num\u00a0%\u00a010\u00a0\n184\nLet\u00a0Us\u00a0Python\nnum\u00a0=\u00a0int(num\u00a0/\u00a010)\nsum\u00a0=\u00a0digit\u00a0+\u00a0rsum(num)\nelse\u00a0:\nreturn\u00a00\nreturn\u00a0sum\nn\u00a0=\u00a0int(input('Enter\u00a0number:\u00a0'))\nrs\u00a0=\u00a0rsum(n)\nprint('Sum\u00a0of\u00a0digits\u00a0=\u00a0',\u00a0rs)\nOutput\nEnter\u00a0number:\n345\nSum\u00a0of\u00a0digits\u00a0=\u00a012\nTips\nx\nIn\u00a0the\u00a0rsum(\u00a0)\u00a0function, we\u00a0extract\u00a0the\u00a0last\u00a0digit,\u00a0reduce\u00a0the\u00a0number\u00a0\nand\u00a0 call\u00a0 rsum(\u00a0 )\u00a0 with\u00a0 reduced\u00a0 value\u00a0 of\u00a0 num.\u00a0 Thus\u00a0 if\u00a0 the\u00a0 number\u00a0\nentered\u00a0is\u00a03256,\u00a0the\u00a0call\u00a0becomes sum =\u00a06\u00a0+\u00a0rsum(325).\u00a0\nx\nDuring\u00a0 each\u00a0 call\u00a0 additions\u00a0 are\u00a0 kept\u00a0 pending,\u00a0 for\u00a0 example\u00a0 the\u00a0\naddition\u00a0 to\u00a0 6\u00a0 is\u00a0 kept\u00a0 pending\u00a0 as\u00a0 the\u00a0 program\u00a0 calls\u00a0 rsum(325) to\u00a0\nobtain\u00a0sum\u00a0of\u00a0digits\u00a0of\u00a0325.\u00a0\nx\nThe\u00a0recursive\u00a0 calls\u00a0end\u00a0when\u00a0 n falls\u00a0to\u00a00,\u00a0whereupon\u00a0the\u00a0function\u00a0\nreturns\u00a0a\u00a00,\u00a0because\u00a0sum\u00a0of\u00a0digits\u00a0of\u00a00\u00a0is\u00a00.\u00a0The\u00a00\u00a0is\u00a0returned\u00a0to\u00a0the\u00a0\nprevious\u00a0pending\u00a0call,\u00a0i.e.\u00a0sum =\u00a03\u00a0+\u00a0 rsum\u00a0(0).\u00a0Now\u00a0sum =\u00a03\u00a0+\u00a00 is\u00a0\ncompleted\u00a0and\u00a0the\u00a0control\u00a0reaches\u00a0return\u00a0 s.\u00a0Now\u00a0the\u00a0value\u00a0of\u00a0sum,\u00a0\ni.e.\u00a0 3\u00a0 is\u00a0 returned\u00a0 to\u00a0 the\u00a0 previ", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_273", "chunk_strategy": "fixed_size"}}, {"text": "The\u00a00\u00a0is\u00a0returned\u00a0to\u00a0the\u00a0\nprevious\u00a0pending\u00a0call,\u00a0i.e.\u00a0sum =\u00a03\u00a0+\u00a0 rsum\u00a0(0).\u00a0Now\u00a0sum =\u00a03\u00a0+\u00a00 is\u00a0\ncompleted\u00a0and\u00a0the\u00a0control\u00a0reaches\u00a0return\u00a0 s.\u00a0Now\u00a0the\u00a0value\u00a0of\u00a0sum,\u00a0\ni.e.\u00a0 3\u00a0 is\u00a0 returned\u00a0 to\u00a0 the\u00a0 previous\u00a0 call\u00a0 made\u00a0 during\u00a0 the\u00a0 pending\u00a0\naddition\u00a02\u00a0+\u00a0rsum\u00a0(3).\u00a0This\u00a0way\u00a0all\u00a0pending\u00a0calls\u00a0are\u00a0completed\u00a0and\u00a0\nfinally\u00a0the\u00a0sum\u00a0of\u00a03256\u00a0is\u00a0returned.\nx\nIn\u00a0 short,\u00a0return 0 goes\u00a0 to\u00a0 work\u00a0 only\u00a0 once\u00a0(during\u00a0 the\u00a0 last\u00a0 call\u00a0 to\u00a0\nrsum( )),\u00a0whereas,\u00a0for\u00a0all\u00a0previous\u00a0calls\u00a0return\u00a0sum goes\u00a0to\u00a0work.\n____________________________________________________________________\nProblem\u00a014.3\nPaper\u00a0of\u00a0size\u00a0A0\u00a0has\u00a0dimensions\u00a01189\u00a0mm\u00a0x\u00a0841\u00a0mm.\u00a0Each\u00a0subsequent\u00a0\nsize\u00a0 A(n)\u00a0 is\u00a0 defined\u00a0as\u00a0 A(n-1)\u00a0 cut\u00a0 in\u00a0 half, parallel\u00a0 to\u00a0 its\u00a0 shorter\u00a0 sides.\u00a0\nWrite\u00a0 a\u00a0 program\u00a0 to\u00a0 calculate\u00a0 and\u00a0 print\u00a0 paper\u00a0 sizes\u00a0 A0,\u00a0 A1,\u00a0A2,\u00a0 \u2026\u00a0 A\u03f4\nusing\u00a0recursion.\nChapter 14:\u00a0Recursion\n185\nProgram\ndef\u00a0papersizes(i,\u00a0n,\u00a0l,\u00a0b)\u00a0:\nif\u00a0n\u00a0!=\u00a00\u00a0:\nprint(f'A{i}:\u00a0L\u00a0=\u00a0{int(l)}\u00a0B\u00a0=\u00a0{int(b)}')\nnewb\u00a0=\u00a0l\u00a0/\u00a02\nnewl\u00a0=\u00a0b\nn\u00a0-=\u00a01\ni\u00a0+=\u00a01\npapersizes(i,\u00a0n,\u00a0newl,\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_274", "chunk_strategy": "fixed_size"}}, {"text": " \u2026\u00a0 A\u03f4\nusing\u00a0recursion.\nChapter 14:\u00a0Recursion\n185\nProgram\ndef\u00a0papersizes(i,\u00a0n,\u00a0l,\u00a0b)\u00a0:\nif\u00a0n\u00a0!=\u00a00\u00a0:\nprint(f'A{i}:\u00a0L\u00a0=\u00a0{int(l)}\u00a0B\u00a0=\u00a0{int(b)}')\nnewb\u00a0=\u00a0l\u00a0/\u00a02\nnewl\u00a0=\u00a0b\nn\u00a0-=\u00a01\ni\u00a0+=\u00a01\npapersizes(i,\u00a0n,\u00a0newl,\u00a0newb)\npapersizes(0,\u00a07,\u00a01189,\u00a0841)\nOutput\nA0:\u00a0L\u00a0=\u00a01189\u00a0B\u00a0=\u00a0841\nA1:\u00a0L\u00a0=\u00a0841\u00a0B\u00a0=\u00a0594\nA2:\u00a0L\u00a0=\u00a0594\u00a0B\u00a0=\u00a0420\nA3:\u00a0L\u00a0=\u00a0420\u00a0B\u00a0=\u00a0297\nA4:\u00a0L\u00a0=\u00a0297\u00a0B\u00a0=\u00a0210\nA5:\u00a0L\u00a0=\u00a0210\u00a0B\u00a0=\u00a0148\nA6: L\u00a0=\u00a0148\u00a0B\u00a0=\u00a0105\nTips\nA1\nA2\nA3\nA4\nA5\nA6\nA7\nA0: L = 1189 B = 841\nA1: L = 841 B = 594\nA2: L = 594 B = 420\nA3: L = 420 B = 297\nA4: L = 297 B = 210\nA5: L = 210 B = 148\nA6: L = 148 B = 105\nFigure\u00a014.2\n186\nLet\u00a0Us\u00a0Python\nx\nFigure\u00a0 14.2\u00a0 shows\u00a0 different\u00a0 paper\u00a0 sizes\u00a0 are\u00a0 obtained.\u00a0 In\u00a0 function\u00a0\npapersizes(\u00a0),\u00a0i is\u00a0used\u00a0to\u00a0obtain\u00a0the\u00a0digit\u00a0in\u00a0A0,\u00a0A1,\u00a0A2,\u00a0etc.,\u00a0whereas\u00a0\nn is\u00a0used\u00a0to\u00a0keep\u00a0track\u00a0of\u00a0number\u00a0of\u00a0times\u00a0the\u00a0function\u00a0should\u00a0be\u00a0\ncalled.\u00a0 The\u00a0 moment\u00a0 n falls\u00a0 to\u00a0 0,\u00a0 the\u00a0 recursive\u00a0 calls\u00a0 are\u00a0 stopped.\u00a0\nAlternately,\u00a0 we\u00a0 could\u00a0have\u00a0 dropped\u00a0 n\u00a0 and\u00a0stopped\u00a0 recursive\u00a0 calls\u00a0\nwhen\u00a0i reaches\u00a07.\n_________________________________", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_275", "chunk_strategy": "fixed_size"}}, {"text": "alled.\u00a0 The\u00a0 moment\u00a0 n falls\u00a0 to\u00a0 0,\u00a0 the\u00a0 recursive\u00a0 calls\u00a0 are\u00a0 stopped.\u00a0\nAlternately,\u00a0 we\u00a0 could\u00a0have\u00a0 dropped\u00a0 n\u00a0 and\u00a0stopped\u00a0 recursive\u00a0 calls\u00a0\nwhen\u00a0i reaches\u00a07.\n____________________________________________________________________\nProblem\u00a014.4\nWrite\u00a0 a\u00a0 recursive\u00a0 function\u00a0 to\u00a0 obtain\u00a0 first\u00a0 15\u00a0 numbers\u00a0 of\u00a0 a\u00a0 Fibonacci\u00a0\nsequence.\u00a0 In\u00a0 a\u00a0 Fibonacci\u00a0 sequence\u00a0 the\u00a0 sum\u00a0 of\u00a0 two\u00a0 successive\u00a0 terms\u00a0\ngives\u00a0the\u00a0third\u00a0term.\u00a0First\u00a0few\u00a0terms\u00a0of\u00a0the\u00a0Fibonacci\u00a0sequence:\n1\u00a0 1\u00a0 2\u00a0 \u03ef\u00a0 \u03f1\u00a0 \u03f4\u00a0 1\u03ef\u00a0 21\u00a0 \u03ef\u03f0\u00a0 \u03f1\u03f1\u00a0 \u03f4\u03f5\u2026.\nProgram\ndef\u00a0fibo(old,\u00a0current,\u00a0terms)\u00a0:\nif\u00a0terms\u00a0>=\u00a01\u00a0:\nnew\u00a0=\u00a0old\u00a0+\u00a0current\nprint(\u00a0f'{new}',\u00a0end\u00a0=\u00a0'\\t')\nterms\u00a0=\u00a0terms\u00a0- 1\u00a0\nfibo(current,\u00a0new,\u00a0terms)\u00a0\nold\u00a0=\u00a01\ncurrent\u00a0=\u00a01\u00a0\nprint(f'{old}',\u00a0end\u00a0=\u00a0'\\t')\nprint(f'{current}',\u00a0end\u00a0=\u00a0'\\t')\nfibo(old,\u00a0current,\u00a013)\nOutput\n1\n1\n2\n3\n5\n8\n13\n21\n34\n55\n89\n144\n233\n377\n610\nTips\nx\nThis\u00a0 program\u00a0 generates\u00a0the\u00a0 Fibonacci\u00a0 sequence\u00a0 of\u00a0 numbers\u00a0 using\u00a0\nrecursion.\u00a0 terms is\u00a0used\u00a0 to\u00a0 keep\u00a0 track\u00a0of\u00a0 when\u00a0 to\u00a0 stop\u00a0 recursive\u00a0\ncalls.\u00a0Since\u00a0the\u00a0first\u00a0two\u00a0terms", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_276", "chunk_strategy": "fixed_size"}}, {"text": "144\n233\n377\n610\nTips\nx\nThis\u00a0 program\u00a0 generates\u00a0the\u00a0 Fibonacci\u00a0 sequence\u00a0 of\u00a0 numbers\u00a0 using\u00a0\nrecursion.\u00a0 terms is\u00a0used\u00a0 to\u00a0 keep\u00a0 track\u00a0of\u00a0 when\u00a0 to\u00a0 stop\u00a0 recursive\u00a0\ncalls.\u00a0Since\u00a0the\u00a0first\u00a0two\u00a0terms\u00a0are\u00a0printed\u00a0before\u00a0calling\u00a0fibo(\u00a0),\u00a0we\u00a0\nhave\u00a0generated\u00a0only\u00a013 terms\u00a0through\u00a0the\u00a0recursive\u00a0calls.\n____________________________________________________________________\nChapter 14:\u00a0Recursion\n187\nProblem\u00a014.5\nA\u00a0positive\u00a0integer\u00a0is\u00a0entered\u00a0through\u00a0the\u00a0keyboard;\u00a0write\u00a0a\u00a0function\u00a0to\u00a0\nfind\u00a0the\u00a0binary\u00a0equivalent\u00a0of\u00a0this\u00a0number\u00a0using\u00a0recursion.\nProgram\nimport\u00a0sys\ndef\u00a0dec_to_binary(n)\u00a0:\nr\u00a0=\u00a0n\u00a0%\u00a02\u00a0\nn\u00a0=\u00a0int(n\u00a0/\u00a02)\nif\u00a0n\u00a0!=\u00a00\u00a0:\ndec_to_binary(n)\nprint(r,\u00a0end\u00a0=\u00a0'')\nsys.setrecursionlimit(10\u00a0**\u00a06)\nnum\u00a0=\u00a0int(input('Enter\u00a0the\u00a0number:\u00a0'))\nprint('The\u00a0binary\u00a0equivalent\u00a0is:')\ndec_to_binary(num)\nOutput\nEnter\u00a0the\u00a0number:\u00a032\nThe\u00a0binary\u00a0equivalent\u00a0is:\n100000\nEnter\u00a0the\u00a0number:\u00a045\nThe\u00a0binary\u00a0equivalent\u00a0is:\n101101\nTips\nx\nTo\u00a0obtain\u00a0binary\u00a0equivalent\u00a0of\u00a0a\u00a0number,\u00a0we\u00a0have\u00a0to\u00a0keep\u00a0dividing\u00a0\nthe\u00a0 dividend\u00a0 till\u00a0 it\u00a0 doesn\u2019t", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_277", "chunk_strategy": "fixed_size"}}, {"text": "er:\u00a032\nThe\u00a0binary\u00a0equivalent\u00a0is:\n100000\nEnter\u00a0the\u00a0number:\u00a045\nThe\u00a0binary\u00a0equivalent\u00a0is:\n101101\nTips\nx\nTo\u00a0obtain\u00a0binary\u00a0equivalent\u00a0of\u00a0a\u00a0number,\u00a0we\u00a0have\u00a0to\u00a0keep\u00a0dividing\u00a0\nthe\u00a0 dividend\u00a0 till\u00a0 it\u00a0 doesn\u2019t\u00a0 become\u00a0 0.\u00a0 Finally,\u00a0 the\u00a0 remainders\u00a0\nobtained\u00a0during\u00a0each\u00a0successive division must\u00a0be\u00a0written\u00a0in\u00a0reverse\u00a0\norder\u00a0to\u00a0get\u00a0the\u00a0binary\u00a0equivalent.\u00a0\nx\nSince\u00a0the\u00a0remainders\u00a0are\u00a0to\u00a0be\u00a0written\u00a0in\u00a0the\u00a0reverse\u00a0order,\u00a0we\u00a0start\u00a0\nprinting\u00a0 only\u00a0 when\u00a0 n falls to\u00a0 0,\u00a0 otherwise\u00a0 we\u00a0 make\u00a0 a\u00a0 call\u00a0 to\u00a0\ndec_to_binary(\u00a0) with\u00a0a\u00a0reduced\u00a0dividend\u00a0value.\n____________________________________________________________________\n188\nLet\u00a0Us\u00a0Python\nProblem\u00a014.6\nWrite\u00a0a\u00a0recursive\u00a0function\u00a0to\u00a0obtain\u00a0the\u00a0running\u00a0sum\u00a0of\u00a0first\u00a025\u00a0natural\u00a0\nnumbers.\nProgram\ndef\u00a0runningSum(n)\u00a0:\nif\u00a0n\u00a0==\u00a00\u00a0:\nreturn 0\nelse\u00a0:\ns\u00a0=\u00a0n\u00a0+\u00a0runningSum(n\u00a0- 1)\nreturn(s)\nmax\u00a0=\u00a0int(input('Enter\u00a0the\u00a0positive\u00a0largest\u00a0number\u00a0for\u00a0running\u00a0sum:\u00a0'))\nif\u00a0max\u00a0>\u00a00\u00a0:\nsum\u00a0=\u00a0runningSum(max)\nprint(f'Running\u00a0Sum:\u00a0{sum}')\nelse\u00a0:\nprint('Entered\u00a0number\u00a0is\u00a0negative')\nOutput", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_278", "chunk_strategy": "fixed_size"}}, {"text": "- 1)\nreturn(s)\nmax\u00a0=\u00a0int(input('Enter\u00a0the\u00a0positive\u00a0largest\u00a0number\u00a0for\u00a0running\u00a0sum:\u00a0'))\nif\u00a0max\u00a0>\u00a00\u00a0:\nsum\u00a0=\u00a0runningSum(max)\nprint(f'Running\u00a0Sum:\u00a0{sum}')\nelse\u00a0:\nprint('Entered\u00a0number\u00a0is\u00a0negative')\nOutput\nEnter\u00a0the\u00a0positive\u00a0largest\u00a0number\u00a0for\u00a0running\u00a0sum:\u00a025\nRunning\u00a0Sum:\u00a0325\nTips\nx\nWe\u00a0 calculate\u00a0the\u00a0 running\u00a0 sum\u00a0 as\u00a0we\u00a0 calculate\u00a0the\u00a0 factorial\u00a0 value,\u00a0\nstarting\u00a0 from\u00a0n and\u00a0then\u00a0 go\u00a0on\u00a0reducing\u00a0 it\u00a0moving\u00a0 towards\u00a0 0.\u00a0We\u00a0\nstop\u00a0on\u00a0reaching\u00a00.\n____________________________________________________________________\n[A] State\u00a0whether\u00a0the\u00a0following\u00a0statements\u00a0are\u00a0True\u00a0or\u00a0False:\n(a) A\u00a0 recursive\u00a0 function\u00a0 that\u00a0 calls\u00a0 another\u00a0 execution\u00a0 instance\u00a0 of\u00a0 the\u00a0\nsame\u00a0function.\n(b) If\u00a0a\u00a0recursive\u00a0function\u00a0uses\u00a0three\u00a0variables\u00a0a,\u00a0b and\u00a0c,\u00a0then\u00a0the\u00a0same\u00a0\nset\u00a0of\u00a0variables\u00a0are\u00a0used\u00a0during\u00a0each\u00a0recursive\u00a0call.\nChapter 14:\u00a0Recursion\n189\n(c) Multiple\u00a0copies\u00a0of\u00a0the\u00a0recursive\u00a0function\u00a0are\u00a0created\u00a0in\u00a0memory.\n(d) A\u00a0recursive\u00a0function\u00a0must\u00a0contain\u00a0at\u00a0least\u00a01\u00a0return statement.\n(e) Every\u00a0iteration\u00a0done\u00a0using\u00a0a\u00a0while ", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_279", "chunk_strategy": "fixed_size"}}, {"text": "hapter 14:\u00a0Recursion\n189\n(c) Multiple\u00a0copies\u00a0of\u00a0the\u00a0recursive\u00a0function\u00a0are\u00a0created\u00a0in\u00a0memory.\n(d) A\u00a0recursive\u00a0function\u00a0must\u00a0contain\u00a0at\u00a0least\u00a01\u00a0return statement.\n(e) Every\u00a0iteration\u00a0done\u00a0using\u00a0a\u00a0while or\u00a0for loop\u00a0can\u00a0be\u00a0replaced\u00a0with\u00a0\nrecursion.\n(f) Logics\u00a0expressible\u00a0in\u00a0the\u00a0form\u00a0of\u00a0themselves\u00a0are\u00a0good\u00a0candidates\u00a0for\u00a0\nwriting\u00a0recursive\u00a0functions.\n(g) Tail\u00a0recursion\u00a0is\u00a0similar\u00a0to\u00a0a\u00a0loop.\n(h) Infinite\u00a0recursion can\u00a0occur\u00a0if\u00a0the\u00a0base\u00a0case\u00a0is\u00a0not\u00a0properly\u00a0defined.\n(i) A\u00a0 recursive\u00a0 function is\u00a0 easy\u00a0 to\u00a0 write,\u00a0understand and\u00a0 maintain\u00a0 as\u00a0\ncompared\u00a0to\u00a0a\u00a0one\u00a0that\u00a0uses\u00a0a\u00a0loop.\n[B] Answer\u00a0the\u00a0following\u00a0questions:\n(a) Following\u00a0 program\u00a0calculates\u00a0 sum\u00a0of\u00a0 first\u00a05\u00a0natural\u00a0 numbers\u00a0 using\u00a0\ntail\u00a0recursion and\u00a0head\u00a0recursion.\n(b) There\u00a0are\u00a0three\u00a0pegs\u00a0labeled\u00a0A,\u00a0B\u00a0and\u00a0C.\u00a0Four\u00a0disks\u00a0are\u00a0placed\u00a0on\u00a0peg\u00a0\nA.\u00a0The\u00a0bottom-most\u00a0disk\u00a0is\u00a0largest,\u00a0and\u00a0disks\u00a0go\u00a0on\u00a0decreasing\u00a0in\u00a0size\u00a0\nwith\u00a0the\u00a0topmost\u00a0disk\u00a0being\u00a0smallest.\u00a0The\u00a0objective\u00a0of\u00a0the\u00a0game\u00a0is\u00a0to\u00a0\nmove\u00a0the\u00a0disks\u00a0from\u00a0peg\u00a0A\u00a0to\u00a0peg\u00a0C,\u00a0using\u00a0peg\u00a0B\u00a0as\u00a0an\u00a0aux", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_280", "chunk_strategy": "fixed_size"}}, {"text": "A.\u00a0The\u00a0bottom-most\u00a0disk\u00a0is\u00a0largest,\u00a0and\u00a0disks\u00a0go\u00a0on\u00a0decreasing\u00a0in\u00a0size\u00a0\nwith\u00a0the\u00a0topmost\u00a0disk\u00a0being\u00a0smallest.\u00a0The\u00a0objective\u00a0of\u00a0the\u00a0game\u00a0is\u00a0to\u00a0\nmove\u00a0the\u00a0disks\u00a0from\u00a0peg\u00a0A\u00a0to\u00a0peg\u00a0C,\u00a0using\u00a0peg\u00a0B\u00a0as\u00a0an\u00a0auxiliary\u00a0peg.\u00a0\nThe\u00a0rules\u00a0of\u00a0the\u00a0game\u00a0are\u00a0as\u00a0follows:\n-\nOnly\u00a0one\u00a0disk\u00a0may\u00a0be\u00a0moved\u00a0at\u00a0a\u00a0time,\u00a0and\u00a0it\u00a0must\u00a0be\u00a0the\u00a0top\u00a0\ndisk\u00a0on\u00a0one\u00a0of\u00a0the\u00a0pegs.\n-\nA\u00a0larger\u00a0disk\u00a0should\u00a0never\u00a0be\u00a0placed\u00a0on\u00a0the\u00a0top\u00a0of\u00a0a\u00a0smaller\u00a0disk.\nWrite\u00a0a\u00a0program\u00a0to\u00a0print\u00a0out\u00a0the\u00a0sequence\u00a0in\u00a0which\u00a0the\u00a0disks\u00a0should\u00a0\nbe\u00a0moved\u00a0such\u00a0that\u00a0all\u00a0disks\u00a0on\u00a0peg\u00a0A\u00a0are\u00a0finally\u00a0transferred\u00a0to\u00a0peg\u00a0\nC.\n(c) A\u00a0string\u00a0is\u00a0entered\u00a0through\u00a0the\u00a0keyboard.\u00a0Write\u00a0a\u00a0recursive\u00a0function\u00a0\nthat\u00a0counts\u00a0the\u00a0number\u00a0of\u00a0vowels\u00a0in\u00a0this\u00a0string.\n(d) A\u00a0string\u00a0is\u00a0entered\u00a0through\u00a0the\u00a0keyboard.\u00a0Write\u00a0a\u00a0recursive\u00a0function\u00a0\nremoves\u00a0any\u00a0tabs\u00a0present\u00a0in\u00a0this\u00a0string.\n(e) A\u00a0string\u00a0is\u00a0entered\u00a0through\u00a0the\u00a0keyboard.\u00a0Write\u00a0a\u00a0recursive\u00a0function\u00a0\nthat\u00a0checks\u00a0whether\u00a0the\u00a0string\u00a0is\u00a0a\u00a0palindrome\u00a0or\u00a0not.\u00a0\n(f) Two\u00a0 numbers\u00a0 are\u00a0 received\u00a0 through\u00a0 the\u00a0 keyboard\u00a0 into\u00a0 variables\u00a0 a\nand\u00a0b", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_281", "chunk_strategy": "fixed_size"}}, {"text": "g\u00a0is\u00a0entered\u00a0through\u00a0the\u00a0keyboard.\u00a0Write\u00a0a\u00a0recursive\u00a0function\u00a0\nthat\u00a0checks\u00a0whether\u00a0the\u00a0string\u00a0is\u00a0a\u00a0palindrome\u00a0or\u00a0not.\u00a0\n(f) Two\u00a0 numbers\u00a0 are\u00a0 received\u00a0 through\u00a0 the\u00a0 keyboard\u00a0 into\u00a0 variables\u00a0 a\nand\u00a0b.\u00a0Write\u00a0a\u00a0recursive\u00a0function\u00a0that\u00a0calculate\u00a0the\u00a0value\u00a0of\u00a0ab.\n190\nLet\u00a0Us\u00a0Python\n(g) Write\u00a0 a\u00a0recursive\u00a0function\u00a0that\u00a0reverses\u00a0 the\u00a0list\u00a0of\u00a0numbers\u00a0that\u00a0 it\u00a0\nreceives.\n(h) A\u00a0 list\u00a0contains\u00a0some\u00a0negative\u00a0 and\u00a0some\u00a0 positive\u00a0numbers.\u00a0Write\u00a0a\u00a0\nrecursive\u00a0 function\u00a0 that\u00a0 sanitizes\u00a0 the\u00a0 list\u00a0 by\u00a0 replacing\u00a0 all\u00a0 negative\u00a0\nnumbers\u00a0with\u00a00.\n(i) Write\u00a0a\u00a0recursive\u00a0function\u00a0to\u00a0obtain\u00a0average\u00a0of\u00a0all\u00a0numbers present\u00a0\nin\u00a0a\u00a0given\u00a0list.\n(j) Write\u00a0a\u00a0recursive\u00a0function\u00a0to\u00a0obtain\u00a0length\u00a0of\u00a0a\u00a0given string.\n(k) Write\u00a0 a\u00a0 recursive\u00a0 function\u00a0 that\u00a0 receives\u00a0 a\u00a0 number\u00a0 as\u00a0 input\u00a0 and\u00a0\nreturns\u00a0 the\u00a0 square\u00a0 of\u00a0 the\u00a0 number.\u00a0 Use\u00a0 the\u00a0 mathematical\u00a0 identity\u00a0\n(n - 1)2 =\u00a0n2 - 2n\u00a0+\u00a01.\n[C] What\u00a0will\u00a0be\u00a0the\u00a0output\u00a0of\u00a0the\u00a0following programs?\n(a) def\u00a0fun(x,\u00a0y)\u00a0:\nif\u00a0x\u00a0==\u00a00\u00a0:\nreturn\u00a0y\nelse\u00a0:\nreturn\u00a0fun(x\u00a0- 1,\u00a0x\u00a0*\u00a0y)\nprint", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_282", "chunk_strategy": "fixed_size"}}, {"text": "number.\u00a0 Use\u00a0 the\u00a0 mathematical\u00a0 identity\u00a0\n(n - 1)2 =\u00a0n2 - 2n\u00a0+\u00a01.\n[C] What\u00a0will\u00a0be\u00a0the\u00a0output\u00a0of\u00a0the\u00a0following programs?\n(a) def\u00a0fun(x,\u00a0y)\u00a0:\nif\u00a0x\u00a0==\u00a00\u00a0:\nreturn\u00a0y\nelse\u00a0:\nreturn\u00a0fun(x\u00a0- 1,\u00a0x\u00a0*\u00a0y)\nprint(fun(4,\u00a02))\n(b) def\u00a0fun(num)\u00a0:\nif\u00a0num\u00a0>\u00a0100\u00a0:\nreturn\u00a0num\u00a0- 10\nreturn\u00a0fun(fun(num\u00a0+\u00a011))\nprint(fun(75))\n(c)\ndef\u00a0fun(num)\u00a0:\nif\u00a0num\u00a0==\u00a00\u00a0:\nprint(\"False\")\nif\u00a0num ==\u00a01\u00a0:\nprint(\"True\")\nif\u00a0num\u00a0%\u00a02\u00a0==\u00a00\u00a0:\nfun(num\u00a0/\u00a02)\nfun(256)\nLet\u00a0Us\nPython\n191\nFunctional\nProgramming\nx\nFunctional\u00a0Programming\nx\nfilter(\u00a0) Function\nx\nFunctions\u00a0as\u00a0First-class\u00a0Values\nx\nreduce(\u00a0) Function\nx\nLambda\u00a0Functions\nx\nUsing\u00a0Lambda\u00a0with\u00a0map(\u00a0),\u00a0\nfilter(\u00a0),\u00a0reduce(\u00a0)\nx\nHigher\u00a0Order\u00a0Functions\nx\nWhere\u00a0are\u00a0they\u00a0Useful?\nx\nMap,\u00a0Filter,\u00a0Reduce\nx\nPrograms\nx\nmap(\u00a0) Function\nx\nExercises\n15\n\u201cMap\u00a0it,\u00a0reduce\u00a0it,\u00a0filter\u00a0it......\u201d\n192\nLet\u00a0Us\u00a0Python\nFunctional\u00a0Programming\nx\nIn\u00a0functional\u00a0programming\u00a0a\u00a0problem\u00a0is\u00a0treated\u00a0as\u00a0evaluation\u00a0of\u00a0one\u00a0\nor\u00a0more\u00a0functions.\u00a0\nx\nHence\u00a0a\u00a0given\u00a0problem\u00a0is\u00a0decomposed\u00a0into\u00a0a\u00a0set\u00a0of\u00a0functions.\u00a0These\u00a0\nfunctions\u00a0provi", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_283", "chunk_strategy": "fixed_size"}}, {"text": "\nFunctional\u00a0Programming\nx\nIn\u00a0functional\u00a0programming\u00a0a\u00a0problem\u00a0is\u00a0treated\u00a0as\u00a0evaluation\u00a0of\u00a0one\u00a0\nor\u00a0more\u00a0functions.\u00a0\nx\nHence\u00a0a\u00a0given\u00a0problem\u00a0is\u00a0decomposed\u00a0into\u00a0a\u00a0set\u00a0of\u00a0functions.\u00a0These\u00a0\nfunctions\u00a0provide\u00a0the\u00a0main\u00a0source\u00a0of\u00a0logic\u00a0in\u00a0the program.\nFunctions\u00a0as\u00a0First\u00a0Class Values\nx\nPython\u00a0 facilitates\u00a0 functional\u00a0 programming\u00a0 by\u00a0 treating\u00a0 functions\u00a0 as\u00a0\n'first-class'\u00a0data\u00a0values.\u00a0This\u00a0means\u00a0that:\n-\nFunctions\u00a0 can\u00a0 be\u00a0 assigned\u00a0 to\u00a0 variables and\u00a0 then\u00a0 called\u00a0 using\u00a0\nthese\u00a0variables.\n-\nFunctions\u00a0can\u00a0be\u00a0passed\u00a0as\u00a0arguments\u00a0to\u00a0function\u00a0and\u00a0returned\u00a0\nfrom\u00a0function.\n-\nFunctions\u00a0 can\u00a0be\u00a0 built\u00a0 at\u00a0execution\u00a0 time,\u00a0the\u00a0 way\u00a0lists,\u00a0 tuples,\u00a0\netc.\u00a0can\u00a0be.\u00a0\nx\nExample\u00a0of\u00a0assigning\u00a0a\u00a0function\u00a0to\u00a0a\u00a0variable\u00a0and\u00a0calling\u00a0the\u00a0function\u00a0\nusing\u00a0the\u00a0variable:\ndef\u00a0func(\u00a0)\u00a0:\nprint('Hello')\ndef\u00a0sum(x,\u00a0y)\u00a0:\nprint(x\u00a0+\u00a0y)\nf\u00a0=\u00a0func\n#\u00a0assignment\u00a0of\u00a0function\u00a0to\u00a0a\u00a0variable\nf(\u00a0)\n#\u00a0call\u00a0to\u00a0func(\u00a0)\ng\u00a0=\u00a0sum\n#\u00a0assignment\u00a0of\u00a0function\u00a0to\u00a0a\u00a0variable\ng(10,\u00a020)\n#\u00a0call\u00a0to\u00a0sum(\u00a0)\nx\nExample\u00a0of\u00a0passing\u00a0a\u00a0function\u00a0as argument\u00a0to\u00a0a\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_284", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0+\u00a0y)\nf\u00a0=\u00a0func\n#\u00a0assignment\u00a0of\u00a0function\u00a0to\u00a0a\u00a0variable\nf(\u00a0)\n#\u00a0call\u00a0to\u00a0func(\u00a0)\ng\u00a0=\u00a0sum\n#\u00a0assignment\u00a0of\u00a0function\u00a0to\u00a0a\u00a0variable\ng(10,\u00a020)\n#\u00a0call\u00a0to\u00a0sum(\u00a0)\nx\nExample\u00a0of\u00a0passing\u00a0a\u00a0function\u00a0as argument\u00a0to\u00a0a\u00a0function:\ndef\u00a0sum(x,\u00a0y,\u00a0f)\u00a0:\nprint(x\u00a0+\u00a0y)\nf(\u00a0)\n#\u00a0calls\u00a0func(\u00a0)\ndef\u00a0func(\u00a0)\u00a0:\nprint('Hello')\nChapter 15:\u00a0Functional\u00a0Programming\u00a0\n193\nf\u00a0=\u00a0func\n#\u00a0assignment\u00a0of\u00a0function\u00a0to\u00a0a\u00a0variable\nsum(10,\u00a020,\u00a0f)\n#\u00a0pass\u00a0function\u00a0as\u00a0argument\u00a0to\u00a0a\u00a0function\nx\nExample\u00a0 of\u00a0 building\u00a0function\u00a0 at\u00a0execution\u00a0 time\u00a0is\u00a0 discussed\u00a0 in\u00a0the\u00a0\nnext\u00a0section\u00a0on\u00a0lambda\u00a0functions.\nLambda\u00a0Functions\nx\nNormal\u00a0 functions\u00a0 have\u00a0 names.\u00a0 They\u00a0 are\u00a0 defined\u00a0 using\u00a0 the\u00a0 def\nkeyword.\u00a0\nx\nLambda\u00a0 functions\u00a0 do\u00a0not\u00a0have\u00a0 names.\u00a0 They\u00a0 are\u00a0 defined\u00a0 using\u00a0 the\u00a0\nlambda keyword\u00a0and\u00a0are\u00a0built\u00a0at\u00a0execution\u00a0time.\u00a0\nx\nLambda\u00a0 functions\u00a0 are\u00a0commonly\u00a0used\u00a0 for\u00a0short\u00a0 functions\u00a0 that\u00a0 are\u00a0\nconvenient\u00a0to\u00a0define\u00a0at\u00a0the\u00a0point\u00a0where\u00a0they\u00a0are\u00a0called.\nx\nLambda\u00a0 functions\u00a0 are\u00a0 also\u00a0 called\u00a0 anonymous\u00a0 functions\u00a0 or\u00a0 inline\u00a0\nfunctions.\nx\nA\u00a0lambda functi", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_285", "chunk_strategy": "fixed_size"}}, {"text": "y\u00a0used\u00a0 for\u00a0short\u00a0 functions\u00a0 that\u00a0 are\u00a0\nconvenient\u00a0to\u00a0define\u00a0at\u00a0the\u00a0point\u00a0where\u00a0they\u00a0are\u00a0called.\nx\nLambda\u00a0 functions\u00a0 are\u00a0 also\u00a0 called\u00a0 anonymous\u00a0 functions\u00a0 or\u00a0 inline\u00a0\nfunctions.\nx\nA\u00a0lambda function\u00a0can\u00a0take\u00a0any\u00a0number of\u00a0arguments\u00a0but\u00a0can\u00a0return\u00a0\nonly\u00a0one\u00a0value.\u00a0Its\u00a0syntax\u00a0is:\nlambda\u00a0arguments\u00a0:\u00a0expression\n:\u00a0separates\u00a0the\u00a0parameters\u00a0to\u00a0be\u00a0passed\u00a0to\u00a0the\u00a0lambda\u00a0function\u00a0and\u00a0\nthe\u00a0 function\u00a0 body.\u00a0 The\u00a0 result\u00a0 of\u00a0 running\u00a0 the\u00a0 function\u00a0 body\u00a0 is\nreturned implicitly.\nx\nA\u00a0few\u00a0examples of\u00a0lambda\u00a0functions\n#\u00a0 function\u00a0that\u00a0receives\u00a0an\u00a0argument\u00a0and\u00a0returns\u00a0 its\u00a0cube\nlambda\u00a0 n\u00a0: n\u00a0* n\u00a0*\u00a0n\n#\u00a0 function\u00a0that\u00a0receives\u00a03\u00a0arguments\u00a0and\u00a0returns\u00a0average\u00a0of\u00a0them\nlambda\u00a0x,\u00a0y,\u00a0z\u00a0:\u00a0(x\u00a0+\u00a0y\u00a0+\u00a0z)\u00a0/\u00a03\n#\u00a0 function\u00a0that\u00a0receives\u00a0a\u00a0string,\u00a0strips\u00a0any\u00a0whitespace\u00a0and\u00a0returns\u00a0\n#\u00a0the\u00a0uppercase\u00a0version\u00a0of\u00a0the\u00a0string\nlambda\u00a0s\u00a0:\u00a0s.trim(\u00a0).upper(\u00a0)\nx\nLambda\u00a0functions\u00a0are\u00a0often\u00a0used\u00a0as\u00a0an\u00a0argument\u00a0to\u00a0other\u00a0functions.\u00a0\nFor\u00a0example,\u00a0the\u00a0above\u00a0lambdas\u00a0can\u00a0be\u00a0passed\u00a0to\u00a0print(\u00a0) function\u00a0\nto\u00a0print\u00a0the\u00a0value\u00a0that\u00a0they\u00a0ret", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_286", "chunk_strategy": "fixed_size"}}, {"text": "\nlambda\u00a0s\u00a0:\u00a0s.trim(\u00a0).upper(\u00a0)\nx\nLambda\u00a0functions\u00a0are\u00a0often\u00a0used\u00a0as\u00a0an\u00a0argument\u00a0to\u00a0other\u00a0functions.\u00a0\nFor\u00a0example,\u00a0the\u00a0above\u00a0lambdas\u00a0can\u00a0be\u00a0passed\u00a0to\u00a0print(\u00a0) function\u00a0\nto\u00a0print\u00a0the\u00a0value\u00a0that\u00a0they\u00a0return.\nprint((lambda\u00a0 n\u00a0:\u00a0n\u00a0*\u00a0n\u00a0*\u00a0n)(3))\n#\u00a0prints\u00a027\nprint((lambda\u00a0 x,\u00a0y,\u00a0z\u00a0:\u00a0(x\u00a0+\u00a0y\u00a0+\u00a0z)\u00a0/\u00a03)(10,\u00a020,\u00a030))\n#\u00a0prints\u00a020.0\n194\nLet\u00a0Us\u00a0Python\nprint((lambda\u00a0 s\u00a0:\u00a0s.lstrip(\u00a0).rstrip(\u00a0).upper(\u00a0))('\u00a0 Ngp\u00a0 '))\u00a0 #\u00a0prints\u00a0NGP\nx\nThe\u00a0lambda\u00a0can\u00a0also\u00a0be\u00a0assigned\u00a0to\u00a0a\u00a0variable\u00a0and\u00a0then\u00a0invoked.\np\u00a0=\u00a0lambda\u00a0 n\u00a0:\u00a0n\u00a0*\u00a0n\u00a0*\u00a0n\nq\u00a0=\u00a0lambda\u00a0 x,\u00a0y,\u00a0z\u00a0:\u00a0(x\u00a0+\u00a0y\u00a0+\u00a0z)\u00a0/\u00a03\nr\u00a0=\u00a0lambda\u00a0 s\u00a0:\u00a0s.lstrip(\u00a0).rstrip(\u00a0).upper(\u00a0)\nprint(p(3))\n#\u00a0calls\u00a0first\u00a0lambda\u00a0function\nprint(q(10,\u00a020,\u00a030))\n#\u00a0calls\u00a0second\u00a0lambda\u00a0function\nprint(r('\u00a0 Nagpur\u00a0 '))\u00a0\n#\u00a0calls\u00a0third\u00a0lambda\u00a0function\nx\nContainer\u00a0 types\u00a0 can\u00a0 also\u00a0 be\u00a0 passed\u00a0 to\u00a0 a\u00a0 lambda\u00a0 function.\u00a0 For\u00a0\nexample,\u00a0a\u00a0lambda\u00a0function\u00a0that\u00a0calculates\u00a0average\u00a0of\u00a0numbers\u00a0in\u00a0a\u00a0\nlist\u00a0can\u00a0be\u00a0passed\u00a0to\u00a0print(\u00a0) function:\u00a0\nlst1\u00a0=\u00a0[1,\u00a02,\u00a03,\u00a04,\u00a05]\nlst2\u00a0=\u00a0[10,\u00a020,\u00a030,\u00a040, 50]\nprint((lambda\u00a0l\u00a0:\u00a0sum(l)\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_287", "chunk_strategy": "fixed_size"}}, {"text": "nction.\u00a0 For\u00a0\nexample,\u00a0a\u00a0lambda\u00a0function\u00a0that\u00a0calculates\u00a0average\u00a0of\u00a0numbers\u00a0in\u00a0a\u00a0\nlist\u00a0can\u00a0be\u00a0passed\u00a0to\u00a0print(\u00a0) function:\u00a0\nlst1\u00a0=\u00a0[1,\u00a02,\u00a03,\u00a04,\u00a05]\nlst2\u00a0=\u00a0[10,\u00a020,\u00a030,\u00a040, 50]\nprint((lambda\u00a0l\u00a0:\u00a0sum(l)\u00a0/\u00a0len(l))\u00a0(lst1))\nprint((lambda\u00a0l\u00a0:\u00a0sum(l)\u00a0/\u00a0len(l))\u00a0(lst2))\nHere\u00a0 instead\u00a0of\u00a0assigning\u00a0a\u00a0lambda\u00a0function\u00a0to\u00a0a\u00a0variable\u00a0and\u00a0then\u00a0\npassing\u00a0the\u00a0variable\u00a0to\u00a0print(\u00a0),\u00a0we\u00a0have\u00a0passed\u00a0the\u00a0lambda\u00a0function\u00a0\nitself\u00a0to\u00a0print(\u00a0).\nHigher\u00a0Order\u00a0Functions\nx\nA\u00a0higher\u00a0order\u00a0function\u00a0is\u00a0a\u00a0function\u00a0that\u00a0can\u00a0receive\u00a0other\u00a0functions\u00a0\nas\u00a0arguments\u00a0or\u00a0return\u00a0them.\u00a0\nx\nFor\u00a0example,\u00a0we\u00a0can\u00a0pass\u00a0a\u00a0lambda\u00a0function\u00a0to the\u00a0built-in sorted(\u00a0)\nfunction\u00a0to\u00a0sort\u00a0a\u00a0dictionary\u00a0by\u00a0values.\nd\u00a0=\u00a0{'Oil'\u00a0:\u00a0230,\u00a0'Clip'\u00a0:\u00a0150,\u00a0'Stud'\u00a0:\u00a0175,\u00a0'Nut'\u00a0:\u00a035}\n#\u00a0lambda\u00a0takes\u00a0a\u00a0dictionary\u00a0item\u00a0and\u00a0returns\u00a0a\u00a0value\nd1\u00a0=\u00a0sorted(d.items(\u00a0),\u00a0key\u00a0=\u00a0lambda\u00a0kv\u00a0:\u00a0kv[1])\u00a0\nprint(d1)\u00a0 #\u00a0prints\u00a0[('Nut',\u00a035),\u00a0('Clip',\u00a0150),\u00a0('Stud',\u00a0175),\u00a0('Oil',\u00a0230)]\nThe\u00a0sorted(\u00a0) function\u00a0uses\u00a0a\u00a0parameter\u00a0key.\u00a0It\u00a0specifies\u00a0a\u00a0function\u00a0of\u00a0\none\u00a0argument\u00a0that\u00a0is\u00a0used\u00a0to\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_288", "chunk_strategy": "fixed_size"}}, {"text": "lambda\u00a0kv\u00a0:\u00a0kv[1])\u00a0\nprint(d1)\u00a0 #\u00a0prints\u00a0[('Nut',\u00a035),\u00a0('Clip',\u00a0150),\u00a0('Stud',\u00a0175),\u00a0('Oil',\u00a0230)]\nThe\u00a0sorted(\u00a0) function\u00a0uses\u00a0a\u00a0parameter\u00a0key.\u00a0It\u00a0specifies\u00a0a\u00a0function\u00a0of\u00a0\none\u00a0argument\u00a0that\u00a0is\u00a0used\u00a0to\u00a0extract\u00a0a\u00a0comparison\u00a0for\u00a0each\u00a0element\u00a0\nin\u00a0the\u00a0first\u00a0argument\u00a0of\u00a0sorted(\u00a0).\u00a0The\u00a0default\u00a0value\u00a0of\u00a0key\u00a0is\u00a0None,\nindicating\u00a0that\u00a0 the\u00a0elements\u00a0 in\u00a0first\u00a0argument\u00a0are\u00a0 to\u00a0be\u00a0compared\u00a0\ndirectly.\nChapter 15:\u00a0Functional\u00a0Programming\u00a0\n195\nx\nTo\u00a0facilitate functional\u00a0programming\u00a0Python\u00a0provides\u00a03\u00a0higher\u00a0order\u00a0\nfunctions\u2014map(\u00a0),\u00a0filter(\u00a0) and\u00a0reduce(\u00a0).\u00a0Before\u00a0we\u00a0see\u00a0how\u00a0to\u00a0use\u00a0\nthese\u00a0 functions,\u00a0we\u00a0need\u00a0to\u00a0understand\u00a0the\u00a0map,\u00a0filter\u00a0and\u00a0reduce\u00a0\noperations.\nMap,\u00a0Filter,\u00a0Reduce\nx\nA\u00a0map\u00a0operation\u00a0applies\u00a0a\u00a0function\u00a0to\u00a0each\u00a0element\u00a0in\u00a0the\u00a0sequence\u00a0\nlike\u00a0 list,\u00a0 tuple,\u00a0 etc.\u00a0 and\u00a0 returns\u00a0 a\u00a0 new\u00a0 sequence\u00a0 containing\u00a0 the\u00a0\nresults.\u00a0For\u00a0example:\u00a0\n-\nFinding\u00a0square\u00a0root\u00a0of\u00a0all\u00a0numbers\u00a0in\u00a0the\u00a0list\u00a0and\u00a0returning\u00a0a\u00a0list\u00a0\nof\u00a0these\u00a0roots.\n-\nConverting\u00a0all\u00a0characters\u00a0in\u00a0the\u00a0list\u00a0to\u00a0uppercase\u00a0and\u00a0 returning\u00a0\nthe\u00a0up", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_289", "chunk_strategy": "fixed_size"}}, {"text": "ntaining\u00a0 the\u00a0\nresults.\u00a0For\u00a0example:\u00a0\n-\nFinding\u00a0square\u00a0root\u00a0of\u00a0all\u00a0numbers\u00a0in\u00a0the\u00a0list\u00a0and\u00a0returning\u00a0a\u00a0list\u00a0\nof\u00a0these\u00a0roots.\n-\nConverting\u00a0all\u00a0characters\u00a0in\u00a0the\u00a0list\u00a0to\u00a0uppercase\u00a0and\u00a0 returning\u00a0\nthe\u00a0uppercase\u00a0characters'\u00a0list.\nx\nA\u00a0 filter\u00a0 operation\u00a0 applies\u00a0 a\u00a0 function\u00a0 to\u00a0 all\u00a0 the\u00a0 elements\u00a0 of\u00a0 a\u00a0\nsequence.\u00a0 A\u00a0 sequence\u00a0 of\u00a0 those\u00a0 elements\u00a0 for\u00a0 which\u00a0 the\u00a0 function\u00a0\nreturns\u00a0True\u00a0is\u00a0returned.\u00a0For\u00a0example:\u00a0\n-\nChecking\u00a0 whether\u00a0 each\u00a0 element\u00a0 in\u00a0 a\u00a0 list\u00a0 is\u00a0 an alphabet\u00a0 and\u00a0\nreturning\u00a0a\u00a0list\u00a0of\u00a0alphabets.\n-\nChecking\u00a0whether\u00a0each\u00a0element\u00a0in\u00a0a\u00a0list\u00a0is\u00a0odd\u00a0and\u00a0returning\u00a0a\u00a0\nlist\u00a0of\u00a0odd\u00a0numbers.\nx\nA\u00a0 reduce\u00a0 operation\u00a0 performs\u00a0 a\u00a0 rolling\u00a0 computation\u00a0 to\u00a0 sequential\u00a0\npairs\u00a0of\u00a0values\u00a0in\u00a0a\u00a0sequence\u00a0and\u00a0returns\u00a0the\u00a0result. For\u00a0example:\n-\nObtaining\u00a0product\u00a0of\u00a0a\u00a0list\u00a0of\u00a0integers and\u00a0returning\u00a0the\u00a0product.\n-\nConcatenating\u00a0all\u00a0strings\u00a0in\u00a0a\u00a0list\u00a0and\u00a0returning\u00a0the\u00a0final\u00a0string.\nx\nUsually,\u00a0map,\u00a0filter,\u00a0reduce\u00a0operations\u00a0mentioned\u00a0above\u00a0would\u00a0need\u00a0\na\u00a0 for loop\u00a0 and/or if statement\u00a0 to\u00a0 control", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_290", "chunk_strategy": "fixed_size"}}, {"text": "g\u00a0the\u00a0product.\n-\nConcatenating\u00a0all\u00a0strings\u00a0in\u00a0a\u00a0list\u00a0and\u00a0returning\u00a0the\u00a0final\u00a0string.\nx\nUsually,\u00a0map,\u00a0filter,\u00a0reduce\u00a0operations\u00a0mentioned\u00a0above\u00a0would\u00a0need\u00a0\na\u00a0 for loop\u00a0 and/or if statement\u00a0 to\u00a0 control\u00a0 the\u00a0 flow while\u00a0 iterating\u00a0\nover\u00a0elements\u00a0of\u00a0sequence\u00a0types\u00a0like\u00a0strings,\u00a0lists,\u00a0tuples.\nx\nIf\u00a0we\u00a0use\u00a0Python functions\u00a0map(\u00a0),\u00a0filter(\u00a0),\u00a0reduce(\u00a0) we\u00a0do\u00a0not\u00a0need\u00a0\na\u00a0 for loop\u00a0 or if statement\u00a0 to\u00a0 control\u00a0 the\u00a0 flow.\u00a0 This\u00a0 lets\u00a0 the\u00a0\nprogrammer\u00a0 focus\u00a0 on\u00a0 the\u00a0 actual\u00a0 computation\u00a0 rather\u00a0 than\u00a0 on\u00a0 the\u00a0\ndetails\u00a0of\u00a0loops,\u00a0branches,\u00a0and\u00a0control\u00a0flow.\nmap(\u00a0) Function\nx\nUse\u00a0of\u00a0map(\u00a0) function:\nimport\u00a0math\ndef\u00a0fun(n)\u00a0:\n196\nLet\u00a0Us\u00a0Python\nreturn\u00a0n\u00a0*\u00a0n\nlst =\u00a0[5,\u00a010,\u00a015,\u00a020,\u00a025]\nm1 =\u00a0map(math.radians,\u00a0lst)\nm2 =\u00a0map(math.factorial,\u00a0lst)\nm3 =\u00a0map(fun,\u00a0lst)\nprint(list(m1))\n#\u00a0prints\u00a0list\u00a0of\u00a0radians\u00a0of\u00a0all\u00a0values\u00a0in\u00a0lst\nprint(list(m2))\n#\u00a0prints\u00a0list\u00a0of\u00a0factorial\u00a0of\u00a0all\u00a0values\u00a0in\u00a0lst\nprint(list(m3))\n#\u00a0prints\u00a0list\u00a0of\u00a0squares\u00a0of\u00a0all\u00a0values\u00a0in\u00a0lst\nx\nGeneral form\u00a0of\u00a0map(\u00a0)\u00a0function is\nmap(function_to_app", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_291", "chunk_strategy": "fixed_size"}}, {"text": "all\u00a0values\u00a0in\u00a0lst\nprint(list(m2))\n#\u00a0prints\u00a0list\u00a0of\u00a0factorial\u00a0of\u00a0all\u00a0values\u00a0in\u00a0lst\nprint(list(m3))\n#\u00a0prints\u00a0list\u00a0of\u00a0squares\u00a0of\u00a0all\u00a0values\u00a0in\u00a0lst\nx\nGeneral form\u00a0of\u00a0map(\u00a0)\u00a0function is\nmap(function_to_apply,\u00a0list_of_inputs)\nmap(\u00a0)\u00a0returns\u00a0a\u00a0map object\u00a0which\u00a0can\u00a0be\u00a0converted\u00a0to\u00a0a\u00a0list\u00a0using\u00a0\nlist(\u00a0) function.\nfilter(\u00a0) Function\nx\nUse\u00a0of\u00a0filter(\u00a0) function:\ndef\u00a0fun(n)\u00a0:\nif\u00a0n\u00a0%\u00a05\u00a0==\u00a00\u00a0:\nreturn\u00a0True\nelse\u00a0:\nreturn\u00a0False\nlst1\u00a0=\u00a0['A',\u00a0'X',\u00a0'Y',\u00a0'3',\u00a0'M',\u00a0'4',\u00a0'D']\nf1 =\u00a0filter(str.isalpha,\u00a0lst1)\nprint(list(f1))\n#\u00a0prints\u00a0['A',\u00a0'X',\u00a0'Y',\u00a0'M',\u00a0'D']\nlst2 =\u00a0[5,\u00a010,\u00a018,\u00a027,\u00a025]\nf2 =\u00a0filter(fun,\u00a0lst2)\nprint(list(f2))\n#\u00a0prints\u00a0 [5, 10, 25]\nx\nGeneral\u00a0form of\u00a0filter(\u00a0) function\u00a0is:\nfilter(function_to_apply,\u00a0list_of_inputs)\nfilter(\u00a0) returns\u00a0a\u00a0filter object\u00a0which\u00a0can\u00a0be\u00a0converted\u00a0to\u00a0a\u00a0list\u00a0using\u00a0\nlist(\u00a0) function.\nreduce(\u00a0) Function\nx\nUse\u00a0of\u00a0reduce(\u00a0) function:\nfrom\u00a0functools\u00a0import\u00a0reduce\nChapter 15:\u00a0Functional\u00a0Programming\u00a0\n197\ndef\u00a0getsum(x,\u00a0y)\u00a0:\nreturn\u00a0x\u00a0+\u00a0y\ndef\u00a0getprod(x,\u00a0y)\u00a0:\nreturn\u00a0x\u00a0*\u00a0y\nlst =\u00a0[1,\u00a02,\u00a03,", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_292", "chunk_strategy": "fixed_size"}}, {"text": "n.\nreduce(\u00a0) Function\nx\nUse\u00a0of\u00a0reduce(\u00a0) function:\nfrom\u00a0functools\u00a0import\u00a0reduce\nChapter 15:\u00a0Functional\u00a0Programming\u00a0\n197\ndef\u00a0getsum(x,\u00a0y)\u00a0:\nreturn\u00a0x\u00a0+\u00a0y\ndef\u00a0getprod(x,\u00a0y)\u00a0:\nreturn\u00a0x\u00a0*\u00a0y\nlst =\u00a0[1,\u00a02,\u00a03,\u00a04,\u00a05]\ns\u00a0=\u00a0reduce(getsum,\u00a0lst)\np\u00a0=\u00a0reduce(getprod,\u00a0lst)\nprint(s)\n#\u00a0prints\u00a015\nprint(p)\n#\u00a0prints\u00a0120\nHere\u00a0the\u00a0result\u00a0of\u00a0addition\u00a0of\u00a0previous\u00a0two\u00a0elements\u00a0is\u00a0added\u00a0to\u00a0the\u00a0\nnext\u00a0 element,\u00a0till\u00a0the\u00a0end\u00a0of\u00a0the\u00a0list.\u00a0In\u00a0our\u00a0program\u00a0this\u00a0translates\u00a0\ninto\u00a0operations\u00a0like\u00a0((((1\u00a0+\u00a02)\u00a0+\u00a03)\u00a0+\u00a04)\u00a0+\u00a05)\u00a0and\u00a0((((1\u00a0*\u00a02)\u00a0*\u00a03)\u00a0*\u00a04)\u00a0*\u00a05).\nx\nGeneral\u00a0form\u00a0of\u00a0reduce(\u00a0) function\u00a0is:\nreduce(function_to_apply,\u00a0list_of_inputs)\nThe\u00a0reduce(\u00a0) function\u00a0operation\u00a0performs\u00a0a\u00a0rolling\u00a0computation\u00a0to\u00a0\nsequential\u00a0pairs\u00a0of\u00a0values\u00a0in\u00a0a\u00a0sequence\u00a0and\u00a0returns\u00a0the\u00a0result.\nx\nYou\u00a0 can\u00a0 observe\u00a0that\u00a0 map(\u00a0),\u00a0 filter(\u00a0) and\u00a0reduce(\u00a0) abstract\u00a0away\u00a0\ncontrol\u00a0flow\u00a0code.\nUsing\u00a0Lambda\u00a0with\u00a0map(\u00a0),\u00a0filter(\u00a0),\u00a0reduce(\u00a0)\nx\nWe\u00a0can\u00a0use\u00a0map(\u00a0),\u00a0filter(\u00a0) and\u00a0reduce(\u00a0) with\u00a0lambda\u00a0functions\u00a0to\u00a0\nsimplify\u00a0 the\u00a0 implementation\u00a0 of\u00a0 functions\u00a0 that\u00a0 o", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_293", "chunk_strategy": "fixed_size"}}, {"text": "act\u00a0away\u00a0\ncontrol\u00a0flow\u00a0code.\nUsing\u00a0Lambda\u00a0with\u00a0map(\u00a0),\u00a0filter(\u00a0),\u00a0reduce(\u00a0)\nx\nWe\u00a0can\u00a0use\u00a0map(\u00a0),\u00a0filter(\u00a0) and\u00a0reduce(\u00a0) with\u00a0lambda\u00a0functions\u00a0to\u00a0\nsimplify\u00a0 the\u00a0 implementation\u00a0 of\u00a0 functions\u00a0 that\u00a0 operate\u00a0 over\u00a0\nsequence\u00a0types\u00a0like,\u00a0strings,\u00a0lists and tuples.\nx\nSince\u00a0map(\u00a0),\u00a0filter(\u00a0) and\u00a0reduce(\u00a0) expect\u00a0a\u00a0function\u00a0to\u00a0be\u00a0passed\u00a0to\u00a0\nthem,\u00a0we\u00a0can\u00a0also\u00a0pass lambda\u00a0functions\u00a0to\u00a0them,\u00a0as\u00a0shown\u00a0below.\n#\u00a0using\u00a0lambda\u00a0with\u00a0map(\u00a0)\nlst1\u00a0=\u00a0[5,\u00a010,\u00a015,\u00a020,\u00a025]\nm =\u00a0map(lambda\u00a0n\u00a0:\u00a0n\u00a0*\u00a0n,\u00a0lst1)\nprint(list(m))\n#\u00a0prints\u00a0[25,\u00a0100,\u00a0225,\u00a0400,\u00a0625]\n#\u00a0using\u00a0lambda\u00a0with\u00a0filter(\u00a0)\nlst2 =\u00a0[5,\u00a010,\u00a018,\u00a027,\u00a025]\nf =\u00a0filter(lambda\u00a0n\u00a0:\u00a0n\u00a0%\u00a05\u00a0==\u00a00,\u00a0lst2)\nprint(list(f))\n#\u00a0prints\u00a0[5,\u00a010,\u00a025]\n#\u00a0using\u00a0lambda\u00a0with\u00a0reduce(\u00a0)\n198\nLet\u00a0Us\u00a0Python\nfrom\u00a0functools\u00a0import\u00a0reduce\nlst3 =\u00a0[1,\u00a02,\u00a03,\u00a04,\u00a05]\ns\u00a0=\u00a0reduce(lambda\u00a0x,\u00a0y\u00a0:\u00a0x\u00a0+\u00a0y,\u00a0lst3)\np\u00a0=\u00a0reduce(lambda\u00a0x,\u00a0y\u00a0:\u00a0x\u00a0*\u00a0y,\u00a0lst3)\nprint(s,\u00a0p)\n#\u00a0prints\u00a015\u00a0 120\nx\nIf\u00a0required\u00a0map(\u00a0),\u00a0filter(\u00a0) and\u00a0reduce(\u00a0) can\u00a0be\u00a0used\u00a0together.\ndef\u00a0fun(n)\u00a0:\nreturn\u00a0n\u00a0>\u00a01000\nlst\u00a0=\u00a0[10,\u00a020,\u00a030,\u00a040,\u00a050]\nl", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_294", "chunk_strategy": "fixed_size"}}, {"text": ",\u00a0lst3)\np\u00a0=\u00a0reduce(lambda\u00a0x,\u00a0y\u00a0:\u00a0x\u00a0*\u00a0y,\u00a0lst3)\nprint(s,\u00a0p)\n#\u00a0prints\u00a015\u00a0 120\nx\nIf\u00a0required\u00a0map(\u00a0),\u00a0filter(\u00a0) and\u00a0reduce(\u00a0) can\u00a0be\u00a0used\u00a0together.\ndef\u00a0fun(n)\u00a0:\nreturn\u00a0n\u00a0>\u00a01000\nlst\u00a0=\u00a0[10,\u00a020,\u00a030,\u00a040,\u00a050]\nl\u00a0=\u00a0filter(fun,\u00a0map(lambda\u00a0x\u00a0:\u00a0x\u00a0*\u00a0x,\u00a0lst))\nprint(list(l))\nx\nHere\u00a0 map(\u00a0) and\u00a0filter(\u00a0) are\u00a0used\u00a0together.\u00a0map(\u00a0) obtains\u00a0a\u00a0list\u00a0of\u00a0\nsquare\u00a0 of\u00a0 all\u00a0elements\u00a0in\u00a0 a\u00a0list.\u00a0 filter(\u00a0 ) then\u00a0filters\u00a0 out\u00a0only\u00a0those\u00a0\nsquares\u00a0which\u00a0are\u00a0bigger\u00a0than\u00a01000.\u00a0\nWhere\u00a0are\u00a0they\u00a0Useful?\nx\nRelational\u00a0 databases\u00a0use\u00a0the\u00a0map/filter/reduce\u00a0paradigm.\u00a0A\u00a0typical\u00a0\nSQL\u00a0query\u00a0to\u00a0obtain\u00a0the\u00a0maximum\u00a0salary\u00a0that\u00a0a\u00a0skilled\u00a0worker\u00a0gets\u00a0\nfrom\u00a0an\u00a0Employees\u00a0table\u00a0will\u00a0be:\nSELECT max(salary)\u00a0FROM Employees\u00a0WHERE grade\u00a0=\u00a0'Skilled'\nThe\u00a0 same\u00a0 query\u00a0 can\u00a0 be\u00a0 written\u00a0 in\u00a0 terms\u00a0 of\u00a0 map(\u00a0 ),\u00a0 filter(\u00a0 ) and\u00a0\nreduce(\u00a0) as:\nreduce(max,\u00a0map(get_salary,\u00a0filter(lambda\u00a0x\u00a0:\u00a0x.grade( )\u00a0==\u00a0\n'Skilled',\u00a0employees)))\nHere\u00a0employees is\u00a0a sequence,\u00a0i.e.\u00a0a\u00a0list\u00a0of\u00a0lists,\u00a0where\u00a0each\u00a0list\u00a0has\u00a0\nthe\u00a0data\u00a0for\u00a0one\u00a0employee\ngrade\u00a0=\u00a0'Skilled'\u00a0 is\u00a0a f", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_295", "chunk_strategy": "fixed_size"}}, {"text": "x,\u00a0map(get_salary,\u00a0filter(lambda\u00a0x\u00a0:\u00a0x.grade( )\u00a0==\u00a0\n'Skilled',\u00a0employees)))\nHere\u00a0employees is\u00a0a sequence,\u00a0i.e.\u00a0a\u00a0list\u00a0of\u00a0lists,\u00a0where\u00a0each\u00a0list\u00a0has\u00a0\nthe\u00a0data\u00a0for\u00a0one\u00a0employee\ngrade\u00a0=\u00a0'Skilled'\u00a0 is\u00a0a filter\nget_salary is\u00a0a map which\u00a0returns\u00a0the\u00a0salary\u00a0field\u00a0from\u00a0the\u00a0list\nand\u00a0max is\u00a0a reduce\nIn\u00a0SQL\u00a0terminology\u00a0map,\u00a0filter and reduce\u00a0are\u00a0called\u00a0project,\u00a0select\nand aggregate\u00a0respectively.\nChapter 15:\u00a0Functional\u00a0Programming\u00a0\n199\nx\nIf\u00a0 we\u00a0 can\u00a0manage\u00a0 our\u00a0 program\u00a0 using\u00a0map,\u00a0 filter,\u00a0 and\u00a0reduce,\u00a0 and\u00a0\nlambda\u00a0 functions\u00a0 then\u00a0 we\u00a0 can\u00a0 run\u00a0 each\u00a0 operation\u00a0 in\u00a0 separate\u00a0\nthreads\u00a0 and/or\u00a0 different\u00a0processors\u00a0 and\u00a0still\u00a0 get\u00a0 the\u00a0same\u00a0 results.\u00a0\nMultithreading\u00a0is\u00a0discussed\u00a0in\u00a0detail\u00a0in\u00a0Chapter\u00a025.\n____________________________________________________________________\nProblem\u00a015.1\nDefine\u00a0three\u00a0functions\u00a0fun(\u00a0),\u00a0disp(\u00a0) and\u00a0msg(\u00a0),\u00a0store\u00a0them\u00a0in\u00a0a\u00a0list\u00a0and\u00a0\ncall\u00a0them\u00a0one\u00a0by\u00a0one\u00a0in\u00a0a\u00a0loop.\nProgram\ndef\u00a0fun(\u00a0)\u00a0:\nprint('In\u00a0fun')\ndef\u00a0disp(\u00a0)\u00a0:\nprint('In\u00a0disp')\ndef\u00a0msg(\u00a0)\u00a0:\nprint('In\u00a0msg')\nlst\u00a0=\u00a0[fun,", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_296", "chunk_strategy": "fixed_size"}}, {"text": "tions\u00a0fun(\u00a0),\u00a0disp(\u00a0) and\u00a0msg(\u00a0),\u00a0store\u00a0them\u00a0in\u00a0a\u00a0list\u00a0and\u00a0\ncall\u00a0them\u00a0one\u00a0by\u00a0one\u00a0in\u00a0a\u00a0loop.\nProgram\ndef\u00a0fun(\u00a0)\u00a0:\nprint('In\u00a0fun')\ndef\u00a0disp(\u00a0)\u00a0:\nprint('In\u00a0disp')\ndef\u00a0msg(\u00a0)\u00a0:\nprint('In\u00a0msg')\nlst\u00a0=\u00a0[fun,\u00a0disp,\u00a0msg]\nfor\u00a0f\u00a0in\u00a0lst\u00a0:\nf(\u00a0)\nOutput\nIn\u00a0fun\nIn\u00a0disp\nIn\u00a0msg\n____________________________________________________________________\nProblem\u00a015.2\nSuppose\u00a0there\u00a0are\u00a0two\u00a0lists,\u00a0one\u00a0 containing\u00a0numbers\u00a0 from\u00a01 to\u00a0 6,\u00a0and\u00a0\nother\u00a0containing\u00a0umbers\u00a0from\u00a06\u00a0to\u00a01.\u00a0Write\u00a0a\u00a0program\u00a0 to\u00a0obtain\u00a0a\u00a0list\u00a0\nthat\u00a0contains\u00a0 elements\u00a0obtained\u00a0 by\u00a0adding\u00a0 corresponding\u00a0elements\u00a0 of\u00a0\nthe\u00a0two\u00a0lists.\n200\nLet\u00a0Us\u00a0Python\nProgram\nlst1\u00a0=\u00a0[1,\u00a02,\u00a03,\u00a04,\u00a05,\u00a06]\nlst2\u00a0=\u00a0[6,\u00a05,\u00a04,\u00a03,\u00a02,\u00a01]\nresult\u00a0=\u00a0map(lambda\u00a0n1,\u00a0n2:\u00a0n1 +\u00a0n2,\u00a0lst1,\u00a0lst2)\nprint(list(result))\nOutput\n[7,\u00a07,\u00a07,\u00a07,\u00a07,\u00a07]\nTips\nx\nlambda\u00a0function\u00a0receives\u00a0two\u00a0numbers\u00a0and\u00a0returns\u00a0their\u00a0sum.\nx\nmap(\u00a0 ) function\u00a0 applies\u00a0lambda\u00a0 function\u00a0 to\u00a0each\u00a0 pair\u00a0of\u00a0 elements\u00a0\nfrom\u00a0lst1 and\u00a0lst2.\nx\nThe\u00a0map(\u00a0) function\u00a0returns\u00a0a\u00a0map object\u00a0which\u00a0is\u00a0then\u00a0converted\u00a0\ninto\u00a0a\u00a0list\u00a0using\u00a0list", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_297", "chunk_strategy": "fixed_size"}}, {"text": "urns\u00a0their\u00a0sum.\nx\nmap(\u00a0 ) function\u00a0 applies\u00a0lambda\u00a0 function\u00a0 to\u00a0each\u00a0 pair\u00a0of\u00a0 elements\u00a0\nfrom\u00a0lst1 and\u00a0lst2.\nx\nThe\u00a0map(\u00a0) function\u00a0returns\u00a0a\u00a0map object\u00a0which\u00a0is\u00a0then\u00a0converted\u00a0\ninto\u00a0a\u00a0list\u00a0using\u00a0list(\u00a0) before\u00a0printing.\n____________________________________________________________________\nProblem\u00a015.3\nWrite\u00a0a\u00a0program\u00a0to\u00a0create\u00a0a\u00a0new\u00a0list\u00a0by\u00a0obtaining\u00a0square\u00a0of\u00a0all\u00a0numbers\u00a0\nin\u00a0a\u00a0list.\nProgram\nlst1\u00a0=\u00a0[5, 7,\u00a09,\u00a0-3,\u00a04,\u00a02,\u00a06]\u00a0\nlst2\u00a0=\u00a0list(map(lambda\u00a0n\u00a0:\u00a0n\u00a0**\u00a02,\u00a0lst1))\u00a0\nprint(lst2)\nOutput\n[25,\u00a049,\u00a081,\u00a09,\u00a016,\u00a04,\u00a036]\nTips\nx\nlambda\u00a0function\u00a0receives\u00a0a\u00a0number\u00a0and\u00a0returns\u00a0its\u00a0square.\nx\nmap(\u00a0) function\u00a0applies\u00a0lambda\u00a0function\u00a0to\u00a0each\u00a0element\u00a0from\u00a0lst1.\nChapter 15:\u00a0Functional\u00a0Programming\u00a0\n201\nx\nThe\u00a0map(\u00a0) function\u00a0returns\u00a0a\u00a0map object\u00a0which\u00a0is\u00a0then\u00a0converted\u00a0\ninto\u00a0a\u00a0list\u00a0using\u00a0list(\u00a0) before\u00a0printing.\n____________________________________________________________________\nProblem\u00a015.4\nThough\u00a0 map(\u00a0 ) function\u00a0 is\u00a0 available\u00a0 ready-made\u00a0 in\u00a0 Python,\u00a0 can\u00a0 you\u00a0\ndefine\u00a0one\u00a0yourself\u00a0and\u00a0test\u00a0it?\nProgram\nd", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_298", "chunk_strategy": "fixed_size"}}, {"text": "____________________________________________________________________\nProblem\u00a015.4\nThough\u00a0 map(\u00a0 ) function\u00a0 is\u00a0 available\u00a0 ready-made\u00a0 in\u00a0 Python,\u00a0 can\u00a0 you\u00a0\ndefine\u00a0one\u00a0yourself\u00a0and\u00a0test\u00a0it?\nProgram\ndef\u00a0my_map(fun,\u00a0seq)\u00a0:\nresult\u00a0=\u00a0[ ]\nfor\u00a0ele\u00a0in\u00a0seq\u00a0:\nresult.append(fun(ele))\nreturn\u00a0result\nlst1\u00a0=\u00a0[5,\u00a07,\u00a09,\u00a0-3,\u00a04,\u00a02,\u00a06]\u00a0\nlst2\u00a0=\u00a0list(my_map(lambda\u00a0n\u00a0:\u00a0n\u00a0**\u00a02,\u00a0lst1))\u00a0\nprint(lst2)\u00a0\nOutput\n[25,\u00a049,\u00a081,\u00a09,\u00a016,\u00a04,\u00a036]\nTips\nx\nlambda\u00a0function\u00a0receives\u00a0a\u00a0number\u00a0and\u00a0returns\u00a0its\u00a0square.\nx\nmy_map(\u00a0) function\u00a0applies\u00a0lambda\u00a0function\u00a0to\u00a0each\u00a0element\u00a0from\u00a0\nlst1.\nx\nThe\u00a0 my_map(\u00a0 ) function\u00a0 returns\u00a0 a\u00a0 map object\u00a0 which\u00a0 is\u00a0 then\u00a0\nconverted\u00a0into\u00a0a\u00a0list\u00a0using\u00a0list(\u00a0) before\u00a0printing.\n____________________________________________________________________\nProblem\u00a015.5\nFollowing\u00a0data\u00a0shows\u00a0names,\u00a0ages\u00a0and\u00a0marks\u00a0of\u00a0students\u00a0in\u00a0a\u00a0class:\nAnil,\u00a021,\u00a080\nSohail,\u00a020,\u00a090\nSunil,\u00a020,\u00a091\nShobha,\u00a018,\u00a093\nAnil,\u00a019,\u00a085\n202\nLet\u00a0Us\u00a0Python\nWrite\u00a0a\u00a0program\u00a0to\u00a0sort\u00a0this\u00a0data\u00a0on\u00a0multiple\u00a0 keys\u00a0 in\u00a0the\u00a0order\u00a0name,\u00a0\nage\u00a0and\u00a0marks.\nP", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_299", "chunk_strategy": "fixed_size"}}, {"text": "f\u00a0students\u00a0in\u00a0a\u00a0class:\nAnil,\u00a021,\u00a080\nSohail,\u00a020,\u00a090\nSunil,\u00a020,\u00a091\nShobha,\u00a018,\u00a093\nAnil,\u00a019,\u00a085\n202\nLet\u00a0Us\u00a0Python\nWrite\u00a0a\u00a0program\u00a0to\u00a0sort\u00a0this\u00a0data\u00a0on\u00a0multiple\u00a0 keys\u00a0 in\u00a0the\u00a0order\u00a0name,\u00a0\nage\u00a0and\u00a0marks.\nProgram\nimport\u00a0operator\nlst\u00a0=\u00a0[('Anil',\u00a021,\u00a080),\u00a0('Sohail',\u00a020,\u00a090),\u00a0('Sunil',\u00a020,\u00a091),\u00a0\n('Shobha',\u00a018,\u00a093),\u00a0('Anil',\u00a019,\u00a085),\u00a0('Shobha',\u00a020,\u00a092)]\nprint(sorted(lst,\u00a0key\u00a0=\u00a0operator.itemgetter(0,\u00a01,\u00a02)))\nprint(sorted(lst,\u00a0key\u00a0=\u00a0lambda\u00a0tpl\u00a0:\u00a0(tpl[0],\u00a0tpl[1],\u00a0tpl[2])))\nOutput\n[('Anil',\u00a0 19,\u00a0 85),\u00a0 ('Anil',\u00a0 21,\u00a0 80),\u00a0 ('Shobha',\u00a0 18,\u00a0 93),\u00a0 ('Shobha',\u00a0 20,\u00a0 92),\u00a0\n('Sohail',\u00a020,\u00a090),\u00a0('Sunil',\u00a020,\u00a091)]\n[('Anil',\u00a0 19,\u00a0 85),\u00a0 ('Anil',\u00a0 21,\u00a0 80),\u00a0 ('Shobha',\u00a0 18,\u00a0 93),\u00a0 ('Shobha',\u00a0 20,\u00a0 92),\u00a0\n('Sohail',\u00a020,\u00a090),\u00a0('Sunil',\u00a020,\u00a091)]\nTips\nx\nSince\u00a0there\u00a0are\u00a0multiple\u00a0data\u00a0items\u00a0about\u00a0a\u00a0student,\u00a0they\u00a0have\u00a0been\u00a0\nput\u00a0into\u00a0a\u00a0tuple.\nx\nSince\u00a0there\u00a0are\u00a0multiple\u00a0students,\u00a0all\u00a0tuples\u00a0have\u00a0been\u00a0put\u00a0in\u00a0a\u00a0list.\nx\nTwo\u00a0 sorting\u00a0 methods\u00a0 have\u00a0 been\u00a0 used.\u00a0 In\u00a0 the\u00a0 first\u00a0 method\u00a0\nitemgetter(\u00a0 ) specifies\u00a0 the\u00a0 sortin", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_300", "chunk_strategy": "fixed_size"}}, {"text": "en\u00a0\nput\u00a0into\u00a0a\u00a0tuple.\nx\nSince\u00a0there\u00a0are\u00a0multiple\u00a0students,\u00a0all\u00a0tuples\u00a0have\u00a0been\u00a0put\u00a0in\u00a0a\u00a0list.\nx\nTwo\u00a0 sorting\u00a0 methods\u00a0 have\u00a0 been\u00a0 used.\u00a0 In\u00a0 the\u00a0 first\u00a0 method\u00a0\nitemgetter(\u00a0 ) specifies\u00a0 the\u00a0 sorting\u00a0 order.\u00a0In\u00a0 the\u00a0 second\u00a0 method\u00a0a\u00a0\nlambda\u00a0has\u00a0been\u00a0used\u00a0to\u00a0specify\u00a0the\u00a0sorting\u00a0order.\n____________________________________________________________________\nProblem\u00a015.6\nSuppose\u00a0a\u00a0dictionary\u00a0contain\u00a0key-value\u00a0pairs,\u00a0where\u00a0key\u00a0is\u00a0an\u00a0alphabet\u00a0\nand\u00a0value\u00a0is\u00a0a\u00a0number.\u00a0Write\u00a0a\u00a0program\u00a0that\u00a0obtains\u00a0the\u00a0maximum\u00a0and\u00a0\nminimum\u00a0values\u00a0from\u00a0the\u00a0dictionary.\nProgram\nd\u00a0=\u00a0{'x' : 500,\u00a0'y' : 5874,\u00a0'z' :\u00a0560}\nkey_max\u00a0=\u00a0max(d.keys(\u00a0),\u00a0key\u00a0=\u00a0(lambda\u00a0k:\u00a0d[k]))\nkey_min\u00a0=\u00a0min(d.keys(\u00a0),\u00a0key\u00a0=\u00a0(lambda\u00a0k:\u00a0d[k]))\nChapter 15:\u00a0Functional\u00a0Programming\u00a0\n203\nprint('Maximum\u00a0Value:\u00a0',\u00a0d[key_max])\nprint('Minimum\u00a0Value:\u00a0',\u00a0d[key_min])\nOutput\nMaximum\u00a0Value:\u00a0 5874\u00a0\nMinimum\u00a0Value:\u00a0 500\n____________________________________________________________________\n[A] State\u00a0whether\u00a0the\u00a0following\u00a0statements\u00a0are\u00a0True\u00a0or\u00a0False:\n(a) lambda\u00a0fun", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_301", "chunk_strategy": "fixed_size"}}, {"text": "min])\nOutput\nMaximum\u00a0Value:\u00a0 5874\u00a0\nMinimum\u00a0Value:\u00a0 500\n____________________________________________________________________\n[A] State\u00a0whether\u00a0the\u00a0following\u00a0statements\u00a0are\u00a0True\u00a0or\u00a0False:\n(a) lambda\u00a0function\u00a0cannot\u00a0be\u00a0used\u00a0with\u00a0reduce(\u00a0) function.\n(b) lambda,\u00a0 map(\u00a0),\u00a0filter(\u00a0 ),\u00a0reduce(\u00a0 ) can\u00a0 be\u00a0 combined\u00a0 in\u00a0one\u00a0 single\u00a0\nexpression.\n(c) Though\u00a0functions\u00a0can\u00a0be\u00a0assigned\u00a0to\u00a0variables,\u00a0they\u00a0cannot\u00a0be\u00a0called\u00a0\nusing\u00a0these\u00a0variables.\n(d) Functions\u00a0 can\u00a0 be\u00a0 passed\u00a0 as\u00a0 arguments\u00a0 to\u00a0 function\u00a0 and\u00a0 returned\u00a0\nfrom\u00a0function.\n(e) Functions\u00a0 can\u00a0be\u00a0built\u00a0at\u00a0execution\u00a0time,\u00a0the\u00a0way\u00a0lists,\u00a0tuples,\u00a0etc.\u00a0\ncan\u00a0be.\u00a0\n(f) Lambda\u00a0functions\u00a0are\u00a0always\u00a0nameless.\n[B] Using\u00a0 lambda,\u00a0 map(\u00a0 ),\u00a0 filter(\u00a0 ) and\u00a0 reduce(\u00a0 ) or\u00a0 a\u00a0 combination\u00a0\nthereof\u00a0to\u00a0perform the\u00a0following\u00a0tasks:\n(a) Suppose\u00a0a\u00a0 dictionary\u00a0contains\u00a0type\u00a0of\u00a0pet\u00a0(cat,\u00a0 dog,\u00a0etc.),\u00a0name\u00a0of\u00a0\npet\u00a0and\u00a0age\u00a0of\u00a0pet.\u00a0Write\u00a0a\u00a0program\u00a0that\u00a0obtains\u00a0the\u00a0sum\u00a0of\u00a0all\u00a0dog's\u00a0\nages.\n(b) Consider\u00a0the\u00a0following\u00a0list:\nlst\u00a0=\u00a0[1.25,\u00a03.22,\u00a04.68,\u00a010.95,\u00a032.55,\u00a012.54]\n", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_302", "chunk_strategy": "fixed_size"}}, {"text": "ins\u00a0type\u00a0of\u00a0pet\u00a0(cat,\u00a0 dog,\u00a0etc.),\u00a0name\u00a0of\u00a0\npet\u00a0and\u00a0age\u00a0of\u00a0pet.\u00a0Write\u00a0a\u00a0program\u00a0that\u00a0obtains\u00a0the\u00a0sum\u00a0of\u00a0all\u00a0dog's\u00a0\nages.\n(b) Consider\u00a0the\u00a0following\u00a0list:\nlst\u00a0=\u00a0[1.25,\u00a03.22,\u00a04.68,\u00a010.95,\u00a032.55,\u00a012.54]\nThe\u00a0numbers\u00a0in\u00a0the\u00a0list\u00a0represent\u00a0radii\u00a0of\u00a0circles.\u00a0Write\u00a0a\u00a0program\u00a0to\u00a0\nobtain\u00a0 a\u00a0 list\u00a0 of\u00a0 areas\u00a0 of\u00a0 these\u00a0 circles\u00a0 rounded\u00a0 off\u00a0 to\u00a0 two\u00a0 decimal\u00a0\nplaces.\n(c) Consider\u00a0the\u00a0following\u00a0lists:\nnums\u00a0=\u00a0[10,\u00a020,\u00a030,\u00a040,\u00a050,\u00a060,\u00a070,\u00a080]\n204\nLet\u00a0Us\u00a0Python\nstrs\u00a0=\u00a0['A',\u00a0'B',\u00a0'C',\u00a0'D',\u00a0'E',\u00a0'F',\u00a0'G',\u00a0'H']\nWrite\u00a0a\u00a0program\u00a0to\u00a0obtain\u00a0a\u00a0list\u00a0of\u00a0tuples,\u00a0where\u00a0each\u00a0tuple\u00a0contains\u00a0\na\u00a0number\u00a0from\u00a0one\u00a0list\u00a0and\u00a0a\u00a0string\u00a0from\u00a0another,\u00a0in\u00a0the\u00a0same\u00a0order\u00a0\nin\u00a0which\u00a0they\u00a0appear\u00a0in\u00a0the\u00a0original\u00a0lists.\n(d) Suppose\u00a0 a\u00a0 dictionary\u00a0 contains\u00a0 names\u00a0 of\u00a0 students\u00a0 and\u00a0 marks\u00a0\nobtained\u00a0by\u00a0them\u00a0in\u00a0an\u00a0examination.\u00a0Write\u00a0a\u00a0program\u00a0to\u00a0obtain\u00a0a\u00a0list\u00a0\nof\u00a0students\u00a0who\u00a0obtained\u00a0more\u00a0than\u00a040\u00a0marks\u00a0in\u00a0the\u00a0examination.\n(e) Consider\u00a0the\u00a0following\u00a0list:\nlst\u00a0=\u00a0['Malayalam',\u00a0'Drawing',\u00a0'madamIamadam',\u00a0'1234321']\nWrite\u00a0a\u00a0program\u00a0to\u00a0p", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_303", "chunk_strategy": "fixed_size"}}, {"text": "rogram\u00a0to\u00a0obtain\u00a0a\u00a0list\u00a0\nof\u00a0students\u00a0who\u00a0obtained\u00a0more\u00a0than\u00a040\u00a0marks\u00a0in\u00a0the\u00a0examination.\n(e) Consider\u00a0the\u00a0following\u00a0list:\nlst\u00a0=\u00a0['Malayalam',\u00a0'Drawing',\u00a0'madamIamadam',\u00a0'1234321']\nWrite\u00a0a\u00a0program\u00a0to\u00a0print\u00a0those\u00a0strings\u00a0which\u00a0are\u00a0palindromes.\n(f) A\u00a0 list\u00a0contains\u00a0 names\u00a0of\u00a0employees.\u00a0 Write\u00a0 a\u00a0 program\u00a0 to\u00a0filter\u00a0 out\u00a0\nthose\u00a0names\u00a0whose\u00a0length\u00a0is\u00a0more\u00a0than\u00a08\u00a0characters.\n(g) A\u00a0dictionary\u00a0contains\u00a0following\u00a0information\u00a0about\u00a05\u00a0employees:\nFirst\u00a0name\nLast\u00a0name\nAge\nGrade\u00a0(Skilled,\u00a0Semi-skilled,\u00a0Highly-skilled)\nWrite\u00a0 a\u00a0 program\u00a0 to\u00a0 obtain\u00a0 a\u00a0 list\u00a0 of\u00a0 employees\u00a0 (first\u00a0 name\u00a0 +\u00a0 last\u00a0\nname)\u00a0who\u00a0are\u00a0Highly-skilled.\n(h) Consider\u00a0the\u00a0following\u00a0list:\nlst\u00a0=\u00a0['Benevolent',\u00a0'Dictator',\u00a0'For',\u00a0'Life']\nWrite\u00a0a\u00a0program\u00a0to\u00a0obtain\u00a0a\u00a0string\u00a0'Benevolent\u00a0Dictator\u00a0For\u00a0Life'.\n(i) Consider\u00a0the\u00a0following\u00a0list\u00a0of\u00a0students\u00a0in\u00a0a\u00a0class.\u00a0\nlst\u00a0=\u00a0['Rahul',\u00a0'Priya',\u00a0'Chaaya',\u00a0'Narendra',\u00a0'Prashant']\nWrite\u00a0a\u00a0program\u00a0to\u00a0obtain\u00a0a\u00a0list\u00a0in\u00a0which\u00a0all\u00a0the\u00a0names are\u00a0converted\u00a0\nto\u00a0uppercase.\nLet\u00a0Us\nPython\n205\nModules\u00a0and\nPac", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_304", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0students\u00a0in\u00a0a\u00a0class.\u00a0\nlst\u00a0=\u00a0['Rahul',\u00a0'Priya',\u00a0'Chaaya',\u00a0'Narendra',\u00a0'Prashant']\nWrite\u00a0a\u00a0program\u00a0to\u00a0obtain\u00a0a\u00a0list\u00a0in\u00a0which\u00a0all\u00a0the\u00a0names are\u00a0converted\u00a0\nto\u00a0uppercase.\nLet\u00a0Us\nPython\n205\nModules\u00a0and\nPackages\nx\nThe\u00a0Main\u00a0Module\nx\nSame\u00a0Code,\u00a0Different\u00a0Interpretation\nx\nMultiple\u00a0Modules\nx\nPackages\nx\nImporting\u00a0a\u00a0Module\nx\nThird-party\u00a0Packages\u00a0\nx\nVariations\u00a0of\u00a0import\nx\nPrograms\nx\nSearch\u00a0Sequence\nx\nExercises\n16\n\u201cOrganize,\u00a0and\u00a0you\u00a0will\u00a0be\u00a0better\u00a0off...\u201d\n206\nLet\u00a0Us\u00a0Python\nThe\u00a0Main\u00a0Module\nx\nA\u00a0module\u00a0is\u00a0a\u00a0.py\u00a0file\u00a0 containing\u00a0definitions\u00a0and\u00a0statements.\u00a0So\u00a0all\u00a0\n.py\u00a0files\u00a0that\u00a0we\u00a0created\u00a0so\u00a0far\u00a0for\u00a0our\u00a0programs\u00a0are\u00a0modules.\nx\nWhen\u00a0 we\u00a0 execute\u00a0 a\u00a0 program\u00a0 its\u00a0 module\u00a0 name\u00a0 is\u00a0 __main__.\u00a0 This\u00a0\nname\u00a0is\u00a0available\u00a0in\u00a0the\u00a0variable\u00a0__name__.\ndef\u00a0display(\u00a0)\u00a0:\nprint('You\u00a0cannot\u00a0make\u00a0History\u00a0if\u00a0you\u00a0use\u00a0Incognito\u00a0Mode')\ndef\u00a0show(\u00a0)\u00a0:\nprint('Pizza\u00a0is\u00a0a\u00a0pie\u00a0chart\u00a0of\u00a0how\u00a0much\u00a0pizza\u00a0is\u00a0left')\nprint(__name__)\ndisplay(\u00a0)\nshow(\u00a0)\n\u2018\nOn\u00a0execution\u00a0of\u00a0this\u00a0program,\u00a0we\u00a0get\u00a0the\u00a0following\u00a0output:\n__main__\nYou\u00a0cannot\u00a0make\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_305", "chunk_strategy": "fixed_size"}}, {"text": "o\u00a0Mode')\ndef\u00a0show(\u00a0)\u00a0:\nprint('Pizza\u00a0is\u00a0a\u00a0pie\u00a0chart\u00a0of\u00a0how\u00a0much\u00a0pizza\u00a0is\u00a0left')\nprint(__name__)\ndisplay(\u00a0)\nshow(\u00a0)\n\u2018\nOn\u00a0execution\u00a0of\u00a0this\u00a0program,\u00a0we\u00a0get\u00a0the\u00a0following\u00a0output:\n__main__\nYou\u00a0cannot\u00a0make\u00a0History\u00a0if\u00a0you\u00a0use\u00a0Incognito\u00a0Mode\nPizza\u00a0is\u00a0a\u00a0pie\u00a0chart\u00a0of\u00a0how\u00a0much\u00a0pizza\u00a0is\u00a0left\nMultiple\u00a0Modules\nx\nThere\u00a0are\u00a0two\u00a0reasons\u00a0why\u00a0we\u00a0may\u00a0want\u00a0to\u00a0create\u00a0a\u00a0program\u00a0that\u00a0\ncontains\u00a0multiple\u00a0modules:\n(a) It\u00a0 makes\u00a0 sense\u00a0 to\u00a0 split\u00a0 a\u00a0 big\u00a0 program\u00a0 into\u00a0 multiple\u00a0 .py\u00a0 files,\u00a0\nwhere\u00a0each\u00a0.py\u00a0file\u00a0acts\u00a0as\u00a0a\u00a0module.\nBenefit\u00a0- Ease\u00a0of\u00a0development\u00a0and\u00a0maintenance.\n(b) We may\u00a0need\u00a0a\u00a0set\u00a0of\u00a0 handy\u00a0functions\u00a0in\u00a0several\u00a0programs.\u00a0In\u00a0\nsuch\u00a0 a\u00a0 case\u00a0 instead\u00a0 of\u00a0 copying\u00a0 these\u00a0 functions\u00a0 in\u00a0 different\u00a0\nprogram\u00a0files,\u00a0 we\u00a0may\u00a0 keep\u00a0them\u00a0in\u00a0one\u00a0 file\u00a0 and\u00a0use\u00a0 them\u00a0in\u00a0\ndifferent\u00a0programs.\nBenefit\u00a0- Reuse\u00a0of\u00a0existing\u00a0code.\nChapter 16:\u00a0Modules\u00a0and\u00a0Packages\u00a0\n207\nImporting\u00a0a\u00a0Module\nx\nTo\u00a0 use\u00a0 the\u00a0 definitions and\u00a0 statements\u00a0 in\u00a0 a\u00a0 module\u00a0 in\u00a0 another\u00a0\nmodule,\u00a0we\u00a0need\u00a0to\u00a0'import'\u00a0it\u00a0into\u00a0this module.\n#\u00a0functio", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_306", "chunk_strategy": "fixed_size"}}, {"text": "sting\u00a0code.\nChapter 16:\u00a0Modules\u00a0and\u00a0Packages\u00a0\n207\nImporting\u00a0a\u00a0Module\nx\nTo\u00a0 use\u00a0 the\u00a0 definitions and\u00a0 statements\u00a0 in\u00a0 a\u00a0 module\u00a0 in\u00a0 another\u00a0\nmodule,\u00a0we\u00a0need\u00a0to\u00a0'import'\u00a0it\u00a0into\u00a0this module.\n#\u00a0functions.py\ndef\u00a0display(\u00a0)\u00a0:\nprint('Earlier\u00a0rich\u00a0owned\u00a0cars,\u00a0while\u00a0poor\u00a0had\u00a0horses')\ndef\u00a0show(\u00a0)\u00a0:\nprint('Now\u00a0everyone\u00a0has\u00a0car,\u00a0while\u00a0only\u00a0rich\u00a0own\u00a0horses')\n#\u00a0usefunctions.py\nimport\u00a0functions\nfunctions.display(\u00a0)\nfunctions.show(\u00a0)\nWhen\u00a0we\u00a0execute\u00a0'usefunctions.py',\u00a0it\u00a0runs\u00a0as\u00a0a\u00a0module\u00a0with\u00a0name\u00a0\n__main__.\u00a0\nimport\u00a0functions makes\u00a0the\u00a0definitions\u00a0in\u00a0'functions.py'\u00a0available\u00a0in\u00a0\n'usefunctions.py'.\nx\nA\u00a0module\u00a0can\u00a0import\u00a0multiple\u00a0modules.\nimport\u00a0math\nimport\u00a0random\nimport\u00a0functions\n#\u00a0use\u00a0function.py\u00a0of\u00a0previous\u00a0program\na\u00a0=\u00a0100\nb\u00a0=\u00a0200\nprint(__name__)\nprint(math.sin(0.5))\nprinr(math.cos(0.5))\nprint(random.random(\u00a0))\nprint(random.randint(30,\u00a045))\nfunctions.display(\u00a0)\nfunctions.show(\u00a0)\nHere\u00a0__name__ contains\u00a0__main__ indicating\u00a0that\u00a0we\u00a0are\u00a0executing\u00a0\nthe\u00a0 main\u00a0 module.\u00a0 random and\u00a0 math are\u00a0 standard\u00a0 mo", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_307", "chunk_strategy": "fixed_size"}}, {"text": "random(\u00a0))\nprint(random.randint(30,\u00a045))\nfunctions.display(\u00a0)\nfunctions.show(\u00a0)\nHere\u00a0__name__ contains\u00a0__main__ indicating\u00a0that\u00a0we\u00a0are\u00a0executing\u00a0\nthe\u00a0 main\u00a0 module.\u00a0 random and\u00a0 math are\u00a0 standard\u00a0 modules.\u00a0\nfunctions is\u00a0a\u00a0user-defined\u00a0module.\n208\nLet\u00a0Us\u00a0Python\nVariations\u00a0of\u00a0import\nx\nThe\u00a0import statement\u00a0can\u00a0be\u00a0used\u00a0in\u00a0multiple\u00a0forms.\u00a0\nimport\u00a0math\nimport\u00a0random\nis\u00a0same\u00a0as\u00a0\nimport\u00a0math,\u00a0random\nx\nIf\u00a0we\u00a0wish,\u00a0we\u00a0can\u00a0import\u00a0specific\u00a0names\u00a0from\u00a0a\u00a0module.\nfrom\u00a0math\u00a0import\u00a0sin,\u00a0cos,\u00a0tan\nfrom\u00a0functions\u00a0import\u00a0display\u00a0\n#\u00a0imports\u00a0only\u00a0display\u00a0function\nfrom\u00a0functions\u00a0import\u00a0*\n#\u00a0imports\u00a0all\u00a0functions\nx\nWe\u00a0 can\u00a0rename\u00a0a\u00a0module\u00a0while\u00a0importing\u00a0it.\u00a0We\u00a0 can\u00a0then\u00a0use\u00a0the\u00a0\nnew\u00a0name\u00a0in\u00a0place\u00a0of\u00a0the\u00a0original\u00a0module\u00a0name.\nimport\u00a0functions\u00a0as\u00a0fun\nfun.display(\u00a0)\nor\u00a0even\nfrom\u00a0functions\u00a0import\u00a0display\u00a0as\u00a0disp\ndisp(\u00a0)\nSearch\u00a0Sequence\nx\nIf\u00a0 we\u00a0import\u00a0a\u00a0module\u00a0called\u00a0 'myfuncs',\u00a0following\u00a0search\u00a0sequence\u00a0\nwill\u00a0be\u00a0followed:\n-\nInterpreter\u00a0will\u00a0first\u00a0search\u00a0for\u00a0a\u00a0built-in\u00a0module\u00a0called\u00a0'myfuncs'.\n-\nIf\u00a0 such\u00a0 a\u00a0 modu", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_308", "chunk_strategy": "fixed_size"}}, {"text": "(\u00a0)\nSearch\u00a0Sequence\nx\nIf\u00a0 we\u00a0import\u00a0a\u00a0module\u00a0called\u00a0 'myfuncs',\u00a0following\u00a0search\u00a0sequence\u00a0\nwill\u00a0be\u00a0followed:\n-\nInterpreter\u00a0will\u00a0first\u00a0search\u00a0for\u00a0a\u00a0built-in\u00a0module\u00a0called\u00a0'myfuncs'.\n-\nIf\u00a0 such\u00a0 a\u00a0 module\u00a0 is\u00a0 not\u00a0 found,\u00a0 then\u00a0 it\u00a0 will\u00a0 search\u00a0 for\u00a0 it\u00a0 in\u00a0\ndirectory\u00a0list\u00a0given\u00a0by\u00a0the\u00a0variable\u00a0sys.path.\nx\nThe\u00a0list\u00a0in\u00a0the\u00a0 sys.path\u00a0variable\u00a0contains\u00a0 directory\u00a0from\u00a0where\u00a0the\u00a0\nscript\u00a0has\u00a0been\u00a0executed,\u00a0followed\u00a0by\u00a0a\u00a0list\u00a0of\u00a0directories\u00a0as\u00a0specified\u00a0\nin\u00a0PYTHONPATH environment\u00a0variable.\nx\nWe\u00a0can\u00a0print\u00a0the\u00a0list\u00a0of\u00a0directories\u00a0in\u00a0sys.path using:\nChapter 16:\u00a0Modules\u00a0and\u00a0Packages\u00a0\n209\nimport\u00a0sys\nfor\u00a0p\u00a0in\u00a0sys.path\u00a0:\nprint(p)\nSame\u00a0Code,\u00a0Different\u00a0Interpretation\nx\nSuppose\u00a0we\u00a0have\u00a0a\u00a0module\u00a0called\u00a0functions in\u00a0'functions.py'.\u00a0If\u00a0this\u00a0\nmodule\u00a0 has\u00a0functions\u00a0 display(\u00a0 ) and\u00a0main(\u00a0).\u00a0We\u00a0 want\u00a0 to\u00a0use\u00a0this\u00a0\nprogram\u00a0sometime\u00a0as\u00a0an\u00a0independent\u00a0script,\u00a0and\u00a0at\u00a0other\u00a0times\u00a0as\u00a0a\u00a0\nmodule\u00a0from\u00a0which\u00a0we\u00a0can\u00a0use\u00a0display(\u00a0) function.\nx\nTo\u00a0achieve\u00a0this,\u00a0we\u00a0need\u00a0to\u00a0write\u00a0the\u00a0code\u00a0in\u00a0this\u00a0fashion:\n#\u00a0functions.py\nde", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_309", "chunk_strategy": "fixed_size"}}, {"text": "s\u00a0\nprogram\u00a0sometime\u00a0as\u00a0an\u00a0independent\u00a0script,\u00a0and\u00a0at\u00a0other\u00a0times\u00a0as\u00a0a\u00a0\nmodule\u00a0from\u00a0which\u00a0we\u00a0can\u00a0use\u00a0display(\u00a0) function.\nx\nTo\u00a0achieve\u00a0this,\u00a0we\u00a0need\u00a0to\u00a0write\u00a0the\u00a0code\u00a0in\u00a0this\u00a0fashion:\n#\u00a0functions.py\ndef\u00a0display(\u00a0)\u00a0:\nprint('Wright\u00a0Brothers\u00a0are\u00a0responsible\u00a0for\u00a09/11\u00a0too')\ndef\u00a0main(\u00a0)\u00a0:\nprint('If\u00a0you\u00a0beat\u00a0your\u00a0own\u00a0record,\u00a0you\u00a0win\u00a0as\u00a0well\u00a0as\u00a0lose')\nprint('Internet\u00a0connects\u00a0people\u00a0at\u00a0a\u00a0long\u00a0distance')\nprint('Internet\u00a0disconnects\u00a0people\u00a0at\u00a0a\u00a0short\u00a0distance')\ndisplay(\u00a0)\nif\u00a0__name__\u00a0==\u00a0'__main__'\u00a0:\nmain(\u00a0)\nIf\u00a0 we\u00a0 run\u00a0 it\u00a0 as\u00a0 an\u00a0 independent\u00a0 program,\u00a0 if will\u00a0 be\u00a0 satisfied.\u00a0 As\u00a0 a\u00a0\nresult,\u00a0main(\u00a0) will\u00a0be\u00a0called.\u00a0The\u00a0name\u00a0of\u00a0this\u00a0function\u00a0need\u00a0not\u00a0be\u00a0\nmain(\u00a0).\nIf\u00a0we\u00a0import\u00a0this\u00a0module\u00a0in\u00a0another\u00a0program,\u00a0if will\u00a0fail,\u00a0so\u00a0main(\u00a0)\u00a0\nwill\u00a0 not\u00a0 be\u00a0 called.\u00a0 However,\u00a0 the\u00a0 program\u00a0 can\u00a0 call\u00a0 display(\u00a0 )\nindependently.\nPackages\nx\nThe\u00a0way\u00a0drives,\u00a0folders,\u00a0 subfolders\u00a0help\u00a0 us\u00a0organize\u00a0 files\u00a0in\u00a0an\u00a0OS,\u00a0\npackages\u00a0help\u00a0us\u00a0organize\u00a0sub-packages\u00a0and\u00a0modules.\nx\nA\u00a0 particular\u00a0 directory\u00a0 is\u00a0treated\u00a0 as\u00a0 a", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_310", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0 )\nindependently.\nPackages\nx\nThe\u00a0way\u00a0drives,\u00a0folders,\u00a0 subfolders\u00a0help\u00a0 us\u00a0organize\u00a0 files\u00a0in\u00a0an\u00a0OS,\u00a0\npackages\u00a0help\u00a0us\u00a0organize\u00a0sub-packages\u00a0and\u00a0modules.\nx\nA\u00a0 particular\u00a0 directory\u00a0 is\u00a0treated\u00a0 as\u00a0 a\u00a0 package\u00a0 if\u00a0 it\u00a0 contains\u00a0 a\u00a0 file\u00a0\nnamed\u00a0 __init__.py\u00a0 in\u00a0 it.\u00a0 The\u00a0 directory\u00a0 may\u00a0 contain\u00a0 other\u00a0 sub-\npackages\u00a0and\u00a0modules\u00a0in\u00a0it.\u00a0__init__.py\u00a0file\u00a0may\u00a0be\u00a0empty\u00a0or\u00a0it\u00a0may\u00a0\ncontain\u00a0some\u00a0initialization\u00a0code\u00a0for\u00a0the\u00a0package.\n210\nLet\u00a0Us\u00a0Python\nx\nSuppose\u00a0 there\u00a0is\u00a0 a\u00a0 package\u00a0 called\u00a0 pkg containing\u00a0 a\u00a0module\u00a0 called\u00a0\nmod.py.\u00a0 If\u00a0 the\u00a0 module\u00a0contains\u00a0 functions\u00a0 f1(\u00a0 ) and\u00a0f2(\u00a0 ) then\u00a0the\u00a0\ndirectory\u00a0structure\u00a0would\u00a0be\u00a0as\u00a0follows:\nDirectory\u00a0- pkg\nContents\u00a0of\u00a0pkg\u00a0directory\u00a0- mod.py\u00a0and\u00a0__init__.py\nContents\u00a0of\u00a0mod.py\u00a0- f1(\u00a0)\u00a0and\u00a0f2(\u00a0)\nx\nProgram\u00a0to\u00a0use\u00a0f1(\u00a0) and\u00a0f2(\u00a0) would\u00a0be\u00a0as\u00a0follows:\n#\u00a0mod.py\ndef\u00a0f1(\u00a0)\u00a0:\nprint('Inside\u00a0function\u00a0f1')\ndef\u00a0f2(\u00a0)\u00a0:\nprint('Inside\u00a0function\u00a0f2')\n#\u00a0client.py\nimport\u00a0pkg.mod\npkg.mod.f1(\u00a0)\npkg.mod.f2(\u00a0)\nThird-party\u00a0Packages\nx\nPythonistas\u00a0 in\u00a0 Python\u00a0 community\u00a0 cre", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_311", "chunk_strategy": "fixed_size"}}, {"text": "py\ndef\u00a0f1(\u00a0)\u00a0:\nprint('Inside\u00a0function\u00a0f1')\ndef\u00a0f2(\u00a0)\u00a0:\nprint('Inside\u00a0function\u00a0f2')\n#\u00a0client.py\nimport\u00a0pkg.mod\npkg.mod.f1(\u00a0)\npkg.mod.f2(\u00a0)\nThird-party\u00a0Packages\nx\nPythonistas\u00a0 in\u00a0 Python\u00a0 community\u00a0 create\u00a0 software\u00a0 and\u00a0 make\u00a0 it\u00a0\navailable\u00a0 for\u00a0 other\u00a0 programmers to\u00a0 use.\u00a0 They\u00a0 use\u00a0 PyPI\u2014Python\u00a0\nPackage\u00a0 Index\u00a0 (www.pypi.org)\u00a0 (http://www.pypi.org)\u00a0)\nto\u00a0 distribute\u00a0 their\u00a0 software.\u00a0 PyPI\u00a0\nmaintains\u00a0the\u00a0list\u00a0of\u00a0such\u00a0third-party\u00a0Python\u00a0packages\u00a0available.\u00a0\nx\nThere\u00a0are\u00a0third-party\u00a0packages\u00a0available\u00a0for\u00a0literally\u00a0doing\u00a0everything\nunder\u00a0the\u00a0sun.\nx\nYou\u00a0 too\u00a0can\u00a0 register\u00a0at\u00a0 PyPI\u00a0and\u00a0 upload\u00a0your\u00a0 packages\u00a0 there.\u00a0You\u00a0\nshould\u00a0 follow\u00a0 the\u00a0 guidelines\u00a0 given\u00a0 at\u00a0 www.pypi.org (http://www.pypi.org)\nto\u00a0create\u00a0 the\u00a0\npackage,\u00a0build\u00a0it\u00a0and\u00a0upload\u00a0it\u00a0to\u00a0the\u00a0Python\u00a0Package\u00a0Index.\nx\nTo\u00a0use\u00a0a\u00a0package available\u00a0at\u00a0PyPI\u00a0we\u00a0need\u00a0to\u00a0first\u00a0download\u00a0it\u00a0and\u00a0\nthen\u00a0 install\u00a0 it.\u00a0 The\u00a0 installation\u00a0 is\u00a0 done\u00a0 using a\u00a0 package\u00a0 manager\u00a0\nutility\u00a0called\u00a0pip.\u00a0pip\u00a0itself\u00a0is\u00a0installed\u00a0when\u00a0Python\u00a0is\u00a0installed.\nx\n", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_312", "chunk_strategy": "fixed_size"}}, {"text": "available\u00a0at\u00a0PyPI\u00a0we\u00a0need\u00a0to\u00a0first\u00a0download\u00a0it\u00a0and\u00a0\nthen\u00a0 install\u00a0 it.\u00a0 The\u00a0 installation\u00a0 is\u00a0 done\u00a0 using a\u00a0 package\u00a0 manager\u00a0\nutility\u00a0called\u00a0pip.\u00a0pip\u00a0itself\u00a0is\u00a0installed\u00a0when\u00a0Python\u00a0is\u00a0installed.\nx\nFollowing\u00a0 command\u00a0 shows\u00a0 how\u00a0 to\u00a0 use\u00a0 pip\u00a0 to\u00a0 install\u00a0 a\u00a0 package\npykrige that\u00a0has\u00a0been\u00a0downloaded\u00a0from\u00a0PyPI.\nc:\\>pip\u00a0install\u00a0pykrige\n____________________________________________________________________\nChapter 16:\u00a0Modules\u00a0and\u00a0Packages\u00a0\n211\nProblem\u00a016.1\nWrite\u00a0a\u00a0Python\u00a0program\u00a0that\u00a0is\u00a0organized\u00a0as\u00a0follows:\nPackages:\nmessages.funny\nmessages.curt\nModules:\nmodf1.py,\u00a0modf2.py,\u00a0modf3.py\u00a0in\u00a0package messages.funny\nmodc1.py,\u00a0modc2.py,\u00a0modc3.py\u00a0in\u00a0package\u00a0messages.curt\nFunctions:\nfunf1(\u00a0)\u00a0in\u00a0module\u00a0modf1\nfunf2(\u00a0)\u00a0in\u00a0module\u00a0modf2\nfunf3(\u00a0)\u00a0in\u00a0module\u00a0modf3\nfunc1(\u00a0)\u00a0in\u00a0module\u00a0modc1\nfunc2(\u00a0)\u00a0in\u00a0module\u00a0modc2\nfunc3(\u00a0)\u00a0in\u00a0module\u00a0modc3\nUse\u00a0all\u00a0the\u00a0functions\u00a0in a\u00a0program\u00a0client.py.\nProgram\nDirectory\u00a0structure\u00a0will\u00a0be\u00a0as\u00a0follows:\nmessages\n__init__.py\nfunny\n__init__.py\nmodf1.py\nmodf2.py\nmodf3.py\ncurt\n__init", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_313", "chunk_strategy": "fixed_size"}}, {"text": "dc2\nfunc3(\u00a0)\u00a0in\u00a0module\u00a0modc3\nUse\u00a0all\u00a0the\u00a0functions\u00a0in a\u00a0program\u00a0client.py.\nProgram\nDirectory\u00a0structure\u00a0will\u00a0be\u00a0as\u00a0follows:\nmessages\n__init__.py\nfunny\n__init__.py\nmodf1.py\nmodf2.py\nmodf3.py\ncurt\n__init__.py\nmodc1.py\nmodc2.py\nmodc3.py\nclient.py\nOf\u00a0these,\u00a0messages,\u00a0funny and\u00a0curt are\u00a0directories,\u00a0rest\u00a0are\u00a0files.\u00a0All\u00a0\n__init__.py files\u00a0are\u00a0empty.\n212\nLet\u00a0Us\u00a0Python\n#\u00a0modf1.py\ndef\u00a0funf1(\u00a0)\u00a0:\nprint('The\u00a0ability\u00a0to\u00a0speak\u00a0several\u00a0languages\u00a0is\u00a0an\u00a0asset...')\nprint('ability\u00a0to\u00a0keep\u00a0your\u00a0mouth\u00a0shut\u00a0in\u00a0any\u00a0language\u00a0is\u00a0priceless')\n#\u00a0modf2.py\ndef\u00a0funf2(\u00a0)\u00a0:\nprint('If\u00a0you\u00a0cut\u00a0off\u00a0your\u00a0left\u00a0arm...')\nprint('then\u00a0your\u00a0right\u00a0arm\u00a0would\u00a0be\u00a0left')\n#\u00a0modf3.py\ndef\u00a0funf3(\u00a0)\u00a0:\nprint('Alcohol\u00a0is\u00a0a\u00a0solution!')\n#\u00a0modc1.py\ndef\u00a0func1(\u00a0)\u00a0:\nprint('Light\u00a0travels\u00a0faster\u00a0than\u00a0sound...')\nprint('People\u00a0look\u00a0intelligent,\u00a0till\u00a0they\u00a0open\u00a0their\u00a0mouth')\n#\u00a0modc2.py\ndef\u00a0func2(\u00a0)\u00a0:\nprint('There\u00a0is\u00a0no\u00a0physical\u00a0evidence\u00a0to\u00a0say\u00a0that\u00a0today\u00a0is\u00a0Tuesday...')\nprint('We\u00a0have\u00a0to\u00a0trust\u00a0someone\u00a0who\u00a0kept\u00a0the\u00a0count\u00a0since\u00a0first\u00a0day')\n#\u00a0modc3.py\nde", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_314", "chunk_strategy": "fixed_size"}}, {"text": "y\u00a0open\u00a0their\u00a0mouth')\n#\u00a0modc2.py\ndef\u00a0func2(\u00a0)\u00a0:\nprint('There\u00a0is\u00a0no\u00a0physical\u00a0evidence\u00a0to\u00a0say\u00a0that\u00a0today\u00a0is\u00a0Tuesday...')\nprint('We\u00a0have\u00a0to\u00a0trust\u00a0someone\u00a0who\u00a0kept\u00a0the\u00a0count\u00a0since\u00a0first\u00a0day')\n#\u00a0modc3.py\ndef\u00a0func3(\u00a0)\u00a0:\nprint('We\u00a0spend\u00a0five\u00a0days\u00a0a\u00a0week\u00a0pretending\u00a0to\u00a0be\u00a0someone\u00a0else...')\nprint('in\u00a0order\u00a0to\u00a0spend\u00a0two\u00a0days\u00a0being\u00a0who\u00a0we\u00a0are')\n#\u00a0client.py\nimport\u00a0messages.funny.modf1\nimport\u00a0messages.funny.modf2\nimport\u00a0messages.funny.modf3\nimport\u00a0messages.curt.modc1\nimport\u00a0messages.curt.modc2\nimport\u00a0messages.curt.modc3\nmessages.funny.modf1.funf1(\u00a0)\nChapter 16:\u00a0Modules\u00a0and\u00a0Packages\u00a0\n213\nmessages.funny.modf2.funf2(\u00a0)\nmessages.funny.modf3.funf3(\u00a0)\nmessages.curt.modc1.func1(\u00a0)\nmessages.curt.modc2.func2(\u00a0)\nmessages.curt.modc3.func3(\u00a0)\nTips\nx\nDirectory\u00a0structure\u00a0is\u00a0very\u00a0important. For\u00a0a\u00a0directory\u00a0to\u00a0qualify\u00a0as\u00a0a\u00a0\npackage,\u00a0it\u00a0has\u00a0to\u00a0contain\u00a0a\u00a0file\u00a0__init__.py.\n____________________________________________________________________\nProblem\u00a016.2\nRewrite\u00a0 the\u00a0 import\u00a0 statements\u00a0 in\u00a0 Program\u00a0 16.1,\u00a0 such\u00a0 that\u00a0 ", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_315", "chunk_strategy": "fixed_size"}}, {"text": "s\u00a0a\u00a0\npackage,\u00a0it\u00a0has\u00a0to\u00a0contain\u00a0a\u00a0file\u00a0__init__.py.\n____________________________________________________________________\nProblem\u00a016.2\nRewrite\u00a0 the\u00a0 import\u00a0 statements\u00a0 in\u00a0 Program\u00a0 16.1,\u00a0 such\u00a0 that\u00a0 using\u00a0\nfunctions\u00a0in\u00a0different\u00a0modules\u00a0becomes\u00a0convenient.\nProgram\nfrom\u00a0messages.funny.modf1\u00a0import\u00a0funf1\nfrom\u00a0messages.funny.modf2\u00a0import\u00a0funf2\nfrom\u00a0messages.funny.modf3\u00a0import\u00a0funf3\nfrom\u00a0messages.curt.modc1\u00a0import\u00a0func1\nfrom\u00a0messages.curt.modc2\u00a0import\u00a0func2\nfrom\u00a0messages.curt.modc3\u00a0import\u00a0func3\nfunf1(\u00a0)\nfunf2(\u00a0)\nfunf3(\u00a0)\nfunc1(\u00a0)\nfunc2(\u00a0)\nfunc3(\u00a0)\nTips\nx\nBenefit\u00a0- Calls\u00a0to\u00a0functions\u00a0does\u00a0not\u00a0need\u00a0the\u00a0dotted\u00a0syntax.\nx\nLimitation\u00a0- Only\u00a0the\u00a0specified\u00a0function\u00a0gets\u00a0imported.\u00a0\n____________________________________________________________________\n214\nLet\u00a0Us\u00a0Python\nProblem\u00a016.3\nCan\u00a0we\u00a0rewrite\u00a0the\u00a0following\u00a0imports\u00a0using\u00a0*\u00a0notation?\nfrom\u00a0messages.curt.modc1\u00a0import\u00a0func1\nfrom\u00a0messages.curt.modc2\u00a0import\u00a0func2\nfrom\u00a0messages.curt.modc3\u00a0import\u00a0func3\nfrom\u00a0messages.funny.modf1\u00a0import\u00a0funf1\nfrom\u00a0messages", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_316", "chunk_strategy": "fixed_size"}}, {"text": "llowing\u00a0imports\u00a0using\u00a0*\u00a0notation?\nfrom\u00a0messages.curt.modc1\u00a0import\u00a0func1\nfrom\u00a0messages.curt.modc2\u00a0import\u00a0func2\nfrom\u00a0messages.curt.modc3\u00a0import\u00a0func3\nfrom\u00a0messages.funny.modf1\u00a0import\u00a0funf1\nfrom\u00a0messages.funny.modf2\u00a0import funf2\nfrom\u00a0messages.funny.modf3\u00a0import\u00a0funf3\nProgram\nWe\u00a0may\u00a0use\u00a0the\u00a0following\u00a0import\u00a0statements:\n#\u00a0client.py\nfrom\u00a0messages.curt.modc1\u00a0import\u00a0*\nfrom\u00a0messages.curt.modc2\u00a0import\u00a0*\nfrom\u00a0messages.curt.modc3\u00a0import\u00a0*\nfrom\u00a0messages.funny.modf1\u00a0import\u00a0*\nfrom\u00a0messages.funny.modf2\u00a0import\u00a0*\nfrom\u00a0messages.funny.modf3\u00a0import\u00a0*\nfunf1(\u00a0)\nfunf2(\u00a0)\nfunf3(\u00a0)\nfunc1(\u00a0)\nfunc2(\u00a0)\nfunc3(\u00a0)\nTips\nx\nLimitation\u00a0- Since\u00a0there\u00a0is\u00a0only\u00a0one\u00a0function\u00a0in\u00a0each\u00a0module,\u00a0using\u00a0*\u00a0\nis\u00a0not\u00a0so\u00a0useful.\u00a0\nx\nAlso,\u00a0*\u00a0is\u00a0not\u00a0so\u00a0popular\u00a0as\u00a0it\u00a0does\u00a0not\u00a0indicate\u00a0which\u00a0function/class\u00a0\nare\u00a0we\u00a0importing.\n____________________________________________________________________\nChapter 16:\u00a0Modules\u00a0and\u00a0Packages\u00a0\n215\n[A] Answer\u00a0the\u00a0following questions:\n(a) Suppose\u00a0there\u00a0are\u00a0three\u00a0modules\u00a0m1.py,\u00a0m2.py,\u00a0m3.py,\u00a0containing\u00a0\nfunctions", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_317", "chunk_strategy": "fixed_size"}}, {"text": "_______________________________________________\nChapter 16:\u00a0Modules\u00a0and\u00a0Packages\u00a0\n215\n[A] Answer\u00a0the\u00a0following questions:\n(a) Suppose\u00a0there\u00a0are\u00a0three\u00a0modules\u00a0m1.py,\u00a0m2.py,\u00a0m3.py,\u00a0containing\u00a0\nfunctions\u00a0 f1(\u00a0 ),\u00a0f2(\u00a0) and\u00a0f3(\u00a0 ) respectively.\u00a0 How\u00a0will\u00a0you\u00a0use\u00a0those\u00a0\nfunctions\u00a0in\u00a0your\u00a0program?\n(b) Write\u00a0 a\u00a0 program\u00a0 containing\u00a0 functions\u00a0 fun1(\u00a0),\u00a0 fun2(\u00a0 ),\u00a0 fun3(\u00a0 )\u00a0 and\u00a0\nsome\u00a0statements.\u00a0Add\u00a0suitable\u00a0code\u00a0to\u00a0the\u00a0program\u00a0 such\u00a0that\u00a0 you\u00a0\ncan\u00a0use\u00a0it\u00a0as\u00a0a\u00a0module\u00a0or\u00a0a\u00a0normal\u00a0program.\n(c) Suppose\u00a0a\u00a0 module\u00a0mod.py contains\u00a0functions\u00a0 f1(\u00a0),\u00a0f2(\u00a0) and\u00a0f3(\u00a0).\nWrite\u00a0 4\u00a0forms\u00a0of\u00a0import\u00a0statements\u00a0to\u00a0use\u00a0these\u00a0functions\u00a0 in\u00a0your\u00a0\nprogram.\n[B] Attempt\u00a0the\u00a0following questions:\n(a) What\u00a0is\u00a0the\u00a0difference\u00a0between\u00a0a\u00a0module\u00a0and\u00a0a\u00a0package?\n(b) What\u00a0 is\u00a0 the\u00a0 purpose\u00a0 behind\u00a0 creating\u00a0 multiple\u00a0 packages\u00a0 and\u00a0\nmodules?\n(c) By\u00a0default,\u00a0to\u00a0which\u00a0module\u00a0do\u00a0the\u00a0statements\u00a0in\u00a0a\u00a0program\u00a0belong?\u00a0\nHow\u00a0do\u00a0we\u00a0access\u00a0the\u00a0name\u00a0of\u00a0this\u00a0module?\n(d) In\u00a0the\u00a0following\u00a0statement\u00a0what\u00a0do\u00a0a,\u00a0b,\u00a0c,\u00a0x represent?\nimport\u00a0a.b.c", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_318", "chunk_strategy": "fixed_size"}}, {"text": "nd\u00a0\nmodules?\n(c) By\u00a0default,\u00a0to\u00a0which\u00a0module\u00a0do\u00a0the\u00a0statements\u00a0in\u00a0a\u00a0program\u00a0belong?\u00a0\nHow\u00a0do\u00a0we\u00a0access\u00a0the\u00a0name\u00a0of\u00a0this\u00a0module?\n(d) In\u00a0the\u00a0following\u00a0statement\u00a0what\u00a0do\u00a0a,\u00a0b,\u00a0c,\u00a0x represent?\nimport\u00a0a.b.c.x\n(e) If\u00a0 module\u00a0 m contains\u00a0 a\u00a0 function\u00a0 fun(\u00a0 ),\u00a0 what\u00a0 is\u00a0 wrong\u00a0 with\u00a0 the\u00a0\nfollowing\u00a0statements?\nimport\u00a0m\nfun(\u00a0)\n(f) What\u00a0 are\u00a0 the\u00a0 contents\u00a0 of\u00a0 PYTHONPATH variable?\u00a0 How\u00a0 can\u00a0 we\u00a0\naccess\u00a0its\u00a0contents\u00a0programmatically?\u00a0\n(g) What\u00a0does\u00a0the\u00a0content\u00a0of\u00a0sys.path\u00a0signify?\u00a0What\u00a0does\u00a0the\u00a0order\u00a0of\u00a0\ncontents\u00a0of\u00a0sys.path signify?\n(h) Where\u00a0a\u00a0list\u00a0of\u00a0third-party\u00a0packages\u00a0is\u00a0maintained?\n(i) Which\u00a0tool\u00a0is\u00a0commonly\u00a0used\u00a0for\u00a0installing\u00a0third-party\u00a0packages?\n(j) Do\u00a0the\u00a0following\u00a0import\u00a0statements\u00a0serve\u00a0the\u00a0same\u00a0purpose?\n216\nLet\u00a0Us\u00a0Python\n#\u00a0version\u00a01\nimport\u00a0a,\u00a0b,\u00a0c,\u00a0d\n#\u00a0version\u00a02\nimport\u00a0a\nimport\u00a0b\nimport\u00a0c\nimport\u00a0d\n#\u00a0version\u00a03\nfrom\u00a0a\u00a0import\u00a0*\nfrom\u00a0b\u00a0import\u00a0*\nfrom\u00a0c\u00a0import\u00a0*\nfrom\u00a0d\u00a0import\u00a0*\n[C] State whether\u00a0the\u00a0following\u00a0statements\u00a0are\u00a0True\u00a0or\u00a0False:\n(a) A\u00a0function\u00a0can\u00a0belong\u00a0to\u00a0a\u00a0module\u00a0and\u00a0the\u00a0mo", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_319", "chunk_strategy": "fixed_size"}}, {"text": "rt\u00a0c\nimport\u00a0d\n#\u00a0version\u00a03\nfrom\u00a0a\u00a0import\u00a0*\nfrom\u00a0b\u00a0import\u00a0*\nfrom\u00a0c\u00a0import\u00a0*\nfrom\u00a0d\u00a0import\u00a0*\n[C] State whether\u00a0the\u00a0following\u00a0statements\u00a0are\u00a0True\u00a0or\u00a0False:\n(a) A\u00a0function\u00a0can\u00a0belong\u00a0to\u00a0a\u00a0module\u00a0and\u00a0the\u00a0module\u00a0can\u00a0belong\u00a0to\u00a0a\u00a0\npackage.\n(b) A\u00a0package\u00a0can\u00a0contain\u00a0one\u00a0or\u00a0more\u00a0modules\u00a0in\u00a0it.\n(c) Nested\u00a0packages\u00a0are\u00a0allowed.\n(d) Contents\u00a0of\u00a0sys.path variable\u00a0cannot\u00a0be\u00a0modified.\n(e) In\u00a0the\u00a0statement\u00a0import\u00a0a.b.c,\u00a0c cannot\u00a0be\u00a0a\u00a0function.\n(f) It\u00a0is\u00a0a\u00a0good\u00a0idea\u00a0to\u00a0use\u00a0*\u00a0to\u00a0import\u00a0all\u00a0the\u00a0functions/classes\u00a0defined\u00a0\nin\u00a0a\u00a0module.\nLet\u00a0Us\nPython\n217\nNamespaces\nx\nSymbol\u00a0Table\nx\nInner\u00a0Functions\nx\nNamespace\nx\nScope\u00a0and\u00a0LEGB\u00a0Rule\nx\nglobals(\u00a0) and\u00a0locals(\u00a0)\nx\nPrograms\nx\nWhere\u00a0to\u00a0use\u00a0them?\nx\nExercises\n17\n\u201cScope\u00a0it\u00a0out...\u201d\n218\nLet\u00a0Us\u00a0Python\nSymbol\u00a0Table\nx\nVariable\u00a0 names,\u00a0 function\u00a0 names\u00a0 and\u00a0 class\u00a0 names\u00a0 are\u00a0 in\u00a0 general\u00a0\ncalled\u00a0identifiers.\nx\nWhile\u00a0interpreting\u00a0our\u00a0program\u00a0Python\u00a0interpreter\u00a0creates\u00a0a\u00a0symbol\u00a0\ntable consisting\u00a0 identifiers and\u00a0 relevant\u00a0 information\u00a0 about\u00a0 each\u00a0\nidentifier.\nx\nThe\u00a0relevant\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_320", "chunk_strategy": "fixed_size"}}, {"text": "n\u00a0 general\u00a0\ncalled\u00a0identifiers.\nx\nWhile\u00a0interpreting\u00a0our\u00a0program\u00a0Python\u00a0interpreter\u00a0creates\u00a0a\u00a0symbol\u00a0\ntable consisting\u00a0 identifiers and\u00a0 relevant\u00a0 information\u00a0 about\u00a0 each\u00a0\nidentifier.\nx\nThe\u00a0relevant\u00a0information\u00a0includes\u00a0the\u00a0type\u00a0of\u00a0the\u00a0identifier,\u00a0its\u00a0scope\u00a0\nlevel\u00a0and\u00a0its\u00a0location in\u00a0memory.\nx\nThis\u00a0 information\u00a0 is\u00a0used\u00a0by\u00a0 the\u00a0interpreter\u00a0to\u00a0 decide\u00a0 whether\u00a0the\u00a0\noperations\u00a0 performed\u00a0 on\u00a0the\u00a0identifiers\u00a0 in\u00a0our\u00a0program\u00a0 should\u00a0be\u00a0\npermitted\u00a0or\u00a0not.\nx\nFor\u00a0 example,\u00a0suppose\u00a0 we\u00a0 have\u00a0 an\u00a0identifier\u00a0 whose\u00a0 type\u00a0has\u00a0been\u00a0\nmarked\u00a0as\u00a0tuple\u00a0in\u00a0the\u00a0symbol\u00a0table.\u00a0Later\u00a0in\u00a0the program\u00a0if\u00a0we\u00a0try\u00a0to\u00a0\nmodify\u00a0 its\u00a0 contents,\u00a0 interpreter\u00a0 will\u00a0 report\u00a0 an\u00a0 error\u00a0 as\u00a0 a\u00a0 tuple\u00a0 is\u00a0\nimmutable.\nNamespace\nx\nAs\u00a0 the\u00a0 name\u00a0 suggests,\u00a0 a\u00a0 namespace\u00a0 is\u00a0 a\u00a0 space\u00a0 that\u00a0 holds\u00a0 names\u00a0\n(identifiers).\nx\nProgrammatically,\u00a0 a\u00a0 namespace\u00a0is\u00a0 a\u00a0dictionary\u00a0 of\u00a0 identifiers\u00a0(keys)\u00a0\nand\u00a0their\u00a0corresponding\u00a0objects\u00a0(values).\nx\nAn\u00a0 identifier\u00a0 used\u00a0 in\u00a0 a\u00a0 function\u00a0or\u00a0 a\u00a0 method\u00a0belongs\u00a0 to\u00a0the\u00a0 local\nnamespace.\nx\n", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_321", "chunk_strategy": "fixed_size"}}, {"text": "mmatically,\u00a0 a\u00a0 namespace\u00a0is\u00a0 a\u00a0dictionary\u00a0 of\u00a0 identifiers\u00a0(keys)\u00a0\nand\u00a0their\u00a0corresponding\u00a0objects\u00a0(values).\nx\nAn\u00a0 identifier\u00a0 used\u00a0 in\u00a0 a\u00a0 function\u00a0or\u00a0 a\u00a0 method\u00a0belongs\u00a0 to\u00a0the\u00a0 local\nnamespace.\nx\nAn\u00a0 identifier\u00a0 used\u00a0outside\u00a0 a\u00a0 function\u00a0or\u00a0 a\u00a0 method\u00a0 belongs\u00a0 to\u00a0the\u00a0\nglobal namespace.\nx\nIf\u00a0 a\u00a0 local\u00a0 and\u00a0 a\u00a0 global\u00a0 identifier\u00a0 have\u00a0 the\u00a0 same\u00a0 name, the\u00a0 local\u00a0\nidentifier\u00a0shadows\u00a0out\u00a0the\u00a0global\u00a0identifier.\nx\nPython\u00a0 assumes\u00a0 that\u00a0 an\u00a0 identifier\u00a0 that\u00a0 is\u00a0 assigned\u00a0 a\u00a0 value\u00a0 in\u00a0 a\u00a0\nfunction/method\u00a0is\u00a0a\u00a0local\u00a0identifier.\nx\nIf\u00a0 we\u00a0 wish\u00a0 to\u00a0 assign\u00a0 a\u00a0 value\u00a0 to\u00a0 a\u00a0 global\u00a0 identifier\u00a0 within\u00a0 a\u00a0\nfunction/method,\u00a0we\u00a0should\u00a0explicitly\u00a0declare\u00a0the\u00a0variable\u00a0as\u00a0global\u00a0\nusing\u00a0the\u00a0global keyword.\nChapter 17:\u00a0Namespaces\u00a0\n219\ndef\u00a0fun(\u00a0)\u00a0:\n#\u00a0name\u00a0conflict.\u00a0local\u00a0a\u00a0shadows\u00a0out\u00a0global\u00a0a\na\u00a0=\u00a045\n#\u00a0name\u00a0conflict,\u00a0use\u00a0global\u00a0b\nglobal\u00a0b\u00a0\nb\u00a0=\u00a06.28\n#\u00a0uses\u00a0local\u00a0a,\u00a0global\u00a0b\u00a0and\u00a0s\n#\u00a0no\u00a0need\u00a0to\u00a0define\u00a0s\u00a0as\u00a0global,\u00a0since\u00a0it\u00a0is\u00a0not\u00a0being\u00a0changed\nprint(a,\u00a0b,\u00a0s)\n#\u00a0global\u00a0identifiers\na\u00a0=\u00a020\nb\u00a0=\u00a03.14\u00a0\ns\u00a0=\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_322", "chunk_strategy": "fixed_size"}}, {"text": "#\u00a0name\u00a0conflict,\u00a0use\u00a0global\u00a0b\nglobal\u00a0b\u00a0\nb\u00a0=\u00a06.28\n#\u00a0uses\u00a0local\u00a0a,\u00a0global\u00a0b\u00a0and\u00a0s\n#\u00a0no\u00a0need\u00a0to\u00a0define\u00a0s\u00a0as\u00a0global,\u00a0since\u00a0it\u00a0is\u00a0not\u00a0being\u00a0changed\nprint(a,\u00a0b,\u00a0s)\n#\u00a0global\u00a0identifiers\na\u00a0=\u00a020\nb\u00a0=\u00a03.14\u00a0\ns\u00a0=\u00a0'Aabra\u00a0Ka\u00a0Daabra'\nfun(\u00a0)\nprint(a,\u00a0b,\u00a0s)\u00a0\n#\u00a0b\u00a0has\u00a0changed,\u00a0a\u00a0and\u00a0s\u00a0are\u00a0unchanged\nglobals(\u00a0) and\u00a0locals(\u00a0)\nx\nDictionary\u00a0 of\u00a0 identifiers\u00a0 in\u00a0 global\u00a0 and\u00a0 local\u00a0 namespaces\u00a0 can\u00a0 be\u00a0\nobtained\u00a0using\u00a0built-in\u00a0functions\u00a0globals(\u00a0) and\u00a0locals(\u00a0).\u00a0\nx\nIf\u00a0 locals(\u00a0 ) is\u00a0 called\u00a0 from\u00a0 within\u00a0 a\u00a0 function/method,\u00a0 it\u00a0 returns\u00a0 a\u00a0\ndictionary\u00a0\nof\u00a0\nidentifiers\u00a0\nthat\u00a0\nare\u00a0\naccessible\u00a0\nfrom\u00a0\nthat\u00a0\nfunction/method.\nx\nIf\u00a0 globals(\u00a0 ) is\u00a0 called\u00a0 from\u00a0 within\u00a0 a\u00a0 function/method,\u00a0 it\u00a0 returns\u00a0 a\u00a0\ndictionary\u00a0 of\u00a0 global\u00a0 identifiers\u00a0 that\u00a0 can\u00a0 be\u00a0 accessed\u00a0 from\u00a0 that\u00a0\nfunction/method.\nx\nFollowing\u00a0program\u00a0illustrates\u00a0usage\u00a0of\u00a0globals(\u00a0) and\u00a0locals(\u00a0):\ndef\u00a0fun(\u00a0)\u00a0:\na\u00a0=\u00a045\nglobal\u00a0b\u00a0\nb\u00a0=\u00a06.28\nprint(locals(\u00a0))\nprint(globals(\u00a0))\na\u00a0=\u00a020\nb\u00a0=\u00a03.14\u00a0\ns\u00a0=\u00a0'Aabra\u00a0Ka\u00a0Daabra'\n220\nLet\u00a0Us\u00a0Python\nprint(locals( ))\nprint(glob", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_323", "chunk_strategy": "fixed_size"}}, {"text": "trates\u00a0usage\u00a0of\u00a0globals(\u00a0) and\u00a0locals(\u00a0):\ndef\u00a0fun(\u00a0)\u00a0:\na\u00a0=\u00a045\nglobal\u00a0b\u00a0\nb\u00a0=\u00a06.28\nprint(locals(\u00a0))\nprint(globals(\u00a0))\na\u00a0=\u00a020\nb\u00a0=\u00a03.14\u00a0\ns\u00a0=\u00a0'Aabra\u00a0Ka\u00a0Daabra'\n220\nLet\u00a0Us\u00a0Python\nprint(locals( ))\nprint(globals( ))\nfun(\u00a0)\u00a0\nOn\u00a0execution\u00a0of\u00a0this\u00a0program,\u00a0we\u00a0get\u00a0the\u00a0following\u00a0output:\n{'a':\u00a020,\u00a0'b':\u00a06.28,\u00a0's':\u00a0'Aabra\u00a0Ka\u00a0Daabra'}\n{'a':\u00a020,\u00a0'b':\u00a06.28,\u00a0's':\u00a0'Aabra\u00a0Ka\u00a0Daabra'}\n{'a':\u00a045}\n{'a':\u00a020,\u00a0'b':\u00a06.28,\u00a0's': 'Aabra\u00a0Ka\u00a0Daabra'}\nThe\u00a0 first,\u00a0 second\u00a0 and\u00a0 last\u00a0 line\u00a0 above\u00a0 shows\u00a0 abridged\u00a0 output.\u00a0 At\u00a0\nglobal\u00a0 scope\u00a0 locals(\u00a0) and\u00a0 globals(\u00a0 ) return\u00a0 the\u00a0same\u00a0dictionary\u00a0 of\u00a0\nglobal\u00a0namespace.\u00a0\nInside\u00a0fun(\u00a0) locals(\u00a0) returns\u00a0the\u00a0local\u00a0namespace,\u00a0whereas\u00a0globals(\u00a0)\nreturns\u00a0global\u00a0namespace\u00a0as\u00a0seen\u00a0from\u00a0the\u00a0output\u00a0above.\nWhere\u00a0to\u00a0use\u00a0them?\nx\nApart\u00a0from\u00a0finding\u00a0out\u00a0what\u00a0all\u00a0 is\u00a0available\u00a0 in\u00a0the\u00a0local\u00a0 and\u00a0global\u00a0\nnamespace,\u00a0globals(\u00a0) and\u00a0locals(\u00a0) can\u00a0be\u00a0used\u00a0to\u00a0access\u00a0variables\u00a0\nusing\u00a0strings.\u00a0This\u00a0is\u00a0shown\u00a0in\u00a0the\u00a0following\u00a0program:\na\u00a0=\u00a020\nb\u00a0=\u00a03.14\u00a0\ns\u00a0=\u00a0'Aabra\u00a0Ka\u00a0Daabra'\nlst\u00a0=\u00a0['a',\u00a0'b',\u00a0's']\nfor\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_324", "chunk_strategy": "fixed_size"}}, {"text": "nd\u00a0global\u00a0\nnamespace,\u00a0globals(\u00a0) and\u00a0locals(\u00a0) can\u00a0be\u00a0used\u00a0to\u00a0access\u00a0variables\u00a0\nusing\u00a0strings.\u00a0This\u00a0is\u00a0shown\u00a0in\u00a0the\u00a0following\u00a0program:\na\u00a0=\u00a020\nb\u00a0=\u00a03.14\u00a0\ns\u00a0=\u00a0'Aabra\u00a0Ka\u00a0Daabra'\nlst\u00a0=\u00a0['a',\u00a0'b',\u00a0's']\nfor\u00a0var\u00a0in\u00a0lst\u00a0:\nprint(globals(\u00a0)[var])\nOn\u00a0execution\u00a0it\u00a0produces\u00a0the\u00a0following\u00a0output:\n20\n3.14\nAabra\u00a0Ka\u00a0Daabra\nglobals(\u00a0)[var] gives\u00a0the\u00a0current\u00a0value\u00a0of\u00a0var in\u00a0global\u00a0namespace.\nx\nUsing\u00a0 the\u00a0 same\u00a0technique\u00a0 we\u00a0can\u00a0 call\u00a0 different\u00a0 functions\u00a0 through\u00a0\nthe\u00a0same\u00a0variable\u00a0as\u00a0shown\u00a0below:\ndef\u00a0fun1(\u00a0)\u00a0:\nprint('Inside\u00a0fun1')\nChapter 17:\u00a0Namespaces\u00a0\n221\ndef\u00a0fun2(\u00a0)\u00a0:\nprint('Inside\u00a0fun2')\ndef\u00a0fun3(\u00a0)\u00a0:\nprint('Inside\u00a0fun3')\nlst\u00a0=\u00a0['fun1',\u00a0'fun2',\u00a0'fun3']\nfor\u00a0var\u00a0in\u00a0lst\u00a0:\nglobals( )[var](\u00a0)\nOn\u00a0execution\u00a0it\u00a0produces\u00a0the\u00a0following\u00a0output:\nInside\u00a0fun1\nInside\u00a0fun2\nInside\u00a0fun3\nInner\u00a0Functions\nx\nAn\u00a0inner\u00a0function\u00a0is\u00a0simply\u00a0a\u00a0function\u00a0that\u00a0is\u00a0defined\u00a0inside\u00a0another\u00a0\nfunction. Following\u00a0program\u00a0shows\u00a0how\u00a0to\u00a0do\u00a0this:\n#\u00a0outer\u00a0function\u00a0\ndef\u00a0display(\u00a0)\u00a0:\u00a0\na\u00a0=\u00a0500\nprint\u00a0('Saving\u00a0is\u00a0the\u00a0best\u00a0thing...')\n#\u00a0inner\u00a0func", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_325", "chunk_strategy": "fixed_size"}}, {"text": "on\u00a0is\u00a0simply\u00a0a\u00a0function\u00a0that\u00a0is\u00a0defined\u00a0inside\u00a0another\u00a0\nfunction. Following\u00a0program\u00a0shows\u00a0how\u00a0to\u00a0do\u00a0this:\n#\u00a0outer\u00a0function\u00a0\ndef\u00a0display(\u00a0)\u00a0:\u00a0\na\u00a0=\u00a0500\nprint\u00a0('Saving\u00a0is\u00a0the\u00a0best\u00a0thing...')\n#\u00a0inner\u00a0function\ndef\u00a0show(\u00a0)\u00a0:\u00a0\nprint\u00a0('Especially\u00a0when\u00a0your\u00a0parents\u00a0have\u00a0done\u00a0it\u00a0for\u00a0you!')\nprint(a)\nshow(\u00a0)\ndisplay(\u00a0)\u00a0\nOn\u00a0executing\u00a0this\u00a0program,\u00a0we\u00a0get\u00a0the\u00a0following\u00a0output:\nSaving\u00a0is\u00a0the\u00a0best\u00a0thing...\nEspecially\u00a0when\u00a0your\u00a0parents\u00a0have\u00a0done\u00a0it\u00a0for\u00a0you!\n500\nx\nshow(\u00a0) being\u00a0the\u00a0inner\u00a0function\u00a0defined\u00a0inside\u00a0display(\u00a0),\u00a0it\u00a0can\u00a0be\u00a0\ncalled\u00a0only\u00a0 from\u00a0within\u00a0display(\u00a0).\u00a0 In\u00a0that\u00a0 sense,\u00a0 show(\u00a0)\u00a0has\u00a0 been\u00a0\nencapsulated\u00a0inside\u00a0display(\u00a0).\u00a0\n222\nLet\u00a0Us\u00a0Python\nx\nThe\u00a0inner\u00a0function\u00a0has\u00a0access\u00a0to\u00a0variables\u00a0of\u00a0the\u00a0enclosing\u00a0function,\u00a0\nbut\u00a0it\u00a0cannot\u00a0change\u00a0the\u00a0value\u00a0of\u00a0the\u00a0variable.\u00a0Had\u00a0we\u00a0done\u00a0a\u00a0=\u00a0600\u00a0\nin\u00a0show(\u00a0),\u00a0a\u00a0new\u00a0local\u00a0a would\u00a0have\u00a0been\u00a0created\u00a0and\u00a0set,\u00a0and\u00a0not\u00a0\nthe\u00a0one\u00a0belonging\u00a0to\u00a0display(\u00a0).\nScope\u00a0and\u00a0LEGB\u00a0Rule\nx\nScope\u00a0of\u00a0an\u00a0identifier\u00a0indicates\u00a0where\u00a0it\u00a0is\u00a0available\u00a0for\u00a0use.\nx\nScope\u00a0 can\u00a0be\u00a0Local\u00a0 (", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_326", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0a\u00a0new\u00a0local\u00a0a would\u00a0have\u00a0been\u00a0created\u00a0and\u00a0set,\u00a0and\u00a0not\u00a0\nthe\u00a0one\u00a0belonging\u00a0to\u00a0display(\u00a0).\nScope\u00a0and\u00a0LEGB\u00a0Rule\nx\nScope\u00a0of\u00a0an\u00a0identifier\u00a0indicates\u00a0where\u00a0it\u00a0is\u00a0available\u00a0for\u00a0use.\nx\nScope\u00a0 can\u00a0be\u00a0Local\u00a0 (L),\u00a0Enclosing\u00a0(E),\u00a0Global\u00a0(G),\u00a0Built-in\u00a0(B).\u00a0Scope\u00a0\nbecomes\u00a0 more\u00a0and\u00a0more\u00a0liberal\u00a0 from\u00a0Local\u00a0to\u00a0Built-in.\u00a0This\u00a0can\u00a0be\u00a0\nbest\u00a0understood\u00a0though\u00a0the\u00a0program\u00a0given\u00a0below.\ndef fun1( ) :\ny\u00a0=\u00a020\nprint(x,\u00a0y)\nprint(len(str(x)))\ndef fun2( ) :\nz = 30\nprint(x, y,\u00a0z)\nprint(len(str(x)))\nfun2( )\nx = 10\nprint(len(str(x)))\nfun1( )\nOutput\u00a0of\u00a0the\u00a0program\u00a0is\u00a0given\u00a0below:\n2\n10\u00a020\n2\n10\u00a020\u00a030\n2\nx\nlen,\u00a0 str,\u00a0 print can\u00a0 be\u00a0 used\u00a0 anywhere\u00a0 in\u00a0 the\u00a0 program\u00a0 without\u00a0\nimporting\u00a0any\u00a0module.\u00a0So\u00a0they\u00a0have\u00a0a\u00a0built-in\u00a0scope.\u00a0\nx\nVariable\u00a0x is\u00a0created\u00a0outside\u00a0all\u00a0functions,\u00a0so\u00a0it\u00a0has\u00a0a\u00a0global\u00a0scope.\u00a0It\u00a0\nis\u00a0available\u00a0to\u00a0fun1(\u00a0) as\u00a0well\u00a0as\u00a0fun2(\u00a0).\nx\nfun2(\u00a0) is\u00a0 nested\u00a0inside\u00a0fun1(\u00a0 ).\u00a0So\u00a0 identifier\u00a0y created\u00a0in\u00a0fun1(\u00a0) is\u00a0\navailable\u00a0to\u00a0fun2(\u00a0).\u00a0When\u00a0we\u00a0attempt\u00a0to\u00a0print\u00a0y in\u00a0fun2(\u00a0),\u00a0it\u00a0is\u00a0not\u00a0\nChapter 17:\u00a0Namespaces\u00a0\n22", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_327", "chunk_strategy": "fixed_size"}}, {"text": "(\u00a0) as\u00a0well\u00a0as\u00a0fun2(\u00a0).\nx\nfun2(\u00a0) is\u00a0 nested\u00a0inside\u00a0fun1(\u00a0 ).\u00a0So\u00a0 identifier\u00a0y created\u00a0in\u00a0fun1(\u00a0) is\u00a0\navailable\u00a0to\u00a0fun2(\u00a0).\u00a0When\u00a0we\u00a0attempt\u00a0to\u00a0print\u00a0y in\u00a0fun2(\u00a0),\u00a0it\u00a0is\u00a0not\u00a0\nChapter 17:\u00a0Namespaces\u00a0\n223\nfound\u00a0 in\u00a0 fun2(\u00a0 ),\u00a0 hence\u00a0 the\u00a0 search\u00a0 is\u00a0 continued\u00a0 in\u00a0 the\u00a0 enclosing\u00a0\nfunction\u00a0fun1(\u00a0).\u00a0Here\u00a0it\u00a0is\u00a0found\u00a0hence\u00a0its\u00a0value\u00a020\u00a0gets\u00a0printed.\u00a0This\u00a0\nis\u00a0an\u00a0example\u00a0of\u00a0enclosing\u00a0scope.\nx\nIdentifier\u00a0 z is\u00a0 local\u00a0to\u00a0fun2(\u00a0 ).\u00a0 So\u00a0 it\u00a0is\u00a0available\u00a0only\u00a0 to\u00a0statements\u00a0\nwithin\u00a0fun2(\u00a0).\u00a0Thus\u00a0it\u00a0has\u00a0a\u00a0local\u00a0scope.\n____________________________________________________________________\nProblem\u00a017.1\nWrite\u00a0 a\u00a0 program\u00a0 that\u00a0 nests\u00a0 function\u00a0 fun2(\u00a0 ) inside\u00a0 function\u00a0 fun1(\u00a0 ).\u00a0\nCreate\u00a0two\u00a0variables\u00a0by\u00a0the\u00a0name\u00a0a in\u00a0each\u00a0function.\u00a0Prove\u00a0that\u00a0they\u00a0are\u00a0\ntwo\u00a0different\u00a0variables.\nProgram\ndef\u00a0fun1(\u00a0)\u00a0:\na\u00a0=\u00a045\nprint(a)\nprint(id(a))\ndef\u00a0fun2(\u00a0)\u00a0:\na\u00a0=\u00a090\nprint(a)\u00a0\nprint(id(a))\nfun2(\u00a0)\nfun1(\u00a0)\nOutput\n45\n11067296\n90\n11068736\n224\nLet\u00a0Us\u00a0Python\nTips\nx\nFunction\u00a0 id(\u00a0 ) gives\u00a0 the\u00a0 address\u00a0 stored\u00a0 in\u00a0 a\u00a0 variable", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_328", "chunk_strategy": "fixed_size"}}, {"text": "\nprint(a)\nprint(id(a))\ndef\u00a0fun2(\u00a0)\u00a0:\na\u00a0=\u00a090\nprint(a)\u00a0\nprint(id(a))\nfun2(\u00a0)\nfun1(\u00a0)\nOutput\n45\n11067296\n90\n11068736\n224\nLet\u00a0Us\u00a0Python\nTips\nx\nFunction\u00a0 id(\u00a0 ) gives\u00a0 the\u00a0 address\u00a0 stored\u00a0 in\u00a0 a\u00a0 variable.\u00a0 Since\u00a0 the\u00a0\naddresses\u00a0in\u00a0the\u00a0output\u00a0are\u00a0different,\u00a0it\u00a0means\u00a0that\u00a0the\u00a0two\u00a0a's\u00a0are\u00a0\nreferring\u00a0to\u00a0two\u00a0different\u00a0values\n____________________________________________________________________\nProblem\u00a017.2\nWrite\u00a0a\u00a0program\u00a0that\u00a0proves\u00a0that\u00a0 the\u00a0dictionary\u00a0 returned\u00a0by\u00a0globals(\u00a0)\ncan\u00a0be\u00a0used\u00a0to\u00a0manipulate\u00a0values\u00a0of\u00a0variables\u00a0in\u00a0it.\nProgram\na\u00a0=\u00a010\nb\u00a0=\u00a020\nc\u00a0=\u00a030\nglobals(\u00a0)['a']\u00a0=\u00a025\nglobals(\u00a0)['b']\u00a0=\u00a050\nglobals(\u00a0)['c']\u00a0=\u00a075\nprint(a,\u00a0b,\u00a0c)\nOutput\n25\u00a050\u00a075\nTips\nx\nglobals(\u00a0 ) returns\u00a0 a\u00a0dictionary\u00a0 of\u00a0identifiers\u00a0and\u00a0 their\u00a0values.\u00a0From\u00a0\nthis\u00a0 dictionary\u00a0 specific\u00a0 identifier\u00a0 can\u00a0 be\u00a0 accessed\u00a0 by\u00a0 using\u00a0 the\u00a0\nidentifier\u00a0as\u00a0the\u00a0key.\nx\nFrom\u00a0 the\u00a0 output\u00a0 it\u00a0 is\u00a0 evident\u00a0 that\u00a0 we\u00a0 are\u00a0 able\u00a0 to\u00a0 manipulate\u00a0\nvariables\u00a0a,\u00a0b,\u00a0c.\n____________________________________________________________________\nProblem", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_329", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0 the\u00a0\nidentifier\u00a0as\u00a0the\u00a0key.\nx\nFrom\u00a0 the\u00a0 output\u00a0 it\u00a0 is\u00a0 evident\u00a0 that\u00a0 we\u00a0 are\u00a0 able\u00a0 to\u00a0 manipulate\u00a0\nvariables\u00a0a,\u00a0b,\u00a0c.\n____________________________________________________________________\nProblem\u00a017.3\nWrite\u00a0a\u00a0program\u00a0that\u00a0proves\u00a0that\u00a0if\u00a0the\u00a0dictionary\u00a0returned\u00a0by\u00a0locals(\u00a0) is\nmanipulated,\u00a0the\u00a0values\u00a0of\u00a0original\u00a0variables\u00a0don't\u00a0change.\nChapter 17:\u00a0Namespaces\u00a0\n225\nProgram\ndef\u00a0fun(\u00a0)\u00a0:\na\u00a0=\u00a010\nb\u00a0=\u00a020\nc\u00a0=\u00a030\nlocals(\u00a0)['a']\u00a0=\u00a025\nlocals(\u00a0)['b']\u00a0=\u00a050\nlocals(\u00a0)['c']\u00a0=\u00a075\nprint(a,\u00a0b,\u00a0c)\nfun(\u00a0)\nOutput\n10 20\u00a030\nTips\nx\nlocals(\u00a0 ) returns\u00a0 a\u00a0 'copy'\u00a0 of\u00a0 dictionary\u00a0 of\u00a0 identifiers\u00a0 that\u00a0 can\u00a0 be\u00a0\naccessed\u00a0from\u00a0fun(\u00a0) and\u00a0their\u00a0values.\u00a0From this\u00a0dictionary\u00a0specific\u00a0\nidentifier\u00a0can\u00a0be\u00a0accessed\u00a0by\u00a0using\u00a0the\u00a0identifier\u00a0as\u00a0the\u00a0key.\nx\nFrom\u00a0 the\u00a0output\u00a0it\u00a0is\u00a0evident\u00a0that\u00a0though\u00a0we\u00a0do\u00a0not\u00a0get\u00a0any\u00a0error,\nthe\u00a0 manipulation\u00a0of\u00a0variables\u00a0a,\u00a0 b,\u00a0c does\u00a0not\u00a0become\u00a0effective as\u00a0\nwe\u00a0are\u00a0manipulating\u00a0the\u00a0copy.\n____________________________________________________________________\n[A] State\u00a0whether\u00a0the\u00a0following\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_330", "chunk_strategy": "fixed_size"}}, {"text": "he\u00a0 manipulation\u00a0of\u00a0variables\u00a0a,\u00a0 b,\u00a0c does\u00a0not\u00a0become\u00a0effective as\u00a0\nwe\u00a0are\u00a0manipulating\u00a0the\u00a0copy.\n____________________________________________________________________\n[A] State\u00a0whether\u00a0the\u00a0following\u00a0statements\u00a0are\u00a0True\u00a0or\u00a0False:\n(a) Symbol\u00a0table\u00a0consists\u00a0of\u00a0information\u00a0about\u00a0 each\u00a0identifier\u00a0 used\u00a0in\u00a0\nour\u00a0program.\n(b) An\u00a0 identifier\u00a0 with\u00a0 global\u00a0 scope\u00a0 can\u00a0 be\u00a0 used\u00a0 anywhere\u00a0 in\u00a0 the\u00a0\nprogram.\n(c)\nIt\u00a0is\u00a0possible\u00a0to\u00a0define\u00a0a\u00a0function\u00a0within\u00a0another\u00a0function.\n(d) If\u00a0 a\u00a0 function\u00a0 is\u00a0 nested\u00a0 inside\u00a0 another\u00a0 function\u00a0 then\u00a0 variables\u00a0\ndefined\u00a0in\u00a0outer\u00a0function\u00a0are\u00a0available\u00a0to\u00a0inner\u00a0function.\n226\nLet\u00a0Us\u00a0Python\n(e) If\u00a0a\u00a0nested\u00a0function\u00a0creates\u00a0a\u00a0variable\u00a0with\u00a0same\u00a0name as\u00a0the\u00a0one\u00a0in\u00a0\nthe\u00a0 outer\u00a0 function,\u00a0 then\u00a0 the\u00a0 two\u00a0 variables\u00a0 are\u00a0 treated\u00a0 as\u00a0 same\u00a0\nvariable.\n(f)\nAn\u00a0inner\u00a0function\u00a0can\u00a0be\u00a0called\u00a0from\u00a0outside\u00a0the\u00a0outer\u00a0function.\n(g)\nIf\u00a0a\u00a0function\u00a0creates\u00a0a\u00a0variable\u00a0by\u00a0the\u00a0same\u00a0name\u00a0as\u00a0the\u00a0one\u00a0 that\u00a0\nexists\u00a0in\u00a0global\u00a0scope,\u00a0then the\u00a0function's\u00a0variable\u00a0will\u00a0shadow\u00a0out\u00a0\nthe\u00a0global\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_331", "chunk_strategy": "fixed_size"}}, {"text": "can\u00a0be\u00a0called\u00a0from\u00a0outside\u00a0the\u00a0outer\u00a0function.\n(g)\nIf\u00a0a\u00a0function\u00a0creates\u00a0a\u00a0variable\u00a0by\u00a0the\u00a0same\u00a0name\u00a0as\u00a0the\u00a0one\u00a0 that\u00a0\nexists\u00a0in\u00a0global\u00a0scope,\u00a0then the\u00a0function's\u00a0variable\u00a0will\u00a0shadow\u00a0out\u00a0\nthe\u00a0global\u00a0variable.\n(h) Variables\u00a0defined\u00a0at\u00a0global\u00a0scope\u00a0 are\u00a0available\u00a0to\u00a0all\u00a0the\u00a0functions\u00a0\ndefined\u00a0in\u00a0the\u00a0program.\n[B] Answer\u00a0the\u00a0following questions:\n(a)\nWhat\u00a0is\u00a0the\u00a0difference\u00a0between\u00a0the\u00a0function locals(\u00a0) & globals(\u00a0)?\n(b)\nWould\u00a0 the\u00a0 output\u00a0 of\u00a0 the\u00a0 following\u00a0 print\u00a0 statements\u00a0 be\u00a0 same\u00a0 or\u00a0\ndifferent?\na\u00a0=\u00a020\nb\u00a0=\u00a040\nprint(globals(\u00a0))\nprint(locals(\u00a0))\n(c)\nWhich\u00a0different\u00a0scopes\u00a0can\u00a0an\u00a0identifier\u00a0have?\n(d)\nWhich\u00a0is\u00a0the\u00a0most\u00a0liberal\u00a0scope\u00a0that\u00a0an\u00a0identifier\u00a0can\u00a0have?\nLet\u00a0Us\nPython\n227\nClasses\u00a0and\u00a0\nObjects\nx\nProgramming\u00a0Paradigms\nx\nClass\u00a0Variables\u00a0&\u00a0Methods\nx\nWhat\u00a0are\u00a0Classes\u00a0and\u00a0Objects?\nx\nvars(\u00a0) and\u00a0dir(\u00a0) Functions\nx\nClasses\u00a0and\u00a0Objects\u00a0in\u00a0Programming\nx\nMore\u00a0vars(\u00a0) and\u00a0dir(\u00a0)\nx\nUser-defined\u00a0Classes\nx\nPrograms\nx\nAccess\u00a0Convention\nx\nExercises\nx\nObject\u00a0Initialization\n18\n\u201cWorld\u00a0is\u00a0OO,\u00a0you\u00a0to", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_332", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0) and\u00a0dir(\u00a0) Functions\nx\nClasses\u00a0and\u00a0Objects\u00a0in\u00a0Programming\nx\nMore\u00a0vars(\u00a0) and\u00a0dir(\u00a0)\nx\nUser-defined\u00a0Classes\nx\nPrograms\nx\nAccess\u00a0Convention\nx\nExercises\nx\nObject\u00a0Initialization\n18\n\u201cWorld\u00a0is\u00a0OO,\u00a0you\u00a0too\u00a0should\u00a0be...\u201d\n228\nLet\u00a0Us\u00a0Python\nProgramming\u00a0Paradigms\nx\nParadigm\u00a0 means\u00a0 the\u00a0 principle\u00a0 according\u00a0 to\u00a0 which\u00a0 a\u00a0 program\u00a0 is\u00a0\norganized\u00a0to\u00a0carry\u00a0out\u00a0a\u00a0given\u00a0task.\nx\nPython\u00a0\nsupports\u00a0\nthree\u00a0\nprogramming\u00a0\nparadigms\u2014Structured\nprogramming,\u00a0\nFunctional\u00a0\nProgramming\u00a0\nand\u00a0\nObject-oriented\u00a0\nprogramming (OOP). We\u00a0had\u00a0a\u00a0brief\u00a0introduction\u00a0to\u00a0these\u00a0paradigms\u00a0\nin\u00a0Chapter\u00a01.\nWhat\u00a0are\u00a0Classes\u00a0and\u00a0Objects?\nx\nWorld\u00a0 is\u00a0 object\u00a0 oriented.\u00a0 It\u00a0 is\u00a0 full\u00a0 of\u00a0 objects\u00a0 like\u00a0 Sparrow,\u00a0 Rose,\u00a0\nGuitar,\u00a0Keyboard,\u00a0etc.\nx\nEach\u00a0object\u00a0is\u00a0a\u00a0specific\u00a0instance\u00a0of\u00a0a\u00a0class.\u00a0For\u00a0example,\u00a0Sparrow\u00a0is\u00a0a\u00a0\nspecific\u00a0 instance\u00a0of\u00a0 a\u00a0 Bird\u00a0 class\u00a0 or\u00a0 Rose\u00a0 is\u00a0 a\u00a0 specific\u00a0 instance\u00a0of\u00a0 a\u00a0\nFlower\u00a0class.\nx\nMore\u00a0examples\u00a0of\u00a0classes\u00a0and\u00a0objects\u00a0in\u00a0real\u00a0life:\nBird\u00a0is\u00a0a\u00a0class.\u00a0Sparrow,\u00a0Crow,\u00a0Eagle\u00a0are\u00a0objects\u00a0of\u00a0Bird\u00a0class.\nPlayer", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_333", "chunk_strategy": "fixed_size"}}, {"text": "f\u00a0 a\u00a0 Bird\u00a0 class\u00a0 or\u00a0 Rose\u00a0 is\u00a0 a\u00a0 specific\u00a0 instance\u00a0of\u00a0 a\u00a0\nFlower\u00a0class.\nx\nMore\u00a0examples\u00a0of\u00a0classes\u00a0and\u00a0objects\u00a0in\u00a0real\u00a0life:\nBird\u00a0is\u00a0a\u00a0class.\u00a0Sparrow,\u00a0Crow,\u00a0Eagle\u00a0are\u00a0objects\u00a0of\u00a0Bird\u00a0class.\nPlayer\u00a0is\u00a0a\u00a0class.\u00a0Sachin,\u00a0Rahul,\u00a0Kapil\u00a0are\u00a0objects\u00a0of\u00a0Player\u00a0class.\nFlower\u00a0is\u00a0a\u00a0class.\u00a0Rose,\u00a0Lily,\u00a0Gerbera\u00a0are\u00a0objects\u00a0of\u00a0Flower\u00a0class.\nInstrument\u00a0is\u00a0a\u00a0class.\u00a0Sitar,\u00a0Flute\u00a0are\u00a0objects\u00a0of\u00a0Instrument\u00a0class.\nx\nA\u00a0class\u00a0describes\u00a0two\u00a0things\u2014the\u00a0form\u00a0an\u00a0object\u00a0created\u00a0from\u00a0it\u00a0will\u00a0\ntake\u00a0 and\u00a0 functionality\u00a0 it\u00a0will\u00a0 have.\u00a0 For\u00a0 example,\u00a0 a\u00a0 Bird\u00a0 class\u00a0 may\u00a0\nspecify\u00a0the\u00a0form\u00a0in\u00a0terms\u00a0of\u00a0weight,\u00a0color,\u00a0number\u00a0of\u00a0feathers,\u00a0etc.\u00a0\nand\u00a0functionality\u00a0in\u00a0terms\u00a0of\u00a0flying,\u00a0hopping,\u00a0chirping,\u00a0eating,\u00a0etc.\nx\nThe\u00a0form\u00a0is\u00a0often\u00a0termed\u00a0as properties\u00a0and\u00a0the\u00a0functionality\u00a0is\u00a0often\u00a0\ntermed\u00a0 as\u00a0 methods. A\u00a0 class\u00a0 lets\u00a0 us\u00a0 bundle\u00a0 data\u00a0 and\u00a0 functionality\u00a0\ntogether.\nx\nWhen\u00a0objects\u00a0like\u00a0Sparrow\u00a0or\u00a0Eagle\u00a0are\u00a0created\u00a0from\u00a0the\u00a0Bird\u00a0class\u00a0\nthe\u00a0 properties\u00a0 will\u00a0have\u00a0 values.\u00a0 The\u00a0methods\u00a0 can\u00a0 either\u00a0 access\u00a0or\u00a0\nmanipula", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_334", "chunk_strategy": "fixed_size"}}, {"text": "us\u00a0 bundle\u00a0 data\u00a0 and\u00a0 functionality\u00a0\ntogether.\nx\nWhen\u00a0objects\u00a0like\u00a0Sparrow\u00a0or\u00a0Eagle\u00a0are\u00a0created\u00a0from\u00a0the\u00a0Bird\u00a0class\u00a0\nthe\u00a0 properties\u00a0 will\u00a0have\u00a0 values.\u00a0 The\u00a0methods\u00a0 can\u00a0 either\u00a0 access\u00a0or\u00a0\nmanipulate\u00a0these\u00a0values.\u00a0For\u00a0example,\u00a0the\u00a0property\u00a0weight\u00a0will\u00a0have\u00a0\nvalue\u00a0250\u00a0grams\u00a0for\u00a0a\u00a0Sparrow\u00a0object,\u00a0but\u00a010\u00a0Kg\u00a0for\u00a0an\u00a0Eagle\u00a0object.\u00a0\nx\nThus\u00a0 class\u00a0 is\u00a0 generic\u00a0 in\u00a0 nature,\u00a0 whereas\u00a0 an\u00a0 object\u00a0 is\u00a0 specific\u00a0 in\u00a0\nnature.\u00a0\nChapter 18:\u00a0Classes and\u00a0Objects\u00a0\n229\nx\nMultiple\u00a0objects\u00a0can\u00a0be\u00a0created\u00a0from\u00a0a\u00a0class.\u00a0The\u00a0process\u00a0of\u00a0creation\u00a0\nof\u00a0an\u00a0object\u00a0from\u00a0a\u00a0class\u00a0is\u00a0called\u00a0instantiation.\u00a0\nClasses\u00a0and\u00a0Objects\u00a0in\u00a0Programming\nx\nIn\u00a0Python\u00a0every\u00a0type\u00a0is\u00a0a\u00a0class.\u00a0So\u00a0int,\u00a0float,\u00a0complex,\u00a0bool,\u00a0str,\u00a0list,\u00a0\ntuple,\u00a0set,\u00a0dict are\u00a0all\u00a0classes.\u00a0\nx\nA\u00a0class\u00a0has\u00a0a\u00a0name,\u00a0whereas\u00a0objects\u00a0are\u00a0nameless.\u00a0Since\u00a0objects\u00a0do\u00a0\nnot\u00a0have\u00a0names,\u00a0they\u00a0are\u00a0referred\u00a0using\u00a0their\u00a0addresses\u00a0in\u00a0memory.\nx\nWhen\u00a0 we\u00a0use\u00a0a\u00a0 simple\u00a0statement\u00a0 num\u00a0=\u00a0 10,\u00a0 a\u00a0nameless\u00a0object\u00a0of\u00a0\ntype\u00a0int is\u00a0created\u00a0in\u00a0memory\u00a0and\u00a0its\u00a0address\u00a0is\u00a0stored\u00a0in\u00a0num.\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_335", "chunk_strategy": "fixed_size"}}, {"text": "ot\u00a0have\u00a0names,\u00a0they\u00a0are\u00a0referred\u00a0using\u00a0their\u00a0addresses\u00a0in\u00a0memory.\nx\nWhen\u00a0 we\u00a0use\u00a0a\u00a0 simple\u00a0statement\u00a0 num\u00a0=\u00a0 10,\u00a0 a\u00a0nameless\u00a0object\u00a0of\u00a0\ntype\u00a0int is\u00a0created\u00a0in\u00a0memory\u00a0and\u00a0its\u00a0address\u00a0is\u00a0stored\u00a0in\u00a0num.\u00a0Thus\u00a0\nnum refers\u00a0to\u00a0or\u00a0points\u00a0to\u00a0the\u00a0nameless\u00a0object\u00a0containing\u00a0value\u00a010.\nx\nHowever,\u00a0instead\u00a0of\u00a0saying\u00a0that\u00a0num refers\u00a0to\u00a0a\u00a0nameless\u00a0int object,\u00a0\noften\u00a0for\u00a0sake\u00a0of\u00a0convenience,\u00a0it\u00a0is\u00a0said\u00a0that\u00a0num is\u00a0an\u00a0int object.\nx\nMore\u00a0 programmatic\u00a0examples\u00a0of\u00a0classes\u00a0and\u00a0objects:\na\u00a0=\u00a03.14\u00a0\n#\u00a0a\u00a0is\u00a0an\u00a0object\u00a0of\u00a0float\u00a0class\ns\u00a0=\u00a0'Sudesh'\u00a0\n#\u00a0s\u00a0is\u00a0an\u00a0object\u00a0of\u00a0str\u00a0class\nlst\u00a0=\u00a0[10,\u00a020,\u00a030]\u00a0\n#\u00a0lst\u00a0is\u00a0an\u00a0object\u00a0of\u00a0list\u00a0class\ntpl\u00a0=\u00a0('a',\u00a0'b',\u00a0'c')\u00a0\n#\u00a0tpl\u00a0is\u00a0an\u00a0object\u00a0of\u00a0tuple\u00a0class\nx\nDifferent\u00a0objects\u00a0of\u00a0a\u00a0particular\u00a0type\u00a0may\u00a0contain\u00a0different\u00a0data,\u00a0but\u00a0\nsame\u00a0methods.\u00a0Consider\u00a0the\u00a0code\u00a0snippet\u00a0given\u00a0below.\u00a0\ns1\u00a0=\u00a0'Rupesh'\n#\u00a0s1\u00a0is\u00a0object\u00a0of\u00a0type\u00a0str\ns2\u00a0 =\u00a0'Geeta'\n#\u00a0s2\u00a0is\u00a0object\u00a0of\u00a0type\u00a0str\nHere\u00a0 s1 and\u00a0s2 both\u00a0 are\u00a0 str objects\u00a0 containing\u00a0 different\u00a0data,\u00a0 but\u00a0\nsame\u00a0methods\u00a0like\u00a0upper(\u00a0),\u00a0lower(\u00a0),\u00a0capitalize(\u00a0)", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_336", "chunk_strategy": "fixed_size"}}, {"text": "upesh'\n#\u00a0s1\u00a0is\u00a0object\u00a0of\u00a0type\u00a0str\ns2\u00a0 =\u00a0'Geeta'\n#\u00a0s2\u00a0is\u00a0object\u00a0of\u00a0type\u00a0str\nHere\u00a0 s1 and\u00a0s2 both\u00a0 are\u00a0 str objects\u00a0 containing\u00a0 different\u00a0data,\u00a0 but\u00a0\nsame\u00a0methods\u00a0like\u00a0upper(\u00a0),\u00a0lower(\u00a0),\u00a0capitalize(\u00a0),\u00a0etc.\nx\nThe\u00a0 specific\u00a0 data\u00a0 in\u00a0 an\u00a0 object\u00a0 is\u00a0 often\u00a0 called\u00a0 instance data or\nproperties of\u00a0the\u00a0object\u00a0or state of\u00a0 the\u00a0object\u00a0 or\u00a0attributes of\u00a0the\u00a0\nobject.\u00a0Methods\u00a0in\u00a0an\u00a0object\u00a0are\u00a0called\u00a0instance\u00a0methods.\nUser-defined\u00a0Classes\nx\nIn\u00a0addition\u00a0 to\u00a0providing\u00a0 ready-made\u00a0classes like\u00a0int,\u00a0str,\u00a0list,\u00a0tuple,\u00a0\netc.,\u00a0Python\u00a0permits\u00a0us\u00a0to\u00a0define\u00a0our\u00a0own\u00a0classes and\u00a0create\u00a0objects\u00a0\nfrom\u00a0them.\n230\nLet\u00a0Us\u00a0Python\nx\nThe classes\u00a0that\u00a0we\u00a0define are\u00a0called\u00a0user-defined\u00a0data\u00a0types.\u00a0Rules\u00a0\nfor\u00a0defining\u00a0and\u00a0using\u00a0a user-defined\u00a0class\u00a0and\u00a0a standard\u00a0class are\u00a0\nsame.\nx\nLet\u00a0us\u00a0define\u00a0a\u00a0user-defined\u00a0class\u00a0Employee.\nclass\u00a0Employee\u00a0:\ndef\u00a0set_data(self,\u00a0n,\u00a0a,\u00a0s)\u00a0:\nself.name\u00a0=\u00a0n\u00a0\nself.age\u00a0=\u00a0a\u00a0\nself.salary\u00a0=\u00a0s\ndef\u00a0display_data(self)\u00a0:\nprint(self.name,\u00a0self.age,\u00a0self.salary)\ne1\u00a0=\u00a0Employee(\u00a0)\ne1.set_data('Ramesh',\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_337", "chunk_strategy": "fixed_size"}}, {"text": "ee.\nclass\u00a0Employee\u00a0:\ndef\u00a0set_data(self,\u00a0n,\u00a0a,\u00a0s)\u00a0:\nself.name\u00a0=\u00a0n\u00a0\nself.age\u00a0=\u00a0a\u00a0\nself.salary\u00a0=\u00a0s\ndef\u00a0display_data(self)\u00a0:\nprint(self.name,\u00a0self.age,\u00a0self.salary)\ne1\u00a0=\u00a0Employee(\u00a0)\ne1.set_data('Ramesh',\u00a023,\u00a025000)\ne1.display_data(\u00a0)\ne2\u00a0=\u00a0Employee(\u00a0)\ne2.set_data('Suresh',\u00a025,\u00a030000)\ne2.display_data(\u00a0)\nx\nThe\u00a0 Employee class\u00a0 contains\u00a0 two\u00a0 methods\u00a0 set_data(\u00a0 )\nand\u00a0\ndisplay_data(\u00a0 ) which\u00a0 are\u00a0 used\u00a0 to\u00a0 set\u00a0and\u00a0 display\u00a0 data\u00a0 present\u00a0 in\u00a0\nobjects\u00a0created\u00a0from\u00a0Employee\u00a0class.\nx\nTwo\u00a0nameless\u00a0objects\u00a0get\u00a0created\u00a0through\u00a0the\u00a0statements:\ne1\u00a0=\u00a0Employee(\u00a0)\ne2\u00a0=\u00a0Employee(\u00a0)\nAddresses\u00a0of\u00a0the\u00a0nameless\u00a0objects\u00a0are\u00a0stored\u00a0in\u00a0e1 and\u00a0e2.\nx\nIn\u00a0principle\u00a0both\u00a0the\u00a0nameless\u00a0objects\u00a0should\u00a0contain\u00a0instance\u00a0data\u00a0\nname,\u00a0 age,\u00a0 salary\nand\u00a0 instance\u00a0 methods\u00a0 set_data(\u00a0 )\u00a0 and\u00a0\ndisplay_data(\u00a0).\nx\nIn\u00a0 practice\u00a0 each\u00a0object\u00a0 has\u00a0 its\u00a0 own\u00a0 instance\u00a0 data\u00a0 name,\u00a0 age and\u00a0\nsalary,\u00a0 whereas\u00a0 the\u00a0 methods\u00a0 set_data(\u00a0 ) and\u00a0 display_data(\u00a0 ) are\u00a0\nshared\u00a0amongst\u00a0objects.\u00a0\nx\nInstance\u00a0 data\u00a0 is\u00a0 not\u00a0 shared\u00a0 since\u00a0 insta", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_338", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0object\u00a0 has\u00a0 its\u00a0 own\u00a0 instance\u00a0 data\u00a0 name,\u00a0 age and\u00a0\nsalary,\u00a0 whereas\u00a0 the\u00a0 methods\u00a0 set_data(\u00a0 ) and\u00a0 display_data(\u00a0 ) are\u00a0\nshared\u00a0amongst\u00a0objects.\u00a0\nx\nInstance\u00a0 data\u00a0 is\u00a0 not\u00a0 shared\u00a0 since\u00a0 instance\u00a0 data\u00a0 values\u00a0 would\u00a0 be\u00a0\ndifferent\u00a0from\u00a0one\u00a0object\u00a0to\u00a0another\u00a0(Refer\u00a0Figure\u00a018.1).\nChapter 18:\u00a0Classes and\u00a0Objects\u00a0\n231\n33720000\n34020680\n34020680\nRamesh\n23\n25000\ne1\nnameless object\n33720000\nSuresh\n25\n30000\ne2\nnameless object\nset_data( )\ndisplay_data( )\nShared copy of\ninstance methods\nFigure\u00a018.1\nx\nThe\u00a0 syntax\u00a0 to\u00a0 call\u00a0 an\u00a0 object's\u00a0 method is\u00a0 object.method(\u00a0 ), as\u00a0 in\u00a0\ne1.display_data(\u00a0).\u00a0\nx\nWhenever\u00a0 we\u00a0 call\u00a0an\u00a0 instance method\u00a0using\u00a0 an\u00a0object,\u00a0 address\u00a0of\u00a0\nthe\u00a0 object\u00a0 gets\u00a0 passed\u00a0 to\u00a0 the\u00a0 method\u00a0 implicitly.\u00a0 This\u00a0 address\u00a0 is\u00a0\ncollected\u00a0by\u00a0the\u00a0instance\u00a0method\u00a0in\u00a0a\u00a0variable\u00a0called\u00a0self.\u00a0\nx\nThus, when e1.set_data('Ramesh',\u00a0 23,\u00a0 25000) calls\u00a0 the\u00a0 instance\u00a0\nmethod\u00a0 set_data(\u00a0),\u00a0first\u00a0 parameter\u00a0 passed\u00a0to\u00a0 it is\u00a0the\u00a0 address\u00a0of\u00a0\nobject,\u00a0followed\u00a0by\u00a0values\u00a0'Ramesh',\u00a023,\u00a025000.", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_339", "chunk_strategy": "fixed_size"}}, {"text": "ed\u00a0self.\u00a0\nx\nThus, when e1.set_data('Ramesh',\u00a0 23,\u00a0 25000) calls\u00a0 the\u00a0 instance\u00a0\nmethod\u00a0 set_data(\u00a0),\u00a0first\u00a0 parameter\u00a0 passed\u00a0to\u00a0 it is\u00a0the\u00a0 address\u00a0of\u00a0\nobject,\u00a0followed\u00a0by\u00a0values\u00a0'Ramesh',\u00a023,\u00a025000.\nx\nWithin\u00a0set_data(\u00a0) self contains\u00a0the\u00a0address\u00a0of\u00a0first\u00a0object.\u00a0Likewise,\u00a0\nwhen\u00a0 set_data(\u00a0 ) is\u00a0 called\u00a0 using\u00a0 e2,\u00a0 self contains\u00a0 address\u00a0 of\u00a0 the\u00a0\nsecond\u00a0object.\nx\nUsing\u00a0address\u00a0of\u00a0the\u00a0object present\u00a0in\u00a0self we\u00a0indicate\u00a0which\u00a0object's\u00a0\ninstance\u00a0 data\u00a0 we\u00a0 wish\u00a0 to\u00a0 work\u00a0 with.\u00a0 To\u00a0 do\u00a0 this\u00a0 we\u00a0 prepend\u00a0 the\u00a0\ninstance\u00a0data\u00a0with\u00a0self.,\u00a0as in\u00a0self.name,\u00a0self.age\u00a0and self.salary.\nx\nself is\u00a0like\u00a0this pointer\u00a0of\u00a0C++\u00a0or\u00a0this reference\u00a0of\u00a0Java.\u00a0In\u00a0place\u00a0of\u00a0\nself any other\u00a0variable\u00a0name\u00a0can\u00a0be\u00a0used.\nAccess\u00a0Convention\nx\nWe\u00a0have\u00a0accessed\u00a0instance\u00a0methods\u00a0set_data(\u00a0)\u00a0and\u00a0display_data(\u00a0)\u00a0\nfrom\u00a0outside\u00a0the\u00a0class.\u00a0Even\u00a0instance\u00a0data\u00a0name,\u00a0age\u00a0and\u00a0salary\u00a0are\u00a0\naccessible\u00a0from\u00a0outside\u00a0the\u00a0class.\u00a0Thus,\u00a0following\u00a0statements\u00a0would\u00a0\nwork:\ne3\u00a0=\u00a0Employee(\u00a0)\n232\nLet\u00a0Us\u00a0Python\ne3.name\u00a0=\u00a0'Rakesh'\ne3.age\u00a0=\u00a025\nx", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_340", "chunk_strategy": "fixed_size"}}, {"text": "e\u00a0the\u00a0class.\u00a0Even\u00a0instance\u00a0data\u00a0name,\u00a0age\u00a0and\u00a0salary\u00a0are\u00a0\naccessible\u00a0from\u00a0outside\u00a0the\u00a0class.\u00a0Thus,\u00a0following\u00a0statements\u00a0would\u00a0\nwork:\ne3\u00a0=\u00a0Employee(\u00a0)\n232\nLet\u00a0Us\u00a0Python\ne3.name\u00a0=\u00a0'Rakesh'\ne3.age\u00a0=\u00a025\nx\nHowever,\u00a0it\u00a0is\u00a0a\u00a0good\u00a0idea\u00a0to\u00a0keep\u00a0data\u00a0in\u00a0a\u00a0class\u00a0inaccessible\u00a0from\u00a0\noutside\u00a0the\u00a0class\u00a0and\u00a0access\u00a0it\u00a0only\u00a0through\u00a0member\u00a0functions\u00a0of\u00a0the\u00a0\nclass.\nx\nThere\u00a0 is\u00a0 no\u00a0mechanism\u00a0 or\u00a0keyword\u00a0 available\u00a0 in\u00a0Python\u00a0to\u00a0enforce\u00a0\nthis.\u00a0Hence\u00a0a\u00a0convention\u00a0is\u00a0used\u00a0to\u00a0start\u00a0the\u00a0instance\u00a0data\u00a0identifiers\u00a0\nwith\u00a0 two\u00a0 leading\u00a0 underscores (often\u00a0 called\u00a0dunderscore,\u00a0short\u00a0 for\u00a0\ndouble\u00a0underscore).\u00a0Example:\u00a0__name,\u00a0__age and\u00a0__salary.\nObject\u00a0Initialization\nx\nThere\u00a0are\u00a0two\u00a0ways\u00a0to\u00a0initialize an\u00a0object:\nMethod\u00a01\u00a0:\u00a0Using\u00a0methods\u00a0like\u00a0get_data(\u00a0 ) /\u00a0set_data(\u00a0 ).\nMethod\u00a02\u00a0:\u00a0Using\u00a0special\u00a0method\u00a0__init__(\u00a0)\nx\nget_data(\u00a0 )\u00a0 can\u00a0 receive\u00a0 data\u00a0 from\u00a0 keyboard\u00a0 into\u00a0 instance\u00a0 data\u00a0\nvariables. set_data(\u00a0) can\u00a0set\u00a0up\u00a0instance\u00a0data\u00a0with\u00a0a\u00a0values\u00a0that\u00a0it\u00a0\nreceives. The\u00a0 benefit of\u00a0 this\u00a0 method\u00a0 is\u00a0 that\u00a0 the\u00a0 data\u00a0 ", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_341", "chunk_strategy": "fixed_size"}}, {"text": "ata(\u00a0 )\u00a0 can\u00a0 receive\u00a0 data\u00a0 from\u00a0 keyboard\u00a0 into\u00a0 instance\u00a0 data\u00a0\nvariables. set_data(\u00a0) can\u00a0set\u00a0up\u00a0instance\u00a0data\u00a0with\u00a0a\u00a0values\u00a0that\u00a0it\u00a0\nreceives. The\u00a0 benefit of\u00a0 this\u00a0 method\u00a0 is\u00a0 that\u00a0 the\u00a0 data\u00a0 remains\u00a0\nprotected\u00a0from\u00a0manipulation\u00a0from\u00a0outside\u00a0the\u00a0class.\nx\nThe\u00a0 benefit\u00a0 of\u00a0 initializing\u00a0 an\u00a0 object\u00a0 using\u00a0 the\u00a0 special\u00a0 method\u00a0\n__init__(\u00a0 ) is\u00a0 that\u00a0 it\u00a0 guarantees initialization,\u00a0 since __init__(\u00a0 )\u00a0 is\u00a0\nalways\u00a0called when\u00a0an\u00a0object\u00a0is\u00a0created.\nx\nFollowing\u00a0program\u00a0illustrates\u00a0both\u00a0these\u00a0methods:\nclass\u00a0Employee\u00a0:\ndef\u00a0set_data(self,\u00a0n,\u00a0a,\u00a0s)\u00a0:\nself.__name\u00a0=\u00a0n\u00a0\nself.__age\u00a0=\u00a0a\u00a0\nself.__salary\u00a0=\u00a0s\ndef\u00a0display_data(self)\u00a0:\nprint(self.__name,\u00a0self.__age,\u00a0self.__salary)\ndef\u00a0__init__(self,\u00a0n\u00a0=\u00a0'\u00a0',\u00a0a\u00a0=\u00a00,\u00a0s\u00a0=\u00a00.0)\u00a0:\nself.__name\u00a0=\u00a0n\u00a0\nself.__age\u00a0=\u00a0a\u00a0\nself.__salary\u00a0=\u00a0s\ndef\u00a0__del__(self)\u00a0:\nChapter 18:\u00a0Classes and\u00a0Objects\u00a0\n233\nprint('Deleting\u00a0object'\u00a0+\u00a0str(self))\ne1 =\u00a0Employee(\u00a0)\ne1.set_data('Suresh',\u00a025,\u00a030000)\ne1.display_data(\u00a0)\ne2\u00a0=\u00a0Employee('Ramesh',\u00a023,\u00a025000)\ne2.display_data(\u00a0)\ne1\u00a0=\u00a0None", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_342", "chunk_strategy": "fixed_size"}}, {"text": "r 18:\u00a0Classes and\u00a0Objects\u00a0\n233\nprint('Deleting\u00a0object'\u00a0+\u00a0str(self))\ne1 =\u00a0Employee(\u00a0)\ne1.set_data('Suresh',\u00a025,\u00a030000)\ne1.display_data(\u00a0)\ne2\u00a0=\u00a0Employee('Ramesh',\u00a023,\u00a025000)\ne2.display_data(\u00a0)\ne1\u00a0=\u00a0None\ne2\u00a0=\u00a0None\nOn\u00a0execution\u00a0of\u00a0this\u00a0program,\u00a0we\u00a0get\u00a0the\u00a0following\u00a0output:\nRamesh\u00a023\u00a025000\nSuresh\u00a025\u00a030000\nDeleting\u00a0object<__main__.Employee\u00a0object\u00a0at\u00a00x013F6810>\nDeleting\u00a0object<__main__.Employee\u00a0object\u00a0at 0x013F65B0>\nx\nThe\u00a0statements\ne1\u00a0=\u00a0Employee(\u00a0)\ne2\u00a0=\u00a0Employee('Ramesh',\u00a023,\u00a025000)\ncreate\u00a0 two\u00a0objects\u00a0which\u00a0are\u00a0 referred\u00a0by\u00a0 e1 and\u00a0e2. In\u00a0both\u00a0 cases\u00a0\n__init__(\u00a0) is\u00a0called.\nx\nWhenever an\u00a0object\u00a0 is\u00a0created,\u00a0space\u00a0is\u00a0allocated\u00a0for\u00a0it\u00a0in\u00a0memory\u00a0\nand\u00a0__init__(\u00a0) is\u00a0called.\u00a0So\u00a0address\u00a0of\u00a0object\u00a0is\u00a0passed\u00a0to\u00a0__init__(\u00a0).\nx\n__init__(\u00a0)'s\u00a0parameters\u00a0can\u00a0take\u00a0default\u00a0values.\u00a0In\u00a0our\u00a0program\u00a0they\u00a0\nget\u00a0used\u00a0while\u00a0creating\u00a0object\u00a0e2.\nx\n__init__(\u00a0) doesn't\u00a0return\u00a0any\u00a0value.\u00a0\nx\nIf\u00a0 we\u00a0 do\u00a0 not\u00a0 define\u00a0 __init__(\u00a0 ),\u00a0 then\u00a0 Python\u00a0 inserts\u00a0 a\u00a0 default\u00a0\n__init__(\u00a0) method\u00a0in\u00a0our\u00a0class.\nx\n__init__(\u00a0) is\u00a0ca", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_343", "chunk_strategy": "fixed_size"}}, {"text": "sed\u00a0while\u00a0creating\u00a0object\u00a0e2.\nx\n__init__(\u00a0) doesn't\u00a0return\u00a0any\u00a0value.\u00a0\nx\nIf\u00a0 we\u00a0 do\u00a0 not\u00a0 define\u00a0 __init__(\u00a0 ),\u00a0 then\u00a0 Python\u00a0 inserts\u00a0 a\u00a0 default\u00a0\n__init__(\u00a0) method\u00a0in\u00a0our\u00a0class.\nx\n__init__(\u00a0) is\u00a0called\u00a0only\u00a0once\u00a0during\u00a0entire\u00a0lifetime\u00a0of\u00a0an\u00a0object.\nx\nA\u00a0class\u00a0may\u00a0have\u00a0__init__(\u00a0) as\u00a0well\u00a0as\u00a0set_data(\u00a0).\n__init__(\u00a0) \u2013 To\u00a0initialize\u00a0object.\nset_data(\u00a0) \u2013 To\u00a0modify\u00a0an\u00a0already\u00a0initialized\u00a0object.\nx\n__del__(\u00a0 )\u00a0 method\u00a0 gets\u00a0 called\u00a0 automatically\u00a0 when\u00a0 an\u00a0 object\u00a0 goes\u00a0\nout\u00a0of\u00a0scope.\u00a0Cleanup\u00a0activity,\u00a0if\u00a0any,\u00a0should\u00a0be\u00a0done\u00a0in\u00a0__del__(\u00a0).\n234\nLet\u00a0Us\u00a0Python\nx\n__init__(\u00a0) method\u00a0is\u00a0similar\u00a0to\u00a0constructor\u00a0function\u00a0of\u00a0C++\u00a0/\u00a0Java.\nx\n__del__(\u00a0) is\u00a0similar\u00a0to\u00a0destructor\u00a0function\u00a0of\u00a0C++.\nClass\u00a0Variables\u00a0and\u00a0Methods\nx\nIf\u00a0we\u00a0wish\u00a0to\u00a0share\u00a0a\u00a0variable\u00a0amongst\u00a0all\u00a0objects\u00a0of\u00a0a\u00a0class,\u00a0we\u00a0must\u00a0\ndeclare\u00a0the\u00a0variable\u00a0as\u00a0a\u00a0class\u00a0variable or\u00a0class\u00a0attribute.\nx\nTo\u00a0 declare\u00a0 a\u00a0 class\u00a0 variable,\u00a0 we\u00a0 have\u00a0 to\u00a0 create\u00a0 a\u00a0 variable\u00a0 without\u00a0\nprepending\u00a0it\u00a0with\u00a0self.\nx\nClass\u00a0variables\u00a0do\u00a0not\u00a0become\u00a0part\u00a0of\u00a0obje", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_344", "chunk_strategy": "fixed_size"}}, {"text": "e\u00a0variable\u00a0as\u00a0a\u00a0class\u00a0variable or\u00a0class\u00a0attribute.\nx\nTo\u00a0 declare\u00a0 a\u00a0 class\u00a0 variable,\u00a0 we\u00a0 have\u00a0 to\u00a0 create\u00a0 a\u00a0 variable\u00a0 without\u00a0\nprepending\u00a0it\u00a0with\u00a0self.\nx\nClass\u00a0variables\u00a0do\u00a0not\u00a0become\u00a0part\u00a0of\u00a0objects\u00a0of\u00a0a\u00a0class.\u00a0\nx\nClass\u00a0variables\u00a0are\u00a0accessed\u00a0using\u00a0the\u00a0syntax\u00a0classname.varname.\u00a0\nx\nContrasted\u00a0with\u00a0instance\u00a0methods,\u00a0class\u00a0methods\u00a0do\u00a0not\u00a0receive\u00a0a\u00a0\nself argument.\nx\nClass\u00a0\nmethods\u00a0\ncan\u00a0\nbe\u00a0\naccessed\u00a0\nusing\u00a0\nthe\u00a0\nsyntax\u00a0\nclassname.methodname(\u00a0).\nx\nClass\u00a0 variables\u00a0can\u00a0be\u00a0 used\u00a0to\u00a0count\u00a0how\u00a0many\u00a0objects\u00a0have\u00a0 been\u00a0\ncreated\u00a0from\u00a0a\u00a0class.\nx\nClass\u00a0variables\u00a0and\u00a0methods\u00a0are\u00a0like\u00a0static\u00a0members\u00a0in\u00a0C++\u00a0/\u00a0Java.\nvars(\u00a0) and\u00a0dir(\u00a0) Functions\nx\nThere\u00a0 are\u00a0two\u00a0useful\u00a0 built-in functions\u00a0vars(\u00a0) and\u00a0dir(\u00a0).\u00a0 Of\u00a0these,\u00a0\nvars(\u00a0 )\u00a0 returns\u00a0 a\u00a0dictionary\u00a0of\u00a0 attributes\u00a0and\u00a0their\u00a0values,\u00a0whereas\u00a0\ndir(\u00a0) returns\u00a0a\u00a0list\u00a0of\u00a0attributes.\u00a0\nx\nGiven\u00a0below\u00a0is\u00a0the\u00a0sample\u00a0usage\u00a0of\u00a0these\u00a0functions:\nimport\u00a0math\n#\u00a0standard\u00a0module\nimport\u00a0functions\n#\u00a0some\u00a0user-defined\u00a0module\na =\u00a0125\ns\u00a0=\u00a0'Spooked'\nprint(vars(\u00a0))\u00a0\n#\u00a0prin", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_345", "chunk_strategy": "fixed_size"}}, {"text": "urns\u00a0a\u00a0list\u00a0of\u00a0attributes.\u00a0\nx\nGiven\u00a0below\u00a0is\u00a0the\u00a0sample\u00a0usage\u00a0of\u00a0these\u00a0functions:\nimport\u00a0math\n#\u00a0standard\u00a0module\nimport\u00a0functions\n#\u00a0some\u00a0user-defined\u00a0module\na =\u00a0125\ns\u00a0=\u00a0'Spooked'\nprint(vars(\u00a0))\u00a0\n#\u00a0prints\u00a0dict\u00a0of\u00a0attributes in\u00a0current\u00a0module\u00a0\n#\u00a0including\u00a0a\u00a0and\u00a0s\nprint(vars(math))\n#\u00a0prints\u00a0dict\u00a0of\u00a0attributes in\u00a0math\u00a0module\nprint(vars(functions))\n#\u00a0prints\u00a0dict\u00a0of\u00a0attributes\u00a0in\u00a0functions\u00a0module\nprint(dir(\u00a0))\n#\u00a0prints\u00a0list\u00a0of\u00a0attributes\u00a0in\u00a0current\u00a0module\u00a0\n#\u00a0including\u00a0a\u00a0and\u00a0s\nChapter 18:\u00a0Classes and\u00a0Objects\u00a0\n235\nprint(dir(math))\n#\u00a0prints\u00a0list\u00a0of\u00a0attributes\u00a0in\u00a0math\u00a0module\nprint(dir(functions))\n#\u00a0prints\u00a0list\u00a0of\u00a0attributes\u00a0in\u00a0functions\u00a0module\nMore vars(\u00a0) and\u00a0dir(\u00a0)\u00a0\nx\nBoth\u00a0 the\u00a0 built-in\u00a0 functions\u00a0 can\u00a0 be\u00a0 used\u00a0 with\u00a0a\u00a0 class\u00a0 as\u00a0 well\u00a0as\u00a0an\u00a0\nobject\u00a0as\u00a0shown\u00a0in\u00a0the\u00a0following\u00a0program.\nclass\u00a0Fruit\u00a0:\ncount\u00a0=\u00a00\u00a0\ndef\u00a0__init__(self,\u00a0name\u00a0=\u00a0'\u00a0',\u00a0size\u00a0=\u00a00,\u00a0color\u00a0=\u00a0'\u00a0')\u00a0:\nself.__name\u00a0=\u00a0name\nself.__size\u00a0=\u00a0size\u00a0\nself.__color\u00a0=\u00a0color\u00a0\nFruit.count\u00a0+=\u00a01\ndef\u00a0display(\u00a0)\u00a0:\nprint(Fruit.count)\nf1\u00a0=\u00a0Fruit('Banan", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_346", "chunk_strategy": "fixed_size"}}, {"text": ":\ncount\u00a0=\u00a00\u00a0\ndef\u00a0__init__(self,\u00a0name\u00a0=\u00a0'\u00a0',\u00a0size\u00a0=\u00a00,\u00a0color\u00a0=\u00a0'\u00a0')\u00a0:\nself.__name\u00a0=\u00a0name\nself.__size\u00a0=\u00a0size\u00a0\nself.__color\u00a0=\u00a0color\u00a0\nFruit.count\u00a0+=\u00a01\ndef\u00a0display(\u00a0)\u00a0:\nprint(Fruit.count)\nf1\u00a0=\u00a0Fruit('Banana',\u00a05,\u00a0'Yellow')\nprint(vars(Fruit))\nprint(dir(Fruit))\nprint(vars(f1))\nprint(dir(f1))\nOn\u00a0execution\u00a0of\u00a0this\u00a0program,\u00a0we\u00a0get\u00a0the\u00a0following\u00a0output:\n{...\u00a0...\u00a0...\u00a0,\u00a0'count':\u00a00,\u00a0'__init__':\u00a0<function\u00a0Fruit.__init__>,\u00a0\n'display':\u00a0<function\u00a0Fruit.display\u00a0at\u00a00x7f290a00f598>,\u00a0...\u00a0...\u00a0...\u00a0}\n[\u00a0...\u00a0...\u00a0...\u00a0'__init__',\u00a0'count',\u00a0'display']\n{'_name':\u00a0'Banana',\u00a0'_size':\u00a05,\u00a0'_color':\u00a0'Yellow'}\n[...\u00a0...\u00a0...\u00a0'__init__',\u00a0'_color',\u00a0'_name',\u00a0'_size',\u00a0'count',\u00a0'display']\nx\nWhen\u00a0 used\u00a0 with\u00a0 class,\u00a0 vars(\u00a0 ) returns\u00a0 a\u00a0 dictionary\u00a0 of\u00a0 the\u00a0 class's\u00a0\nattributes\u00a0 and\u00a0 their\u00a0values.\u00a0 On\u00a0 the\u00a0 other\u00a0 hand\u00a0 the\u00a0 dir(\u00a0 ) function\u00a0\nmerely\u00a0returns\u00a0a\u00a0list\u00a0of\u00a0its\u00a0attributes.\nx\nWhen\u00a0 used\u00a0with\u00a0object,\u00a0vars(\u00a0 ) returns\u00a0a\u00a0dictionary\u00a0of\u00a0 the\u00a0object's\u00a0\nattributes\u00a0 and\u00a0their\u00a0 values.\u00a0In\u00a0addition,\u00a0 it\u00a0also\u00a0returns\u00a0 the\u00a0 object's\u00a0\nc", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_347", "chunk_strategy": "fixed_size"}}, {"text": "ction\u00a0\nmerely\u00a0returns\u00a0a\u00a0list\u00a0of\u00a0its\u00a0attributes.\nx\nWhen\u00a0 used\u00a0with\u00a0object,\u00a0vars(\u00a0 ) returns\u00a0a\u00a0dictionary\u00a0of\u00a0 the\u00a0object's\u00a0\nattributes\u00a0 and\u00a0their\u00a0 values.\u00a0In\u00a0addition,\u00a0 it\u00a0also\u00a0returns\u00a0 the\u00a0 object's\u00a0\nclass's\u00a0 attributes,\u00a0 and\u00a0 recursively\u00a0 the\u00a0 attributes\u00a0 of\u00a0 its\u00a0 class's\u00a0 base\u00a0\nclasses.\n236\nLet\u00a0Us\u00a0Python\nx\nWhen\u00a0used\u00a0with\u00a0object,\u00a0dir(\u00a0) returns\u00a0a\u00a0list\u00a0of\u00a0the\u00a0object's\u00a0attributes,\u00a0\nobject's\u00a0class's\u00a0attributes, and\u00a0recursively\u00a0the\u00a0attributes\u00a0of\u00a0its\u00a0class's\u00a0\nbase\u00a0classes.\n____________________________________________________________________\nProblem\u00a018.1\nWrite\u00a0a\u00a0class\u00a0called\u00a0Number which\u00a0maintains\u00a0an\u00a0integer.\u00a0It\u00a0should\u00a0have\u00a0\nfollowing\u00a0methods\u00a0in\u00a0it\u00a0to\u00a0perform\u00a0various\u00a0operations\u00a0on\u00a0the\u00a0integer:\nset_number(self,\u00a0n)\n#\u00a0sets\u00a0n\u00a0into\u00a0int\nget_number(self)\n#\u00a0return\u00a0current\u00a0value\u00a0of\u00a0int\nprint_number(self)\u00a0\n#\u00a0prints\u00a0the\u00a0int\nisnegative(self)\u00a0\n#\u00a0checks\u00a0whether\u00a0int\u00a0is\u00a0negative\nisdivisibleby(self,\u00a0n)\n#\u00a0checks\u00a0whether\u00a0int\u00a0is\u00a0divisible\u00a0by\u00a0n\nabsolute_value(self)\n#\u00a0returns\u00a0absolute\u00a0value\u00a0of\u00a0int\nProgram\nclass\u00a0N", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_348", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0\n#\u00a0prints\u00a0the\u00a0int\nisnegative(self)\u00a0\n#\u00a0checks\u00a0whether\u00a0int\u00a0is\u00a0negative\nisdivisibleby(self,\u00a0n)\n#\u00a0checks\u00a0whether\u00a0int\u00a0is\u00a0divisible\u00a0by\u00a0n\nabsolute_value(self)\n#\u00a0returns\u00a0absolute\u00a0value\u00a0of\u00a0int\nProgram\nclass\u00a0Number\u00a0:\ndef\u00a0set_number(self,\u00a0n)\u00a0:\nself.__num\u00a0=\u00a0n\u00a0\ndef\u00a0get_number(self)\u00a0:\nreturn\u00a0self.__num\ndef\u00a0print_number(self)\u00a0:\nprint(self.__num)\ndef\u00a0isnegative(self)\u00a0:\nif\u00a0self.__num\u00a0<\u00a00\u00a0:\u00a0\nreturn\u00a0True\u00a0\nelse\u00a0:\nreturn\u00a0False\u00a0;\ndef\u00a0isdivisibleby(self,\u00a0n)\u00a0:\nif\u00a0n\u00a0==\u00a00\u00a0:\u00a0\nreturn\u00a0False\nif\u00a0self.__num\u00a0%\u00a0n\u00a0==\u00a00\u00a0:\u00a0\nreturn\u00a0True\nelse\u00a0:\nreturn\u00a0False\u00a0\nChapter 18:\u00a0Classes and\u00a0Objects\u00a0\n237\ndef\u00a0absolute_value(self)\u00a0:\nif\u00a0self.__num\u00a0>=\u00a00\u00a0:\u00a0\nreturn\u00a0self.__num\u00a0\nelse\u00a0:\nreturn\u00a0-1\u00a0*\u00a0self.__num\u00a0\nx\u00a0=\u00a0Number(\u00a0)\nx.set_number(-1234)\u00a0\nx.print_number(\u00a0)\u00a0;\nif\u00a0x.isdivisibleby(5)\u00a0==\u00a0True\u00a0:\u00a0\nprint(\"5\u00a0divides\u00a0\",\u00a0x.get_number(\u00a0))\nelse\u00a0:\nprint(\"5\u00a0does\u00a0not\u00a0divide\u00a0\",\u00a0x.get_number(\u00a0))\nprint(\"Absolute\u00a0Value\u00a0of\u00a0\",\u00a0x.get_number(\u00a0),\u00a0\"\u00a0is\u00a0\",\u00a0x.absolute_value(\u00a0))\nOutput\n-1234\n5\u00a0does\u00a0not\u00a0divide\u00a0 -1234\nAbsolute\u00a0Value\u00a0of\u00a0 -1234\u00a0 is\u00a0 1234\n_____________", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_349", "chunk_strategy": "fixed_size"}}, {"text": "(\"5\u00a0does\u00a0not\u00a0divide\u00a0\",\u00a0x.get_number(\u00a0))\nprint(\"Absolute\u00a0Value\u00a0of\u00a0\",\u00a0x.get_number(\u00a0),\u00a0\"\u00a0is\u00a0\",\u00a0x.absolute_value(\u00a0))\nOutput\n-1234\n5\u00a0does\u00a0not\u00a0divide\u00a0 -1234\nAbsolute\u00a0Value\u00a0of\u00a0 -1234\u00a0 is\u00a0 1234\n____________________________________________________________________\nProblem\u00a018.2\nWrite\u00a0a\u00a0 program\u00a0to\u00a0create\u00a0a\u00a0 class\u00a0called\u00a0 Fruit with\u00a0attributes\u00a0 size and\u00a0\ncolor.\u00a0 Create\u00a0 multiple\u00a0 objects\u00a0 of\u00a0 this\u00a0 class.\u00a0 Report\u00a0 how\u00a0 many\u00a0 objects\u00a0\nhave\u00a0been\u00a0created\u00a0from\u00a0the\u00a0class.\nProgram\nclass\u00a0Fruit\u00a0:\ncount\u00a0=\u00a00\u00a0\ndef\u00a0__init__(self,\u00a0name\u00a0=\u00a0'\u00a0',\u00a0size\u00a0=\u00a00,\u00a0color\u00a0=\u00a0'\u00a0')\u00a0:\nself.__name\u00a0=\u00a0name\nself.__size\u00a0=\u00a0size\u00a0\nself.__color\u00a0=\u00a0color\u00a0\nFruit.count\u00a0+=\u00a01\ndef\u00a0display(\u00a0)\u00a0:\nprint(Fruit.count)\nf1\u00a0=\u00a0Fruit('Banana',\u00a05,\u00a0'Yellow')\nf2\u00a0=\u00a0Fruit('Orange',\u00a04,\u00a0'Orange')\n238\nLet\u00a0Us\u00a0Python\nf3\u00a0=\u00a0Fruit('Apple',\u00a03,\u00a0'Red')\nFruit.display(\u00a0)\nprint(Fruit.count)\nOutput\n3\n3\nTips\nx\ncount is\u00a0 a\u00a0 class\u00a0 attribute,\u00a0 not\u00a0 an\u00a0 object\u00a0 attribute.\u00a0 So\u00a0 it\u00a0is\u00a0 shared\u00a0\namongst\u00a0all\u00a0Fruit objects.\nx\nIt\u00a0 can\u00a0 be\u00a0 initialized\u00a0 as\u00a0 count\u00a0 =\u00a0 0,\u00a0 but\u00a0 must\u00a0 be", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_350", "chunk_strategy": "fixed_size"}}, {"text": "nt(Fruit.count)\nOutput\n3\n3\nTips\nx\ncount is\u00a0 a\u00a0 class\u00a0 attribute,\u00a0 not\u00a0 an\u00a0 object\u00a0 attribute.\u00a0 So\u00a0 it\u00a0is\u00a0 shared\u00a0\namongst\u00a0all\u00a0Fruit objects.\nx\nIt\u00a0 can\u00a0 be\u00a0 initialized\u00a0 as\u00a0 count\u00a0 =\u00a0 0,\u00a0 but\u00a0 must\u00a0 be\u00a0 accessed\u00a0 using\u00a0\nFruit.count.\n____________________________________________________________________\nProblem\u00a018.3\nWrite\u00a0a\u00a0program\u00a0that\u00a0determines\u00a0whether\u00a0two\u00a0objects\u00a0are\u00a0of\u00a0same\u00a0type,\u00a0\nwhether\u00a0 their\u00a0 attributes\u00a0 are\u00a0 same\u00a0 and\u00a0 whether\u00a0 they\u00a0 are\u00a0 pointing\u00a0 to\u00a0\nsame\u00a0object.\nProgram\nclass\u00a0Complex\u00a0:\ndef\u00a0__init__(self,\u00a0r\u00a0=\u00a00.0,\u00a0i\u00a0=\u00a00.0)\u00a0:\nself.__real\u00a0=\u00a0r\nself.__imag\u00a0=\u00a0i\u00a0\ndef\u00a0__eq__(self,\u00a0other)\u00a0:\nif\u00a0self.__real\u00a0==\u00a0other.__real\u00a0and\u00a0self.__imag\u00a0==\u00a0other.__imag\u00a0:\nreturn\u00a0True\nelse\u00a0:\nreturn\u00a0False\nc1\u00a0=\u00a0Complex(1.1,\u00a00.2)\nc2\u00a0=\u00a0Complex(2.1,\u00a00.4)\nc3\u00a0=\u00a0c1\nif\u00a0c1\u00a0==\u00a0c2\u00a0:\nprint('Attributes\u00a0of\u00a0c1\u00a0and\u00a0c2\u00a0are\u00a0same')\nelse\u00a0:\nChapter 18:\u00a0Classes and\u00a0Objects\u00a0\n239\nprint('Attributes\u00a0of\u00a0c1\u00a0and\u00a0c2\u00a0are\u00a0different')\nif\u00a0type(c1)\u00a0==\u00a0type(c3)\u00a0:\nprint('c1\u00a0and\u00a0c3\u00a0are\u00a0of\u00a0same\u00a0type')\nelse\u00a0:\nprint('c1\u00a0and\u00a0c3\u00a0are\u00a0of\u00a0different\u00a0t", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_351", "chunk_strategy": "fixed_size"}}, {"text": "me')\nelse\u00a0:\nChapter 18:\u00a0Classes and\u00a0Objects\u00a0\n239\nprint('Attributes\u00a0of\u00a0c1\u00a0and\u00a0c2\u00a0are\u00a0different')\nif\u00a0type(c1)\u00a0==\u00a0type(c3)\u00a0:\nprint('c1\u00a0and\u00a0c3\u00a0are\u00a0of\u00a0same\u00a0type')\nelse\u00a0:\nprint('c1\u00a0and\u00a0c3\u00a0are\u00a0of\u00a0different\u00a0type'\u00a0)\nif\u00a0c1\u00a0is\u00a0c3\u00a0:\nprint('c1\u00a0and\u00a0c3\u00a0are\u00a0pointing\u00a0to\u00a0same\u00a0object')\nelse\u00a0:\nprint('c1\u00a0and\u00a0c3\u00a0are\u00a0pointing\u00a0to\u00a0different\u00a0objects'\u00a0)\nOutput\nAttributes\u00a0of\u00a0c1\u00a0and\u00a0c2\u00a0are\u00a0different\nc1\u00a0and\u00a0c3\u00a0are\u00a0of\u00a0same\u00a0type\nc1\u00a0and\u00a0c3\u00a0are\u00a0pointing\u00a0to\u00a0same\u00a0object\nTips\nx\nTo\u00a0compare\u00a0attributes\u00a0of\u00a0two\u00a0Complex objects\u00a0we\u00a0have\u00a0overloaded\u00a0\nthe\u00a0 == operator,\u00a0 by\u00a0 defining\u00a0 the\u00a0 function\u00a0 __eq__(\u00a0 ).\u00a0 Operator\u00a0\noverloading\u00a0is\u00a0explained\u00a0in\u00a0detail\u00a0in\u00a0Chapter\u00a019.\nx\ntype(\u00a0 )\u00a0 is\u00a0 used\u00a0 to\u00a0 obtain\u00a0 the\u00a0 type\u00a0 of\u00a0 an\u00a0 object.\u00a0 Types\u00a0 can\u00a0 be\u00a0\ncompared\u00a0using\u00a0the\u00a0== operator.\nx\nis keyword\u00a0is\u00a0used\u00a0to\u00a0check\u00a0whether\u00a0 c1 and\u00a0c3 are\u00a0pointing\u00a0to\u00a0the\u00a0\nsame\u00a0object.\n____________________________________________________________________\nProblem\u00a018.4\nWrite\u00a0a\u00a0program\u00a0to\u00a0get\u00a0a\u00a0list\u00a0of\u00a0built-in\u00a0functions.\nProgram\nimport\u00a0builtins\nprint(dir(builti", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_352", "chunk_strategy": "fixed_size"}}, {"text": "ing\u00a0to\u00a0the\u00a0\nsame\u00a0object.\n____________________________________________________________________\nProblem\u00a018.4\nWrite\u00a0a\u00a0program\u00a0to\u00a0get\u00a0a\u00a0list\u00a0of\u00a0built-in\u00a0functions.\nProgram\nimport\u00a0builtins\nprint(dir(builtins))\nprint(\u00a0)\nprint(vars(builtins))\n240\nLet\u00a0Us\u00a0Python\nOutput\n['ArithmeticError',\u00a0'AssertionError',\u00a0'AttributeError',\u00a0...\n'__debug__',\u00a0'__doc__',\u00a0'__import__',\u00a0'__loader__',\u00a0'__name__',\u00a0...\u00a0\n'abs',\u00a0'all',\u00a0'any',\u00a0'ascii',\u00a0'bin',\u00a0'bool',\u00a0'bytearray',\u00a0'bytes',\u00a0'callable',\u00a0'chr',\u00a0...\u00a0\n'sum',\u00a0'super',\u00a0'tuple',\u00a0'type',\u00a0'vars',\u00a0'zip']\n{'__name__':\u00a0\n'builtins',\u00a0\n'__package__':\u00a0\n'',\u00a0\n'__loader__':\u00a0\n<class\u00a0\n'_frozen_importlib.BuiltinImporter'>,\u00a0'abs':\u00a0<built-in\u00a0function\u00a0abs>,\u00a0\n'all':\u00a0<built-in\u00a0function\u00a0all>,\u00a0'any':\u00a0<built-in\u00a0function\u00a0any>,\u00a0...\u00a0'False':\u00a0False}\nTips\nx\nIn\u00a0the\u00a0output\u00a0above\u00a0only\u00a0partial\u00a0items\u00a0of\u00a0dictionary\u00a0and\u00a0list\u00a0is\u00a0being\u00a0\ndisplayed.\u00a0The\u00a0actual\u00a0output\u00a0is\u00a0much\u00a0more\u00a0exhaustive.\n____________________________________________________________________\nProblem\u00a018.5\nSuppose\u00a0we\u00a0have\u00a0 defined\u00a0two\u00a0 ", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_353", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0of\u00a0dictionary\u00a0and\u00a0list\u00a0is\u00a0being\u00a0\ndisplayed.\u00a0The\u00a0actual\u00a0output\u00a0is\u00a0much\u00a0more\u00a0exhaustive.\n____________________________________________________________________\nProblem\u00a018.5\nSuppose\u00a0we\u00a0have\u00a0 defined\u00a0two\u00a0 functions\u00a0 msg1(\u00a0 ) and\u00a0 msg2(\u00a0) in\u00a0main\u00a0\nmodule.\u00a0 What\u00a0 will\u00a0be\u00a0 the\u00a0output\u00a0 of\u00a0 vars(\u00a0 ) and\u00a0 dir(\u00a0 ) on\u00a0the\u00a0 current\u00a0\nmodule?\u00a0How\u00a0will\u00a0you\u00a0obtain\u00a0the\u00a0list\u00a0of\u00a0names\u00a0which\u00a0are\u00a0present\u00a0in\u00a0both\u00a0\noutputs,\u00a0those\u00a0which\u00a0are\u00a0unique\u00a0to\u00a0either\u00a0list?\nProgram\ndef\u00a0msg1(\u00a0)\u00a0:\nprint('Wright\u00a0Brothers\u00a0are\u00a0responsible\u00a0for\u00a09/11\u00a0too')\ndef\u00a0msg2(\u00a0)\u00a0:\nprint('Cells\u00a0divide\u00a0to\u00a0multiply')\nd\u00a0=\u00a0vars(\u00a0)\nl\u00a0=\u00a0dir(\u00a0)\nprint(sorted(d.keys()))\nprint(l)\nprint(d.keys(\u00a0)\u00a0- l)\nprint(l\u00a0- d.keys(\u00a0))\nChapter 18:\u00a0Classes and\u00a0Objects\u00a0\n241\nOutput\n['__annotations__',\u00a0 '__builtins__',\u00a0 '__cached__',\u00a0 '__doc__',\u00a0 '__file__',\u00a0\n'__loader__',\u00a0 '__name__',\u00a0 '__package__',\u00a0 '__spec__',\u00a0 'd', 'l',\u00a0 'msg1',\u00a0\n'msg2']\n['__annotations__',\u00a0 '__builtins__',\u00a0 '__cached__',\u00a0 '__doc__',\u00a0 '__file__',\u00a0\n'__loader__',\u00a0'__name__',\u00a0'__package__',\u00a0'__spec__'", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_354", "chunk_strategy": "fixed_size"}}, {"text": " '__name__',\u00a0 '__package__',\u00a0 '__spec__',\u00a0 'd', 'l',\u00a0 'msg1',\u00a0\n'msg2']\n['__annotations__',\u00a0 '__builtins__',\u00a0 '__cached__',\u00a0 '__doc__',\u00a0 '__file__',\u00a0\n'__loader__',\u00a0'__name__',\u00a0'__package__',\u00a0'__spec__',\u00a0'd',\u00a0'msg1',\u00a0'msg2']\n{'l'}\nset(\u00a0)\nTips\nx\nset(\u00a0 ) shown\u00a0in\u00a0the\u00a0output\u00a0means\u00a0 an\u00a0empty\u00a0set.\u00a0 It\u00a0means\u00a0there\u00a0 is\u00a0\nnothing\u00a0in\u00a0l that\u00a0is\u00a0not\u00a0present\u00a0in\u00a0d.\n____________________________________________________________________\nProblem\u00a018.6\nIs\u00a0there\u00a0any\u00a0difference\u00a0in\u00a0the\u00a0values\u00a0returned\u00a0by\u00a0the\u00a0functions\u00a0dir(\u00a0) and\u00a0\nvars(..).keys(\u00a0)?\u00a0If\u00a0yes,\u00a0write\u00a0a\u00a0program\u00a0to\u00a0obtain\u00a0that\u00a0difference?\nProgram\ns\u00a0=\u00a0set(dir(list)).difference(vars(list).keys(\u00a0))\nprint(s)\nOutput\n{'__class__',\u00a0\n'__setattr__',\u00a0\n'__format__',\u00a0\n'__init_subclass__',\u00a0\n'__subclasshook__',\u00a0\n'__delattr__',\u00a0\n'__dir__',\u00a0\n'__reduce__',\u00a0\n'__reduce_ex__',\u00a0'__str__'}\nTips\nx\ndir(list)\u00a0will\u00a0return\u00a0a\u00a0list\u00a0of\u00a0attributes\u00a0of\u00a0list type.\nx\nvars(list).keys(\u00a0 )\u00a0returns\u00a0 a\u00a0list\u00a0of\u00a0keys\u00a0from\u00a0the\u00a0dictionary\u00a0returned\u00a0\nby\u00a0vars(\u00a0) for\u00a0the\u00a0list type.\nx\ndifferernce(\u00a0)\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_355", "chunk_strategy": "fixed_size"}}, {"text": ",\u00a0'__str__'}\nTips\nx\ndir(list)\u00a0will\u00a0return\u00a0a\u00a0list\u00a0of\u00a0attributes\u00a0of\u00a0list type.\nx\nvars(list).keys(\u00a0 )\u00a0returns\u00a0 a\u00a0list\u00a0of\u00a0keys\u00a0from\u00a0the\u00a0dictionary\u00a0returned\u00a0\nby\u00a0vars(\u00a0) for\u00a0the\u00a0list type.\nx\ndifferernce(\u00a0)\u00a0returns\u00a0the\u00a0difference\u00a0between\u00a0the\u00a0two\u00a0lists.\n____________________________________________________________________\n242\nLet\u00a0Us\u00a0Python\n[A] State\u00a0whether\u00a0the\u00a0following\u00a0statements\u00a0are\u00a0True\u00a0or\u00a0False:\n(a) Class\u00a0attributes\u00a0and\u00a0object\u00a0attributes\u00a0are\u00a0same.\n(b) A\u00a0class\u00a0 data\u00a0member\u00a0 is\u00a0useful\u00a0 when\u00a0 all\u00a0objects\u00a0of\u00a0 the\u00a0same\u00a0 class\u00a0\nmust\u00a0share\u00a0a\u00a0common\u00a0item\u00a0of\u00a0information.\n(c)\nIf\u00a0a\u00a0class\u00a0has\u00a0a\u00a0data\u00a0member\u00a0and\u00a0three\u00a0objects\u00a0are\u00a0created\u00a0from\u00a0this\u00a0\nclass,\u00a0then\u00a0each\u00a0object\u00a0would\u00a0have\u00a0its\u00a0own\u00a0data\u00a0member.\n(d) A\u00a0class\u00a0can\u00a0have\u00a0class\u00a0data\u00a0as\u00a0well\u00a0as\u00a0class\u00a0methods.\n(e) Usually\u00a0 data\u00a0 in\u00a0a\u00a0 class\u00a0 is\u00a0kept\u00a0 private\u00a0and\u00a0 the\u00a0 data\u00a0 is\u00a0accessed\u00a0 /\u00a0\nmanipulated\u00a0through\u00a0object\u00a0methods\u00a0of\u00a0the\u00a0class.\n(f)\nMember\u00a0functions\u00a0of\u00a0an\u00a0object\u00a0have\u00a0to\u00a0be\u00a0called\u00a0explicitly,\u00a0whereas,\u00a0\nthe\u00a0__init__(\u00a0) method\u00a0gets\u00a0called\u00a0automati", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_356", "chunk_strategy": "fixed_size"}}, {"text": "e\u00a0and\u00a0 the\u00a0 data\u00a0 is\u00a0accessed\u00a0 /\u00a0\nmanipulated\u00a0through\u00a0object\u00a0methods\u00a0of\u00a0the\u00a0class.\n(f)\nMember\u00a0functions\u00a0of\u00a0an\u00a0object\u00a0have\u00a0to\u00a0be\u00a0called\u00a0explicitly,\u00a0whereas,\u00a0\nthe\u00a0__init__(\u00a0) method\u00a0gets\u00a0called\u00a0automatically.\n(g)\nA\u00a0constructor\u00a0gets\u00a0called\u00a0whenever\u00a0an\u00a0object\u00a0gets\u00a0instantiated.\n(h) The\u00a0__init__(\u00a0) method\u00a0never\u00a0returns\u00a0a\u00a0value.\n(i)\nWhen\u00a0an\u00a0object\u00a0goes\u00a0out\u00a0of\u00a0scope,\u00a0its\u00a0__del__(\u00a0) method\u00a0gets\u00a0called\u00a0\nautomatically.\n(j)\nThe\u00a0self variable\u00a0 always\u00a0contains\u00a0 the\u00a0 address\u00a0of\u00a0 the\u00a0 object\u00a0 using\u00a0\nwhich\u00a0the\u00a0method/data\u00a0is\u00a0being\u00a0accessed.\n(k)\nThe\u00a0self variable\u00a0can\u00a0be\u00a0used\u00a0even\u00a0outside\u00a0the\u00a0class.\n(l)\nThe\u00a0__init__(\u00a0) method\u00a0gets\u00a0called\u00a0only\u00a0once\u00a0during\u00a0the\u00a0lifetime\u00a0of\u00a0\nan\u00a0object.\n(m) By\u00a0default,\u00a0instance\u00a0data\u00a0and\u00a0methods\u00a0in\u00a0a\u00a0class\u00a0are\u00a0public.\n(n) In\u00a0a\u00a0class\u00a0two constructors\u00a0can\u00a0coexist\u2014a\u00a00-argument\u00a0constructor\u00a0\nand\u00a0a\u00a02-argument\u00a0constructor.\n[B] Answer\u00a0the\u00a0following questions:\n(a) Which methods\u00a0in\u00a0a\u00a0class\u00a0act\u00a0as\u00a0constructor?\nChapter 18:\u00a0Classes and\u00a0Objects\u00a0\n243\n(b) How\u00a0many\u00a0object\u00a0are\u00a0created\u00a0in\u00a0the\u00a0f", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_357", "chunk_strategy": "fixed_size"}}, {"text": "ructor\u00a0\nand\u00a0a\u00a02-argument\u00a0constructor.\n[B] Answer\u00a0the\u00a0following questions:\n(a) Which methods\u00a0in\u00a0a\u00a0class\u00a0act\u00a0as\u00a0constructor?\nChapter 18:\u00a0Classes and\u00a0Objects\u00a0\n243\n(b) How\u00a0many\u00a0object\u00a0are\u00a0created\u00a0in\u00a0the\u00a0following\u00a0code\u00a0snippet?\na\u00a0=\u00a010\nb\u00a0=\u00a0a\nc\u00a0=\u00a0b\n(c)\nWhat\u00a0is\u00a0the\u00a0difference\u00a0between\u00a0variables,\u00a0age and\u00a0__age?\n(d) What\u00a0is\u00a0the\u00a0difference\u00a0between\u00a0the\u00a0function\u00a0vars(\u00a0) and\u00a0dir(\u00a0)?\n(e) In\u00a0 the\u00a0 following\u00a0 code\u00a0 snippet what\u00a0 is\u00a0 the\u00a0 difference\u00a0 between\u00a0\ndisplay(\u00a0) and show(\u00a0)?\nclass\u00a0Message\u00a0:\ndef\u00a0display(self,\u00a0msg)\u00a0:\npass\ndef\u00a0show(msg)\u00a0:\npass\n(f)\nIn\u00a0 the\u00a0 following\u00a0 code\u00a0 snippet\u00a0 what\u00a0 is\u00a0 the\u00a0 difference\u00a0 between\u00a0\ndisplay(\u00a0) and show(\u00a0)?\u00a0\nm\u00a0=\u00a0Message(\u00a0)\nm.display('Hi\u00a0and\u00a0Bye'\u00a0)\nMessage.show('Hi\u00a0and\u00a0Bye'\u00a0)\n(g)\nHow\u00a0 many\u00a0 parameters\u00a0 are\u00a0 being\u00a0 passed\u00a0 to\u00a0 display(\u00a0 ) in\u00a0 the\u00a0\nfollowing\u00a0code\u00a0snippet:\u00a0\nm\u00a0=\u00a0Sample(\u00a0)\nm.display(10,\u00a020,\u00a030)\n[C] Attempt\u00a0the\u00a0following\u00a0questions:\n(a) Write\u00a0a\u00a0program\u00a0to\u00a0create\u00a0a\u00a0class\u00a0that\u00a0represents\u00a0Complex\u00a0numbers\u00a0\ncontaining\u00a0 real\u00a0 and\u00a0 imaginary\u00a0 parts\u00a0 and\u00a0 then\u00a0 use", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_358", "chunk_strategy": "fixed_size"}}, {"text": "\nm\u00a0=\u00a0Sample(\u00a0)\nm.display(10,\u00a020,\u00a030)\n[C] Attempt\u00a0the\u00a0following\u00a0questions:\n(a) Write\u00a0a\u00a0program\u00a0to\u00a0create\u00a0a\u00a0class\u00a0that\u00a0represents\u00a0Complex\u00a0numbers\u00a0\ncontaining\u00a0 real\u00a0 and\u00a0 imaginary\u00a0 parts\u00a0 and\u00a0 then\u00a0 use\u00a0 it\u00a0 to\u00a0 perform\u00a0\ncomplex\u00a0number\u00a0addition,\u00a0subtraction,\u00a0multiplication\u00a0and\u00a0division.\n(b) Write\u00a0 a\u00a0 program\u00a0 that\u00a0 implements\u00a0 a\u00a0 Matrix class\u00a0 and\u00a0 performs\u00a0\naddition,\u00a0multiplication,\u00a0and\u00a0transpose\u00a0operations\u00a0on\u00a03\u00a0x\u00a03\u00a0matrices.\n(c) Write\u00a0a\u00a0program\u00a0to\u00a0create\u00a0a\u00a0class\u00a0that\u00a0can\u00a0calculate\u00a0the\u00a0surface\u00a0area\u00a0\nand\u00a0 volume\u00a0 of\u00a0 a\u00a0 solid.\u00a0 The\u00a0 class\u00a0 should\u00a0 also\u00a0 have\u00a0 a\u00a0 provision\u00a0 to\u00a0\naccept\u00a0the\u00a0data\u00a0relevant\u00a0to\u00a0the\u00a0solid.\n244\nLet\u00a0Us\u00a0Python\n(d) Write\u00a0a\u00a0program\u00a0to\u00a0create\u00a0a\u00a0class\u00a0that\u00a0can\u00a0calculate\u00a0the\u00a0perimeter\u00a0/\u00a0\ncircumference\u00a0 and\u00a0 area\u00a0of\u00a0 a\u00a0 regular\u00a0 shape.\u00a0 The\u00a0 class\u00a0 should\u00a0 also\u00a0\nhave\u00a0a\u00a0provision\u00a0to\u00a0accept\u00a0the\u00a0data\u00a0relevant\u00a0to\u00a0the\u00a0shape.\n(e) Write\u00a0 a\u00a0 program\u00a0 that\u00a0 creates\u00a0 and\u00a0 uses\u00a0 a\u00a0 Time class\u00a0 to\u00a0 perform\u00a0\nvarious\u00a0time\u00a0arithmetic\u00a0operations.\n(f) Write\u00a0a\u00a0program\u00a0to\u00a0implement\u00a0a\u00a0linke", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_359", "chunk_strategy": "fixed_size"}}, {"text": "sion\u00a0to\u00a0accept\u00a0the\u00a0data\u00a0relevant\u00a0to\u00a0the\u00a0shape.\n(e) Write\u00a0 a\u00a0 program\u00a0 that\u00a0 creates\u00a0 and\u00a0 uses\u00a0 a\u00a0 Time class\u00a0 to\u00a0 perform\u00a0\nvarious\u00a0time\u00a0arithmetic\u00a0operations.\n(f) Write\u00a0a\u00a0program\u00a0to\u00a0implement\u00a0a\u00a0linked\u00a0list\u00a0data\u00a0structure\u00a0by\u00a0creating\u00a0\na\u00a0linked\u00a0list\u00a0class.\u00a0Each\u00a0node\u00a0in\u00a0the\u00a0linked\u00a0list\u00a0should\u00a0contain\u00a0name\u00a0of\u00a0\nthe\u00a0car,\u00a0its\u00a0price\u00a0and\u00a0a\u00a0link\u00a0to\u00a0the\u00a0next\u00a0node.\u00a0\n[D] Match\u00a0the\u00a0following\u00a0pairs:\na.\u00a0 dir(\u00a0)\n1.\u00a0 Nested\u00a0packages\nb.\u00a0 vars(\u00a0)\n2.\u00a0 Identifiers,\u00a0their\u00a0type\u00a0&\u00a0scope\nc.\u00a0 Variables\u00a0in\u00a0a\u00a0function\n3.\u00a0 Returns\u00a0dictionary\nd.\u00a0 import\u00a0a.b.c\n4.\u00a0 Local\u00a0namespace\ne.\u00a0 Symbol\u00a0table\n5.\u00a0 Returns\u00a0list\nf.\u00a0 Variables\u00a0outside\u00a0all\u00a0functions\n6.\u00a0 Global\u00a0namespace\nLet\u00a0Us\nPython\n245\nIntricacies\u00a0of\u00a0\nClasses\u00a0&\u00a0Objects\nx\nIdentifier\u00a0Naming\u00a0Convention\nx\nImitating\u00a0a\u00a0Structure\nx\nCalling\u00a0Functions\u00a0and\u00a0Methods\nx\nType\u00a0Conversion\nx\nOperator\u00a0Overloading\nx\nPrograms\nx\nWhich\u00a0Operators\u00a0to\u00a0Overload?\nx\nExercises\nx\nEverything\u00a0is\u00a0an\u00a0Object\n19\n\u201cIt's\u00a0the\u00a0detail\u00a0that\u00a0matters...\u201d\n246\nLet\u00a0Us\u00a0Python\nIdentifier\u00a0Naming\u00a0Convention\nx\nWe\u00a0 hav", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_360", "chunk_strategy": "fixed_size"}}, {"text": "ion\nx\nOperator\u00a0Overloading\nx\nPrograms\nx\nWhich\u00a0Operators\u00a0to\u00a0Overload?\nx\nExercises\nx\nEverything\u00a0is\u00a0an\u00a0Object\n19\n\u201cIt's\u00a0the\u00a0detail\u00a0that\u00a0matters...\u201d\n246\nLet\u00a0Us\u00a0Python\nIdentifier\u00a0Naming\u00a0Convention\nx\nWe\u00a0 have\u00a0 created\u00a0 identifiers\u00a0 for\u00a0 many\u00a0 things\u0376normal\u00a0 variables,\u00a0\nfunctions,\u00a0 classes,\u00a0instance\u00a0data,\u00a0 instance\u00a0methods,\u00a0 class\u00a0 data\u00a0and\u00a0\nclass\u00a0methods.\u00a0\nx\nIt\u00a0 is\u00a0a\u00a0good\u00a0idea\u00a0 to\u00a0follow\u00a0the\u00a0following\u00a0convention\u00a0while creating\u00a0\nidentifiers:\n(a) All\u00a0variables\u00a0and\u00a0functions\u00a0not\u00a0belonging\u00a0to\u00a0a\u00a0class\u00a0- Start\u00a0with\u00a0a\u00a0\nlowercase\u00a0alphabet.\nExample:\u00a0real,\u00a0imag,\u00a0name,\u00a0age,\u00a0salary,\u00a0printit(\u00a0),\u00a0display(\u00a0)\n(b) Variables which\u00a0are\u00a0to\u00a0be\u00a0used\u00a0and\u00a0discarded\u00a0- Use\u00a0_.\nEx:\u00a0for\u00a0_\u00a0in\u00a0[10,\u00a020,\u00a030,\u00a040]\u00a0:\u00a0print(_)\n(c)\nClass\u00a0names\u00a0- Start\u00a0with\u00a0an\u00a0uppercase alphabet.\nExample: Employee,\u00a0Fruit,\u00a0Bird,\u00a0Complex,\u00a0Tool,\u00a0Machine\n(d) Private\u00a0 identifiers,\u00a0 i.e.\u00a0 identifiers\u00a0 which\u00a0 we\u00a0 want\u00a0 should\u00a0 be\u00a0\naccessed\u00a0only\u00a0from\u00a0within\u00a0the\u00a0class\u00a0in\u00a0which\u00a0they\u00a0are\u00a0declared\u00a0-\nStart\u00a0with two leading\u00a0underscores.\nExample:\u00a0__name,\u00a0__age,\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_361", "chunk_strategy": "fixed_size"}}, {"text": "(d) Private\u00a0 identifiers,\u00a0 i.e.\u00a0 identifiers\u00a0 which\u00a0 we\u00a0 want\u00a0 should\u00a0 be\u00a0\naccessed\u00a0only\u00a0from\u00a0within\u00a0the\u00a0class\u00a0in\u00a0which\u00a0they\u00a0are\u00a0declared\u00a0-\nStart\u00a0with two leading\u00a0underscores.\nExample:\u00a0__name,\u00a0__age,\u00a0__get_errors(\u00a0)\n(e) Protected\u00a0 identifiers,\u00a0 i.e.\u00a0 identifiers\u00a0which\u00a0 we\u00a0want\u00a0 should\u00a0 be\u00a0\naccessed\u00a0only\u00a0from\u00a0within\u00a0the\u00a0class\u00a0in\u00a0which\u00a0they\u00a0are\u00a0declared\u00a0\nor\u00a0 from\u00a0 the\u00a0 classes\u00a0 that\u00a0 are\u00a0 derived\u00a0 from\u00a0 the\u00a0 class\u00a0 using\u00a0 a\u00a0\nconcept\u00a0called\u00a0inheritance\u00a0(discussed\u00a0in\u00a0Chapter\u00a020)\u00a0- Start\u00a0with\u00a0\none\u00a0leading\u00a0underscore.\nExample: _address,\u00a0_maintain_height(\u00a0)\n(f)\nPublic identifiers,\u00a0 i.e.\u00a0 identifiers\u00a0 which\u00a0 we\u00a0 want\u00a0 should\u00a0 be\u00a0\naccessed\u00a0 only\u00a0 from\u00a0 within\u00a0 the\u00a0 class\u00a0 or\u00a0from\u00a0 outside\u00a0 it\u00a0 - Start\u00a0\nwith a\u00a0lowercase\u00a0alphabet.\nExample: neighbour,\u00a0displayheight(\u00a0)\n(g)\nLanguage-defined\u00a0special\u00a0names\u00a0- Start\u00a0and\u00a0end\u00a0with\u00a0two\u00a0__.\nExample: __init__(\u00a0),\u00a0__del__(\u00a0),\u00a0__add__(\u00a0),\u00a0__sub__(\u00a0)\nD\u017d\u0176\ue001\u019a\u00a0 call\u00a0 \u019ahe\u0190e\u00a0 \u0175e\u019ah\u017dd\u0190\ue002\u00a0 The\u01c7\u00a0 a\u018ce\u00a0\u019ahe\u00a0 \u0175e\u019ah\u017dd\u0190\u00a0 \u019aha\u019a\u00a0 P\u01c7\u019ah\u017d\u0176\u00a0\ncalls.\nChapter 19:\u00a0Intricacies\u00a0of\u00a0Classes an", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_362", "chunk_strategy": "fixed_size"}}, {"text": "s\u00a0- Start\u00a0and\u00a0end\u00a0with\u00a0two\u00a0__.\nExample: __init__(\u00a0),\u00a0__del__(\u00a0),\u00a0__add__(\u00a0),\u00a0__sub__(\u00a0)\nD\u017d\u0176\ue001\u019a\u00a0 call\u00a0 \u019ahe\u0190e\u00a0 \u0175e\u019ah\u017dd\u0190\ue002\u00a0 The\u01c7\u00a0 a\u018ce\u00a0\u019ahe\u00a0 \u0175e\u019ah\u017dd\u0190\u00a0 \u019aha\u019a\u00a0 P\u01c7\u019ah\u017d\u0176\u00a0\ncalls.\nChapter 19:\u00a0Intricacies\u00a0of\u00a0Classes and\u00a0Objects\u00a0\n247\n(h) Unlike\u00a0 C++ and\u00a0 Java,\u00a0Python\u00a0does\u00a0 not\u00a0have\u00a0keywords\u00a0private,\u00a0\nprotected or\u00a0 public\u00a0 to\u00a0 mark\u00a0 the\u00a0 attributes.\u00a0 So\u00a0 if\u00a0 above\u00a0\nconventions\u00a0 are\u00a0 followed\u00a0 diligently,\u00a0 the\u00a0 identifier\u00a0 name\u00a0 itself\u00a0\ncan\u00a0convey\u00a0how\u00a0you\u00a0wish\u00a0it\u00a0to\u00a0be\u00a0accessed.\u00a0\nCalling\u00a0Functions\u00a0and\u00a0Methods\nx\nConsider\u00a0 the\u00a0 program\u00a0 given\u00a0 below.\u00a0 It\u00a0 contains\u00a0 a\u00a0 global\u00a0 function\u00a0\nprintit( ) which\u00a0 does\u00a0 not\u00a0 belong\u00a0 to\u00a0 any\u00a0class, an\u00a0 instance\u00a0 method\u00a0\ncalled\u00a0display(\u00a0) and\u00a0a\u00a0class\u00a0method\u00a0called\u00a0show(\u00a0).\u00a0\ndef\u00a0printit(\u00a0)\u00a0:\n#\u00a0global\u00a0function\nprint('Opener')\nclass\u00a0Message\u00a0:\ndef\u00a0display(self,\u00a0msg)\u00a0:\n#\u00a0instance\u00a0method\nprintit(\u00a0)\nprint(msg)\ndef\u00a0show(\u00a0)\u00a0:\n#\u00a0class\u00a0method\nprintit(\u00a0)\nprint('Hello')\n#\u00a0display(\u00a0)\u00a0\n#\u00a0this\u00a0call\u00a0will\u00a0result\u00a0in\u00a0an\u00a0error\nprintit(\u00a0)\n#\u00a0call\u00a0global\u00a0function\nm\u00a0=\u00a0Message(\u00a0)\nm.display('Good\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_363", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0method\nprintit(\u00a0)\nprint(msg)\ndef\u00a0show(\u00a0)\u00a0:\n#\u00a0class\u00a0method\nprintit(\u00a0)\nprint('Hello')\n#\u00a0display(\u00a0)\u00a0\n#\u00a0this\u00a0call\u00a0will\u00a0result\u00a0in\u00a0an\u00a0error\nprintit(\u00a0)\n#\u00a0call\u00a0global\u00a0function\nm\u00a0=\u00a0Message(\u00a0)\nm.display('Good\u00a0Morning')\n#\u00a0call\u00a0instance\u00a0method\nMessage.show(\u00a0)\n#\u00a0call\u00a0class\u00a0method\nOn\u00a0execution\u00a0of\u00a0this\u00a0program,\u00a0we\u00a0get\u00a0the\u00a0following\u00a0output:\nOpener\nOpener\nGood\u00a0Morning\nOpener\nHello\nx\nClass\u00a0 method\u00a0 show(\u00a0 ) does\u00a0 not\u00a0 receive\u00a0 self,\u00a0 whereas\u00a0 instance\u00a0\nmethod display(\u00a0) does.\nx\nA\u00a0 global\u00a0 function\u00a0 printit(\u00a0 ) can\u00a0 call\u00a0 a\u00a0 class\u00a0 method\u00a0 show(\u00a0 ) and\u00a0\ninstance\u00a0method\u00a0display(\u00a0).\n248\nLet\u00a0Us\u00a0Python\nx\nA\u00a0 class\u00a0 method\u00a0 and\u00a0 instance\u00a0 method\u00a0 can\u00a0 call\u00a0 a\u00a0 global\u00a0 function\u00a0\nprintit(\u00a0).\nx\nA\u00a0 class\u00a0 method\u00a0show(\u00a0 ) cannot\u00a0 call\u00a0 an\u00a0instance\u00a0method\u00a0 display(\u00a0 )\nsince\u00a0 show(\u00a0 ) d\u017de\u0190\u0176\ue001\u019a\u00a0 \u018cecei\u01c0e\u00a0 a\u00a0 self argument.\u00a0 In\u00a0 absence\u00a0 of\u00a0 this\u00a0\nargument\u00a0 display(\u00a0 ) will\u00a0 not\u00a0 know\u00a0 which\u00a0 object\u00a0 is\u00a0 it\u00a0 supposed\u00a0 to\u00a0\nwork\u00a0with.\nx\nA\u00a0 class\u00a0 method\u00a0 and\u00a0 instance\u00a0 method\u00a0 can\u00a0 also\u00a0 be\u00a0 called\u00a0 from\u00a0 a\u00a0\nmethod\u00a0of\u00a0ano", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_364", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0 In\u00a0 absence\u00a0 of\u00a0 this\u00a0\nargument\u00a0 display(\u00a0 ) will\u00a0 not\u00a0 know\u00a0 which\u00a0 object\u00a0 is\u00a0 it\u00a0 supposed\u00a0 to\u00a0\nwork\u00a0with.\nx\nA\u00a0 class\u00a0 method\u00a0 and\u00a0 instance\u00a0 method\u00a0 can\u00a0 also\u00a0 be\u00a0 called\u00a0 from\u00a0 a\u00a0\nmethod\u00a0of\u00a0another\u00a0class.\u00a0The\u00a0syntax\u00a0for\u00a0doing\u00a0so\u00a0remains\u00a0same:\nm2\u00a0=\u00a0Message(\u00a0)\nm2.display('Good\u00a0Afternoon')\nMessage.show('Hi')\nOperator\u00a0Overloading\nx\nSince\u00a0Complex is\u00a0a\u00a0user-defined\u00a0class,\u00a0Python\u00a0doesn't\u00a0know\u00a0how\u00a0to\u00a0\nadd\u00a0objects\u00a0of\u00a0this\u00a0class.\u00a0We\u00a0can\u00a0teach\u00a0it\u00a0how\u00a0to\u00a0do\u00a0it,\u00a0by\u00a0overloading\u00a0\nthe\u00a0+\u00a0operator\u00a0as\u00a0shown\u00a0below.\nclass\u00a0Complex :\ndef\u00a0__init__(self,\u00a0r\u00a0=\u00a00.0,\u00a0i\u00a0=\u00a00.0)\u00a0:\nself.__real\u00a0=\u00a0r\nself.__imag\u00a0=\u00a0i\u00a0\ndef\u00a0__add__(self,\u00a0other)\u00a0:\nz\u00a0=\u00a0Complex(\u00a0)\nz.__real\u00a0=\u00a0self.__real\u00a0+\u00a0other.__real\u00a0\nz.__imag\u00a0=\u00a0self.__imag\u00a0+\u00a0other.__imag\nreturn\u00a0z\ndef\u00a0__sub__(self,\u00a0other)\u00a0:\nz\u00a0=\u00a0Complex(\u00a0)\nz.__real\u00a0=\u00a0self.__real\u00a0- other.__real\u00a0\nz.__imag\u00a0=\u00a0self.__imag\u00a0- other.__imag\nreturn\u00a0z\ndef\u00a0display(self)\u00a0:\nprint(self.__real,\u00a0self.__imag)\nc1\u00a0=\u00a0Complex(1.1,\u00a00.2)\nc2\u00a0=\u00a0Complex(1.1,\u00a00.2)\nc3\u00a0=\u00a0c1\u00a0+\u00a0c2\nc3.display(\u00a0)\nChapter 19:\u00a0Intricacies", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_365", "chunk_strategy": "fixed_size"}}, {"text": "eal\u00a0\nz.__imag\u00a0=\u00a0self.__imag\u00a0- other.__imag\nreturn\u00a0z\ndef\u00a0display(self)\u00a0:\nprint(self.__real,\u00a0self.__imag)\nc1\u00a0=\u00a0Complex(1.1,\u00a00.2)\nc2\u00a0=\u00a0Complex(1.1,\u00a00.2)\nc3\u00a0=\u00a0c1\u00a0+\u00a0c2\nc3.display(\u00a0)\nChapter 19:\u00a0Intricacies\u00a0of\u00a0Classes and\u00a0Objects\u00a0\n249\nc4\u00a0= c1\u00a0- c2\nc4.display(\u00a0)\nx\nTo\u00a0 overload\u00a0the\u00a0+\u00a0 operator\u00a0we\u00a0need\u00a0to\u00a0define\u00a0__add__(\u00a0) function\u00a0\nwithin\u00a0the\u00a0Complex class.\nx\nLikewise,\u00a0to\u00a0overload\u00a0the\u00a0- operator\u00a0we\u00a0need\u00a0to\u00a0define\u00a0__sub__(\u00a0)\nfunction\u00a0for\u00a0carrying\u00a0out\u00a0subtraction\u00a0of\u00a0two\u00a0Complex objects.\nx\nIn\u00a0the\u00a0expression\u00a0c3\u00a0=\u00a0c1\u00a0+\u00a0c2,\u00a0c1 becomes\u00a0available\u00a0in\u00a0self,\u00a0whereas,\u00a0\nc2 is\u00a0collected\u00a0in\u00a0other.\nWhich\u00a0Operators\u00a0to\u00a0Overload?\nx\nGiven\u00a0below\u00a0is\u00a0the\u00a0list\u00a0of\u00a0operators\u00a0that\u00a0we\u00a0can\u00a0overload\u00a0and\u00a0their\u00a0\nfunction\u00a0equivalents\u00a0that\u00a0we\u00a0need\u00a0to\u00a0define.\n#\u00a0Arithmetic\u00a0operators\n+\n__add__(self,\u00a0other)\n-\n__sub__(self,\u00a0other)\n*\n__mul__(self,\u00a0other)\n/\n__truediv__(self,\u00a0other)\n%\n__mod__(self,\u00a0other)\n**\n__pow__(self,\u00a0other)\n//\n__floordiv__(self,\u00a0other)\n#\u00a0Comparison\u00a0operators\n<\n__lt__(self,\u00a0other)\n>\n__gt__(self,\u00a0other)\n<=\n__le__(s", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_366", "chunk_strategy": "fixed_size"}}, {"text": "mul__(self,\u00a0other)\n/\n__truediv__(self,\u00a0other)\n%\n__mod__(self,\u00a0other)\n**\n__pow__(self,\u00a0other)\n//\n__floordiv__(self,\u00a0other)\n#\u00a0Comparison\u00a0operators\n<\n__lt__(self,\u00a0other)\n>\n__gt__(self,\u00a0other)\n<=\n__le__(self,\u00a0other)\n>=\n__ge__(self,\u00a0other)\n==\n__eq__(self,\u00a0other)\n!=\n__ne__(self,\u00a0other)\n#\u00a0Compound\u00a0Assignment\u00a0operators\n=\n__isub__(self,\u00a0other)\n+=\n__iadd__(self,\u00a0other)\n*=\n__imul__(self,\u00a0other)\n/=\n__idiv__(self,\u00a0other)\n//=\n__ifloordiv__(self,\u00a0other)\n%=\n__imod__(self,\u00a0other)\n**=\n__ipow__(self,\u00a0other)\n250\nLet\u00a0Us\u00a0Python\nx\nUnlike\u00a0 many\u00a0 other\u00a0languages\u00a0 like\u00a0 C++,\u00a0Java,\u00a0etc.,\u00a0 Python\u00a0does\u00a0 not\u00a0\nsupport\u00a0function\u00a0overloading.\u00a0It\u00a0means\u00a0function\u00a0names\u00a0in\u00a0a\u00a0program,\u00a0\nor\u00a0method\u00a0names\u00a0within\u00a0a\u00a0class\u00a0should be\u00a0unique.\u00a0If\u00a0we\u00a0define\u00a0two\u00a0\nf\u01b5\u0176c\u019ai\u017d\u0176\u0190\u00a0\u017d\u018c\u00a0\u0175e\u019ah\u017dd\u0190\u00a0b\u01c7\u00a0\u0190a\u0175e\u00a0\u0176a\u0175e\u00a0\u01c1e\u00a0\u01c1\u017d\u0176\ue001\u019a\u00a0ge\u019a\u00a0a\u0176\u00a0e\u018c\u018c\u017d\u018c\u00a0\u0175e\u0190\u0190age\ue003\u00a0\nbut\u00a0the\u00a0latest\u00a0version\u00a0would\u00a0prevail.\nEverything\u00a0is\u00a0an\u00a0Object\nx\nIn\u00a0 python\u00a0 every\u00a0 entity\u00a0 is\u00a0 an\u00a0 object.\u00a0 This\u00a0 includes\u00a0 int,\u00a0 float,\u00a0 bool,\u00a0\ncomplex,\u00a0 string,\u00a0 list,\u00a0 tuple,\u00a0 set, dictionary,\u00a0function,\u00a0 clas", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_367", "chunk_strategy": "fixed_size"}}, {"text": "est\u00a0version\u00a0would\u00a0prevail.\nEverything\u00a0is\u00a0an\u00a0Object\nx\nIn\u00a0 python\u00a0 every\u00a0 entity\u00a0 is\u00a0 an\u00a0 object.\u00a0 This\u00a0 includes\u00a0 int,\u00a0 float,\u00a0 bool,\u00a0\ncomplex,\u00a0 string,\u00a0 list,\u00a0 tuple,\u00a0 set, dictionary,\u00a0function,\u00a0 class,\u00a0 method\u00a0\nand\u00a0module.\nx\nWhen\u00a0 we\u00a0 say\u00a0 x\u00a0 =\u00a0 20,\u00a0 a\u00a0 nameless\u00a0 object\u00a0 of\u00a0 type\u00a0 int is\u00a0 created\u00a0\ncontaining\u00a0a\u00a0value\u00a020\u00a0and\u00a0address\u00a0(location\u00a0in\u00a0memory)\u00a0of\u00a0the\u00a0object\u00a0\nis\u00a0stored\u00a0in\u00a0x.\u00a0x is\u00a0called\u00a0a\u00a0reference\u00a0to\u00a0the\u00a0int object.\nx\nSame\u00a0object\u00a0can\u00a0have\u00a0multiple\u00a0references.\u00a0\ni\u00a0=\u00a020\nj\u00a0=\u00a0i\u00a0\n#\u00a0another\u00a0reference\u00a0for\u00a0same\u00a0int\u00a0object\u00a0referred\u00a0to\u00a0by\u00a0i\nk\u00a0=\u00a0i\u00a0\n#\u00a0yet\u00a0another\u00a0reference\u00a0for\u00a0same\u00a0object\nk\u00a0=\u00a030\u00a0\nprint\u00a0(k)\u00a0\n#\u00a0will\u00a0print\u00a030,\u00a0as\u00a0k\u00a0now\u00a0points\u00a0to\u00a0a\u00a0new\u00a0int\u00a0object\nprint\u00a0(i,\u00a0j)\u00a0 #\u00a0will\u00a0print\u00a020\u00a020\u00a0as\u00a0i,\u00a0j\u00a0continue\u00a0to\u00a0refer\u00a0to\u00a0old\u00a0object\nx\nIn\u00a0the\u00a0following\u00a0code\u00a0snippet\u00a0x and\u00a0y are\u00a0referring\u00a0to\u00a0same\u00a0object.\u00a0\nCha\u0176gi\u0176g\u00a0\u017d\u0176e\u00a0d\u017de\u0190\u0176\ue001\u019a\u00a0cha\u0176ge\u00a0\u019ahe\u00a0\u017d\u019ahe\u018c\ue002\u00a0Sa\u0175e\u00a0beha\u01c0i\u017d\u018c\u00a0i\u0190\u00a0\u0190h\u017d\u01c1\u0176\u00a0f\u017d\u018c\u00a0\nfloat,\u00a0complex,\u00a0bool and str\u00a0types.\nx\u00a0=\u00a020\ny\u00a0=\u00a020\n#\u00a0x\u00a0and\u00a0y\u00a0point\u00a0to\u00a0same object\nx\u00a0=\u00a030\n#\u00a0x\u00a0now\u00a0points\u00a0to\u00a0a\u00a0new\u00a0object\nx\nIn\u00a0 ", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_368", "chunk_strategy": "fixed_size"}}, {"text": "bject.\u00a0\nCha\u0176gi\u0176g\u00a0\u017d\u0176e\u00a0d\u017de\u0190\u0176\ue001\u019a\u00a0cha\u0176ge\u00a0\u019ahe\u00a0\u017d\u019ahe\u018c\ue002\u00a0Sa\u0175e\u00a0beha\u01c0i\u017d\u018c\u00a0i\u0190\u00a0\u0190h\u017d\u01c1\u0176\u00a0f\u017d\u018c\u00a0\nfloat,\u00a0complex,\u00a0bool and str\u00a0types.\nx\u00a0=\u00a020\ny\u00a0=\u00a020\n#\u00a0x\u00a0and\u00a0y\u00a0point\u00a0to\u00a0same object\nx\u00a0=\u00a030\n#\u00a0x\u00a0now\u00a0points\u00a0to\u00a0a\u00a0new\u00a0object\nx\nIn\u00a0 the\u00a0 following\u00a0 code\u00a0 snippet\u00a0 x and\u00a0 y are\u00a0 referring\u00a0 to\u00a0 different\u00a0\nobjects.\u00a0Same\u00a0behavior\u00a0is\u00a0shown\u00a0for\u00a0list,\u00a0tuple,\u00a0set,\u00a0dictionary,\u00a0etc.\nx\u00a0=\u00a0Sample(10,\u00a020)\ny\u00a0=\u00a0Sample(10,\u00a020)\nx\nSome\u00a0objects\u00a0are\u00a0mutable,\u00a0some are\u00a0not.\u00a0Also,\u00a0all\u00a0objects\u00a0have\u00a0some\u00a0\nattributes\u00a0and\u00a0methods.\nChapter 19:\u00a0Intricacies\u00a0of\u00a0Classes and\u00a0Objects\u00a0\n251\nx\nThe\u00a0 type(\u00a0 ) function\u00a0 returns\u00a0 type\u00a0 of\u00a0 the\u00a0 object,\u00a0 whereas\u00a0 id(\u00a0 )\nfunction\u00a0returns\u00a0location\u00a0of\u00a0the\u00a0object\u00a0in\u00a0memory.\nimport\u00a0math\nclass\u00a0Message\u00a0:\ndef\u00a0display(self,\u00a0msg):\nprint(msg)\ndef\u00a0fun(\u00a0)\u00a0:\nprint('Everything\u00a0is\u00a0an\u00a0object')\ni\u00a0=\u00a045\na\u00a0=\u00a03.14\nc\u00a0=\u00a03\u00a0+\u00a02j\ncity\u00a0=\u00a0'Nagpur'\nlst\u00a0=\u00a0[10,\u00a020,\u00a030]\ntup\u00a0=\u00a0(10,\u00a020,\u00a030,\u00a040)\ns\u00a0=\u00a0{'a',\u00a0'e',\u00a0'i',\u00a0'o',\u00a0'u'}\nd\u00a0=\u00a0{'Ajay'\u00a0:\u00a030,\u00a0'Vijay'\u00a0:\u00a035,\u00a0'Sujay'\u00a0:\u00a036}\nprint(type(i),\u00a0id(i))\nprint(type(a),\u00a0id(a))\nprint(type(c),\u00a0id(c))\nprint(type(", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_369", "chunk_strategy": "fixed_size"}}, {"text": "pur'\nlst\u00a0=\u00a0[10,\u00a020,\u00a030]\ntup\u00a0=\u00a0(10,\u00a020,\u00a030,\u00a040)\ns\u00a0=\u00a0{'a',\u00a0'e',\u00a0'i',\u00a0'o',\u00a0'u'}\nd\u00a0=\u00a0{'Ajay'\u00a0:\u00a030,\u00a0'Vijay'\u00a0:\u00a035,\u00a0'Sujay'\u00a0:\u00a036}\nprint(type(i),\u00a0id(i))\nprint(type(a),\u00a0id(a))\nprint(type(c),\u00a0id(c))\nprint(type(city),\u00a0id(city))\nprint(type(lst),\u00a0id(lst))\nprint(type(tup),\u00a0id(tup))\nprint(type(s),\u00a0id(s))\nprint(type(d),\u00a0id(d))\nprint(type(fun),\u00a0id(fun))\nprint(type(Message),\u00a0id(Message))\nprint(type(math),\u00a0id(math))\nOn\u00a0execution\u00a0of\u00a0this\u00a0program\u00a0we\u00a0get\u00a0the\u00a0following\u00a0output:\n<class\u00a0'int'>\u00a0495245808\n<class\u00a0'float'>\u00a025154336\n<class\u00a0'complex'>\u00a025083752\n<class\u00a0'str'>\u00a025343392\n<class\u00a0'list'>\u00a025360544\n<class\u00a0'tuple'>\u00a025317808\n<class\u00a0'set'>\u00a020645208\n<class\u00a0'dict'>\u00a04969744\n252\nLet\u00a0Us\u00a0Python\n<class\u00a0'function'>\u00a03224536\n<class\u00a0'type'>\u00a025347040\n<class\u00a0'module'>\u00a025352448\nImitating\u00a0a\u00a0Structure\nx\nIn\u00a0C\u00a0if\u00a0we\u00a0wish\u00a0to\u00a0keep\u00a0dissimilar\u00a0but\u00a0related\u00a0data\u00a0together\u00a0we\u00a0create\u00a0\na\u00a0structure\u00a0to\u00a0do\u00a0so.\nx\nIn\u00a0 Python\u00a0 too,\u00a0we\u00a0can\u00a0 do\u00a0this\u00a0 by\u00a0 creating\u00a0 a\u00a0 class\u00a0 that\u00a0 is\u00a0merely\u00a0 a\u00a0\ncollection\u00a0of\u00a0attributes\u00a0(and\u00a0not\u00a0methods).\u00a0\nx\nMoreove", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_370", "chunk_strategy": "fixed_size"}}, {"text": "imilar\u00a0but\u00a0related\u00a0data\u00a0together\u00a0we\u00a0create\u00a0\na\u00a0structure\u00a0to\u00a0do\u00a0so.\nx\nIn\u00a0 Python\u00a0 too,\u00a0we\u00a0can\u00a0 do\u00a0this\u00a0 by\u00a0 creating\u00a0 a\u00a0 class\u00a0 that\u00a0 is\u00a0merely\u00a0 a\u00a0\ncollection\u00a0of\u00a0attributes\u00a0(and\u00a0not\u00a0methods).\u00a0\nx\nMoreover,\u00a0 unlike\u00a0C++\u00a0 and\u00a0 Java,\u00a0Python\u00a0 permits\u00a0 us\u00a0 to\u00a0 add/delete/\u00a0\nmodify\u00a0these\u00a0attributes\u00a0to\u00a0a\u00a0class/object\u00a0dynamically.\nx\nIn\u00a0the\u00a0following\u00a0program\u00a0we\u00a0have\u00a0added\u00a04\u00a0attributes,\u00a0modified\u00a0two\u00a0\nattributes\u00a0and\u00a0deleted\u00a0one\u00a0attribute,\u00a0all\u00a0on\u00a0the\u00a0fly,\u00a0i.e.\u00a0after\u00a0creation\u00a0\nof\u00a0Bird object.\nclass\u00a0Bird\u00a0:\npass\nb\u00a0=\u00a0Bird(\u00a0)\n#\u00a0create\u00a0attributes\u00a0dynamically\nb.name\u00a0=\u00a0'Sparrow'\nb.weight\u00a0=\u00a0500\nb.color\u00a0=\u00a0'light\u00a0brown'\nb.animaltype\u00a0=\u00a0'Vertebrate'\n#\u00a0modify\u00a0attributes dynamically\nb.weight\u00a0=\u00a0450\nb.color\u00a0=\u00a0'brown'\n#\u00a0delete\u00a0attributes dynamically\ndel\u00a0b.animaltype\nType\u00a0Conversion\nx\nThere\u00a0 are\u00a0 two\u00a0types\u00a0of\u00a0 conversions\u00a0that\u00a0 we\u00a0may\u00a0 wish\u00a0to\u00a0perform.\u00a0\nThese\u00a0are:\n(a) Conversion\u00a0between\u00a0different\u00a0built-in\u00a0types\n(b) Conversion\u00a0between\u00a0different\u00a0built-in\u00a0types\u00a0and\u00a0container\u00a0types\n(c)\nConversion\u00a0between\u00a0built-in\u00a0and\u00a0user-de", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_371", "chunk_strategy": "fixed_size"}}, {"text": "at\u00a0 we\u00a0may\u00a0 wish\u00a0to\u00a0perform.\u00a0\nThese\u00a0are:\n(a) Conversion\u00a0between\u00a0different\u00a0built-in\u00a0types\n(b) Conversion\u00a0between\u00a0different\u00a0built-in\u00a0types\u00a0and\u00a0container\u00a0types\n(c)\nConversion\u00a0between\u00a0built-in\u00a0and\u00a0user-defined\u00a0types\nChapter 19:\u00a0Intricacies\u00a0of\u00a0Classes and\u00a0Objects\u00a0\n253\nx\nWe\u00a0 are\u00a0 already\u00a0 aware\u00a0 of\u00a0 first\u00a0 two\u00a0 types\u00a0 of\u00a0 conversions, some\u00a0\nexamples\u00a0of\u00a0which\u00a0are\u00a0given\u00a0below:\na =\u00a0float(25)\u00a0\n#\u00a0built-in to\u00a0built-in conversion\nb\u00a0=\u00a0tuple([10,\u00a020,\u00a030])\n#\u00a0container\u00a0to\u00a0container\u00a0conversion\nc\u00a0=\u00a0list('Hello')\n#\u00a0built-in\u00a0to\u00a0container\u00a0conversion\nd =\u00a0str([10,\u00a020,\u00a030])\n#\u00a0container\u00a0to\u00a0built-in conversion\nx\nConversion\u00a0between\u00a0built-in\u00a0and\u00a0user-defined\u00a0types:\nFollowing\u00a0program\u00a0illustrates\u00a0how\u00a0a\u00a0user-defined\u00a0String type\u00a0can\u00a0be\u00a0\nconverted to\u00a0 built-in\u00a0 type\u00a0 int.\u00a0 __int__(\u00a0 ) has\u00a0 been\u00a0 overloaded\u00a0 to\u00a0\ncarry\u00a0out\u00a0conversion\u00a0from\u00a0str to\u00a0int.\nclass\u00a0String\u00a0:\ndef\u00a0__init__(self,\u00a0s\u00a0=\u00a0'')\u00a0:\nself.__str\u00a0=\u00a0s\u00a0\ndef\u00a0display(self)\u00a0:\nprint(self.__str)\ndef\u00a0__int__(self)\u00a0:\nreturn\u00a0int(\u00a0self.__str\u00a0)\ns1\u00a0= String(123)\u00a0\n#\u00a0conversion", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_372", "chunk_strategy": "fixed_size"}}, {"text": "onversion\u00a0from\u00a0str to\u00a0int.\nclass\u00a0String\u00a0:\ndef\u00a0__init__(self,\u00a0s\u00a0=\u00a0'')\u00a0:\nself.__str\u00a0=\u00a0s\u00a0\ndef\u00a0display(self)\u00a0:\nprint(self.__str)\ndef\u00a0__int__(self)\u00a0:\nreturn\u00a0int(\u00a0self.__str\u00a0)\ns1\u00a0= String(123)\u00a0\n#\u00a0conversion\u00a0from\u00a0int\u00a0to\u00a0String\ns1.display(\u00a0)\ni\u00a0=\u00a0int(s1)\u00a0\n#\u00a0conversion\u00a0from\u00a0string\u00a0to\u00a0int\nprint(i)\n____________________________________________________________________\nProblem\u00a019.1\nWrite\u00a0a\u00a0Python\u00a0program\u00a0that\u00a0displays\u00a0the\u00a0attributes\u00a0of\u00a0integer,\u00a0float\u00a0and\u00a0\nfunction\u00a0objects.\u00a0Also\u00a0show\u00a0how\u00a0these\u00a0attributes\u00a0can\u00a0be\u00a0used.\nProgram\ndef\u00a0fun(\u00a0) :\nprint('Everything\u00a0is\u00a0an\u00a0object')\nprint(dir(55))\nprint(dir(-5.67))\n254\nLet\u00a0Us\u00a0Python\nprint(dir(fun))\nprint((5).__add__(6))\nprint((-5.67).__abs__( ))\nd\u00a0=\u00a0globals( )\nd['fun'].__call__( )\n#\u00a0calls\u00a0fun(\u00a0)\nOutput\n['__abs__',\u00a0'__add__',\u00a0'__and__',\u00a0'__bool__',\u00a0'__ceil__',\u00a0...]\n['__abs__',\u00a0'__add__',\u00a0'__bool__',\u00a0'__class__',\u00a0'__delattr__',\u00a0...]\n['__annotations__',\u00a0'__call__',\u00a0'__class__',\u00a0'__closure__',\u00a0...\u00a0]\n11\n5.67\nEverything\u00a0is\u00a0an\u00a0object\nTips\nx\nOutput\u00a0shows\u00a0incomplete\u00a0list\u00a0o", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_373", "chunk_strategy": "fixed_size"}}, {"text": "_abs__',\u00a0'__add__',\u00a0'__bool__',\u00a0'__class__',\u00a0'__delattr__',\u00a0...]\n['__annotations__',\u00a0'__call__',\u00a0'__class__',\u00a0'__closure__',\u00a0...\u00a0]\n11\n5.67\nEverything\u00a0is\u00a0an\u00a0object\nTips\nx\nOutput\u00a0shows\u00a0incomplete\u00a0list\u00a0of\u00a0attributes\u00a0of\u00a0int,\u00a0float and\u00a0function\nobjects.\u00a0\nx\nFrom\u00a0 this\u00a0list\u00a0 we\u00a0 have\u00a0 used\u00a0 the\u00a0attributes\u00a0 __add__(\u00a0) to\u00a0add\u00a0 two\u00a0\nintegers,\u00a0__abs__(\u00a0) to\u00a0get\u00a0absolute\u00a0value\u00a0of\u00a0float\u00a0and\u00a0__call__(\u00a0) to\u00a0\ncall\u00a0the\u00a0function\u00a0fun(\u00a0).\nx\nglobals(\u00a0) return\u00a0a\u00a0dictionary\u00a0representing\u00a0the\u00a0current\u00a0global\u00a0symbol\u00a0\ntable.\u00a0 From\u00a0this\u00a0dictionary\u00a0 we\u00a0have\u00a0 picked\u00a0the\u00a0object\u00a0representing\u00a0\nthe\u00a0fun function\u00a0and\u00a0used\u00a0it\u00a0to\u00a0call\u00a0__call__(\u00a0).\u00a0This\u00a0results\u00a0into\u00a0call\u00a0to\u00a0\nfun(\u00a0).\n____________________________________________________________________\nProblem\u00a019.2\nCreate\u00a0 a\u00a0 class\u00a0 Date that\u00a0 has\u00a0 a\u00a0 list\u00a0 containing\u00a0 day,\u00a0 month\u00a0 and\u00a0 year\nattributes.\u00a0 Define\u00a0 an\u00a0 overloaded\u00a0 == operator\u00a0 to\u00a0 compare\u00a0 two\u00a0 Date\nobjects.\nProgram\nclass Date :\ndef __init__(self, d, m, y) :\nself.__day,\u00a0self.__mth,\u00a0self.__yr = d,\u00a0m,\u00a0y\ndef __eq__(", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_374", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0 and\u00a0 year\nattributes.\u00a0 Define\u00a0 an\u00a0 overloaded\u00a0 == operator\u00a0 to\u00a0 compare\u00a0 two\u00a0 Date\nobjects.\nProgram\nclass Date :\ndef __init__(self, d, m, y) :\nself.__day,\u00a0self.__mth,\u00a0self.__yr = d,\u00a0m,\u00a0y\ndef __eq__(self, other) :\nChapter 19:\u00a0Intricacies\u00a0of\u00a0Classes and\u00a0Objects\u00a0\n255\nif self.__day == other.__day and self.__mth == other.__mth and\nself.__yr == other.__yr :\nreturn True\nelse :\nreturn False\nd1 = Date(17, 11, 98)\nd2 = Date(17, 11, 98)\nd3 = Date(19, 10, 92)\nprint(id(d1))\nprint(id(d2))\nprint(d1 == d3)\nOutput\n44586224\n44586256\nFalse\nTips\nx\nids\u00a0 of\u00a0 the\u00a0 two\u00a0 objects\u00a0 referred\u00a0 by\u00a0 d1 and\u00a0 d2 are\u00a0 different.\u00a0 This\u00a0\nmeans\u00a0that\u00a0they\u00a0are\u00a0referring\u00a0to\u00a0two\u00a0different\u00a0objects.\nx\nTo\u00a0overload\u00a0the\u00a0==\u00a0operator\u00a0in\u00a0the\u00a0Date class,\u00a0we\u00a0need\u00a0to\u00a0define\u00a0the\u00a0\nfunction\u00a0__eq__(\u00a0).\n____________________________________________________________________\nProblem\u00a019.3\nCreate\u00a0a\u00a0class\u00a0 Weather that\u00a0has\u00a0a\u00a0list\u00a0containing\u00a0weather\u00a0parameters.\u00a0\nDefine\u00a0an\u00a0overloaded\u00a0in operator\u00a0that\u00a0checks\u00a0whether\u00a0an\u00a0item\u00a0is\u00a0present\u00a0\nin\u00a0the\u00a0list.\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_375", "chunk_strategy": "fixed_size"}}, {"text": "____________________________\nProblem\u00a019.3\nCreate\u00a0a\u00a0class\u00a0 Weather that\u00a0has\u00a0a\u00a0list\u00a0containing\u00a0weather\u00a0parameters.\u00a0\nDefine\u00a0an\u00a0overloaded\u00a0in operator\u00a0that\u00a0checks\u00a0whether\u00a0an\u00a0item\u00a0is\u00a0present\u00a0\nin\u00a0the\u00a0list.\u00a0\nProgram\nclass\u00a0Weather\u00a0:\ndef\u00a0__init__(self)\u00a0:\nself.__params\u00a0=\u00a0[\u00a0'Temp', 'Rel\u00a0Hum',\u00a0'Cloud\u00a0Cover',\u00a0'Wind\u00a0Vel']\ndef\u00a0__contains__(self,\u00a0p)\u00a0:\nreturn\u00a0True\u00a0if\u00a0p\u00a0in\u00a0self.__params\u00a0else\u00a0False\nw\u00a0=\u00a0Weather( )\n256\nLet\u00a0Us\u00a0Python\nif\u00a0'Rel\u00a0Hum'\u00a0in\u00a0w\u00a0:\nprint('Valid\u00a0weather\u00a0parameter')\nelse\u00a0:\nprint('Invalid\u00a0weather\u00a0parameter')\nOutput\nValid\u00a0weather\u00a0parameter\nTips\nx\nTo\u00a0 overload\u00a0 the\u00a0 in operator\u00a0 we\u00a0 need\u00a0 to\u00a0 define\u00a0 the\u00a0 function\u00a0\n__contains__(\u00a0).\n____________________________________________________________________\n[A] State\u00a0whether\u00a0the\u00a0following\u00a0statements\u00a0are\u00a0True\u00a0or\u00a0False:\n(a) A\u00a0 global\u00a0 function\u00a0 can\u00a0 call\u00a0 a\u00a0 class\u00a0 method\u00a0 as\u00a0 well\u00a0 as\u00a0 an\u00a0 instance\u00a0\nmethod.\n(b) In\u00a0 Python\u00a0 a\u00a0 function, class, method\u00a0 and\u00a0 module\u00a0 are\u00a0 treated\u00a0 as\u00a0\nobjects.\n(c)\nGiven\u00a0an\u00a0object,\u00a0it\u00a0is\u00a0possible\u00a0to\u00a0determine\u00a0its\u00a0type\u00a0an", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_376", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0 a\u00a0 class\u00a0 method\u00a0 as\u00a0 well\u00a0 as\u00a0 an\u00a0 instance\u00a0\nmethod.\n(b) In\u00a0 Python\u00a0 a\u00a0 function, class, method\u00a0 and\u00a0 module\u00a0 are\u00a0 treated\u00a0 as\u00a0\nobjects.\n(c)\nGiven\u00a0an\u00a0object,\u00a0it\u00a0is\u00a0possible\u00a0to\u00a0determine\u00a0its\u00a0type\u00a0and\u00a0address.\n(d) It\u00a0is\u00a0possible\u00a0to\u00a0delete\u00a0attributes\u00a0of\u00a0 an\u00a0object\u00a0during\u00a0 execution\u00a0of\u00a0\nthe\u00a0program.\n(e) Arithmetic\u00a0 operators,\u00a0 Comparison\u00a0 operators\nand\u00a0 Compound\u00a0\nassignment\u00a0operators can\u00a0be\u00a0overloaded\u00a0in\u00a0Python.\n(f)\nThe\u00a0+\u00a0operator\u00a0has\u00a0been\u00a0overloaded\u00a0in\u00a0the\u00a0classes\u00a0str,\u00a0list and\u00a0int.\n[B] Answer\u00a0the\u00a0following questions:\n(a) Which\u00a0 functions\u00a0 should\u00a0 be\u00a0 defined\u00a0 to\u00a0overload\u00a0 the\u00a0+,\u00a0 -,\u00a0 /\u00a0 and\u00a0//\u00a0\noperators?\n(b) How\u00a0many\u00a0objects\u00a0are\u00a0created\u00a0by\u00a0lst\u00a0=\u00a0[10,\u00a010,\u00a010,\u00a030]?\nChapter 19:\u00a0Intricacies\u00a0of\u00a0Classes and\u00a0Objects\u00a0\n257\n(c)\nHow\u00a0will\u00a0you\u00a0define\u00a0a\u00a0structure\u00a0Employee containing\u00a0the\u00a0attributes\u00a0\nName,\u00a0Age,\u00a0Salary,\u00a0Address,\u00a0Hobbies\u00a0dynamically?\n(d) To\u00a0overload\u00a0the\u00a0+\u00a0operator,\u00a0which\u00a0method\u00a0should\u00a0be\u00a0defined\u00a0in\u00a0the\u00a0\ncorresponding\u00a0class?\n(e) To\u00a0overload\u00a0the\u00a0%\u00a0operator,\u00a0which\u00a0method\u00a0should\u00a0be\u00a0define", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_377", "chunk_strategy": "fixed_size"}}, {"text": "me,\u00a0Age,\u00a0Salary,\u00a0Address,\u00a0Hobbies\u00a0dynamically?\n(d) To\u00a0overload\u00a0the\u00a0+\u00a0operator,\u00a0which\u00a0method\u00a0should\u00a0be\u00a0defined\u00a0in\u00a0the\u00a0\ncorresponding\u00a0class?\n(e) To\u00a0overload\u00a0the\u00a0%\u00a0operator,\u00a0which\u00a0method\u00a0should\u00a0be\u00a0defined\u00a0in\u00a0the\u00a0\ncorresponding\u00a0class?\n(f)\nTo\u00a0overload the\u00a0//=\u00a0operator,\u00a0which\u00a0method\u00a0should\u00a0be\u00a0 defined\u00a0in\u00a0\nthe\u00a0corresponding\u00a0class?\n(g)\nIf\u00a0a\u00a0class\u00a0contains\u00a0instance\u00a0methods\u00a0__ge__(\u00a0) and\u00a0__ne__(\u00a0),\u00a0what\u00a0\ndo\u00a0they\u00a0signify?\n(h) What\u00a0conclusion\u00a0can\u00a0be\u00a0drawn\u00a0if the\u00a0following\u00a0statements\u00a0work?\na\u00a0=\u00a0(10,\u00a020)\u00a0+\u00a0(30,\u00a040)\nb\u00a0=\u00a0'Good'\u00a0+\u00a0'Morning'\nc\u00a0=\u00a0[10,\u00a020,\u00a030]\u00a0+\u00a0[40,\u00a050,\u00a060]\n(i)\nWhat\u00a0will\u00a0be\u00a0the\u00a0output\u00a0of\u00a0the\u00a0following\u00a0code\u00a0snippet?\na\u00a0=\u00a0(10,\u00a020)\u00a0- (30,\u00a040)\nb\u00a0=\u00a0'Good'\u00a0- 'Morning'\nc\u00a0=\u00a0[10,\u00a020,\u00a030]\u00a0- [40,\u00a050,\u00a060]\n(j)\nWill\u00a0 the\u00a0 following\u00a0 statement\u00a0 work?\u00a0 What\u00a0 is\u00a0 your\u00a0 conclusion\u00a0if\u00a0 it\u00a0\nworks?\nprint\u00a0(\u00a0'Hello'\u00a0*\u00a07)\n(k)\nWhich\u00a0out\u00a0of\u00a0+,\u00a0- and\u00a0*\u00a0have\u00a0been\u00a0overloaded\u00a0in\u00a0str class?\n(l)\nWhen\u00a0would\u00a0the\u00a0method\u00a0__truediv__(\u00a0) defined\u00a0in\u00a0the\u00a0Sample\u00a0class\u00a0\nshown\u00a0below\u00a0would\u00a0get\u00a0called?\nclass\u00a0Sample\u00a0:\ndef\u00a0__truediv__(", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_378", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0*\u00a07)\n(k)\nWhich\u00a0out\u00a0of\u00a0+,\u00a0- and\u00a0*\u00a0have\u00a0been\u00a0overloaded\u00a0in\u00a0str class?\n(l)\nWhen\u00a0would\u00a0the\u00a0method\u00a0__truediv__(\u00a0) defined\u00a0in\u00a0the\u00a0Sample\u00a0class\u00a0\nshown\u00a0below\u00a0would\u00a0get\u00a0called?\nclass\u00a0Sample\u00a0:\ndef\u00a0__truediv__(self,\u00a0other)\u00a0:\npass\n(m) If\u00a0!=\u00a0operators\u00a0has\u00a0been\u00a0overloaded\u00a0in\u00a0a\u00a0class\u00a0then\u00a0the\u00a0expression\nc1\u00a0<=\u00a0c2 would\u00a0get\u00a0converted\u00a0into\u00a0which\u00a0function\u00a0call?\n258\nLet\u00a0Us\u00a0Python\n(n) How\u00a0 will\u00a0you\u00a0 define\u00a0 the\u00a0overloaded\u00a0 *\u00a0 operator\u00a0 for\u00a0 the\u00a0 following\u00a0\ncode\u00a0snippet?\nc1\u00a0=\u00a0Complex(1.1,\u00a00.2)\nc2\u00a0=\u00a0Complex(1.1,\u00a00.2)\nc3\u00a0=\u00a0c1\u00a0* c2\n(o) Implement\u00a0a\u00a0String class\u00a0containing\u00a0the\u00a0following\u00a0functions:\n\ue001\nOverloaded\u00a0+=\u00a0operator\u00a0function\u00a0to\u00a0perform\u00a0string\u00a0\nconcatenation.\n\ue001\nMethod\u00a0toLower(\u00a0) to\u00a0convert\u00a0upper\u00a0case\u00a0letters\u00a0to\u00a0lower\u00a0case.\n\ue001\nMethod\u00a0toUpper(\u00a0) to\u00a0convert\u00a0lower\u00a0case\u00a0letters\u00a0to\u00a0upper\u00a0case.\n[C] Match\u00a0the\u00a0following\u00a0pairs:\na.\u00a0 Can't use\u00a0as\u00a0identifier\u00a0name 1.\u00a0 class\u00a0name\nb.\u00a0 basic_salary\n2.\u00a0 class\u00a0variable\nc.\u00a0 CellPhone\n3.\u00a0 keyword\nd.\u00a0 count\n4.\u00a0 local\u00a0variable\u00a0in\u00a0a\u00a0function\ne.\u00a0 self\n5.\u00a0 private\u00a0variable\nf.\u00a0 _fuel", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_379", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0pairs:\na.\u00a0 Can't use\u00a0as\u00a0identifier\u00a0name 1.\u00a0 class\u00a0name\nb.\u00a0 basic_salary\n2.\u00a0 class\u00a0variable\nc.\u00a0 CellPhone\n3.\u00a0 keyword\nd.\u00a0 count\n4.\u00a0 local\u00a0variable\u00a0in\u00a0a\u00a0function\ne.\u00a0 self\n5.\u00a0 private\u00a0variable\nf.\u00a0 _fuel_used\n6.\u00a0 strongly\u00a0private\u00a0identifier\ng.\u00a0 __draw(\u00a0)\n7.\u00a0 method\u00a0that\u00a0Python\u00a0calls\nh.\u00a0 __iter__(\u00a0)\n8.\u00a0 meaningful\u00a0only\u00a0in\u00a0instance\u00a0func.\nLet\u00a0Us\nPython\n259\nContainership\nand Inheritance\nx\nReuse\u00a0Mechanisms\nx\nFeatures\u00a0of\u00a0Inheritance\nx\nWhich\u00a0to\u00a0use\u00a0When?\nx\nTypes\u00a0of\u00a0Inheritance\nx\nContainership\nx\nDiamond\u00a0Problem\nx\nInheritance\nx\nAbstract\u00a0Classes\nx\nWhat\u00a0is\u00a0Accessible\u00a0where?\nx\nRuntime\u00a0Polymorphism\nx\nisinstance(\u00a0) and\u00a0issubclass(\u00a0)\nx\nPrograms\nx\nThe\u00a0object class\nx\nExercises\n20\n\u201cReuse,\u00a0and\u00a0you\u00a0will\u00a0benefit...\u201d\n260\nLet\u00a0Us\u00a0Python\nReuse\u00a0Mechanisms\nx\nInstead\u00a0 of\u00a0 reinventing\u00a0 the\u00a0 same\u00a0 code\u00a0 that\u00a0 is\u00a0 already\u00a0 available,\u00a0 it\u00a0\nmakes\u00a0sense\u00a0in\u00a0reusing\u00a0existing\u00a0code.\nx\nPython\u00a0permits\u00a0two\u00a0code\u00a0reuse\u00a0mechanisms:\n(a) Containership\u00a0(also\u00a0called\u00a0composition)\n(b) Inheritance\nx\nIn\u00a0 both\u00a0 mechanisms\u00a0we\u00a0can\u00a0reuse\u00a0 exis", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_380", "chunk_strategy": "fixed_size"}}, {"text": " available,\u00a0 it\u00a0\nmakes\u00a0sense\u00a0in\u00a0reusing\u00a0existing\u00a0code.\nx\nPython\u00a0permits\u00a0two\u00a0code\u00a0reuse\u00a0mechanisms:\n(a) Containership\u00a0(also\u00a0called\u00a0composition)\n(b) Inheritance\nx\nIn\u00a0 both\u00a0 mechanisms\u00a0we\u00a0can\u00a0reuse\u00a0 existing\u00a0classes\u00a0 and\u00a0create\u00a0 new\u00a0\nenhanced\u00a0classes\u00a0based\u00a0on\u00a0them.\u00a0\nx\nWe\u00a0 can\u00a0 reuse\u00a0 existing\u00a0 classes\u00a0 even\u00a0 if\u00a0 their\u00a0 source\u00a0 code\u00a0 is\u00a0 not\u00a0\navailable.\u00a0\nWhich\u00a0to\u00a0use\u00a0When?\nx\nContainership should\u00a0 be\u00a0used\u00a0when\u00a0 the\u00a0two\u00a0classes\u00a0have\u00a0a\u00a0\u2018has a\u2019\u00a0\nrelationship.\u00a0 For\u00a0 example,\u00a0 a\u00a0 College\u00a0 has\u00a0 Professors.\u00a0 So\u00a0 College\u00a0\nclass's\u00a0object\u00a0can\u00a0contain\u00a0one\u00a0or\u00a0more\u00a0Professor class\u2019s\u00a0object(s\u037f.\nx\nInheritance\u00a0 should\u00a0 be\u00a0 used\u00a0 when\u00a0 the\u00a0 two\u00a0 classes\u00a0 have\u00a0 a\u00a0 \u2018like\u00a0 a\u2019\nrelationship.\u00a0For example,\u00a0a\u00a0Button\u00a0is\u00a0like\u00a0a\u00a0Window.\u00a0So\u00a0Button class\u00a0\ncan\u00a0inherit\u00a0features\u00a0of\u00a0an\u00a0existing\u00a0class\u00a0called\u00a0Window.\nContainership\nx\nA\u00a0container\u00a0can\u00a0contain\u00a0one\u00a0or\u00a0more\u00a0contained\u00a0objects\u00a0apart\u00a0from\u00a0\nother\u00a0data,\u00a0thereby\u00a0reusing\u00a0contained\u00a0objects.\nx\nIn\u00a0 the\u00a0 following\u00a0 program\u00a0 a\u00a0 Department object\u00a0 is\u00a0contained\u00a0 in\u00a0 an\u00a0\nEmployee", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_381", "chunk_strategy": "fixed_size"}}, {"text": "p\nx\nA\u00a0container\u00a0can\u00a0contain\u00a0one\u00a0or\u00a0more\u00a0contained\u00a0objects\u00a0apart\u00a0from\u00a0\nother\u00a0data,\u00a0thereby\u00a0reusing\u00a0contained\u00a0objects.\nx\nIn\u00a0 the\u00a0 following\u00a0 program\u00a0 a\u00a0 Department object\u00a0 is\u00a0contained\u00a0 in\u00a0 an\u00a0\nEmployee object.\nclass\u00a0Department\u00a0:\ndef\u00a0set_department(self)\u00a0:\nself.__id\u00a0=\u00a0input('Enter\u00a0department\u00a0id:\u00a0')\nself.__name\u00a0=\u00a0input('Enter\u00a0department\u00a0name:\u00a0')\ndef\u00a0display_department(self)\u00a0:\nprint('Department\u00a0ID\u00a0is:\u00a0',\u00a0self.__id)\nprint('Department\u00a0Name\u00a0is:\u00a0',\u00a0self.__name)\nclass\u00a0Employee\u00a0:\nChapter 20:\u00a0Containership\u00a0and\u00a0Inheritance\u00a0\n261\ndef\u00a0set_employee(self)\u00a0:\nself.__eid\u00a0=\u00a0input('Enter\u00a0employee\u00a0id:\u00a0')\nself.__ename\u00a0=\u00a0input('Enter\u00a0employee\u00a0name:\u00a0')\nself.__dobj\u00a0=\u00a0Department(\u00a0)\nself.__dobj.set_department(\u00a0)\ndef\u00a0display_employee(self)\u00a0:\nprint('Employee\u00a0ID\u00a0:\u00a0',\u00a0self.__eid)\nprint('Employee\u00a0Name\u00a0:\u00a0',\u00a0self.__ename)\nself.__dobj.display_department(\u00a0)\nobj\u00a0=\u00a0Employee(\u00a0)\nobj.set_employee(\u00a0)\nobj.display_employee(\u00a0)\nGiven\u00a0below\u00a0is\u00a0the\u00a0sample\u00a0interaction\u00a0with\u00a0this\u00a0program:\nEnter\u00a0employee\u00a0id:\u00a0101\nEnter\u00a0employee\u00a0name:\u00a0Rames", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_382", "chunk_strategy": "fixed_size"}}, {"text": "lf.__dobj.display_department(\u00a0)\nobj\u00a0=\u00a0Employee(\u00a0)\nobj.set_employee(\u00a0)\nobj.display_employee(\u00a0)\nGiven\u00a0below\u00a0is\u00a0the\u00a0sample\u00a0interaction\u00a0with\u00a0this\u00a0program:\nEnter\u00a0employee\u00a0id:\u00a0101\nEnter\u00a0employee\u00a0name:\u00a0Ramesh\nEnter\u00a0department\u00a0id:\u00a0ME\nEnter\u00a0department\u00a0name:\u00a0Mechanical\u00a0Engineering\nEmployee\u00a0ID\u00a0:\u00a0101\nEmployee\u00a0Name\u00a0:\u00a0Ramesh\nDepartment\u00a0ID\u00a0is:\u00a0ME\nDepartment\u00a0Name\u00a0is:\u00a0Mechanical\u00a0Engineering\nInheritance\nx\nIn\u00a0 Inheritance\u00a0 a\u00a0 new\u00a0 class\u00a0 called\u00a0 derived class\u00a0 can\u00a0 be\u00a0 created\u00a0 to\u00a0\ninherit\u00a0features\u00a0of\u00a0an\u00a0existing\u00a0class\u00a0called\u00a0base class.\nx\nBase\u00a0class\u00a0is\u00a0also\u00a0called\u00a0super class\u00a0or\u00a0parent class.\nx\nDerived class\u00a0is\u00a0also\u00a0called\u00a0sub class\u00a0or\u00a0child class.\nx\nIn\u00a0the\u00a0following\u00a0program\u00a0Index is\u00a0the\u00a0base\u00a0class\u00a0and\u00a0NewIndex is\u00a0the\u00a0\nderived\u00a0class.\u00a0Note\u00a0the\u00a0definition\u00a0of\u00a0NewIndex class.\u00a0The\u00a0mention\u00a0of\u00a0\nIndex within\u00a0parentheses\u00a0indicates\u00a0that\u00a0NewIndex is\u00a0being\u00a0inherited\u00a0\nfrom\u00a0Index class.\n#\u00a0base\u00a0class\nclass\u00a0Index\u00a0:\ndef\u00a0__init__(self)\u00a0:\nself._count\u00a0=\u00a00\u00a0\n262\nLet\u00a0Us\u00a0Python\ndef\u00a0display(self)\u00a0:\nprint('count\u00a0=\u00a0'\u00a0+\u00a0str(self._", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_383", "chunk_strategy": "fixed_size"}}, {"text": "heses\u00a0indicates\u00a0that\u00a0NewIndex is\u00a0being\u00a0inherited\u00a0\nfrom\u00a0Index class.\n#\u00a0base\u00a0class\nclass\u00a0Index\u00a0:\ndef\u00a0__init__(self)\u00a0:\nself._count\u00a0=\u00a00\u00a0\n262\nLet\u00a0Us\u00a0Python\ndef\u00a0display(self)\u00a0:\nprint('count\u00a0=\u00a0'\u00a0+\u00a0str(self._count))\ndef\u00a0incr(self)\u00a0:\nself._count\u00a0+=\u00a01\n#\u00a0derived\u00a0class\nclass\u00a0NewIndex(Index)\u00a0:\ndef\u00a0__init__(self)\u00a0:\nsuper(\u00a0).__init__(\u00a0)\ndef\u00a0decr(self)\u00a0:\nself._count\u00a0-=\u00a01\ni\u00a0=\u00a0NewIndex(\u00a0)\ni.incr(\u00a0)\ni.incr(\u00a0)\ni.incr(\u00a0)\ni.display(\u00a0)\u00a0\ni.decr(\u00a0)\ni.display(\u00a0)\u00a0\ni.decr(\u00a0)\ni.display(\u00a0)\nOn\u00a0execution\u00a0of\u00a0this\u00a0program\u00a0we\u00a0get\u00a0the\u00a0following\u00a0output:\ncount\u00a0=\u00a03\ncount\u00a0=\u00a02\ncount\u00a0=\u00a01\nx\nConstruction\u00a0of\u00a0an\u00a0object\u00a0should\u00a0always\u00a0proceed\u00a0from\u00a0base\u00a0towards\u00a0\nderived.\nx\nSo\u00a0 when\u00a0 we\u00a0create\u00a0 the\u00a0derived\u00a0 class\u00a0 object,\u00a0base\u00a0class\u00a0 __init__(\u00a0 )\nfollowed\u00a0 by\u00a0 derived\u00a0class\u00a0 __init__(\u00a0) should\u00a0 get\u00a0 called.\u00a0The\u00a0syntax\u00a0\nused\u00a0for\u00a0calling\u00a0base\u00a0class\u00a0constructor\u00a0is\u00a0super(\u00a0).__init__(\u00a0).\nx\nDerived\u00a0 class\u00a0 object\u00a0 contains\u00a0 all\u00a0 base\u00a0 class\u00a0 data.\u00a0 So\u00a0 _count is\u00a0\navailable\u00a0in\u00a0derived\u00a0class.\nx\nWhen\u00a0incr(\u00a0)\u00a0is\u00a0called\u00a0using\u00a0derived\u00a0class\u00a0objec", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_384", "chunk_strategy": "fixed_size"}}, {"text": "se\u00a0class\u00a0constructor\u00a0is\u00a0super(\u00a0).__init__(\u00a0).\nx\nDerived\u00a0 class\u00a0 object\u00a0 contains\u00a0 all\u00a0 base\u00a0 class\u00a0 data.\u00a0 So\u00a0 _count is\u00a0\navailable\u00a0in\u00a0derived\u00a0class.\nx\nWhen\u00a0incr(\u00a0)\u00a0is\u00a0called\u00a0using\u00a0derived\u00a0class\u00a0object,\u00a0first\u00a0it\u00a0is\u00a0searched\u00a0in\u00a0\nderived\u00a0 class.\u00a0Since\u00a0 it\u00a0is\u00a0not\u00a0found\u00a0here,\u00a0the\u00a0search\u00a0is\u00a0continued\u00a0in\u00a0\nthe\u00a0base\u00a0class.\nChapter 20:\u00a0Containership\u00a0and\u00a0Inheritance\u00a0\n263\nWhat\u00a0is\u00a0Accessible\u00a0where?\nx\nDerived\u00a0class\u00a0members\u00a0can\u00a0access\u00a0base\u00a0class\u00a0members,\u00a0vice\u00a0versa\u00a0is\u00a0\nnot\u00a0true.\nx\nThere\u00a0 are\u00a0 no\u00a0 keywords\u00a0 in\u00a0 Python\u00a0 to\u00a0 control\u00a0 access\u00a0 of\u00a0 base\u00a0 class\u00a0\nmembers\u00a0from\u00a0derived\u00a0class\u00a0or\u00a0from\u00a0outside\u00a0the\u00a0class\u00a0hierarchy.\u00a0\nx\nInstead\u00a0a\u00a0convention\u00a0that\u00a0suggests\u00a0the\u00a0desired\u00a0access\u00a0is\u00a0used\u00a0while\u00a0\ncreating\u00a0variable\u00a0names or\u00a0method\u00a0names.\u00a0This\u00a0convention\u00a0is\u00a0shown\u00a0\nbelow:\nvar\u00a0- access\u00a0it\u00a0from\u00a0anywhere\u00a0in\u00a0the\u00a0program\n_var\u00a0- access\u00a0it\u00a0only\u00a0from\u00a0within\u00a0the\u00a0class or\u00a0its\u00a0subclass\n__var\u00a0- access\u00a0it\u00a0only\u00a0within\u00a0the\u00a0class\nx\nUsing\u00a0 _var in\u00a0the\u00a0class\u00a0inheritance\u00a0hierarchy\u00a0 or\u00a0using\u00a0__var within\u00a0\nthe\u00a0class\u00a0 is\u00a0only\u00a0 a\u00a0co", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_385", "chunk_strategy": "fixed_size"}}, {"text": "am\n_var\u00a0- access\u00a0it\u00a0only\u00a0from\u00a0within\u00a0the\u00a0class or\u00a0its\u00a0subclass\n__var\u00a0- access\u00a0it\u00a0only\u00a0within\u00a0the\u00a0class\nx\nUsing\u00a0 _var in\u00a0the\u00a0class\u00a0inheritance\u00a0hierarchy\u00a0 or\u00a0using\u00a0__var within\u00a0\nthe\u00a0class\u00a0 is\u00a0only\u00a0 a\u00a0convention.\u00a0If\u00a0we\u00a0violate\u00a0it\u00a0we\u00a0won\u2019t\u00a0get\u00a0errors,\u00a0\nbut\u00a0it\u00a0would\u00a0be\u00a0a\u00a0bad\u00a0practice\u00a0to\u00a0follow.\nx\nFollowing\u00a0program\u00a0shows\u00a0the\u00a0usage\u00a0of\u00a0the\u00a03\u00a0types\u00a0of\u00a0variables.\nclass\u00a0Base\u00a0:\ndef\u00a0__init__(self)\u00a0:\nself.i\u00a0=\u00a010\nself._a\u00a0=\u00a03.14\nself.__s\u00a0=\u00a0'Hello'\ndef\u00a0display(self)\u00a0:\nprint\u00a0(self.i,\u00a0self._a,\u00a0self.__s)\nclass\u00a0Derived(Base)\u00a0:\ndef\u00a0__init__(self)\u00a0:\nsuper(\u00a0).__init__(\u00a0)\nself.i\u00a0=\u00a0100\nself._a\u00a0=\u00a031.44\nself.__s\u00a0=\u00a0'Good\u00a0Morning'\nself.j\u00a0=\u00a020\nself._b\u00a0=\u00a06.28\nself.__ss\u00a0=\u00a0'Hi'\ndef\u00a0display(self)\u00a0:\nsuper(\u00a0).display(\u00a0)\nprint\u00a0(self.i,\u00a0self._a,\u00a0self.__s)\nprint\u00a0(self.j,\u00a0self._b,\u00a0self.__ss)\n264\nLet\u00a0Us\u00a0Python\nbobj\u00a0=\u00a0Base(\u00a0)\nbobj.display(\u00a0)\nprint(bobj.i)\nprint(bobj._a)\nprint(bobj.__s)\u00a0\n#\u00a0causes\u00a0error\ndobj\u00a0=\u00a0Derived(\u00a0)\ndobj.display(\u00a0)\nprint(dobj.i)\nprint(dobj._a)\nprint(dobj.__s)\u00a0\n#\u00a0causes\u00a0error\nIf\u00a0 we\u00a0comment\u00a0out\u00a0the\u00a0statements", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_386", "chunk_strategy": "fixed_size"}}, {"text": "display(\u00a0)\nprint(bobj.i)\nprint(bobj._a)\nprint(bobj.__s)\u00a0\n#\u00a0causes\u00a0error\ndobj\u00a0=\u00a0Derived(\u00a0)\ndobj.display(\u00a0)\nprint(dobj.i)\nprint(dobj._a)\nprint(dobj.__s)\u00a0\n#\u00a0causes\u00a0error\nIf\u00a0 we\u00a0comment\u00a0out\u00a0the\u00a0statements\u00a0that\u00a0 would\u00a0cause\u00a0error,\u00a0we\u00a0will\u00a0\nget\u00a0the\u00a0following\u00a0output:\n10\u00a03.14\u00a0Hello\n10\n3.14\n100\u00a031.44\u00a0Hello\n100\u00a031.44\u00a0Good\u00a0Morning\n20\u00a06.28\u00a0Hi\n100\n31.44\nx\nWhy\u00a0we\u00a0get\u00a0error\u00a0while\u00a0accessing\u00a0__ss variable?\u00a0Well, all\u00a0__var\u00a0type\u00a0\nof\u00a0 variables\u00a0 get\u00a0 name\u00a0 mangled, i.e.\u00a0 in\u00a0 Base class\u00a0 __s becomes\u00a0\n_Base__s.\u00a0Likewise,\u00a0in\u00a0Derived class\u00a0__s becomes\u00a0_Derived__s and\u00a0\n__ss becomes\u00a0_Derived__ss.\u00a0\nx\nWhen\u00a0in\u00a0Derived class\u2019s\u00a0Display(\u00a0) method\u00a0we\u00a0attempt\u00a0to\u00a0use\u00a0__s,\u00a0it\u00a0\nis\u00a0not\u00a0the\u00a0 data\u00a0member\u00a0of\u00a0Base class,\u00a0but\u00a0 a\u00a0new\u00a0 data\u00a0member\u00a0of\u00a0\nDerived class\u00a0that\u00a0is\u00a0being\u00a0used.\nisinstance(\u00a0) and\u00a0issubclass(\u00a0)\nx\nisinstance(\u00a0) and\u00a0issubclass(\u00a0) are\u00a0built-in functions.\nx\nisinstance(o,\u00a0c) is\u00a0used\u00a0to\u00a0check\u00a0whether\u00a0an\u00a0object\u00a0o is\u00a0an\u00a0instance\u00a0of\u00a0\na\u00a0class\u00a0c.\nx\nissubclass(d,\u00a0 b)\u00a0is\u00a0 used\u00a0to\u00a0 check\u00a0whether\u00a0class\u00a0 d has\u00a0been\u00a0derived\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_387", "chunk_strategy": "fixed_size"}}, {"text": "nd\u00a0issubclass(\u00a0) are\u00a0built-in functions.\nx\nisinstance(o,\u00a0c) is\u00a0used\u00a0to\u00a0check\u00a0whether\u00a0an\u00a0object\u00a0o is\u00a0an\u00a0instance\u00a0of\u00a0\na\u00a0class\u00a0c.\nx\nissubclass(d,\u00a0 b)\u00a0is\u00a0 used\u00a0to\u00a0 check\u00a0whether\u00a0class\u00a0 d has\u00a0been\u00a0derived\u00a0\nfrom\u00a0class\u00a0b.\nChapter 20:\u00a0Containership\u00a0and\u00a0Inheritance\u00a0\n265\nThe\u00a0object class\nx\nAll\u00a0classes\u00a0in\u00a0Python\u00a0are\u00a0derived\u00a0from\u00a0a\u00a0ready-made\u00a0base\u00a0class\u00a0called\u00a0\nobject.\u00a0So\u00a0methods\u00a0of\u00a0this\u00a0class\u00a0are\u00a0available\u00a0in\u00a0all\u00a0classes.\nx\nYou\u00a0can\u00a0get\u00a0a\u00a0list\u00a0of\u00a0these\u00a0methods\u00a0using:\nprint(dir(object))\nprint(dir(Index))\n#\u00a0Index\u00a0is\u00a0derived\u00a0from\u00a0Object\nprint(dir(NewIndex))\n#\u00a0NewIndex\u00a0is\u00a0derived\u00a0from\u00a0Index\nFeatures\u00a0of\u00a0Inheritance\nx\nInheritance\u00a0facilitates\u00a0three\u00a0things:\n(a) Inheritance\u00a0of\u00a0existing\u00a0feature:\u00a0To\u00a0implement\u00a0this\u00a0just\u00a0establish\u00a0\ninheritance\u00a0relationship.\n(b) Suppressing\u00a0 an\u00a0 existing\u00a0 feature:\u00a0 To\u00a0 implement\u00a0 this\u00a0 hide\u00a0 base\u00a0\nclass\u00a0implementation\u00a0by\u00a0defining\u00a0same\u00a0method in\u00a0derived\u00a0class.\n(c) Extending\u00a0an\u00a0existing\u00a0feature:\u00a0To\u00a0implement\u00a0 this\u00a0call\u00a0base\u00a0class\u00a0\nmethod from\u00a0 derived\u00a0 class\u00a0 by\u00a0 using\u00a0 one\u00a0 of\u00a0 ", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_388", "chunk_strategy": "fixed_size"}}, {"text": "his\u00a0 hide\u00a0 base\u00a0\nclass\u00a0implementation\u00a0by\u00a0defining\u00a0same\u00a0method in\u00a0derived\u00a0class.\n(c) Extending\u00a0an\u00a0existing\u00a0feature:\u00a0To\u00a0implement\u00a0 this\u00a0call\u00a0base\u00a0class\u00a0\nmethod from\u00a0 derived\u00a0 class\u00a0 by\u00a0 using\u00a0 one\u00a0 of\u00a0 the\u00a0 following\u00a0 two\u00a0\nforms:\nsuper(\u00a0).base_class_method(\u00a0)\nBaseclassname.base_class_method(self)\u00a0\nTypes\u00a0of\u00a0Inheritance\nx\nThere\u00a0are\u00a03\u00a0types\u00a0of\u00a0inheritance:\u00a0\n(a) Simple\u00a0Inheritance\u00a0- Ex.\u00a0class\u00a0NewIndex derived\u00a0from\u00a0class\u00a0Index\n(b) Multi-level\u00a0 Inheritance\u00a0 - Ex.\u00a0 class\u00a0 HOD is\u00a0 derived\u00a0 from\u00a0 class\u00a0\nProfessor which\u00a0is\u00a0derived\u00a0from\u00a0class\u00a0Person.\n(c) Multiple Inheritance\u00a0- Ex.\u00a0class\u00a0HardwareSales derived\u00a0from\u00a0two\u00a0\nbase\u00a0classes\u2014Product and\u00a0Sales.\nx\nIn\u00a0multiple\u00a0inheritance\u00a0a\u00a0class\u00a0is\u00a0derived\u00a0from\u00a02\u00a0or\u00a0more\u00a0than\u00a02\u00a0base\u00a0\nclasses.\u00a0This\u00a0is\u00a0shown\u00a0in\u00a0the\u00a0following\u00a0program:\nclass\u00a0Product\u00a0:\ndef\u00a0__init__(self)\u00a0:\nself.__title\u00a0=\u00a0input\u00a0('Enter\u00a0title:\u00a0')\n266\nLet\u00a0Us\u00a0Python\nself.__price\u00a0=\u00a0input\u00a0('Enter\u00a0price:\u00a0')\ndef\u00a0display_data(self)\u00a0:\nprint(self.__title,\u00a0self.__price)\nclass\u00a0Sales\u00a0:\ndef\u00a0__init__(self)\u00a0:\nself._", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_389", "chunk_strategy": "fixed_size"}}, {"text": ")\u00a0:\nself.__title\u00a0=\u00a0input\u00a0('Enter\u00a0title:\u00a0')\n266\nLet\u00a0Us\u00a0Python\nself.__price\u00a0=\u00a0input\u00a0('Enter\u00a0price:\u00a0')\ndef\u00a0display_data(self)\u00a0:\nprint(self.__title,\u00a0self.__price)\nclass\u00a0Sales\u00a0:\ndef\u00a0__init__(self)\u00a0:\nself.__sales_figures\u00a0=\u00a0[int(x)\u00a0for\u00a0x\u00a0in\u00a0\ninput('Enter\u00a0sales\u00a0fig:\u00a0').split(\u00a0)]\u00a0\ndef\u00a0display_data(self)\u00a0:\nprint(self.__sales_figures)\nclass\u00a0HardwareItem(Product,\u00a0Sales)\u00a0:\ndef\u00a0__init__(self)\u00a0:\nProduct.__init__(self)\nSales.__init__(self)\nself.__category\u00a0=\u00a0input\u00a0('Enter\u00a0category:\u00a0')\nself.__oem\u00a0=\u00a0input\u00a0('Enter\u00a0oem:\u00a0')\ndef\u00a0display_data(self)\u00a0:\nProduct.display_data(self)\nSales.display_data(self)\nprint(self.__category,\u00a0self.__oem)\nhw1\u00a0=\u00a0HardwareItem(\u00a0)\nhw1.display_data(\u00a0)\nhw2\u00a0=\u00a0HardwareItem(\u00a0)\nhw2.display_data(\u00a0)\nGiven\u00a0below\u00a0is\u00a0the\u00a0sample\u00a0interaction\u00a0with\u00a0this\u00a0program:\nEnter\u00a0title:\u00a0Bolt\nEnter\u00a0price:\u00a012\nEnter\u00a0sales\u00a0fig:\u00a0120\u00a0300\u00a0433\nEnter\u00a0category:\u00a0C\nEnter\u00a0oem:\u00a0Axis\u00a0Mfg\nBolt\u00a012\n[120,\u00a0300,\u00a0433]\nC\u00a0Axis\u00a0Mfg\nEnter\u00a0title:\u00a0Nut\nChapter 20:\u00a0Containership\u00a0and\u00a0Inheritance\u00a0\n267\nEnter\u00a0price:\u00a08\nEnter\u00a0sales\u00a0fig:\u00a01000\u00a020", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_390", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0sales\u00a0fig:\u00a0120\u00a0300\u00a0433\nEnter\u00a0category:\u00a0C\nEnter\u00a0oem:\u00a0Axis\u00a0Mfg\nBolt\u00a012\n[120,\u00a0300,\u00a0433]\nC\u00a0Axis\u00a0Mfg\nEnter\u00a0title:\u00a0Nut\nChapter 20:\u00a0Containership\u00a0and\u00a0Inheritance\u00a0\n267\nEnter\u00a0price:\u00a08\nEnter\u00a0sales\u00a0fig:\u00a01000\u00a02000\u00a01800\nEnter\u00a0category:\u00a0C\nEnter\u00a0oem:\u00a0Simplex\u00a0Pvt\u00a0Ltd\nNut\u00a08\n[1000,\u00a02000,\u00a01800]\nC\u00a0Simplex\u00a0Pvt\u00a0Ltd\nx\nNote\u00a0 the\u00a0 syntax\u00a0 for\u00a0 calling\u00a0 __init__(\u00a0 ) of\u00a0 base\u00a0 classes\u00a0 in\u00a0 the\u00a0\nconstructor\u00a0of\u00a0derived\u00a0class:\nProduct.__init__(self)\nSales.__init__(self)\nHere\u00a0we\u00a0cannot\u00a0use\u00a0here\u00a0the\u00a0syntax\u00a0super.__init__(\u00a0).\nx\nAlso\u00a0note\u00a0how\u00a0the\u00a0input\u00a0for\u00a0sales\u00a0figures\u00a0has\u00a0been\u00a0received\u00a0using\u00a0list\u00a0\ncomprehension.\nDiamond\u00a0Problem\nx\nSuppose\u00a0two\u00a0classes\u00a0Derived1 and\u00a0Derived2 are\u00a0derived\u00a0from\u00a0a\u00a0base\u00a0\nclass\u00a0 called\u00a0 Base using\u00a0 simple\u00a0inheritance.\u00a0Also,\u00a0a\u00a0new\u00a0 class\u00a0 Der is\u00a0\nderived\u00a0from\u00a0Derived1 and\u00a0Derived2 using\u00a0multiple\u00a0inheritance.\u00a0This\u00a0\nis\u00a0known\u00a0as\u00a0diamond\u00a0relationship.\nx\nIf\u00a0 we\u00a0 now\u00a0 construct\u00a0 an\u00a0 object\u00a0 of\u00a0 Der it\u00a0 will\u00a0 have\u00a0 one\u00a0 copy\u00a0 of\u00a0\nmembers\u00a0 from\u00a0the\u00a0 path\u00a0Base\u00a0 ->\u00a0 Derived1 and\u00a0 another\u00a0 copy\u00a0from\u00a0\nthe", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_391", "chunk_strategy": "fixed_size"}}, {"text": "nheritance.\u00a0This\u00a0\nis\u00a0known\u00a0as\u00a0diamond\u00a0relationship.\nx\nIf\u00a0 we\u00a0 now\u00a0 construct\u00a0 an\u00a0 object\u00a0 of\u00a0 Der it\u00a0 will\u00a0 have\u00a0 one\u00a0 copy\u00a0 of\u00a0\nmembers\u00a0 from\u00a0the\u00a0 path\u00a0Base\u00a0 ->\u00a0 Derived1 and\u00a0 another\u00a0 copy\u00a0from\u00a0\nthe\u00a0path\u00a0Base\u00a0-->\u00a0Derived2.\u00a0This\u00a0will\u00a0result\u00a0in\u00a0ambiguity.\u00a0\nx\nTo\u00a0 eliminate\u00a0 the\u00a0 ambiguity,\u00a0 Python\u00a0 linearizes\u00a0 the\u00a0 search\u00a0 order\u00a0 in\u00a0\nsuch\u00a0a\u00a0way\u00a0that\u00a0the\u00a0left\u00a0to\u00a0right\u00a0order\u00a0while\u00a0creating Der is\u00a0honored.\u00a0\nIn\u00a0 our\u00a0 case\u00a0 it\u00a0 is\u00a0 Derived1,\u00a0 Derived2.\u00a0 So\u00a0 we\u00a0 would\u00a0 get\u00a0 a\u00a0 copy\u00a0 of\u00a0\nmembers\u00a0 from\u00a0 the\u00a0 path\u00a0 Base\u00a0 -->\u00a0 Derived1. Following\u00a0 program\u00a0\nshows\u00a0this\u00a0implementation:\nclass\u00a0Base\u00a0:\ndef\u00a0display(self)\u00a0:\nprint('In\u00a0Base')\nclass\u00a0Derived1(Base)\u00a0:\ndef\u00a0display(self)\u00a0:\nprint('In\u00a0Derived1')\nclass\u00a0Derived2(Base)\u00a0:\n268\nLet\u00a0Us\u00a0Python\ndef\u00a0display(self)\u00a0:\nprint('In\u00a0Derived2')\nclass\u00a0Der(Derived1,\u00a0Derived2)\u00a0:\ndef\u00a0display(self)\u00a0:\nsuper( ).display(\u00a0)\nDerived1.display(self)\nDerived2.display(self)\nprint(Der.__mro__)\nd1\u00a0=\u00a0Der(\u00a0)\nd1.display(\u00a0)\nOn\u00a0executing\u00a0the\u00a0program\u00a0we\u00a0get\u00a0the\u00a0following\u00a0output:\nIn\u00a0Deriv", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_392", "chunk_strategy": "fixed_size"}}, {"text": "ed2)\u00a0:\ndef\u00a0display(self)\u00a0:\nsuper( ).display(\u00a0)\nDerived1.display(self)\nDerived2.display(self)\nprint(Der.__mro__)\nd1\u00a0=\u00a0Der(\u00a0)\nd1.display(\u00a0)\nOn\u00a0executing\u00a0the\u00a0program\u00a0we\u00a0get\u00a0the\u00a0following\u00a0output:\nIn\u00a0Derived2\nIn\u00a0Derived1\nIn\u00a0Derived2\n(<class\u00a0'__main__.Der'>,\u00a0<class\u00a0'__main__.Derived1'>,\u00a0<class\u00a0\n'__main__.Derived2'>,\u00a0<class\u00a0'__main__.Base'>,\u00a0<class\u00a0'object'>)\nx\n__mro__ gives the\u00a0method\u00a0resolution\u00a0order.\u00a0\nAbstract\u00a0Classes\nx\nSuppose\u00a0we\u00a0have\u00a0a\u00a0Shape class\u00a0and\u00a0from\u00a0it\u00a0we\u00a0have\u00a0derived\u00a0 Circle\nand\u00a0 Rectangle classes.\u00a0 Each\u00a0 contains\u00a0 a\u00a0 method\u00a0 called\u00a0 draw(\u00a0 ).\u00a0\nHowever,\u00a0drawing\u00a0a\u00a0shape\u00a0doesn\u2019t\u00a0make\u00a0too\u00a0much\u00a0sense,\u00a0hence\u00a0we\u00a0\ndo\u00a0 not\u00a0want\u00a0 draw(\u00a0)\u00a0of\u00a0Shape to\u00a0ever\u00a0get\u00a0 called.\u00a0This\u00a0can\u00a0happen\u00a0\nonly\u00a0if\u00a0we\u00a0can\u00a0prevent\u00a0creation\u00a0of\u00a0object\u00a0of\u00a0Shape class.\u00a0This\u00a0can\u00a0be\u00a0\ndone\u00a0as\u00a0shown\u00a0in\u00a0the\u00a0following\u00a0program:\nfrom\u00a0abc\u00a0import\u00a0ABC,\u00a0abstractmethod\nclass\u00a0Shape(ABC)\u00a0:\n@abstractmethod\ndef\u00a0draw(self)\u00a0:\npass\nclass\u00a0Rectangle(Shape)\u00a0:\ndef\u00a0draw(self)\u00a0:\nprint('In\u00a0Rectangle.draw')\nclass\u00a0Circle(Shape)\u00a0:\nChapter 20:\u00a0Con", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_393", "chunk_strategy": "fixed_size"}}, {"text": "\nfrom\u00a0abc\u00a0import\u00a0ABC,\u00a0abstractmethod\nclass\u00a0Shape(ABC)\u00a0:\n@abstractmethod\ndef\u00a0draw(self)\u00a0:\npass\nclass\u00a0Rectangle(Shape)\u00a0:\ndef\u00a0draw(self)\u00a0:\nprint('In\u00a0Rectangle.draw')\nclass\u00a0Circle(Shape)\u00a0:\nChapter 20:\u00a0Containership\u00a0and\u00a0Inheritance\u00a0\n269\ndef\u00a0draw(self)\u00a0:\nprint('In\u00a0Circle.draw')\ns =\u00a0Shape(\u00a0) #\u00a0will\u00a0result\u00a0in\u00a0error,\u00a0as\u00a0Shape\u00a0is\u00a0abstract\u00a0class\nc =\u00a0Circle(\u00a0)\nc.draw(\u00a0)\nx\nA\u00a0class\u00a0from\u00a0which\u00a0an\u00a0object\u00a0cannot\u00a0be\u00a0created\u00a0is\u00a0called\u00a0an\u00a0abstract\u00a0\nclass.\nx\nabc is\u00a0a\u00a0 module.\u00a0 It\u00a0stands\u00a0 for\u00a0 abstract\u00a0 base\u00a0 classes.\u00a0From\u00a0 abc we\u00a0\nhave\u00a0imported\u00a0class\u00a0ABC and\u00a0decorator\u00a0abstractmethod.\nx\nTo\u00a0create\u00a0an\u00a0abstract\u00a0class\u00a0we\u00a0need\u00a0to\u00a0derive\u00a0it\u00a0from\u00a0class\u00a0ABC.\u00a0We\u00a0\nalso\u00a0need\u00a0to\u00a0mark\u00a0draw(\u00a0) as\u00a0abstract\u00a0method\u00a0using\u00a0the\u00a0decorator\u00a0\n@abstractmethod.\nx\nIf\u00a0an\u00a0abstract\u00a0class\u00a0contains\u00a0only\u00a0methods\u00a0marked\u00a0by\u00a0the\u00a0decorator\u00a0\n@abstractmethod,\u00a0it\u00a0is\u00a0often\u00a0called\u00a0an\u00a0interface.\nx\nDecorators\u00a0are\u00a0discussed\u00a0in\u00a0Chapter\u00a024.\nRuntime Polymorphism\nx\nPolymorphism\u00a0 means\u00a0one\u00a0thing\u00a0 existing\u00a0in\u00a0several\u00a0 different\u00a0forms.\u00a0\nRuntime\u00a0polymorphism\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_394", "chunk_strategy": "fixed_size"}}, {"text": "actmethod,\u00a0it\u00a0is\u00a0often\u00a0called\u00a0an\u00a0interface.\nx\nDecorators\u00a0are\u00a0discussed\u00a0in\u00a0Chapter\u00a024.\nRuntime Polymorphism\nx\nPolymorphism\u00a0 means\u00a0one\u00a0thing\u00a0 existing\u00a0in\u00a0several\u00a0 different\u00a0forms.\u00a0\nRuntime\u00a0polymorphism\u00a0involves\u00a0deciding\u00a0at\u00a0runtime\u00a0which\u00a0function\u00a0\nfrom\u00a0 base\u00a0 class\u00a0 or\u00a0 derived\u00a0 class\u00a0 should\u00a0 get\u00a0 called.\u00a0 This\u00a0 feature\u00a0 is\u00a0\nwidely\u00a0used\u00a0in\u00a0C++.\nx\nParallel\u00a0 to\u00a0 Runtime\u00a0 Polymorphism,\u00a0 Java\u00a0 has\u00a0 a\u00a0 Dynamic\u00a0 Dispatch\u00a0\nmechanism\u00a0which\u00a0works\u00a0similarly.\nx\nPython\u00a0is\u00a0dynamically\u00a0typed\u00a0language,\u00a0where\u00a0type\u00a0of\u00a0any\u00a0variable\u00a0is\u00a0\ndetermined\u00a0 at\u00a0 runtime\u00a0 based\u00a0 on\u00a0 its\u00a0 usage.\u00a0 Hence\u00a0 discussion\u00a0 of\u00a0\nRuntime\u00a0 Polymorphism\u00a0 or\u00a0 Dynamic\u00a0 Dispatch\u00a0 mechanism\u00a0 is\u00a0 not\u00a0\nrelevant\u00a0in\u00a0Python.\n____________________________________________________________________\nProblem\u00a020.1\nDefine\u00a0 a\u00a0 class\u00a0 Shape.\u00a0 Inherit\u00a0 two\u00a0classes\u00a0 Circle and\u00a0 Rectangle.\u00a0 Check\u00a0\nprogrammatically\u00a0 the\u00a0 inheritance\u00a0 relationship\u00a0 between\u00a0 the\u00a0 classes.\u00a0\n270\nLet\u00a0Us\u00a0Python\nCreate\u00a0 Shape and\u00a0 Circle objects.\u00a0 Report\u00a0 of\u00a0 which\u00a0 classes\u00a0 are", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_395", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0classes\u00a0 Circle and\u00a0 Rectangle.\u00a0 Check\u00a0\nprogrammatically\u00a0 the\u00a0 inheritance\u00a0 relationship\u00a0 between\u00a0 the\u00a0 classes.\u00a0\n270\nLet\u00a0Us\u00a0Python\nCreate\u00a0 Shape and\u00a0 Circle objects.\u00a0 Report\u00a0 of\u00a0 which\u00a0 classes\u00a0 are\u00a0 these\u00a0\nobjects\u00a0instances\u00a0of.\nProgram\nclass\u00a0Shape\u00a0:\npass\nclass\u00a0Rectangle(Shape)\u00a0:\npass\nclass\u00a0Circle(Shape)\u00a0:\npass\ns\u00a0=\u00a0Shape(\u00a0)\nc\u00a0=\u00a0Circle(\u00a0)\nprint(isinstance(s,\u00a0Shape))\nprint(isinstance(s,\u00a0Rectangle))\nprint(isinstance(s,\u00a0Circle))\nprint(issubclass(Rectangle,\u00a0Shape))\nprint(issubclass(Circle,\u00a0Shape))\nOutput\nTrue\nFalse\nFalse\nTrue\nTrue\n____________________________________________________________________\nProblem\u00a020.2\nWrite\u00a0a\u00a0program\u00a0that\u00a0uses\u00a0simple\u00a0inheritance\u00a0between\u00a0classes\u00a0Base and\u00a0\nDerived.\u00a0If\u00a0there\u00a0is\u00a0a\u00a0method\u00a0in\u00a0Base class,\u00a0how\u00a0do\u00a0you\u00a0prevent\u00a0it\u00a0from\u00a0\nbeing\u00a0overridden\u00a0in\u00a0the\u00a0Derived class?\nProgram\nclass\u00a0Base\u00a0:\ndef\u00a0__method(self):\nprint('In\u00a0Base.__method')\ndef\u00a0func(self):\nChapter 20:\u00a0Containership\u00a0and\u00a0Inheritance\u00a0\n271\nself.__method( )\nclass\u00a0Derived(Base):\ndef\u00a0__method(self):\nprint('In\u00a0Der", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_396", "chunk_strategy": "fixed_size"}}, {"text": "rogram\nclass\u00a0Base\u00a0:\ndef\u00a0__method(self):\nprint('In\u00a0Base.__method')\ndef\u00a0func(self):\nChapter 20:\u00a0Containership\u00a0and\u00a0Inheritance\u00a0\n271\nself.__method( )\nclass\u00a0Derived(Base):\ndef\u00a0__method(self):\nprint('In\u00a0Derived.__method')\nb\u00a0=\u00a0Base( )\nb.func( )\nd\u00a0=\u00a0Derived( )\nd.func( )\nOutput\nIn\u00a0Base.__method\nIn\u00a0Base.__method\nTips\nx\nTo\u00a0prevent\u00a0method\u00a0from\u00a0being\u00a0overridden,\u00a0prepend\u00a0it\u00a0with\u00a0__.\u00a0\nx\nWhen\u00a0 func(\u00a0 ) is\u00a0called\u00a0using\u00a0b,\u00a0self contains\u00a0 address\u00a0of\u00a0 Base class\u00a0\nobject.\u00a0 When\u00a0 it\u00a0is\u00a0called\u00a0 using\u00a0 d,\u00a0 self contains\u00a0 address\u00a0 of\u00a0Derived\nclass\u00a0object.\u00a0\nx\nIn\u00a0Base class\u00a0__method(\u00a0) gets\u00a0mangled\u00a0to\u00a0_Base__method(\u00a0) and\u00a0in\u00a0\nDerived class\u00a0it\u00a0becomes\u00a0_Derived__method(\u00a0).\u00a0\nx\nWhen\u00a0 func(\u00a0 ) calls __method(\u00a0 ) from\u00a0 Base class,\u00a0 it\u00a0 is\u00a0 the\u00a0\n_Base__method(\u00a0) that\u00a0gets\u00a0called.\u00a0In\u00a0effect,\u00a0__method(\u00a0)\u00a0cannot\u00a0be\u00a0\noverridden.\u00a0 This\u00a0 is\u00a0 true,\u00a0 even\u00a0 when\u00a0 self contains\u00a0 address\u00a0 of\u00a0 the\u00a0\nDerived class\u00a0object.\n____________________________________________________________________\nProblem\u00a020.3\nWrite\u00a0a\u00a0program\u00a0that\u00a0defines\u00a0a", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_397", "chunk_strategy": "fixed_size"}}, {"text": "n.\u00a0 This\u00a0 is\u00a0 true,\u00a0 even\u00a0 when\u00a0 self contains\u00a0 address\u00a0 of\u00a0 the\u00a0\nDerived class\u00a0object.\n____________________________________________________________________\nProblem\u00a020.3\nWrite\u00a0a\u00a0program\u00a0that\u00a0defines\u00a0an\u00a0abstract\u00a0class\u00a0called\u00a0Printer containing\u00a0\nan\u00a0 abstract\u00a0method\u00a0 print(\u00a0 ). Derive\u00a0 from\u00a0 it\u00a0two\u00a0 classes\u2014LaserPrinter\nand\u00a0Inkjetprinter.\u00a0Create\u00a0objects\u00a0of\u00a0derived\u00a0classes\u00a0and\u00a0call\u00a0the\u00a0print(\u00a0)\nmethod\u00a0 using\u00a0 these\u00a0 objects,\u00a0 passing\u00a0 to\u00a0 it\u00a0 the\u00a0 name\u00a0 of\u00a0 the\u00a0 file\u00a0 to\u00a0be\u00a0\nprinted.\u00a0In\u00a0the\u00a0print(\u00a0) method\u00a0simply\u00a0print\u00a0the\u00a0filename\u00a0and\u00a0the\u00a0class\u00a0\nname\u00a0to\u00a0which\u00a0print(\u00a0) belongs.\n272\nLet\u00a0Us\u00a0Python\nProgram\nfrom\u00a0abc\u00a0import\u00a0ABC,\u00a0abstractmethod\nclass\u00a0Printer(ABC)\u00a0:\ndef\u00a0__init__(self,\u00a0n)\u00a0:\nself.__name\u00a0=\u00a0n\u00a0\n@abstractmethod\ndef\u00a0print(self,\u00a0docName)\u00a0:\npass\nclass\u00a0LaserPrinter(Printer)\u00a0:\ndef\u00a0__init__(self,\u00a0n)\u00a0:\nsuper(\u00a0).__init__(n)\ndef\u00a0print(self,\u00a0docName)\u00a0:\nprint('>>\u00a0LaserPrinter.print')\nprint('Trying\u00a0to\u00a0print\u00a0:',\u00a0docName)\nclass\u00a0InkjetPrinter(Printer)\u00a0:\ndef\u00a0__init__(self,\u00a0n)\u00a0:\u00a0\nsuper(\u00a0).__init__(n)\nd", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_398", "chunk_strategy": "fixed_size"}}, {"text": ",\u00a0n)\u00a0:\nsuper(\u00a0).__init__(n)\ndef\u00a0print(self,\u00a0docName)\u00a0:\nprint('>>\u00a0LaserPrinter.print')\nprint('Trying\u00a0to\u00a0print\u00a0:',\u00a0docName)\nclass\u00a0InkjetPrinter(Printer)\u00a0:\ndef\u00a0__init__(self,\u00a0n)\u00a0:\u00a0\nsuper(\u00a0).__init__(n)\ndef\u00a0print(self,\u00a0docName)\u00a0:\nprint('>>\u00a0InkjetPrinter.print')\nprint('Trying\u00a0to\u00a0print\u00a0:',\u00a0docName)\np\u00a0=\u00a0LaserPrinter('LaserJet\u00a01100')\np.print('hello1.pdf')\np\u00a0=\u00a0InkjetPrinter('IBM\u00a02140')\u00a0\np.print('hello2.doc')\nOutput\n>>\u00a0LaserPrinter.print\nTrying\u00a0to\u00a0print\u00a0:\nhello1.pdf\n>>\u00a0InkjetPrinter.print\nTrying\u00a0to\u00a0print\u00a0:\nhello2.doc\n____________________________________________________________________\nChapter 20:\u00a0Containership\u00a0and\u00a0Inheritance\u00a0\n273\nProblem\u00a020.4\nDefine\u00a0an\u00a0abstract\u00a0class\u00a0called\u00a0Character containing\u00a0an\u00a0abstract\u00a0method\u00a0\npatriotism(\u00a0).\u00a0Define\u00a0a\u00a0class\u00a0Actor containing\u00a0a\u00a0method\u00a0style(\u00a0).\u00a0Define\u00a0a\u00a0\nclass\u00a0Person derived\u00a0from\u00a0Character and\u00a0Actor.\u00a0Implement\u00a0the\u00a0method\u00a0\npatriotism(\u00a0) in\u00a0it,\u00a0and\u00a0override\u00a0the\u00a0method\u00a0style(\u00a0) in\u00a0it.\u00a0Also\u00a0define\u00a0a\u00a0\nnew\u00a0method\u00a0do_acting(\u00a0) in\u00a0it.\u00a0Create\u00a0an\u00a0object\u00a0of\u00a0Person class\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_399", "chunk_strategy": "fixed_size"}}, {"text": "son derived\u00a0from\u00a0Character and\u00a0Actor.\u00a0Implement\u00a0the\u00a0method\u00a0\npatriotism(\u00a0) in\u00a0it,\u00a0and\u00a0override\u00a0the\u00a0method\u00a0style(\u00a0) in\u00a0it.\u00a0Also\u00a0define\u00a0a\u00a0\nnew\u00a0method\u00a0do_acting(\u00a0) in\u00a0it.\u00a0Create\u00a0an\u00a0object\u00a0of\u00a0Person class\u00a0and\u00a0call\u00a0\nthe\u00a0three\u00a0methods\u00a0in\u00a0it.\nProgram\nfrom\u00a0abc\u00a0import\u00a0ABC,\u00a0abstractmethod\nclass\u00a0Character(ABC)\u00a0:\n@abstractmethod\ndef\u00a0patriotism(self)\u00a0:\npass\nclass\u00a0Actor\u00a0:\ndef\u00a0style(self)\u00a0:\nprint('>>\u00a0Actor.Style:\u00a0')\nclass\u00a0Person(Actor,\u00a0Character)\u00a0:\ndef\u00a0do_acting(self)\u00a0:\nprint('>>\u00a0Person.doActing')\ndef\u00a0style(self)\u00a0:\nprint('>>\u00a0Person.style')\u00a0\ndef\u00a0patriotism(self)\u00a0:\nprint('>>\u00a0Person.patriotism')\np\u00a0=\u00a0Person(\u00a0)\np.patriotism(\u00a0)\u00a0\np.style(\u00a0)\np.do_acting(\u00a0)\nOutput\n>>\u00a0Person.patriotism\n>>\u00a0Person.style\n>>\u00a0Person.doActing\n____________________________________________________________________\n274\nLet\u00a0Us\u00a0Python\n[A] State\u00a0whether\u00a0the\u00a0following\u00a0statements\u00a0are\u00a0True\u00a0or\u00a0False:\n(a) Inheritance\u00a0is\u00a0the\u00a0ability\u00a0of a\u00a0class\u00a0to\u00a0inherit\u00a0properties\u00a0and\u00a0behavior\u00a0\nfrom\u00a0a\u00a0parent\u00a0class\u00a0by\u00a0extending\u00a0it.\n(b) Containership\u00a0is\u00a0the\u00a0ability", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_400", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0whether\u00a0the\u00a0following\u00a0statements\u00a0are\u00a0True\u00a0or\u00a0False:\n(a) Inheritance\u00a0is\u00a0the\u00a0ability\u00a0of a\u00a0class\u00a0to\u00a0inherit\u00a0properties\u00a0and\u00a0behavior\u00a0\nfrom\u00a0a\u00a0parent\u00a0class\u00a0by\u00a0extending\u00a0it.\n(b) Containership\u00a0is\u00a0the\u00a0ability\u00a0of\u00a0a\u00a0class\u00a0to\u00a0contain\u00a0objects\u00a0of\u00a0different\u00a0\nclasses\u00a0as\u00a0member\u00a0data.\n(c)\nWe\u00a0 can\u00a0 derive\u00a0 a\u00a0 class\u00a0 from\u00a0 a\u00a0 base\u00a0 class\u00a0 even\u00a0if\u00a0 the\u00a0 base\u00a0 class's\u00a0\nsource\u00a0code\u00a0is\u00a0not\u00a0available.\n(d) Multiple\u00a0inheritance\u00a0is\u00a0different\u00a0from\u00a0multiple\u00a0levels\u00a0of\u00a0inheritance.\n(e) An\u00a0object\u00a0of\u00a0a\u00a0derived\u00a0class\u00a0cannot\u00a0access\u00a0members\u00a0of\u00a0base\u00a0class\u00a0if\u00a0\nthe\u00a0member\u00a0names\u00a0begin\u00a0with\u00a0__.\n(f)\nCreating\u00a0 a\u00a0 derived\u00a0 class\u00a0 from\u00a0 a\u00a0 base\u00a0 class\u00a0 requires\u00a0 fundamental\u00a0\nchanges\u00a0to\u00a0the\u00a0base\u00a0class.\n(g)\nIf\u00a0a\u00a0 base\u00a0class\u00a0contains\u00a0 a\u00a0member\u00a0 function\u00a0func(\u00a0),\u00a0 and\u00a0a\u00a0derived\u00a0\nclass\u00a0does\u00a0not\u00a0contain\u00a0a\u00a0function\u00a0with\u00a0this\u00a0name,\u00a0an\u00a0object\u00a0of\u00a0the\u00a0\nderived\u00a0class\u00a0cannot\u00a0access\u00a0func(\u00a0).\n(h) If\u00a0 no\u00a0constructors\u00a0are\u00a0 specified\u00a0for\u00a0a\u00a0 derived\u00a0class,\u00a0objects\u00a0of\u00a0 the\u00a0\nderived\u00a0class\u00a0will\u00a0use\u00a0the\u00a0constructors\u00a0in\u00a0the\u00a0base\u00a0class.\n(i)\nIf\u00a0a\u00a0base\u00a0cla", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_401", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0of\u00a0the\u00a0\nderived\u00a0class\u00a0cannot\u00a0access\u00a0func(\u00a0).\n(h) If\u00a0 no\u00a0constructors\u00a0are\u00a0 specified\u00a0for\u00a0a\u00a0 derived\u00a0class,\u00a0objects\u00a0of\u00a0 the\u00a0\nderived\u00a0class\u00a0will\u00a0use\u00a0the\u00a0constructors\u00a0in\u00a0the\u00a0base\u00a0class.\n(i)\nIf\u00a0a\u00a0base\u00a0class\u00a0and\u00a0a\u00a0derived\u00a0class\u00a0each\u00a0include\u00a0a\u00a0member\u00a0function\u00a0\nwith\u00a0the\u00a0same\u00a0name,\u00a0the\u00a0member\u00a0function\u00a0of\u00a0the\u00a0derived\u00a0class\u00a0will\u00a0\nbe\u00a0called\u00a0by\u00a0an\u00a0object\u00a0of\u00a0the\u00a0derived\u00a0class.\n(j)\nA\u00a0class\u00a0D can\u00a0be\u00a0derived\u00a0from\u00a0a\u00a0class\u00a0C,\u00a0which\u00a0is\u00a0derived\u00a0from\u00a0a\u00a0class\u00a0\nB,\u00a0which\u00a0is\u00a0derived\u00a0from\u00a0a\u00a0class\u00a0A.\n(k)\nIt\u00a0is\u00a0illegal\u00a0to\u00a0make\u00a0objects\u00a0of\u00a0one\u00a0class\u00a0members\u00a0of\u00a0another\u00a0class.\n[B] Answer\u00a0the\u00a0following questions:\n(a) Which\u00a0module\u00a0should\u00a0be\u00a0imported\u00a0to\u00a0create\u00a0abstract\u00a0class?\n(b) For\u00a0a\u00a0class\u00a0to\u00a0be\u00a0abstract\u00a0from\u00a0which\u00a0class\u00a0should\u00a0we\u00a0inherit\u00a0it?\nChapter 20:\u00a0Containership\u00a0and\u00a0Inheritance\u00a0\n275\n(c)\nSuppose\u00a0there\u00a0is\u00a0a\u00a0base\u00a0class\u00a0B and\u00a0a\u00a0derived\u00a0class\u00a0D derived\u00a0from\u00a0\nB.\u00a0 B has\u00a0two\u00a0public member\u00a0functions\u00a0b1(\u00a0) and\u00a0b2(\u00a0),\u00a0whereas\u00a0D\nhas\u00a0two\u00a0member\u00a0functions\u00a0d1(\u00a0) and\u00a0d2(\u00a0).\u00a0Write\u00a0these\u00a0classes\u00a0for\u00a0\nthe\u00a0following\u00a0different\u00a0situa", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_402", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0B and\u00a0a\u00a0derived\u00a0class\u00a0D derived\u00a0from\u00a0\nB.\u00a0 B has\u00a0two\u00a0public member\u00a0functions\u00a0b1(\u00a0) and\u00a0b2(\u00a0),\u00a0whereas\u00a0D\nhas\u00a0two\u00a0member\u00a0functions\u00a0d1(\u00a0) and\u00a0d2(\u00a0).\u00a0Write\u00a0these\u00a0classes\u00a0for\u00a0\nthe\u00a0following\u00a0different\u00a0situations:\n\ue001\nb1(\u00a0) should\u00a0be\u00a0accessible\u00a0from\u00a0main\u00a0module,\u00a0b2(\u00a0) should\u00a0not\u00a0\nbe.\n\ue001\nNeither\u00a0b1(\u00a0),\u00a0nor\u00a0b2(\u00a0) should\u00a0be\u00a0accessible\u00a0from\u00a0main\u00a0module.\n\ue001\nBoth\u00a0b1(\u00a0) and\u00a0b2(\u00a0) should\u00a0be\u00a0accessible\u00a0from\u00a0main\u00a0module.\n(d) If\u00a0a\u00a0class\u00a0D is\u00a0derived\u00a0from\u00a0two\u00a0base\u00a0classes\u00a0B1 and\u00a0B2,\u00a0then\u00a0write\u00a0\nthese\u00a0 classes\u00a0 each\u00a0 containing\u00a0 a\u00a0 constructor.\u00a0 Ensure\u00a0 that\u00a0 while\u00a0\nbuilding\u00a0 an\u00a0object\u00a0 of\u00a0 type\u00a0D,\u00a0constructor\u00a0 of\u00a0 B2 should\u00a0 get\u00a0 called.\u00a0\nAlso\u00a0provide\u00a0a\u00a0destructor\u00a0in\u00a0each\u00a0class.\u00a0In\u00a0what\u00a0order\u00a0would\u00a0these\u00a0\ndestructors\u00a0get\u00a0called?\n(e) Create\u00a0an\u00a0abstract\u00a0class\u00a0called\u00a0Vehicle containing\u00a0methods\u00a0speed(\u00a0),\u00a0\nmaintenance(\u00a0 ) and\u00a0 value(\u00a0 ) in\u00a0 it.\u00a0 Derive\u00a0 classes\u00a0 FourWheeler,\u00a0\nTwoWheeler and\u00a0Airborne from\u00a0Vehicle class.\u00a0Check\u00a0whether\u00a0you\u00a0\nare\u00a0 able\u00a0 to\u00a0 prevent\u00a0 creation\u00a0 of\u00a0 objects\u00a0 of\u00a0 Vehicle class.\u00a0 Call\u00a0 the", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_403", "chunk_strategy": "fixed_size"}}, {"text": "e(\u00a0 ) and\u00a0 value(\u00a0 ) in\u00a0 it.\u00a0 Derive\u00a0 classes\u00a0 FourWheeler,\u00a0\nTwoWheeler and\u00a0Airborne from\u00a0Vehicle class.\u00a0Check\u00a0whether\u00a0you\u00a0\nare\u00a0 able\u00a0 to\u00a0 prevent\u00a0 creation\u00a0 of\u00a0 objects\u00a0 of\u00a0 Vehicle class.\u00a0 Call\u00a0 the\u00a0\nmethods\u00a0using\u00a0objects\u00a0of\u00a0other\u00a0classes.\n(f)\nAssume\u00a0 a\u00a0 class\u00a0 D that\u00a0 is\u00a0 derived\u00a0 from\u00a0 class\u00a0 B.\u00a0 Which\u00a0 of\u00a0 the\u00a0\nfollowing\u00a0can\u00a0an\u00a0object\u00a0of\u00a0class\u00a0D access?\n\ue001\nmembers\u00a0of\u00a0D\n\ue001\nmembers\u00a0of\u00a0B\n[C] Match\u00a0the\u00a0following pairs:\na.\n__mro__(\u00a0)\n\u03ed.\u00a0 \u2018has\u00a0a\u2019\u00a0relationship\nb.\nInheritance\n2.\u00a0 Object\u00a0creation\u00a0not\u00a0allowed\nc.\n__var\n3.\u00a0 Super\u00a0class\nd.\nAbstract\u00a0class\n4.\u00a0 Root\u00a0class\ne.\nParent\u00a0class\n\u03f1.\u00a0 \u2018is\u00a0a\u2019\u00a0relationship\nf.\nobject\n6.\u00a0 Name\u00a0mangling\ng.\nChild\u00a0class\n7.\u00a0 Decides\u00a0resolution\u00a0order\nh.\nContainership\n8.\u00a0 Sub\u00a0class\n[D] Attempt\u00a0the\u00a0following\u00a0questions:\n(a) From\u00a0which\u00a0class\u00a0is\u00a0any\u00a0abstract\u00a0class\u00a0derived?\n(b) At\u00a0a\u00a0time\u00a0a\u00a0class\u00a0can\u00a0be\u00a0derived\u00a0from\u00a0how\u00a0many\u00a0abstract\u00a0classes?\n276\nLet\u00a0Us\u00a0Python\n(c)\nHow\u00a0do\u00a0we\u00a0create\u00a0an\u00a0abstract\u00a0class\u00a0in\u00a0Python?\n(d) What\u00a0 can\u00a0 an\u00a0 abstract\u00a0 class\u00a0 contain\u2014instance\u00a0 method,\u00a0 cl", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_404", "chunk_strategy": "fixed_size"}}, {"text": ") At\u00a0a\u00a0time\u00a0a\u00a0class\u00a0can\u00a0be\u00a0derived\u00a0from\u00a0how\u00a0many\u00a0abstract\u00a0classes?\n276\nLet\u00a0Us\u00a0Python\n(c)\nHow\u00a0do\u00a0we\u00a0create\u00a0an\u00a0abstract\u00a0class\u00a0in\u00a0Python?\n(d) What\u00a0 can\u00a0 an\u00a0 abstract\u00a0 class\u00a0 contain\u2014instance\u00a0 method,\u00a0 class\u00a0\nmethod,\u00a0abstract\u00a0method?\n(e) How\u00a0many\u00a0objects\u00a0can\u00a0be\u00a0created\u00a0from\u00a0an\u00a0abstract\u00a0class?\n(f)\nWhat\u00a0will\u00a0happen\u00a0on\u00a0execution\u00a0of\u00a0this\u00a0code\u00a0snippet?\nfrom\u00a0abc\u00a0import\u00a0ABC,\u00a0abstractmethod\nclass\u00a0Sample(ABC)\u00a0:\n@abstractmethod\ndef\u00a0display(self)\u00a0:\npass\ns =\u00a0Sample(\u00a0)\n(g)\nSuppose\u00a0 there\u00a0is\u00a0 a\u00a0 class\u00a0 called\u00a0 Vehicle.\u00a0 What\u00a0 should\u00a0 be\u00a0 done\u00a0 to\u00a0\nensure\u00a0that\u00a0an\u00a0object\u00a0should\u00a0not\u00a0be\u00a0created\u00a0from\u00a0Vehicle class?\n(h) How\u00a0 will\u00a0 you\u00a0 mark\u00a0 an\u00a0 instance\u00a0 method\u00a0 in\u00a0 an\u00a0 abstract\u00a0 class\u00a0 as\u00a0\nabstract?\n(i)\nThere\u00a0is\u00a0something\u00a0 wrong\u00a0in\u00a0the\u00a0 following\u00a0code\u00a0 snippet.\u00a0How\u00a0will\u00a0\nyou\u00a0rectify\u00a0it?\nclass\u00a0Shape(ABC)\u00a0:\n@abstractmethod\ndef\u00a0draw(self)\u00a0:\npass\nclass\u00a0Circle(Shape)\u00a0:\n@abstractmethod\ndef\u00a0draw(self)\u00a0:\nprint('In\u00a0draw')\nLet\u00a0Us\nPython\n277\nIterators\u00a0\nand\u00a0Generators\nx\nIterables\u00a0and\u00a0Iterators\nx\nWhich\u00a0to\u00a0use\u00a0When?\nx\nzi", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_405", "chunk_strategy": "fixed_size"}}, {"text": "ractmethod\ndef\u00a0draw(self)\u00a0:\npass\nclass\u00a0Circle(Shape)\u00a0:\n@abstractmethod\ndef\u00a0draw(self)\u00a0:\nprint('In\u00a0draw')\nLet\u00a0Us\nPython\n277\nIterators\u00a0\nand\u00a0Generators\nx\nIterables\u00a0and\u00a0Iterators\nx\nWhich\u00a0to\u00a0use\u00a0When?\nx\nzip(\u00a0) Function\nx\nGenerator\u00a0Expressions\nx\nIterators\nx\nPrograms\nx\nUser-defined\u00a0Iterators\nx\nExercise\nx\nGenerators\n21\n\u201cThe\u00a0modern\u00a0way...\u201d\n278\nLet\u00a0Us\u00a0Python\nIterables\u00a0and\u00a0Iterators\nx\nAn\u00a0object\u00a0is\u00a0called\u00a0iterable\u00a0if\u00a0it\u00a0is\u00a0capable\u00a0of\u00a0returning\u00a0its\u00a0members\u00a0\none\u00a0 at\u00a0 a\u00a0 time.\u00a0 Basic\u00a0 types\u00a0 like\u00a0 string and\u00a0 containers\u00a0 like list\nand tuple are\u00a0iterables.\nx\nIterator\u00a0 is\u00a0 an object which\u00a0 is\u00a0 used\u00a0 to\u00a0 iterate\u00a0 over\u00a0 an\u00a0 iterable.\u00a0 An\u00a0\niterable\u00a0provides\u00a0an\u00a0iterator\u00a0object.\nx\nIterators\u00a0are\u00a0implemented\u00a0in for loops,\u00a0comprehensions,\u00a0generators\u00a0\netc.\nzip(\u00a0) Function\nx\nzip(\u00a0) function\u00a0typically\u00a0receives\u00a0multiple\u00a0iterable objects and\u00a0returns\u00a0\nan\u00a0iterator\u00a0of\u00a0tuples\u00a0based\u00a0on them. This\u00a0iterator\u00a0can\u00a0be\u00a0used\u00a0in\u00a0a\nfor loop\u00a0as\u00a0shown\u00a0below.\nwords =\u00a0['A',\u00a0'coddle',\u00a0'called',\u00a0'Molly']\nnumbers =\u00a0[10,\u00a020,\u00a030,\u00a040]\nfor\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_406", "chunk_strategy": "fixed_size"}}, {"text": "le\u00a0iterable objects and\u00a0returns\u00a0\nan\u00a0iterator\u00a0of\u00a0tuples\u00a0based\u00a0on them. This\u00a0iterator\u00a0can\u00a0be\u00a0used\u00a0in\u00a0a\nfor loop\u00a0as\u00a0shown\u00a0below.\nwords =\u00a0['A',\u00a0'coddle',\u00a0'called',\u00a0'Molly']\nnumbers =\u00a0[10,\u00a020,\u00a030,\u00a040]\nfor\u00a0ele\u00a0in\u00a0zip(words,\u00a0numbers)\u00a0:\nprint(ele[0],\u00a0ele[1])\nfor\u00a0ele\u00a0in\u00a0zip(words,\u00a0numbers)\u00a0:\nprint(*ele)\nfor\u00a0w,\u00a0n\u00a0in\u00a0zip(words,\u00a0numbers)\u00a0:\nprint(w,\u00a0n)\nAll\u00a0three for loops\u00a0will\u00a0output:\nA\u00a010\ncoddle\u00a020\ncalled\u00a030\nMolly\u00a040\nx\nIf\u00a0 two\u00a0 iterables\u00a0 are\u00a0 passed to\u00a0 zip(\u00a0 ),\u00a0 one\u00a0 containing\u00a0 4 and\u00a0 other\u00a0\ncontaining\u00a06 elements,\u00a0the\u00a0returned\u00a0iterator\u00a0has\u00a04 (shorter iterable)\u00a0\ntuples.\nChapter 21:\u00a0Iterators\u00a0and\u00a0Generators\u00a0\n279\nx\nA\u00a0 list/tuple/set can\u00a0 be\u00a0 generated from\u00a0 the\u00a0 iterator\u00a0 of\u00a0 tuples\u00a0\nreturned\u00a0by\u00a0zip(\u00a0).\nwords\u00a0=\u00a0['A',\u00a0'coddle',\u00a0'called',\u00a0'Molly']\nnumbers\u00a0=\u00a0[10,\u00a020,\u00a030,\u00a040]\nit\u00a0=\u00a0zip(words,\u00a0numbers)\nlst =\u00a0list(it)\nprint(lst)\u00a0 #\u00a0prints\u00a0[('A',\u00a010),\u00a0('coddle',\u00a020),\u00a0('called',\u00a030),\u00a0('Molly',\u00a040)]\nit\u00a0=\u00a0zip(words,\u00a0numbers)\n#\u00a0necessary\u00a0to\u00a0zip\u00a0again\ntpl =\u00a0tuple(it)\nprint(tpl)\u00a0 #\u00a0prints\u00a0(('A',\u00a010),\u00a0('coddle',", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_407", "chunk_strategy": "fixed_size"}}, {"text": "=\u00a0list(it)\nprint(lst)\u00a0 #\u00a0prints\u00a0[('A',\u00a010),\u00a0('coddle',\u00a020),\u00a0('called',\u00a030),\u00a0('Molly',\u00a040)]\nit\u00a0=\u00a0zip(words,\u00a0numbers)\n#\u00a0necessary\u00a0to\u00a0zip\u00a0again\ntpl =\u00a0tuple(it)\nprint(tpl)\u00a0 #\u00a0prints\u00a0(('A',\u00a010),\u00a0('coddle',\u00a020),\u00a0('called',\u00a030),\u00a0('Molly',\u00a040))\nit\u00a0=\u00a0zip(words,\u00a0numbers)\n#\u00a0necessary\u00a0to\u00a0zip\u00a0again\ns =\u00a0set(it)\nprint(s)\u00a0 #\u00a0prints\u00a0{('coddle',\u00a020),\u00a0('Molly',\u00a040),\u00a0('A',\u00a010),\u00a0('called',\u00a030)}\nx\nThe\u00a0values\u00a0can\u00a0be\u00a0unzipped\u00a0from\u00a0the\u00a0list into\u00a0tuples using\u00a0*.\nwords\u00a0=\u00a0['A',\u00a0'coddle',\u00a0'called',\u00a0'Molly']\nnumbers\u00a0=\u00a0[10,\u00a020,\u00a030,\u00a040]\nit\u00a0=\u00a0zip(words,\u00a0numbers)\nlst =\u00a0list(it)\nw,\u00a0n\u00a0=\u00a0zip(*lst)\nprint(w)\n#\u00a0prints\u00a0('A',\u00a0'coddle',\u00a0'called',\u00a0'Molly')\nprint(n)\n#\u00a0print\u00a0(10,\u00a020,\u00a030,\u00a040)\nIterators\nx\nWe\u00a0 know\u00a0 that\u00a0 a\u00a0 string\u00a0 and\u00a0 container\u00a0 objects\u00a0 like list,\u00a0 tuple,\u00a0 set,\u00a0\ndictionary\u00a0etc.\u00a0can\u00a0be\u00a0iterated\u00a0through\u00a0using\u00a0a\u00a0for loop\u00a0as\u00a0in\nfor\u00a0ch\u00a0in\u00a0'Good\u00a0Afternoon'\u00a0:\nprint(ch)\nfor\u00a0num\u00a0in\u00a0[10,\u00a020,\u00a030,\u00a040,\u00a050] :\nprint(num)\nBoth\u00a0these\u00a0for loops\u00a0call\u00a0__iter__(\u00a0) method\u00a0of\u00a0str/list.\u00a0This\u00a0method\u00a0\nreturns\u00a0 an\u00a0 iterator\u00a0 object.\u00a0 The\u00a0 ", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_408", "chunk_strategy": "fixed_size"}}, {"text": "p\u00a0as\u00a0in\nfor\u00a0ch\u00a0in\u00a0'Good\u00a0Afternoon'\u00a0:\nprint(ch)\nfor\u00a0num\u00a0in\u00a0[10,\u00a020,\u00a030,\u00a040,\u00a050] :\nprint(num)\nBoth\u00a0these\u00a0for loops\u00a0call\u00a0__iter__(\u00a0) method\u00a0of\u00a0str/list.\u00a0This\u00a0method\u00a0\nreturns\u00a0 an\u00a0 iterator\u00a0 object.\u00a0 The\u00a0 iterator\u00a0 object\u00a0 has\u00a0 a\u00a0 method\u00a0\n__next__(\u00a0) which\u00a0returns\u00a0the\u00a0next\u00a0item\u00a0in\u00a0the\u00a0str/list container.\n280\nLet\u00a0Us\u00a0Python\nWhen\u00a0all\u00a0items\u00a0have\u00a0been\u00a0iterated,\u00a0next\u00a0call\u00a0to\u00a0__next__(\u00a0) raises\u00a0a\u00a0\nStopIteration exception\u00a0 which\u00a0 tells\u00a0 the\u00a0 for loop\u00a0 to\u00a0 terminate.\u00a0\nExceptions\u00a0have\u00a0been\u00a0discussed\u00a0in\u00a0Chapter\u00a022.\nx\nWe\u00a0too\u00a0can\u00a0call\u00a0__iter__(\u00a0) and\u00a0__next__(\u00a0) and\u00a0get\u00a0the\u00a0same\u00a0results.\nlst\u00a0=\u00a0[10,\u00a020,\u00a030,\u00a040]\ni\u00a0=\u00a0lst.__iter__(\u00a0)\nprint(i.__next__(\u00a0))\nprint(i.__next__(\u00a0))\nprint(i.__next__(\u00a0))\nx\nInstead\u00a0of\u00a0calling\u00a0__iter__(\u00a0) and\u00a0__next__(\u00a0),\u00a0we\u00a0can\u00a0call\u00a0the\u00a0more\u00a0\nconvenient built-in\u00a0functions iter(\u00a0) and\u00a0next(\u00a0).\u00a0These\u00a0functions\u00a0 in\u00a0\nturn\u00a0call\u00a0__iter__(\u00a0) and\u00a0__next__(\u00a0) respectively.\nlst =\u00a0[10,\u00a020,\u00a030,\u00a040]\ni\u00a0=\u00a0iter(lst)\nprint(next(i))\nprint(next(i))\nprint(next(i))\nNote\u00a0than\u00a0once\u00a0we\u00a0have\u00a0iterated\u00a0a\u00a0conta", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_409", "chunk_strategy": "fixed_size"}}, {"text": "t(\u00a0).\u00a0These\u00a0functions\u00a0 in\u00a0\nturn\u00a0call\u00a0__iter__(\u00a0) and\u00a0__next__(\u00a0) respectively.\nlst =\u00a0[10,\u00a020,\u00a030,\u00a040]\ni\u00a0=\u00a0iter(lst)\nprint(next(i))\nprint(next(i))\nprint(next(i))\nNote\u00a0than\u00a0once\u00a0we\u00a0have\u00a0iterated\u00a0a\u00a0container,\u00a0if\u00a0we\u00a0wish\u00a0to\u00a0iterate\u00a0it\u00a0\nagain\u00a0we\u00a0have\u00a0to\u00a0obtain\u00a0an\u00a0iterator\u00a0object\u00a0afresh.\nx\nAn\u00a0iterable\u00a0 is\u00a0an\u00a0object\u00a0 capable\u00a0of\u00a0returning\u00a0its\u00a0members\u00a0one\u00a0 at\u00a0a\u00a0\ntime.\u00a0 Programmatically,\u00a0 it\u00a0 is\u00a0 an\u00a0 object\u00a0 that\u00a0 has\u00a0 implemented\u00a0\n__iter__(\u00a0) in\u00a0it.\nx\nAn\u00a0iterator\u00a0is\u00a0an\u00a0object\u00a0that\u00a0has\u00a0implemented\u00a0both\u00a0 __iter__(\u00a0) and\u00a0\n__next__(\u00a0) in\u00a0it.\nx\nAs\u00a0a\u00a0proof\u00a0that\u00a0an\u00a0iterable\u00a0contains\u00a0__iter__(\u00a0),\u00a0whereas\u00a0an\u00a0iterator\u00a0\ncontains\u00a0both\u00a0__iter__(\u00a0) and\u00a0__next__(\u00a0),\u00a0we\u00a0can\u00a0check\u00a0it\u00a0using\u00a0the\u00a0\nhasattr(\u00a0) built-in function.\ns\u00a0=\u00a0'Hello'\nlst\u00a0=\u00a0['Focussed',\u00a0'bursts',\u00a0'of',\u00a0'activity']\nprint(hasattr(s,\u00a0'__iter__'))\nprint(hasattr(s,\u00a0'__next__'))\nprint(hasattr(lst,\u00a0'__iter__'))\nprint(hasattr(lst,\u00a0'__next__'))\ni\u00a0=\u00a0iter(s)\nChapter 21:\u00a0Iterators\u00a0and\u00a0Generators\u00a0\n281\nj\u00a0=\u00a0iter(lst)\nprint(hasattr(i,\u00a0'__iter__'))\nprint(hasat", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_410", "chunk_strategy": "fixed_size"}}, {"text": "nt(hasattr(s,\u00a0'__next__'))\nprint(hasattr(lst,\u00a0'__iter__'))\nprint(hasattr(lst,\u00a0'__next__'))\ni\u00a0=\u00a0iter(s)\nChapter 21:\u00a0Iterators\u00a0and\u00a0Generators\u00a0\n281\nj\u00a0=\u00a0iter(lst)\nprint(hasattr(i,\u00a0'__iter__'))\nprint(hasattr(i,\u00a0'__next__'))\nprint(hasattr(j,\u00a0'__iter__'))\nprint(hasattr(j,\u00a0'__next__'))\nOn\u00a0execution\u00a0of\u00a0this\u00a0program\u00a0we\u00a0get\u00a0the\u00a0following\u00a0output:\nTrue\nFalse\nTrue\nFalse\nTrue\nTrue\nTrue\nTrue\nUser-defined\u00a0Iterators\nx\nSuppose\u00a0we\u00a0wish\u00a0our\u00a0class\u00a0to\u00a0behave\u00a0like\u00a0an\u00a0iterator.\u00a0To\u00a0do\u00a0this\u00a0we\u00a0\nneed\u00a0to\u00a0define\u00a0__iter__(\u00a0) and\u00a0__next__(\u00a0) in\u00a0it.\nx\nOur\u00a0iterator\u00a0class\u00a0AvgAdj should\u00a0maintain\u00a0a\u00a0list.\u00a0When\u00a0it\u00a0is\u00a0iterated\u00a0\nupon\u00a0it\u00a0should\u00a0return\u00a0average\u00a0of\u00a0two\u00a0adjacent\u00a0numbers\u00a0in\u00a0the\u00a0list.\nclass\u00a0AvgAdj\u00a0:\ndef\u00a0__init__(self,\u00a0data)\u00a0:\nself.__data\u00a0=\u00a0data\nself.__len\u00a0=\u00a0len(data)\nself.__first\u00a0=\u00a00\nself.__sec\u00a0=\u00a01\ndef\u00a0__iter__(self)\u00a0:\nreturn\u00a0self\ndef\u00a0__next__(self)\u00a0:\nif\u00a0self.__sec\u00a0==\u00a0self.__len\u00a0:\nraise\u00a0StopIteration\n#\u00a0raises\u00a0exception\u00a0(runtime\u00a0error)\nself.__avg\u00a0=\u00a0(self.__data[self.__first]\u00a0+\u00a0\nself.__data[self.__sec])\u00a0/\u00a02\nself.__fir", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_411", "chunk_strategy": "fixed_size"}}, {"text": "return\u00a0self\ndef\u00a0__next__(self)\u00a0:\nif\u00a0self.__sec\u00a0==\u00a0self.__len\u00a0:\nraise\u00a0StopIteration\n#\u00a0raises\u00a0exception\u00a0(runtime\u00a0error)\nself.__avg\u00a0=\u00a0(self.__data[self.__first]\u00a0+\u00a0\nself.__data[self.__sec])\u00a0/\u00a02\nself.__first\u00a0+=\u00a01\nself.__sec\u00a0+=\u00a01\nreturn\u00a0self.__avg\n282\nLet\u00a0Us\u00a0Python\nlst\u00a0=\u00a0[10,\u00a020,\u00a030,\u00a040,\u00a050,\u00a060,\u00a070]\ncoll\u00a0=\u00a0AvgAdj(lst)\nfor\u00a0val\u00a0in\u00a0coll\u00a0:\nprint(val)\nOn\u00a0execution\u00a0of\u00a0this\u00a0program,\u00a0we\u00a0get\u00a0the\u00a0following\u00a0output:\n15.0\n25.0\n35.0\n45.0\n55.0\n65.0\nx\n__iter__(\u00a0) is\u00a0supposed\u00a0to\u00a0return\u00a0an\u00a0object\u00a0which\u00a0has\u00a0implemented\u00a0\n__next__(\u00a0) in\u00a0it.\u00a0Since\u00a0we\u00a0have\u00a0defined\u00a0__next__(\u00a0) in\u00a0AvgAdj class,\u00a0\nwe\u00a0have\u00a0returned\u00a0self from\u00a0__iter__(\u00a0).\nx\nLength\u00a0of\u00a0lst is\u00a07,\u00a0whereas\u00a0elements\u00a0in\u00a0it\u00a0are\u00a0indexed\u00a0from\u00a00\u00a0to\u00a06.\nx\nWhen\u00a0self._sec\u00a0becomes\u00a07\u00a0it\u00a0means\u00a0that\u00a0we\u00a0have\u00a0reached\u00a0the\u00a0end\u00a0of\u00a0\nlist\u00a0 and\u00a0 further\u00a0 iteration\u00a0 is\u00a0not\u00a0possible.\u00a0 In\u00a0 this\u00a0 situation\u00a0we\u00a0 have\u00a0\nraised\u00a0an\u00a0exception\u00a0StopIteration.\nGenerators\nx\nGenerators\u00a0 are\u00a0very\u00a0 efficient\u00a0 functions\u00a0 that\u00a0 create\u00a0 iterators.\u00a0 They\u00a0\nuse\u00a0yield statement\u00a0instead\u00a0of\u00a0return whenever", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_412", "chunk_strategy": "fixed_size"}}, {"text": "In\u00a0 this\u00a0 situation\u00a0we\u00a0 have\u00a0\nraised\u00a0an\u00a0exception\u00a0StopIteration.\nGenerators\nx\nGenerators\u00a0 are\u00a0very\u00a0 efficient\u00a0 functions\u00a0 that\u00a0 create\u00a0 iterators.\u00a0 They\u00a0\nuse\u00a0yield statement\u00a0instead\u00a0of\u00a0return whenever\u00a0they\u00a0wish\u00a0to\u00a0return\ndata\u00a0from\u00a0the\u00a0function.\u00a0\nx\nSpecialty of\u00a0 a\u00a0 generator\u00a0 is\u00a0 that,\u00a0 it\u00a0 remembers\u00a0 the\u00a0 state\u00a0 of\u00a0 the\u00a0\nfunction\u00a0 and\u00a0 the\u00a0 last\u00a0 statement\u00a0 it\u00a0 had\u00a0 executed\u00a0 when\u00a0 yield was\u00a0\nexecuted.\nx\nSo\u00a0each\u00a0time\u00a0next(\u00a0) is\u00a0called,\u00a0it\u00a0resumes\u00a0where\u00a0it\u00a0had\u00a0left\u00a0 off\u00a0last\u00a0\ntime.\nx\nGenerators\u00a0can\u00a0be\u00a0used\u00a0in\u00a0place\u00a0of\u00a0class-based\u00a0iterator\u00a0that\u00a0we\u00a0saw\u00a0\nin\u00a0the\u00a0last\u00a0section.\u00a0\nx\nGenerators\u00a0 are\u00a0 very\u00a0compact\u00a0 because\u00a0the\u00a0 __iter__(\u00a0),\u00a0__next__(\u00a0)\nand\u00a0StopIteration code\u00a0is\u00a0created\u00a0automatically\u00a0for\u00a0them.\nx\nGiven\u00a0 below\u00a0 is\u00a0an\u00a0 example\u00a0of\u00a0 a\u00a0generator\u00a0 that\u00a0 returns\u00a0 average\u00a0of\u00a0\nnext\u00a0two\u00a0adjacent\u00a0numbers\u00a0in\u00a0the\u00a0list every\u00a0time.\nChapter 21:\u00a0Iterators\u00a0and\u00a0Generators\u00a0\n283\ndef\u00a0AvgAdj(data)\u00a0:\nfor i\u00a0in\u00a0range(0,\u00a0len(data)\u00a0- 1)\u00a0:\u00a0\nyield\u00a0(data[i]\u00a0+\u00a0data[i\u00a0+\u00a01])\u00a0/\u00a02\nlst\u00a0=\u00a0[10,\u00a020,\u00a030,\u00a040,\u00a050,\u00a060,\u00a070]\nf", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_413", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0numbers\u00a0in\u00a0the\u00a0list every\u00a0time.\nChapter 21:\u00a0Iterators\u00a0and\u00a0Generators\u00a0\n283\ndef\u00a0AvgAdj(data)\u00a0:\nfor i\u00a0in\u00a0range(0,\u00a0len(data)\u00a0- 1)\u00a0:\u00a0\nyield\u00a0(data[i]\u00a0+\u00a0data[i\u00a0+\u00a01])\u00a0/\u00a02\nlst\u00a0=\u00a0[10,\u00a020,\u00a030,\u00a040,\u00a050,\u00a060,\u00a070]\nfor\u00a0i\u00a0in\u00a0AvgAdj(lst)\u00a0:\nprint(i)\nOn\u00a0execution\u00a0of\u00a0this\u00a0program,\u00a0we\u00a0get\u00a0the\u00a0following\u00a0output:\n15.0\n25.0\n35.0\n45.0\n55.0\n65.0\nWhich\u00a0to\u00a0use\u00a0When?\nx\nSuppose\u00a0from\u00a0a\u00a0list\u00a0of\u00a0100\u00a0integers\u00a0we\u00a0are\u00a0to\u00a0return\u00a0an\u00a0entity\u00a0which\u00a0\ncontains\u00a0 elements\u00a0 which\u00a0 are\u00a0prime\u00a0 numbers.\u00a0 In\u00a0 this\u00a0 case\u00a0 we\u00a0will\u00a0\nreturn\u00a0an\u00a0'iterable'\u00a0which\u00a0contains\u00a0a\u00a0list\u00a0of\u00a0prime\u00a0numbers.\nx\nSuppose\u00a0we\u00a0wish\u00a0to\u00a0add\u00a0all\u00a0prime\u00a0numbers\u00a0below\u00a0three\u00a0 million.\u00a0In\u00a0\nthis\u00a0case,\u00a0first\u00a0creating\u00a0a\u00a0list\u00a0of\u00a0all\u00a0prime\u00a0numbers\u00a0and\u00a0then\u00a0adding\u00a0\nthem\u00a0will\u00a0 consume\u00a0lot\u00a0of\u00a0memory.\u00a0 So\u00a0 we\u00a0should\u00a0write\u00a0 an\u00a0iterator\u00a0\nclass\u00a0or\u00a0a\u00a0generator\u00a0function\u00a0which\u00a0generates\u00a0next\u00a0prime\u00a0number\u00a0on\u00a0\nthe\u00a0fly\u00a0and\u00a0adds\u00a0it\u00a0to\u00a0the\u00a0running\u00a0sum.\nGenerator\u00a0Expressions\nx\nLike\u00a0 list/set/dictionary\u00a0 comprehensions,\u00a0 to\u00a0 make\u00a0 the\u00a0 code\u00a0 more\u00a0\ncompact\u00a0 as\u00a0 well\u00a0 as\u00a0 succinct,\u00a0 we\u00a0 can\u00a0 ", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_414", "chunk_strategy": "fixed_size"}}, {"text": "next\u00a0prime\u00a0number\u00a0on\u00a0\nthe\u00a0fly\u00a0and\u00a0adds\u00a0it\u00a0to\u00a0the\u00a0running\u00a0sum.\nGenerator\u00a0Expressions\nx\nLike\u00a0 list/set/dictionary\u00a0 comprehensions,\u00a0 to\u00a0 make\u00a0 the\u00a0 code\u00a0 more\u00a0\ncompact\u00a0 as\u00a0 well\u00a0 as\u00a0 succinct,\u00a0 we\u00a0 can\u00a0 write\u00a0 compact\u00a0 generator\u00a0\nexpressions.\nx\nA\u00a0generator\u00a0expression\u00a0creates\u00a0a\u00a0generator\u00a0on\u00a0the\u00a0fly\u00a0without\u00a0being\u00a0\nrequired\u00a0to\u00a0use\u00a0the\u00a0yield statement.\nx\nSome\u00a0sample\u00a0generator\u00a0expressions\u00a0are\u00a0given\u00a0below.\n#\u00a0generate\u00a020\u00a0random\u00a0numbers\u00a0in\u00a0the\u00a0range\u00a010\u00a0to\u00a0100\u00a0and\u00a0obtain\u00a0\n#\u00a0maximum\u00a0out\u00a0of\u00a0them\u00a0\n284\nLet\u00a0Us\u00a0Python\nprint(max(random.randint(10,\u00a0100)\u00a0for\u00a0n\u00a0in\u00a0range(20)))\n#\u00a0print\u00a0sum\u00a0of\u00a0cubes\u00a0of\u00a0all\u00a0numbers\u00a0less\u00a0than\u00a020\nprint(sum(n\u00a0* n\u00a0*\u00a0n for\u00a0n in\u00a0range(20)))\u00a0\nx\nList\u00a0 comprehensions\u00a0 are\u00a0 enclosed\u00a0 within\u00a0 [\u00a0 ],\u00a0 set/dictionary\u00a0\ncomprehensions\u00a0 are\u00a0 enclosed\u00a0 within\u00a0 {\u00a0 },\u00a0 whereas\u00a0 generator\u00a0\nexpressions\u00a0are\u00a0enclosed\u00a0within\u00a0(\u00a0).\nx\nSince\u00a0a\u00a0list\u00a0comprehension\u00a0returns\u00a0a\u00a0list,\u00a0it\u00a0consumes\u00a0more\u00a0memory\u00a0\nthan\u00a0 a\u00a0 generator\u00a0 expression.\u00a0 Generator\u00a0 expression\u00a0 takes\u00a0 less\u00a0\nmemory\u00a0since\u00a0it\u00a0generates\u00a0the\u00a0next\u00a0e", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_415", "chunk_strategy": "fixed_size"}}, {"text": "are\u00a0enclosed\u00a0within\u00a0(\u00a0).\nx\nSince\u00a0a\u00a0list\u00a0comprehension\u00a0returns\u00a0a\u00a0list,\u00a0it\u00a0consumes\u00a0more\u00a0memory\u00a0\nthan\u00a0 a\u00a0 generator\u00a0 expression.\u00a0 Generator\u00a0 expression\u00a0 takes\u00a0 less\u00a0\nmemory\u00a0since\u00a0it\u00a0generates\u00a0the\u00a0next\u00a0element\u00a0on\u00a0demand,\u00a0rather\u00a0than\u00a0\ngenerating\u00a0all\u00a0elements\u00a0upfront.\nimport\u00a0sys\nlst\u00a0=\u00a0[i\u00a0*\u00a0i\u00a0for\u00a0i\u00a0in\u00a0range(15)]\ngen\u00a0=\u00a0(i\u00a0*\u00a0i\u00a0for\u00a0i\u00a0in\u00a0range(15))\nprint(lst)\nprint(gen)\nprint(sys.getsizeof(lst))\nprint(sys.getsizeof(gen))\nOn\u00a0execution\u00a0of\u00a0this\u00a0program,\u00a0we\u00a0get\u00a0the\u00a0following\u00a0output:\n[0,\u00a01,\u00a04,\u00a09,\u00a016,\u00a025,\u00a036,\u00a049,\u00a064,\u00a081,\u00a0100,\u00a0121,\u00a0144,\u00a0169,\u00a0196]\n<generator\u00a0object\u00a0<genexpr>\u00a0at\u00a00x003BD570>\n100\n48\nx\nThough\u00a0useful,\u00a0generator\u00a0expressions\u00a0do\u00a0not\u00a0have\u00a0the\u00a0same\u00a0power\u00a0\nof\u00a0a\u00a0full-fledged\u00a0generator\u00a0function.\n____________________________________________________________________\nProblem\u00a021.1\nWrite\u00a0a\u00a0program\u00a0that\u00a0proves\u00a0that\u00a0a\u00a0list\u00a0is\u00a0an\u00a0iterable\u00a0and\u00a0not\u00a0an\u00a0iterator.\nProgram\nlst\u00a0=\u00a0[10, 20,\u00a030,\u00a040,\u00a050]\nprint(dir(lst))\nChapter 21:\u00a0Iterators\u00a0and\u00a0Generators\u00a0\n285\ni\u00a0=\u00a0iter(lst)\nprint(dir(i))\nOutput\n['__add__',\u00a0 '__class__", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_416", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0that\u00a0a\u00a0list\u00a0is\u00a0an\u00a0iterable\u00a0and\u00a0not\u00a0an\u00a0iterator.\nProgram\nlst\u00a0=\u00a0[10, 20,\u00a030,\u00a040,\u00a050]\nprint(dir(lst))\nChapter 21:\u00a0Iterators\u00a0and\u00a0Generators\u00a0\n285\ni\u00a0=\u00a0iter(lst)\nprint(dir(i))\nOutput\n['__add__',\u00a0 '__class__',\u00a0 '__contains__',\u00a0 '__delattr__',\u00a0 '__delitem__',\u00a0\n'__dir__',\u00a0'__doc__',\u00a0'__eq__',\u00a0'__format__',\u00a0'__ge__',\u00a0'__getattribute__',\u00a0\n'__getitem__',\u00a0 '__gt__',\u00a0 '__hash__',\u00a0 '__iadd__',\u00a0 '__imul__',\u00a0 '__init__',\u00a0\n'__init_subclass__',\u00a0 '__iter__',\u00a0 '__le__',\u00a0 '__len__',\u00a0 '__lt__',\u00a0 '__mul__',\u00a0\n'__ne__',\u00a0\n'__new__',\u00a0\n'__reduce__',\u00a0\n'__reduce_ex__',\u00a0\n'__repr__',\u00a0\n'__reversed__',\u00a0 '__rmul__',\u00a0 '__setattr__',\u00a0 '__setitem__',\u00a0 '__sizeof__',\u00a0\n'index',\u00a0'insert',\u00a0'pop',\u00a0'remove',\u00a0'reverse',\u00a0'sort']\n['__class__',\u00a0 '__delattr__',\u00a0 '__dir__',\u00a0 '__doc__',\u00a0 '__eq__',\u00a0 '__format__',\u00a0\n'__ge__',\u00a0\n'__getattribute__',\u00a0\n'__gt__',\u00a0\n'__hash__',\u00a0\n'__init__',\u00a0\n'__init_subclass__',\u00a0 '__iter__',\u00a0 '__le__',\u00a0 '__length_hint__',\u00a0 '__lt__',\u00a0\n'__ne__',\u00a0\n'__new__',\u00a0\n'__next__',\u00a0\n'__reduce__',\u00a0\n'__reduce_ex__',\u00a0\n'__repr__',\u00a0\n", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_417", "chunk_strategy": "fixed_size"}}, {"text": "',\u00a0\n'__gt__',\u00a0\n'__hash__',\u00a0\n'__init__',\u00a0\n'__init_subclass__',\u00a0 '__iter__',\u00a0 '__le__',\u00a0 '__length_hint__',\u00a0 '__lt__',\u00a0\n'__ne__',\u00a0\n'__new__',\u00a0\n'__next__',\u00a0\n'__reduce__',\u00a0\n'__reduce_ex__',\u00a0\n'__repr__',\u00a0\n'__setattr__',\u00a0\n'__setstate__',\u00a0\n'__sizeof__',\u00a0\n'__str__',\u00a0\n'__subclasshook__']\nTips\nx\nlst is\u00a0an\u00a0iterable\u00a0since\u00a0dir(lst)\u00a0shows\u00a0__iter__ but\u00a0no\u00a0__next__.\nx\niter(lst) returns\u00a0an\u00a0iterator\u00a0object,\u00a0which\u00a0is\u00a0collected\u00a0in\u00a0i.\nx\ndir(i) shows\u00a0 __iter__ as\u00a0well\u00a0as\u00a0 __next__.\u00a0 This\u00a0shows\u00a0 that\u00a0it\u00a0is\u00a0 an\u00a0\niterator\u00a0object.\n____________________________________________________________________\nProblem\u00a021.2\nWrite\u00a0a\u00a0 program\u00a0that\u00a0 generates\u00a0prime\u00a0numbers\u00a0 below\u00a03\u00a0million.\u00a0Print\u00a0\nsum\u00a0of\u00a0these\u00a0prime\u00a0numbers.\nProgram\ndef\u00a0generate_primes(\u00a0)\u00a0:\nnum\u00a0=\u00a01\nwhile\u00a0True :\nif\u00a0isprime(num) :\nyield\u00a0num\nnum\u00a0+=\u00a01\u00a0\n286\nLet\u00a0Us\u00a0Python\ndef\u00a0isprime(\u00a0n\u00a0)\u00a0:\nif\u00a0n\u00a0>\u00a01\u00a0:\nif\u00a0n\u00a0==\u00a02\u00a0:\nreturn\u00a0True\nif\u00a0n\u00a0%\u00a02\u00a0==\u00a00\u00a0:\nreturn\u00a0False\nfor\u00a0i in\u00a0range(2, n\u00a0//\u00a02)\u00a0:\nif\u00a0n\u00a0%\u00a0i\u00a0==\u00a00\u00a0:\u00a0\nreturn\u00a0False\nelse\u00a0:\nreturn\u00a0True\nelse\u00a0:\nreturn\u00a0False\ntotal\u00a0=\u00a00\nfor\u00a0nex", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_418", "chunk_strategy": "fixed_size"}}, {"text": "on\ndef\u00a0isprime(\u00a0n\u00a0)\u00a0:\nif\u00a0n\u00a0>\u00a01\u00a0:\nif\u00a0n\u00a0==\u00a02\u00a0:\nreturn\u00a0True\nif\u00a0n\u00a0%\u00a02\u00a0==\u00a00\u00a0:\nreturn\u00a0False\nfor\u00a0i in\u00a0range(2, n\u00a0//\u00a02)\u00a0:\nif\u00a0n\u00a0%\u00a0i\u00a0==\u00a00\u00a0:\u00a0\nreturn\u00a0False\nelse\u00a0:\nreturn\u00a0True\nelse\u00a0:\nreturn\u00a0False\ntotal\u00a0=\u00a00\nfor\u00a0next_prime\u00a0in\u00a0generate_primes(\u00a0) :\nif\u00a0next_prime\u00a0<\u00a0300000\u00a0:\ntotal\u00a0+=\u00a0next_prime\nelse :\nprint(total)\nexit(\u00a0)\nOutput\n3709507114\nTips\nx\nexit(\u00a0) terminates\u00a0the\u00a0execution\u00a0of\u00a0the\u00a0program.\n____________________________________________________________________\nProblem\u00a021.3\nWrite\u00a0 a\u00a0program\u00a0 that\u00a0 uses\u00a0dictionary\u00a0 comprehension\u00a0 to\u00a0print\u00a0 sin,\u00a0cos\u00a0\nand\u00a0tan\u00a0tables\u00a0for\u00a0angles\u00a0ranging\u00a0from\u00a00\u00a0to\u00a0360\u00a0in\u00a0steps\u00a0of\u00a015\u00a0degrees.\u00a0\nWrite\u00a0generator\u00a0expressions to find\u00a0the\u00a0maximum\u00a0value\u00a0of\u00a0sine\u00a0and\u00a0cos.\nProgram\nimport\u00a0math\npi\u00a0=\u00a03.14\nsine_table\u00a0=\u00a0{ang\u00a0:\u00a0math.sin(ang\u00a0*\u00a0pi\u00a0/\u00a0180)\u00a0for\u00a0ang\u00a0in\u00a0range(0,\u00a0360,\u00a090)}\nChapter 21:\u00a0Iterators\u00a0and\u00a0Generators\u00a0\n287\ncos_table\u00a0=\u00a0{ang\u00a0:\u00a0math.cos(ang\u00a0*\u00a0pi\u00a0/\u00a0180)\u00a0for\u00a0ang\u00a0in\u00a0range(0,\u00a0360,\u00a090)}\ntan_table\u00a0=\u00a0{ang\u00a0:\u00a0math.tan(ang\u00a0*\u00a0pi\u00a0/\u00a0180)\u00a0for\u00a0ang\u00a0in\u00a0range(0,\u00a0360,\u00a090)}\nprint(sine_table)\nprint(", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_419", "chunk_strategy": "fixed_size"}}, {"text": "erators\u00a0and\u00a0Generators\u00a0\n287\ncos_table\u00a0=\u00a0{ang\u00a0:\u00a0math.cos(ang\u00a0*\u00a0pi\u00a0/\u00a0180)\u00a0for\u00a0ang\u00a0in\u00a0range(0,\u00a0360,\u00a090)}\ntan_table\u00a0=\u00a0{ang\u00a0:\u00a0math.tan(ang\u00a0*\u00a0pi\u00a0/\u00a0180)\u00a0for\u00a0ang\u00a0in\u00a0range(0,\u00a0360,\u00a090)}\nprint(sine_table)\nprint(cos_table)\nprint(tan_table)\nmaxsin\u00a0=\u00a0max((math.sin(ang\u00a0*\u00a0pi\u00a0/\u00a0180)\u00a0for\u00a0ang\u00a0in\u00a0range(0,\u00a0360,\u00a090)))\nmaxcos\u00a0=\u00a0max((math.cos(ang\u00a0*\u00a0pi\u00a0/\u00a0180)\u00a0for\u00a0ang\u00a0in\u00a0range(0,\u00a0360,\u00a090)))\nprint(maxsin)\nprint(maxcos)\nOutput\n{0:\u00a00.0,\u00a090:\u00a00.9999996829318346,\u00a0180:\u00a00.0015926529164868282,\u00a0270:\u00a0 -\n0.999997146387718}\n{0:\u00a01.0,\u00a090:\u00a00.0007963267107332633,\u00a0180:\u00a0-0.9999987317275395,\u00a0270:\u00a0-\n0.0023889781122815386}\n{0:\u00a0 0.0,\u00a0 90:\u00a0 1255.7655915007897,\u00a0 180:\u00a0 -0.001592654936407223,\u00a0 270:\u00a0\n418.58782265388515}\n0.9999996829318346\n1.0\n____________________________________________________________________\nProblem\u00a021.4\nCreate\u00a0 3\u00a0 lists\u0376a\u00a0 list\u00a0 of\u00a0 names,\u00a0 a\u00a0 list\u00a0 of\u00a0 ages\u00a0 and\u00a0 a\u00a0 list\u00a0 of\u00a0 salaries.\u00a0\nGenerate\u00a0and\u00a0print\u00a0a\u00a0list\u00a0of\u00a0tuples\u00a0containing\u00a0name,\u00a0age\u00a0and\u00a0salary\u00a0from\u00a0\nthe\u00a03\u00a0lists.\u00a0From\u00a0this\u00a0list\u00a0generate\u00a03\u00a0tuples\u0376one\u00a0 containi", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_420", "chunk_strategy": "fixed_size"}}, {"text": " list\u00a0 of\u00a0 names,\u00a0 a\u00a0 list\u00a0 of\u00a0 ages\u00a0 and\u00a0 a\u00a0 list\u00a0 of\u00a0 salaries.\u00a0\nGenerate\u00a0and\u00a0print\u00a0a\u00a0list\u00a0of\u00a0tuples\u00a0containing\u00a0name,\u00a0age\u00a0and\u00a0salary\u00a0from\u00a0\nthe\u00a03\u00a0lists.\u00a0From\u00a0this\u00a0list\u00a0generate\u00a03\u00a0tuples\u0376one\u00a0 containing\u00a0all\u00a0names,\u00a0\nanother\u00a0containing\u00a0all\u00a0ages\u00a0and\u00a0third\u00a0containing\u00a0all\u00a0salaries.\nProgram\nnames\u00a0=\u00a0['Amol',\u00a0'Anil',\u00a0'Akash']\nages\u00a0=\u00a0[25,\u00a023,\u00a027]\nsalaries=\u00a0[34555.50,\u00a040000.00,\u00a0450000.00]\u00a0\n#\u00a0create\u00a0iterator\u00a0of\u00a0tuples\nit\u00a0=\u00a0zip(names,\u00a0ages,\u00a0salaries)\u00a0\n#\u00a0build\u00a0list\u00a0by\u00a0iterating\u00a0the\u00a0iterator\u00a0object\nlst\u00a0=\u00a0list(it)\nprint(lst)\n#\u00a0unzip\u00a0the\u00a0list\u00a0into\u00a0tuples\n288\nLet\u00a0Us\u00a0Python\nn,\u00a0a,\u00a0s\u00a0=\u00a0zip(*lst)\u00a0\nprint(n)\nprint(a)\nprint(s)\nOutput\n[('Amol',\u00a025,\u00a034555.5),\u00a0('Anil',\u00a023,\u00a040000.0),\u00a0('Akash',\u00a027,\u00a0450000.0)]\n('Amol',\u00a0'Anil',\u00a0'Akash')\n(25,\u00a023,\u00a027)\n(34555.5,\u00a040000.0,\u00a0450000.0)\n____________________________________________________________________\nProblem\u00a021.5\nWrite\u00a0a\u00a0program\u00a0to\u00a0obtain\u00a0transpose\u00a0of\u00a0a\u00a03\u00a0x\u00a04\u00a0matrix.\nProgram\nmat\u00a0=\u00a0[[1,\u00a02,\u00a03,\u00a04],\u00a0[5,\u00a06,\u00a07,\u00a08],\u00a0 [9,\u00a010,\u00a011,\u00a012]]\nti\u00a0=\u00a0zip(*mat)\nlst\u00a0=\u00a0[[\u00a0]\u00a0for\u00a0i\u00a0in\u00a0range(4)]", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_421", "chunk_strategy": "fixed_size"}}, {"text": "__________________________\nProblem\u00a021.5\nWrite\u00a0a\u00a0program\u00a0to\u00a0obtain\u00a0transpose\u00a0of\u00a0a\u00a03\u00a0x\u00a04\u00a0matrix.\nProgram\nmat\u00a0=\u00a0[[1,\u00a02,\u00a03,\u00a04],\u00a0[5,\u00a06,\u00a07,\u00a08],\u00a0 [9,\u00a010,\u00a011,\u00a012]]\nti\u00a0=\u00a0zip(*mat)\nlst\u00a0=\u00a0[[\u00a0]\u00a0for\u00a0i\u00a0in\u00a0range(4)]\ni\u00a0=\u00a00\nfor\u00a0t\u00a0in\u00a0ti\u00a0:\nlst[i]\u00a0=\u00a0list(t)\ni\u00a0+=\u00a01\nprint(lst)\nOutput\n[[1,\u00a05,\u00a09],\u00a0[2,\u00a06,\u00a010],\u00a0[3,\u00a07,\u00a011],\u00a0[4,\u00a08,\u00a012]]\nTips\nx\nmat contains\u00a0 a\u00a0 list\u00a0 of\u00a0 lists.\u00a0 These\u00a0 can\u00a0 be\u00a0 accessed\u00a0 using\u00a0 either\u00a0\nmat[0],\u00a0mat[1] and\u00a0mat[2] or\u00a0simply\u00a0*mat.\nx\nzip(*mat) receives\u00a0three\u00a0lists\u00a0and\u00a0returns\u00a0an\u00a0iterator\u00a0of\u00a0tuples,\u00a0each\u00a0\ntuple\u00a0containing\u00a03\u00a0elements.\u00a0\nx\nlst is\u00a0intitialized\u00a0as\u00a0a\u00a0list\u00a0of\u00a04\u00a0empty\u00a0lists.\u00a0\nChapter 21:\u00a0Iterators\u00a0and\u00a0Generators\u00a0\n289\nx\nThe\u00a0iterator\u00a0returned\u00a0by\u00a0zip(\u00a0) is\u00a0iterated\u00a0upon\u00a0and\u00a0a\u00a0list\u00a0is\u00a0generated\u00a0\nusing\u00a0the\u00a0list(\u00a0) function. Each\u00a0generated\u00a0list\u00a0is\u00a0inserted\u00a0in\u00a0the\u00a0list\u00a0of\u00a0\nlists\u00a0at\u00a0an\u00a0appropriate\u00a0index.\n____________________________________________________________________\nProblem\u00a021.6\nWrite\u00a0a\u00a0program\u00a0to\u00a0multiply\u00a0two\u00a0matrices\u00a0x(2\u00a0x\u00a03)\u00a0and\u00a0y(2,\u00a02)\u00a0using\u00a0list\u00a0\ncomprehension.\nProgram\nx\u00a0=\u00a0[", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_422", "chunk_strategy": "fixed_size"}}, {"text": "ropriate\u00a0index.\n____________________________________________________________________\nProblem\u00a021.6\nWrite\u00a0a\u00a0program\u00a0to\u00a0multiply\u00a0two\u00a0matrices\u00a0x(2\u00a0x\u00a03)\u00a0and\u00a0y(2,\u00a02)\u00a0using\u00a0list\u00a0\ncomprehension.\nProgram\nx\u00a0=\u00a0[ [1,\u00a02,\u00a03], 4,\u00a05,\u00a06] ]\ny\u00a0=\u00a0[ [11,\u00a012], [21,\u00a022], [31,\u00a032] ]\nl1\u00a0=\u00a0[xrow\u00a0for\u00a0xrow\u00a0in\u00a0x]\nprint(l1)\u00a0\nl2\u00a0=\u00a0[(xrow,\u00a0ycol)\u00a0for\u00a0ycol\u00a0in\u00a0zip(*y)\u00a0for\u00a0xrow\u00a0in\u00a0x]\nprint(l2)\nl3\u00a0=\u00a0[[sum(a\u00a0*\u00a0b\u00a0for\u00a0a, b\u00a0in\u00a0zip(xrow,ycol))\u00a0for\u00a0ycol\u00a0in\u00a0zip(*y)]for\u00a0xrow\u00a0in\u00a0x]\nprint(l3)\nOutput\n[[1,\u00a02,\u00a03],\u00a0[4,\u00a05,\u00a06]]\n[([1,\u00a02,\u00a03],\u00a0(11,\u00a021,\u00a031)),\u00a0([4,\u00a05,\u00a06],\u00a0(11,\u00a021,\u00a031)),\u00a0([1,\u00a02,\u00a03],\u00a0(12,\u00a022,\u00a032)),\u00a0\n([4,\u00a05,\u00a06],\u00a0(12,\u00a022,\u00a032))]\n[[146,\u00a0152],\u00a0[335,\u00a0350]]\nTips\nx\nTo\u00a0make\u00a0it\u00a0easy\u00a0for\u00a0you\u00a0to\u00a0understand\u00a0the\u00a0list\u00a0comprehension,\u00a0I\u00a0have\u00a0\nbuilt\u00a0it\u00a0in\u00a03\u00a0parts.\u00a0Follow\u00a0them\u00a0by\u00a0checking\u00a0their\u00a0output.\n____________________________________________________________________\nProblem\u00a021.7\nSuppose\u00a0we\u00a0have\u00a0a\u00a0list\u00a0of\u00a05\u00a0integers\u00a0and\u00a0a\u00a0tuple\u00a0of\u00a05\u00a0floats.\u00a0Can\u00a0we\u00a0zip\u00a0\nthem\u00a0and\u00a0obtain\u00a0an\u00a0iterator.\u00a0If\u00a0yes,\u00a0how?\nProgram\nintegers\u00a0=\u00a0[10,\u00a020,\u00a030,\u00a040,\u00a050]\n290\nLet\u00a0Us", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_423", "chunk_strategy": "fixed_size"}}, {"text": "____________________\nProblem\u00a021.7\nSuppose\u00a0we\u00a0have\u00a0a\u00a0list\u00a0of\u00a05\u00a0integers\u00a0and\u00a0a\u00a0tuple\u00a0of\u00a05\u00a0floats.\u00a0Can\u00a0we\u00a0zip\u00a0\nthem\u00a0and\u00a0obtain\u00a0an\u00a0iterator.\u00a0If\u00a0yes,\u00a0how?\nProgram\nintegers\u00a0=\u00a0[10,\u00a020,\u00a030,\u00a040,\u00a050]\n290\nLet\u00a0Us\u00a0Python\nfloats\u00a0=\u00a0(1.1,\u00a02.2,\u00a03.3,\u00a04.4,\u00a05.5)\nti\u00a0=\u00a0zip(integers,\u00a0floats)\nlst\u00a0=\u00a0list(ti)\nfor\u00a0i,\u00a0f\u00a0in\u00a0lst :\nprint(i,\u00a0f)\nOutput\n10\u00a01.1\n20\u00a02.2\n30\u00a03.3\n40\u00a04.4\n50\u00a05.5\nTips\nx\nAny\u00a0type\u00a0of\u00a0iterables\u00a0can\u00a0be\u00a0passed\u00a0to\u00a0a\u00a0zip( ) function.\n____________________________________________________________________\nProblem\u00a021.8\nCreate\u00a0two\u00a0lists\u00a0students and\u00a0marks.\u00a0Create\u00a0a\u00a0dictionary\u00a0from\u00a0these\u00a0two\u00a0\nlists\u00a0using\u00a0dictionary\u00a0comprehension.\u00a0Use\u00a0names\u00a0as\u00a0 keys\u00a0and\u00a0marks\u00a0as\u00a0\nvalues.\nProgram\n#\u00a0lists\u00a0of\u00a0keys\u00a0and\u00a0values\nlstnames\u00a0=\u00a0['Sunil',\u00a0'Sachin',\u00a0'Rahul',\u00a0'Kapil',\u00a0'Rohit']\nlstmarks\u00a0=\u00a0[54,\u00a065,\u00a045,\u00a067,\u00a078]\u00a0\n#\u00a0dictionary\u00a0comprehension\nd\u00a0=\u00a0{k:v\u00a0for\u00a0(k,\u00a0v)\u00a0in\u00a0zip(lstnames,\u00a0lstmarks)}\u00a0\nprint(d)\nOutput\n{'Sunil':\u00a054,\u00a0'Sachin':\u00a065,\u00a0'Rahul':\u00a045,\u00a0'Kapil':\u00a067,\u00a0'Rohit':\u00a078}\n___________________________________________________________", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_424", "chunk_strategy": "fixed_size"}}, {"text": "ehension\nd\u00a0=\u00a0{k:v\u00a0for\u00a0(k,\u00a0v)\u00a0in\u00a0zip(lstnames,\u00a0lstmarks)}\u00a0\nprint(d)\nOutput\n{'Sunil':\u00a054,\u00a0'Sachin':\u00a065,\u00a0'Rahul':\u00a045,\u00a0'Kapil':\u00a067,\u00a0'Rohit':\u00a078}\n____________________________________________________________________\nChapter 21:\u00a0Iterators\u00a0and\u00a0Generators\u00a0\n291\nProblem\u00a021.9\nCreate\u00a0a\u00a0dictionary\u00a0containing\u00a0names\u00a0of\u00a0students\u00a0and\u00a0marks\u00a0obtained\u00a0by\u00a0\nthem\u00a0in\u00a0three\u00a0subjects.\u00a0Write\u00a0a\u00a0program\u00a0to\u00a0print\u00a0these\u00a0names\u00a0in\u00a0tabular\u00a0\nform\u00a0with\u00a0sorted\u00a0names\u00a0as\u00a0columns\u00a0 and\u00a0marks\u00a0in\u00a0three\u00a0subjects\u00a0 listed\u00a0\nbelow\u00a0each\u00a0student\u00a0name\u00a0as\u00a0shown\u00a0below.\nRahul Rakesh Sameer\n67\n59\n58\n76\n70\n86\n39\n81\n78\nProgram\nd\u00a0=\u00a0{'Rahul':[67,76,39],'Sameer':[58,86,78],'Rakesh':[59,70,81]}\nlst\u00a0=\u00a0[(k,\u00a0*v)\u00a0for\u00a0k,\u00a0v\u00a0in\u00a0d.items(\u00a0)]\nprint(lst)\nlst\u00a0=\u00a0[(k,\u00a0*v)\u00a0for\u00a0k,\u00a0v\u00a0in\u00a0sorted(d.items(\u00a0))]\nprint(lst)\nfor\u00a0row\u00a0in\u00a0zip(*lst)\u00a0:\nprint(row)\nfor\u00a0row\u00a0in\u00a0zip(*lst)\u00a0:\nprint(*row,\u00a0sep\u00a0=\u00a0'\\t')\nfor\u00a0row\u00a0in\u00a0zip(*((k,\u00a0*v)\u00a0for\u00a0k,\u00a0v\u00a0in\u00a0sorted(d.items(\u00a0)))):\nprint(*row,\u00a0sep\u00a0=\u00a0'\\t')\nOutput\n[('Rahul',\u00a067,\u00a076,\u00a039),\u00a0('Sameer',\u00a058,\u00a086,\u00a078),\u00a0('Rakesh',\u00a059,\u00a070,\u00a081)]\n[('Rahu", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_425", "chunk_strategy": "fixed_size"}}, {"text": "lst)\u00a0:\nprint(*row,\u00a0sep\u00a0=\u00a0'\\t')\nfor\u00a0row\u00a0in\u00a0zip(*((k,\u00a0*v)\u00a0for\u00a0k,\u00a0v\u00a0in\u00a0sorted(d.items(\u00a0)))):\nprint(*row,\u00a0sep\u00a0=\u00a0'\\t')\nOutput\n[('Rahul',\u00a067,\u00a076,\u00a039),\u00a0('Sameer',\u00a058,\u00a086,\u00a078),\u00a0('Rakesh',\u00a059,\u00a070,\u00a081)]\n[('Rahul',\u00a067,\u00a076,\u00a039),\u00a0('Rakesh',\u00a059,\u00a070,\u00a081),\u00a0('Sameer',\u00a058,\u00a086,\u00a078)]\n('Rahul',\u00a0'Rakesh',\u00a0'Sameer')\n(67,\u00a059,\u00a058)\n(76,\u00a070,\u00a086)\n(39,\u00a081,\u00a078)\nRahul\nRakesh Sameer\n67\n59\n58\n76\n70\n86\n39\n81\n78\nRahul\nRakesh Sameer\n67\n59\n58\n292\nLet\u00a0Us\u00a0Python\n76\n70\n86\n39\n81\n78\nTips\nx\nTry\u00a0to\u00a0understand\u00a0this\u00a0program\u00a0step-by-step:\nlst =\u00a0[(k,\u00a0*v)\u00a0for\u00a0k,\u00a0v\u00a0in\u00a0d.items(\u00a0)]\n*v will\u00a0unpack\u00a0the\u00a0marks\u00a0in\u00a0v.\u00a0So\u00a0a\u00a0tuple\u00a0like\u00a0('Rahul',\u00a067,\u00a076,\u00a039)\u00a0will\u00a0\nbe\u00a0created.\u00a0All\u00a0such\u00a0tuples\u00a0will\u00a0be\u00a0collected\u00a0in\u00a0the\u00a0list\u00a0to\u00a0create:\n[('Rahul',\u00a067,\u00a076,\u00a039),\u00a0('Sameer',\u00a058,\u00a086,\u00a078),\u00a0('Rakesh',\u00a059,\u00a070,\u00a081)]\nx\nTo\u00a0create\u00a0a\u00a0list\u00a0of\u00a0tuples\u00a0sorted\u00a0by\u00a0name\u00a0we\u00a0have\u00a0used\u00a0the\u00a0sorted(\u00a0)\nfunction:\nlst\u00a0=\u00a0[(k,\u00a0*v)\u00a0for\u00a0k,\u00a0v\u00a0in\u00a0sorted(d.items(\u00a0))]\nThis\u00a0will\u00a0create\u00a0the\u00a0list:\n[('Rahul',\u00a067,\u00a076,\u00a039),\u00a0('Rakesh',\u00a059,\u00a070,\u00a081),\u00a0('Sameer',\u00a058,\u00a086,\u00a078)]\nx\nThe\u00a0sorted\u00a0list\u00a0is", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_426", "chunk_strategy": "fixed_size"}}, {"text": "have\u00a0used\u00a0the\u00a0sorted(\u00a0)\nfunction:\nlst\u00a0=\u00a0[(k,\u00a0*v)\u00a0for\u00a0k,\u00a0v\u00a0in\u00a0sorted(d.items(\u00a0))]\nThis\u00a0will\u00a0create\u00a0the\u00a0list:\n[('Rahul',\u00a067,\u00a076,\u00a039),\u00a0('Rakesh',\u00a059,\u00a070,\u00a081),\u00a0('Sameer',\u00a058,\u00a086,\u00a078)]\nx\nThe\u00a0sorted\u00a0list\u00a0is\u00a0then unpacked\u00a0and\u00a0submitted\u00a0to\u00a0the\u00a0zip(\u00a0) function\u00a0\nfor\u00a0row\u00a0in\u00a0zip(*lst)\u00a0:\nprint(row)\nThis\u00a0will\u00a0print\u00a0the\u00a0tuples\n('Rahul',\u00a0'Rakesh',\u00a0'Sameer')\n(67,\u00a059,\u00a058)\n(76,\u00a070,\u00a086)\n(39,\u00a081,\u00a078)\nx\nWe\u00a0 have\u00a0 then\u00a0 unpacked\u00a0 these\u00a0 tuples\u00a0 before\u00a0 printing\u00a0 and\u00a0 added\u00a0\nseparator\u00a0'\\t'\u00a0to\u00a0properly\u00a0align\u00a0the\u00a0values\u00a0being\u00a0printed.\nfor\u00a0row\u00a0in\u00a0zip(*lst)\u00a0:\nprint(*row,\u00a0sep\u00a0=\u00a0'\\t')\nx\nLastly\u00a0we\u00a0have\u00a0combined\u00a0all\u00a0these\u00a0activities\u00a0into\u00a0one\u00a0loop:\nfor\u00a0row\u00a0in\u00a0zip(*((k,\u00a0*v)\u00a0for\u00a0k,\u00a0v\u00a0in\u00a0sorted(d.items(\u00a0)))):\nprint(*row,\u00a0sep\u00a0=\u00a0'\\t')\n____________________________________________________________________\nChapter 21:\u00a0Iterators\u00a0and\u00a0Generators\u00a0\n293\nProblem\u00a021.10\nWrite\u00a0a\u00a0program\u00a0that\u00a0defines\u00a0a\u00a0function\u00a0pascal_triangle(\u00a0) that\u00a0displays\u00a0a\u00a0\nPascal\u00a0Triangle\u00a0of\u00a0level\u00a0received\u00a0as\u00a0parameter\u00a0to\u00a0the\u00a0function.\u00a0A\u00a0Pascal's\u00a0\nTriangle\u00a0of\u00a0leve", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_427", "chunk_strategy": "fixed_size"}}, {"text": "d\u00a0Generators\u00a0\n293\nProblem\u00a021.10\nWrite\u00a0a\u00a0program\u00a0that\u00a0defines\u00a0a\u00a0function\u00a0pascal_triangle(\u00a0) that\u00a0displays\u00a0a\u00a0\nPascal\u00a0Triangle\u00a0of\u00a0level\u00a0received\u00a0as\u00a0parameter\u00a0to\u00a0the\u00a0function.\u00a0A\u00a0Pascal's\u00a0\nTriangle\u00a0of\u00a0level\u00a05\u00a0is\u00a0shown below.\n1\n1\u00a0\n1\u00a0\n1\u00a0\n2\u00a0\n1\n1\u00a0\n3\u00a0\n3\u00a0\n1\u00a0\n1\n4\n6\n4\n1\nProgram\ndef\u00a0pascal_triangle(n) :\nrow\u00a0=\u00a0[1]\nz\u00a0=\u00a0[0]\nfor\u00a0x\u00a0in\u00a0range(n) :\nprint(row)\nrow\u00a0=\u00a0[l\u00a0+\u00a0r\u00a0for\u00a0l, r\u00a0in\u00a0zip(row\u00a0+\u00a0z,\u00a0z\u00a0+\u00a0row)]\npascal_triangle(5)\nOutput\n[1]\n[1,\u00a01]\n[1,\u00a02,\u00a01]\n[1,\u00a03,\u00a03,\u00a01]\n[1,\u00a04,\u00a06,\u00a04,\u00a01]\nTips\nx\nFor n\u00a0=\u00a05, x will\u00a0vary\u00a0from\u00a00\u00a0to\u00a04.\nx\nrow\u00a0+\u00a0z merges\u00a0two\u00a0lists.\nx\nFor\u00a0x\u00a0=\u00a01,\u00a0row\u00a0=\u00a0[1],\u00a0z\u00a0=\u00a0[0],\u00a0so,\u00a0\nzip([1,\u00a00],\u00a0[0,\u00a01])\u00a0gives\u00a0tuples\u00a0(1,\u00a00),\u00a0(0,\u00a01)\nl\u00a0+\u00a0r\u00a0gives\u00a0row\u00a0=\u00a0[\u00a01,\u00a01]\n294\nLet\u00a0Us\u00a0Python\nx\nFor\u00a0x\u00a0=\u00a02,\u00a0row\u00a0=\u00a0[1,\u00a01],\u00a0z\u00a0=\u00a0[0],\u00a0so,\u00a0\nzip([1,\u00a01,\u00a00],\u00a0[0,\u00a01,\u00a01])\u00a0gives\u00a0tuples\u00a0(1,\u00a00),\u00a0(1,\u00a01),\u00a0(0,\u00a01)\nl\u00a0+\u00a0r\u00a0gives\u00a0[\u00a01,\u00a02,\u00a01]\nx\nFor\u00a0x\u00a0=\u00a03,\u00a0row\u00a0=\u00a0[1,\u00a02,\u00a01],\u00a0z\u00a0=\u00a0[0],\u00a0so,\u00a0\nzip([1,\u00a02,\u00a01,\u00a00],\u00a0[0,\u00a01,\u00a02,\u00a01])\u00a0gives\u00a0tuples\u00a0(1,\u00a00),\u00a0(2,\u00a01),\u00a0(1,\u00a02),\u00a0(0,\u00a01)\nl\u00a0+\u00a0r\u00a0gives\u00a0[\u00a01,\u00a03,\u00a03,\u00a01]\nx\nFor\u00a0x\u00a0=\u00a04,\u00a0row\u00a0=\u00a0[1,\u00a03,\u00a03,\u00a01],\u00a0z\u00a0=\u00a0[0],\u00a0so,\u00a0\nzip([1,\u00a03,\u00a03,\u00a01,", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_428", "chunk_strategy": "fixed_size"}}, {"text": "\u00a03,\u00a0row\u00a0=\u00a0[1,\u00a02,\u00a01],\u00a0z\u00a0=\u00a0[0],\u00a0so,\u00a0\nzip([1,\u00a02,\u00a01,\u00a00],\u00a0[0,\u00a01,\u00a02,\u00a01])\u00a0gives\u00a0tuples\u00a0(1,\u00a00),\u00a0(2,\u00a01),\u00a0(1,\u00a02),\u00a0(0,\u00a01)\nl\u00a0+\u00a0r\u00a0gives\u00a0[\u00a01,\u00a03,\u00a03,\u00a01]\nx\nFor\u00a0x\u00a0=\u00a04,\u00a0row\u00a0=\u00a0[1,\u00a03,\u00a03,\u00a01],\u00a0z\u00a0=\u00a0[0],\u00a0so,\u00a0\nzip([1,\u00a03,\u00a03,\u00a01,\u00a00],\u00a0[0,\u00a01,\u00a03,\u00a03,\u00a01])\u00a0gives\u00a0(1,\u00a00),\u00a0(3,\u00a01),\u00a0(3,\u00a03),\u00a0(1,\u00a03),\u00a0(0,\u00a01)\nl\u00a0+\u00a0r\u00a0gives\u00a0[\u00a01,\u00a04,\u00a06,\u00a04,\u00a01]\n____________________________________________________________________\nProblem\u00a021.11\nWrite\u00a0 a\u00a0 program\u00a0 that\u00a0 defines\u00a0 a\u00a0 class\u00a0 called\u00a0 Progression and\u00a0 inherits\u00a0\nthree\u00a0classes\u00a0from\u00a0it\u00a0AP,\u00a0GP and\u00a0FP,\u00a0standing\u00a0for\u00a0Arithmetic\u00a0Progression,\u00a0\nGeometric\u00a0\nProgression\u00a0\nand\u00a0\nFibonacci\u00a0\nProgression\u00a0\nrespectively.\u00a0\nProgression class\u00a0 should\u00a0 act\u00a0 as\u00a0 a\u00a0 user-defined\u00a0 iterator.\u00a0 By\u00a0 default,\u00a0 it\u00a0\nshould\u00a0generate\u00a0integers\u00a0stating\u00a0with\u00a00\u00a0and\u00a0advancing\u00a0in\u00a0steps\u00a0of\u00a01.\u00a0AP,\u00a0\nGP and\u00a0FP should\u00a0make\u00a0use\u00a0of\u00a0the\u00a0iteration\u00a0facility\u00a0of\u00a0Progression class.\u00a0\nThey\u00a0 should\u00a0 appropriately\u00a0 adjust\u00a0 themselves\u00a0 to\u00a0 generate\u00a0 numbers\u00a0 in\u00a0\narithmetic\u00a0progression,\u00a0geometric\u00a0progression\u00a0or\u00a0Fibonacci\u00a0progression.\nProgram\nclass\u00a0Progre", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_429", "chunk_strategy": "fixed_size"}}, {"text": "facility\u00a0of\u00a0Progression class.\u00a0\nThey\u00a0 should\u00a0 appropriately\u00a0 adjust\u00a0 themselves\u00a0 to\u00a0 generate\u00a0 numbers\u00a0 in\u00a0\narithmetic\u00a0progression,\u00a0geometric\u00a0progression\u00a0or\u00a0Fibonacci\u00a0progression.\nProgram\nclass\u00a0Progression\u00a0:\ndef\u00a0__init__\u00a0(self,\u00a0start\u00a0=\u00a00)\u00a0:\nself._cur\u00a0=\u00a0start\ndef\u00a0__iter__\u00a0(self):\nreturn\u00a0self\ndef\u00a0advance(self):\nself._cur\u00a0+=\u00a01\ndef\u00a0__next__\u00a0(self)\u00a0:\nif\u00a0self._cur\u00a0is\u00a0None\u00a0:\u00a0\nraise\u00a0StopIteration\nelse\u00a0:\ndata\u00a0=\u00a0self._cur\u00a0\nself.advance(\u00a0)\u00a0\nChapter 21:\u00a0Iterators\u00a0and\u00a0Generators\u00a0\n295\nreturn\u00a0data\ndef\u00a0display(self,\u00a0n)\u00a0:\nprint('\u00a0 '.join(str(next(self))\u00a0for\u00a0i\u00a0in\u00a0range(n)))\nclass\u00a0AP(Progression)\u00a0:\ndef\u00a0__init__\u00a0(self,\u00a0start\u00a0=\u00a00, step\u00a0=\u00a01)\u00a0:\nsuper(\u00a0).__init__\u00a0(start)\u00a0\nself.__step\u00a0=\u00a0step\ndef\u00a0advance(self)\u00a0:\u00a0\nself._cur\u00a0+=\u00a0self.__step\nclass\u00a0GP(Progression)\u00a0:\u00a0\ndef\u00a0__init__\u00a0(self,\u00a0start\u00a0=\u00a01,\u00a0step\u00a0=\u00a02\u00a0)\u00a0:\nsuper(\u00a0).__init__(start)\nself.__step\u00a0=\u00a0step\ndef\u00a0advance(self)\u00a0:\u00a0\nself._cur\u00a0*=\u00a0self.__step\nclass\u00a0FP(Progression)\u00a0:\ndef\u00a0__init__\u00a0(self,\u00a0first\u00a0=\u00a00,\u00a0second\u00a0=\u00a01)\u00a0:\nsuper(\u00a0).__init__(first)\nself.__prev\u00a0=\u00a0second\u00a0- fi", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_430", "chunk_strategy": "fixed_size"}}, {"text": "__init__(start)\nself.__step\u00a0=\u00a0step\ndef\u00a0advance(self)\u00a0:\u00a0\nself._cur\u00a0*=\u00a0self.__step\nclass\u00a0FP(Progression)\u00a0:\ndef\u00a0__init__\u00a0(self,\u00a0first\u00a0=\u00a00,\u00a0second\u00a0=\u00a01)\u00a0:\nsuper(\u00a0).__init__(first)\nself.__prev\u00a0=\u00a0second\u00a0- first\ndef\u00a0advance(self)\u00a0:\nself.__prev,\u00a0self._cur\u00a0=\u00a0self._cur,\u00a0self.__prev\u00a0+\u00a0self._cur\nprint('Default\u00a0progression:')\np\u00a0=\u00a0Progression(\u00a0)\np.display(10)\nprint('AP\u00a0with\u00a0step\u00a05:')\na\u00a0=\u00a0AP(5)\na.display(10)\nprint('AP\u00a0with\u00a0start\u00a02\u00a0and\u00a0step\u00a04:')\na\u00a0=\u00a0AP(2,\u00a04)\na.display(10)\nprint('GP\u00a0with\u00a0default\u00a0multiple:')\ng\u00a0=\u00a0GP(\u00a0)\ng.display(10)\n296\nLet\u00a0Us\u00a0Python\nprint('GP\u00a0with\u00a0start\u00a01\u00a0and\u00a0multiple\u00a03:')\ng\u00a0=\u00a0GP(1,\u00a03)\ng.display(10)\nprint('FP\u00a0with\u00a0default\u00a0start\u00a0values:')\nf\u00a0=\u00a0FP(\u00a0)\nf.display(10)\nprint('FP\u00a0with\u00a0start\u00a0values\u00a04\u00a0and\u00a06:')\nf\u00a0=\u00a0FP(4,\u00a06)\nf.display(10)\nOutput\nDefault\u00a0progression:\n0\u00a01\u00a02\u00a03\u00a04\u00a05\u00a06\u00a07\u00a08\u00a09\nAP\u00a0with\u00a0step\u00a05:\n5\u00a06\u00a07\u00a08\u00a09\u00a010\u00a011\u00a012\u00a013\u00a014\nAP\u00a0with\u00a0start\u00a02\u00a0and\u00a0step\u00a04:\n2\u00a06\u00a010\u00a014\u00a018\u00a022\u00a026\u00a030\u00a034\u00a038\nGP\u00a0with\u00a0default\u00a0multiple:\n1\u00a02\u00a04\u00a08\u00a016\u00a032\u00a064\u00a0128\u00a0256\u00a0512\nGP\u00a0with\u00a0start\u00a01\u00a0and\u00a0multiple\u00a03:\n1\u00a03\u00a09\u00a027\u00a081\u00a0243\u00a0729\u00a02187\u00a06561\u00a01968", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_431", "chunk_strategy": "fixed_size"}}, {"text": "6\u00a07\u00a08\u00a09\u00a010\u00a011\u00a012\u00a013\u00a014\nAP\u00a0with\u00a0start\u00a02\u00a0and\u00a0step\u00a04:\n2\u00a06\u00a010\u00a014\u00a018\u00a022\u00a026\u00a030\u00a034\u00a038\nGP\u00a0with\u00a0default\u00a0multiple:\n1\u00a02\u00a04\u00a08\u00a016\u00a032\u00a064\u00a0128\u00a0256\u00a0512\nGP\u00a0with\u00a0start\u00a01\u00a0and\u00a0multiple\u00a03:\n1\u00a03\u00a09\u00a027\u00a081\u00a0243\u00a0729\u00a02187\u00a06561\u00a019683\nFP\u00a0with\u00a0default\u00a0start\u00a0values:\n0\u00a01\u00a01\u00a02\u00a03\u00a05\u00a08\u00a013\u00a021\u00a034\nFP\u00a0with\u00a0start\u00a0values\u00a04\u00a0and\u00a06:\n4\u00a06\u00a010\u00a016\u00a026\u00a042\u00a068\u00a0110\u00a0178\u00a0288\nTips\nx\nSince\u00a0Progression is\u00a0an\u00a0iterator\u00a0it\u00a0has\u00a0to\u00a0implement\u00a0__iter__(\u00a0) and\u00a0\n__next__(\u00a0) methods.\u00a0\nx\n__next__(\u00a0) calls\u00a0advance(\u00a0) method\u00a0to\u00a0suitably\u00a0adjust\u00a0 the\u00a0value\u00a0of\u00a0\nself.cur (and\u00a0self.prev in\u00a0case\u00a0of\u00a0FP).\u00a0\nx\nEach\u00a0derived\u00a0class\u00a0has\u00a0an\u00a0advance(\u00a0) method.\u00a0Depending\u00a0on\u00a0which\u00a0\nobject\ue001s\u00a0address\u00a0is\u00a0present\u00a0in\u00a0self\ue002\u00a0that\u00a0object\ue001s\u00a0 advance(\u00a0) method\u00a0\ngets\u00a0called.\u00a0\nx\nThe\u00a0 generation\u00a0 of\u00a0 next\u00a0 data\u00a0 value\u00a0 happens\u00a0 one\u00a0 value\u00a0 at\u00a0 a\u00a0 time,\u00a0\nwhen\u00a0display(\u00a0) method\ue001s\u00a0for loop\u00a0goes\u00a0into\u00a0action.\nx\nThere\u00a0are two\u00a0ways\u00a0to\u00a0create\u00a0an\u00a0object\u00a0and\u00a0call\u00a0display(\u00a0).\u00a0These\u00a0are:\nChapter 21:\u00a0Iterators\u00a0and\u00a0Generators\u00a0\n297\na\u00a0=\u00a0AP(5)\na.display(10)\nor\nAP(5).display(10)\n_______________________________", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_432", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0action.\nx\nThere\u00a0are two\u00a0ways\u00a0to\u00a0create\u00a0an\u00a0object\u00a0and\u00a0call\u00a0display(\u00a0).\u00a0These\u00a0are:\nChapter 21:\u00a0Iterators\u00a0and\u00a0Generators\u00a0\n297\na\u00a0=\u00a0AP(5)\na.display(10)\nor\nAP(5).display(10)\n____________________________________________________________________\n[A] Answer\u00a0the\u00a0following:\n(a) Write\u00a0a\u00a0program\u00a0to\u00a0create\u00a0a\u00a0list\u00a0of\u00a05\u00a0odd\u00a0integers.\u00a0Replace\u00a0the\u00a0third\u00a0\nelement\u00a0with\u00a0a\u00a0list\u00a0of\u00a04\u00a0even\u00a0integers.\u00a0Flatten,\u00a0sort\u00a0and\u00a0print\u00a0the\u00a0list.\n(b) Write\u00a0a\u00a0program\u00a0to\u00a0flatten\u00a0the\u00a0following\u00a0list:\nmat1\u00a0=\u00a0[[1,\u00a02,\u00a03,\u00a04], [5,\u00a06,\u00a07,\u00a08], [9,\u00a010,\u00a011,\u00a012]]\n(c) Write\u00a0a\u00a0program\u00a0to\u00a0generate\u00a0a\u00a0list\u00a0of\u00a0numbers\u00a0in\u00a0the\u00a0range\u00a02\u00a0to\u00a050\u00a0\nthat\u00a0are\u00a0divisible\u00a0by\u00a02\u00a0and\u00a04.\n(d) Suppose\u00a0there\u00a0are\u00a0two\u00a0lists,\u00a0each\u00a0holding\u00a05\u00a0strings.\u00a0Write\u00a0a\u00a0program\u00a0\nto\u00a0generate\u00a0 a\u00a0list\u00a0that\u00a0 consists\u00a0of\u00a0strings\u00a0 that\u00a0are\u00a0concatenated\u00a0 by\u00a0\npicking\u00a0corresponding\u00a0elements\u00a0from\u00a0the\u00a0two\u00a0lists.\n(e) Suppose\u00a0 a\u00a0list\u00a0contains\u00a0 20 integers\u00a0generated\u00a0randomly.\u00a0 Receive\u00a0a\u00a0\nnumber\u00a0from\u00a0the\u00a0keyboard\u00a0and\u00a0report\u00a0position\u00a0of\u00a0all\u00a0occurrences\u00a0of\u00a0\nthis\u00a0number\u00a0in\u00a0the\u00a0list.\n(f) Suppose\u00a0 t", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_433", "chunk_strategy": "fixed_size"}}, {"text": "rom\u00a0the\u00a0two\u00a0lists.\n(e) Suppose\u00a0 a\u00a0list\u00a0contains\u00a0 20 integers\u00a0generated\u00a0randomly.\u00a0 Receive\u00a0a\u00a0\nnumber\u00a0from\u00a0the\u00a0keyboard\u00a0and\u00a0report\u00a0position\u00a0of\u00a0all\u00a0occurrences\u00a0of\u00a0\nthis\u00a0number\u00a0in\u00a0the\u00a0list.\n(f) Suppose\u00a0 there\u00a0 are\u00a0 two\u00a0 lists\u0376one\u00a0 contains\u00a0 questions\u00a0 and\u00a0 another\u00a0\ncontains\u00a0 lists\u00a0 of\u00a0 4\u00a0 possible\u00a0 answers\u00a0 for\u00a0 each\u00a0 question.\u00a0 Write a\u00a0\nprogram\u00a0to\u00a0 generate\u00a0a\u00a0 list\u00a0that\u00a0contains\u00a0 lists\u00a0of\u00a0question\u00a0 and\u00a0its\u00a04\u00a0\npossible\u00a0answers.\n(g) Suppose\u00a0 a\u00a0 list\u00a0has\u00a0 20\u00a0 numbers.\u00a0Write\u00a0 a\u00a0 program\u00a0 that\u00a0 removes\u00a0all\u00a0\nduplicates\u00a0from\u00a0this\u00a0list.\n(h) Write\u00a0 a\u00a0 program\u00a0 to\u00a0 obtain\u00a0 a\u00a0 median\u00a0 value\u00a0 of\u00a0 a\u00a0 list\u00a0 of\u00a0 numbers,\u00a0\nwithout\u00a0disturbing\u00a0the\u00a0order\u00a0of\u00a0the\u00a0numbers\u00a0in\u00a0the\u00a0list.\n(i) A\u00a0list\u00a0contains\u00a0only\u00a0positive\u00a0and\u00a0negative\u00a0integers.\u00a0Write\u00a0a\u00a0program\u00a0\nto\u00a0obtain\u00a0the\u00a0number\u00a0of\u00a0negative\u00a0numbers\u00a0present\u00a0in\u00a0the\u00a0list.\n(j) Write\u00a0a\u00a0program\u00a0to\u00a0convert\u00a0a\u00a0list\u00a0of\u00a0tuples\u00a0\n[(10,\u00a020,\u00a030),\u00a0(150.55,\u00a0145.60,\u00a0157.65),\u00a0('A1',\u00a0'B1',\u00a0'C1')]\n298\nLet\u00a0Us\u00a0Python\ninto\u00a0another list of\u00a0tuples\n[(10,\u00a0150.55,\u00a0'A1'),\u00a0(20,\u00a0145.60,\u00a0'B1')", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_434", "chunk_strategy": "fixed_size"}}, {"text": "ist.\n(j) Write\u00a0a\u00a0program\u00a0to\u00a0convert\u00a0a\u00a0list\u00a0of\u00a0tuples\u00a0\n[(10,\u00a020,\u00a030),\u00a0(150.55,\u00a0145.60,\u00a0157.65),\u00a0('A1',\u00a0'B1',\u00a0'C1')]\n298\nLet\u00a0Us\u00a0Python\ninto\u00a0another list of\u00a0tuples\n[(10,\u00a0150.55,\u00a0'A1'),\u00a0(20,\u00a0145.60,\u00a0'B1'),\u00a0(30,\u00a0157.65,\u00a0'C1')]\n(k) What\u00a0will\u00a0be\u00a0the\u00a0output\u00a0of\u00a0the\u00a0following\u00a0program:\nx\u00a0=\u00a0[[1,\u00a02,\u00a03,\u00a04], [4,\u00a05,\u00a06,\u00a07]]\ny\u00a0=\u00a0[[1,\u00a01],\u00a0[2,\u00a02],\u00a0[3,\u00a03],\u00a0[4,\u00a04]]\nl1\u00a0=\u00a0[xrow\u00a0for xrow\u00a0in\u00a0x]\nprint(l1)\u00a0\nl2\u00a0=\u00a0[(xrow,\u00a0ycol)\u00a0for\u00a0ycol\u00a0in\u00a0zip(*y)\u00a0for\u00a0xrow\u00a0in\u00a0x]\nprint(l2)\n(l) Write\u00a0 a\u00a0 program\u00a0 that\u00a0 uses\u00a0 a\u00a0 generator\u00a0 to\u00a0 create\u00a0 a\u00a0 set\u00a0 of\u00a0 unique\u00a0\nwords\u00a0from\u00a0a\u00a0line\u00a0input\u00a0through\u00a0the\u00a0keyboard.\n(m)Write\u00a0a\u00a0program\u00a0that\u00a0uses\u00a0a\u00a0generator\u00a0to\u00a0find\u00a0out\u00a0maximum\u00a0marks\u00a0\nobtained\u00a0 by\u00a0 a\u00a0 student\u00a0 and\u00a0 his\u00a0 name\u00a0 from\u00a0 tuples\u00a0 of\u00a0 multiple\u00a0\nstudents.\n(n) Write\u00a0 a\u00a0 program\u00a0 that\u00a0 uses\u00a0 a\u00a0 generator\u00a0 that\u00a0 generates\u00a0 characters\u00a0\nfrom\u00a0a\u00a0string\u00a0in\u00a0reverse\u00a0order.\n(o) What\u00a0is\u00a0the\u00a0difference\u00a0between\u00a0the\u00a0following\u00a0statements:\nsum([x**2 for x in range(20)])\nsum(x**2 for x in range(20))\n(p) Suppose\u00a0there\u00a0are\u00a0two\u00a0lists,\u00a0each\u00a0holding\u00a05", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_435", "chunk_strategy": "fixed_size"}}, {"text": "from\u00a0a\u00a0string\u00a0in\u00a0reverse\u00a0order.\n(o) What\u00a0is\u00a0the\u00a0difference\u00a0between\u00a0the\u00a0following\u00a0statements:\nsum([x**2 for x in range(20)])\nsum(x**2 for x in range(20))\n(p) Suppose\u00a0there\u00a0are\u00a0two\u00a0lists,\u00a0each\u00a0holding\u00a05\u00a0strings.\u00a0Write\u00a0a\u00a0program\u00a0\nto\u00a0generate\u00a0 a\u00a0list\u00a0that\u00a0 consists\u00a0of\u00a0strings\u00a0 that\u00a0are\u00a0concatenated\u00a0 by\u00a0\npicking\u00a0corresponding\u00a0elements\u00a0from\u00a0the\u00a0two\u00a0lists.\n(q) 36\u00a0 unique\u00a0combinations\u00a0 can\u00a0result\u00a0from\u00a0use\u00a0of\u00a0 two\u00a0dice.\u00a0Create\u00a0a\u00a0\ndictionary\u00a0which\u00a0stores\u00a0these\u00a0combinations\u00a0as\u00a0tuples.\nLet\u00a0Us\nPython\n299\nException\u00a0\nHandling\nx\nWhat\u00a0may\u00a0go\u00a0Wrong?\nx\nUser-defined\u00a0Exceptions\nx\nSyntax\u00a0Errors\nx\nelse Block\nx\nExceptions\nx\nfinally Block\nx\nHow\u00a0to\u00a0deal\u00a0with\u00a0Exceptions?\nx\nException\u00a0Handling\u00a0Tips\nx\nHow\u00a0to\u00a0use\u00a0try - except?\nx\nPrograms\nx\nNuances\u00a0of\u00a0try and\u00a0except\nx\nExercises\n22\n\u201cExpect\u00a0an\u00a0exception\u00a0and\u00a0prepare\u00a0for\u00a0it\u201d\n300\nLet\u00a0Us\u00a0Python\nWhat\u00a0may\u00a0go\u00a0Wrong?\nx\nWhile\u00a0 creating\u00a0 and\u00a0 executing\u00a0 a\u00a0 Python\u00a0 program\u00a0 things\u00a0 may\u00a0 go\u00a0\nwrong\u00a0 at\u00a0 two different\u00a0 stages\u0376during\u00a0 compilation\u00a0 and\u00a0 during\u00a0\nexecution.\nx\nErrors\u00a0tha", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_436", "chunk_strategy": "fixed_size"}}, {"text": "\n300\nLet\u00a0Us\u00a0Python\nWhat\u00a0may\u00a0go\u00a0Wrong?\nx\nWhile\u00a0 creating\u00a0 and\u00a0 executing\u00a0 a\u00a0 Python\u00a0 program\u00a0 things\u00a0 may\u00a0 go\u00a0\nwrong\u00a0 at\u00a0 two different\u00a0 stages\u0376during\u00a0 compilation\u00a0 and\u00a0 during\u00a0\nexecution.\nx\nErrors\u00a0that\u00a0occur\u00a0during\u00a0compilation\u00a0are\u00a0called\u00a0Syntax Errors.\u00a0Errors\u00a0\nthat\u00a0occur\u00a0during\u00a0execution\u00a0are\u00a0called\u00a0Exceptions.\nSyntax\u00a0Errors\nx\nIf\u00a0things\u00a0go\u00a0wrong\u00a0during\u00a0compilation:\nMeans\u00a0- Something\u00a0in\u00a0the\u00a0program\u00a0is\u00a0not\u00a0as\u00a0per\u00a0language\u00a0grammar\u00a0\nReported\u00a0by\u00a0- Interpreter/Compiler\nAction\u00a0to\u00a0be\u00a0taken\u00a0- Rectify\u00a0program\nx\nExamples\u00a0of\u00a0syntax\u00a0errors:\nprint\u00a0'Hello'\u00a0\n#\u00a0(\u00a0)\u00a0is\u00a0missing\nd\u00a0=\u00a0'Nagpur'\na\u00a0=\u00a0b\u00a0+\u00a0float(d)\u00a0\n#\u00a0d\u00a0is\u00a0a\u00a0string,\u00a0so\u00a0it\u00a0cannot\u00a0be\u00a0converted\u00a0to\u00a0float\na\u00a0=\u00a0Math.pow(3)\u00a0\n#\u00a0pow(\u00a0)\u00a0needs\u00a0two\u00a0arguments\nx\nOther\u00a0common\u00a0syntax\u00a0error\u00a0are:\n-\nLeaving\u00a0out\u00a0a\u00a0symbol,\u00a0such\u00a0as\u00a0a\u00a0colon,\u00a0comma or\u00a0brackets\n-\nMisspelling\u00a0a\u00a0keyword\n-\nIncorrect\u00a0indentation\n-\nEmpty\u00a0if,\u00a0else,\u00a0while,\u00a0for,\u00a0function,\u00a0class,\u00a0method\n-\nMissing\u00a0:\n-\nIncorrect\u00a0number\u00a0of\u00a0positional\u00a0arguments\nx\nSuppose\u00a0we\u00a0try\u00a0to\u00a0compile\u00a0the\u00a0following\u00a0piece\u00a0of\u00a0code:\n", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_437", "chunk_strategy": "fixed_size"}}, {"text": "a\u00a0keyword\n-\nIncorrect\u00a0indentation\n-\nEmpty\u00a0if,\u00a0else,\u00a0while,\u00a0for,\u00a0function,\u00a0class,\u00a0method\n-\nMissing\u00a0:\n-\nIncorrect\u00a0number\u00a0of\u00a0positional\u00a0arguments\nx\nSuppose\u00a0we\u00a0try\u00a0to\u00a0compile\u00a0the\u00a0following\u00a0piece\u00a0of\u00a0code:\nbasic_salary\u00a0=\u00a0int\u00a0(\u00a0input('Enter\u00a0basic\u00a0salary') )\nif\u00a0basic_salary\u00a0<\u00a05000\nprint('Does\u00a0not\u00a0qualify\u00a0for\u00a0Diwali\u00a0bonus')\nWe\u00a0get\u00a0the\u00a0following\u00a0syntax\u00a0error:\nFile\u00a0'c:\\Users\\Kanetkar\\Desktop\\Phone\\src\\phone.py',\u00a0line\u00a02\nif\u00a0basic_salary\u00a0<\u00a05000\nChapter 22:\u00a0Exception\u00a0Handling\u00a0\n301\n^\nSyntaxError:\u00a0invalid\u00a0syntax\nx\n^\u00a0 indicates\u00a0the\u00a0position\u00a0in\u00a0the\u00a0line\u00a0where\u00a0an\u00a0error\u00a0was\u00a0detected.\u00a0It\u00a0\noccurred\u00a0because\u00a0:\u00a0is\u00a0missing\u00a0after\u00a0the\u00a0condition.\nx\nFilename\u00a0and\u00a0line\u00a0number\u00a0are\u00a0also\u00a0displayed\u00a0to\u00a0help\u00a0you\u00a0locate\u00a0the\u00a0\nerroneous\u00a0statement\u00a0easily.\nExceptions\nx\nIf\u00a0things\u00a0go\u00a0wrong\u00a0during\u00a0execution\u00a0(runtime):\u00a0\nMeans\u00a0- Something\u00a0unforeseen\u00a0has\u00a0happened\nReported\u00a0by\u00a0- Python\u00a0Runtime\nAction\u00a0to\u00a0be\u00a0taken\u00a0- Tackle\u00a0it\u00a0on\u00a0the\u00a0fly\nx\nExamples\u00a0of\u00a0Runtime\u00a0errors:\nMemory\u00a0Related\u00a0- Stack/Heap\u00a0overflow,\u00a0Exceeding\u00a0bounds\nArithmetic\u00a0Related", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_438", "chunk_strategy": "fixed_size"}}, {"text": "g\u00a0unforeseen\u00a0has\u00a0happened\nReported\u00a0by\u00a0- Python\u00a0Runtime\nAction\u00a0to\u00a0be\u00a0taken\u00a0- Tackle\u00a0it\u00a0on\u00a0the\u00a0fly\nx\nExamples\u00a0of\u00a0Runtime\u00a0errors:\nMemory\u00a0Related\u00a0- Stack/Heap\u00a0overflow,\u00a0Exceeding\u00a0bounds\nArithmetic\u00a0Related\u00a0- Divide by\u00a0zero\nOthers\u00a0- Attempt\u00a0to\u00a0use\u00a0an\u00a0unassigned\u00a0reference,\u00a0File\u00a0not\u00a0found\nx\nEven\u00a0 if\u00a0the\u00a0program\u00a0is\u00a0grammatically\u00a0correct,\u00a0things\u00a0may\u00a0 go\u00a0wrong\u00a0\nduring\u00a0execution\u00a0causing\u00a0exceptions.\u00a0\na\u00a0=\u00a0int(input('Enter\u00a0an\u00a0integer:\u00a0'))\nb\u00a0=\u00a0int(input('Enter\u00a0an\u00a0integer:\u00a0'))\nc\u00a0=\u00a0a\u00a0/\u00a0b\nIf\u00a0 during\u00a0 execution\u00a0 of\u00a0 this\u00a0 script\u00a0 we\u00a0 give\u00a0 value\u00a0 of\u00a0 b as\u00a0 0,\u00a0 then\u00a0\nfollowing\u00a0message\u00a0gets\u00a0displayed:\nException\u00a0has\u00a0occurred:\u00a0ZeroDivisionError\ndivision\u00a0by\u00a0zero\nFile\u00a0\n'C:\\Users\\Kanetkar\\Desktop\\Phone\\src\\trial.py',\u00a0 line\u00a0 3,\u00a0 in\u00a0\n<module>\u00a0c\u00a0=\u00a0a\u00a0/\u00a0b\u00a0\n#\u00a0blah\u00a0blah...\u00a0rest\u00a0of\u00a0the\u00a0stack\u00a0trace\u00a0showing\u00a0how\u00a0we\u00a0landed\u00a0here\nx\nAnother\u00a0example\u00a0of\u00a0exception:\na,\u00a0b\u00a0=\u00a010,\u00a020\nc\u00a0=\u00a0a\u00a0/\u00a0b\u00a0*\u00a0d\n302\nLet\u00a0Us\u00a0Python\nFile\u00a0 'c:\\Users\\Kanetkar\\Desktop\\Phone\\src\\phone.py',\u00a0 line\u00a0 2,\u00a0 in\u00a0\n<module>\u00a0 c\u00a0=\u00a0a\u00a0/\u00a0b\u00a0*\u00a0d\nNameError:\u00a0name\u00a0'd'\u00a0is\u00a0not\u00a0d", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_439", "chunk_strategy": "fixed_size"}}, {"text": "\nx\nAnother\u00a0example\u00a0of\u00a0exception:\na,\u00a0b\u00a0=\u00a010,\u00a020\nc\u00a0=\u00a0a\u00a0/\u00a0b\u00a0*\u00a0d\n302\nLet\u00a0Us\u00a0Python\nFile\u00a0 'c:\\Users\\Kanetkar\\Desktop\\Phone\\src\\phone.py',\u00a0 line\u00a0 2,\u00a0 in\u00a0\n<module>\u00a0 c\u00a0=\u00a0a\u00a0/\u00a0b\u00a0*\u00a0d\nNameError:\u00a0name\u00a0'd'\u00a0is\u00a0not\u00a0defined\n#\u00a0blah\u00a0blah... rest\u00a0of\u00a0the\u00a0stack\u00a0trace\u00a0showing\u00a0how\u00a0we\u00a0landed\u00a0here\nx\nThe\u00a0stack\u00a0trace\u00a0prints\u00a0the\u00a0names\u00a0of\u00a0the\u00a0files,\u00a0line\u00a0numbers\u00a0starting\u00a0\nfrom\u00a0the\u00a0first\u00a0file\u00a0that\u00a0got\u00a0executed,\u00a0up\u00a0to\u00a0the\u00a0point\u00a0of\u00a0exception.\nx\nThe\u00a0 stack\u00a0 trace\u00a0 is\u00a0 useful\u00a0 for\u00a0 the\u00a0 programmer\u00a0 to\u00a0figure\u00a0 out\u00a0 where\u00a0\nthings\u00a0went\u00a0wrong.\u00a0However,\u00a0a\u00a0user\u00a0is\u00a0likely\u00a0to\u00a0get\u00a0spooked\u00a0looking\u00a0\nat\u00a0it,\u00a0thinking\u00a0something\u00a0is\u00a0very\u00a0wrong.\u00a0So\u00a0we\u00a0should\u00a0try\u00a0and\u00a0tackle\u00a0\nthe\u00a0 exceptions\u00a0 ourselves\u00a0 and\u00a0 provide\u00a0 a\u00a0 graceful\u00a0 exit\u00a0 from\u00a0 the\u00a0\nprogram,\u00a0instead\u00a0of\u00a0printing\u00a0the\u00a0stack\u00a0trace.\nHow to\u00a0deal\u00a0with\u00a0Exceptions?\nx\ntry and\u00a0except blocks\u00a0are\u00a0used\u00a0to\u00a0deal\u00a0with\u00a0an\u00a0exception.\nx\nStatement(s)\u00a0which\u00a0you\u00a0suspect\u00a0may\u00a0go\u00a0wrong\u00a0at\u00a0runtime\u00a0should\u00a0be\u00a0\nenclosed\u00a0within\u00a0a\u00a0try block.\nx\nIf\u00a0while\u00a0executing\u00a0statement(s)\u00a0in\u00a0try block,\u00a0an\u00a0exceptional\u00a0co", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_440", "chunk_strategy": "fixed_size"}}, {"text": "s\u00a0are\u00a0used\u00a0to\u00a0deal\u00a0with\u00a0an\u00a0exception.\nx\nStatement(s)\u00a0which\u00a0you\u00a0suspect\u00a0may\u00a0go\u00a0wrong\u00a0at\u00a0runtime\u00a0should\u00a0be\u00a0\nenclosed\u00a0within\u00a0a\u00a0try block.\nx\nIf\u00a0while\u00a0executing\u00a0statement(s)\u00a0in\u00a0try block,\u00a0an\u00a0exceptional\u00a0condition\u00a0\noccurs\u00a0it\u00a0can\u00a0be\u00a0tackled\u00a0in\u00a0two\u00a0ways:\n(a) Pack\u00a0exception\u00a0information\u00a0in\u00a0an\u00a0object\u00a0and\u00a0raise\u00a0an\u00a0exception.\n(b) Let\u00a0Python\u00a0Runtime\u00a0pack\u00a0exception\u00a0information\u00a0in\u00a0an\u00a0object\u00a0and\u00a0\nraise\u00a0an\u00a0exception.\nIn\u00a0 the\u00a0 examples\u00a0 in\u00a0 previous\u00a0 section\u00a0 Python\u00a0 Runtime\u00a0 raised\u00a0\nexceptions\u00a0ZeroDivisionError and\u00a0NameError.\nRaising\u00a0an\u00a0exception\u00a0is\u00a0same\u00a0as\u00a0throwing\u00a0an\u00a0exception\u00a0in\u00a0C++/Java.\nx\nTwo\u00a0things\u00a0that\u00a0can\u00a0be\u00a0done\u00a0when\u00a0an exception\u00a0is\u00a0raised:\n(a) Catch\u00a0the\u00a0raised\u00a0exception\u00a0object\u00a0in\u00a0except block.\n(b) Raise the\u00a0exception further.\nx\nIf\u00a0 we\u00a0catch\u00a0the\u00a0exception\u00a0object, we\u00a0can\u00a0 either\u00a0perform\u00a0a\u00a0graceful\u00a0\nexit\u00a0or\u00a0rectify\u00a0the\u00a0exceptional\u00a0situation\u00a0and continue execution.\nx\nIf\u00a0we\u00a0raise\u00a0the\u00a0exception\u00a0object\u00a0further\u00a0- Default\u00a0exception\u00a0handler\u00a0\ncatches\u00a0the\u00a0object,\u00a0prints\u00a0stack\u00a0trace\u00a0and terminates.\nx\nThere", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_441", "chunk_strategy": "fixed_size"}}, {"text": "exit\u00a0or\u00a0rectify\u00a0the\u00a0exceptional\u00a0situation\u00a0and continue execution.\nx\nIf\u00a0we\u00a0raise\u00a0the\u00a0exception\u00a0object\u00a0further\u00a0- Default\u00a0exception\u00a0handler\u00a0\ncatches\u00a0the\u00a0object,\u00a0prints\u00a0stack\u00a0trace\u00a0and terminates.\nx\nThere\u00a0are\u00a0two ways\u00a0to\u00a0create\u00a0exception\u00a0objects:\n(a) From\u00a0ready-made\u00a0exception\u00a0classes (like\u00a0ZeroDivisionError)\n(b) From\u00a0user-defined\u00a0exception\u00a0classes\nChapter 22:\u00a0Exception\u00a0Handling\u00a0\n303\nx\nAdvantages of\u00a0tackling\u00a0exceptions\u00a0in\u00a0OO\u00a0manner:\n-\nMore\u00a0information\u00a0can\u00a0be\u00a0packed\u00a0into\u00a0exception\u00a0objects.\n-\nPropagation\u00a0of\u00a0exception\u00a0objects\u00a0from\u00a0the\u00a0point\u00a0where\u00a0they\u00a0are\u00a0\nraised\u00a0to\u00a0the\u00a0point\u00a0where\u00a0they\u00a0are\u00a0tackled\u00a0is\u00a0managed\u00a0by\u00a0Python\u00a0\nRuntime.\nx\nPython\u00a0facilitates\u00a0exception\u00a0handling by\u00a0providing:\n-\nKeywords\u00a0try,\u00a0except,\u00a0else,\u00a0finally,\u00a0raise.\n-\nReadymade\u00a0exception\u00a0classes.\nHow\u00a0to\u00a0use\u00a0try - except?\nx\ntry block\u00a0- Enclose\u00a0 in\u00a0it\u00a0the\u00a0code\u00a0that\u00a0 you\u00a0anticipate\u00a0 will cause\u00a0 an\u00a0\nexception.\nx\nexcept block\u00a0- Catch\u00a0the\u00a0raised exception\u00a0in\u00a0it.\u00a0It\u00a0must\u00a0immediately\u00a0\nfollow\u00a0the\u00a0try block.\ntry\u00a0:\na\u00a0=\u00a0int(input('Enter\u00a0an\u00a0inte", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_442", "chunk_strategy": "fixed_size"}}, {"text": "nclose\u00a0 in\u00a0it\u00a0the\u00a0code\u00a0that\u00a0 you\u00a0anticipate\u00a0 will cause\u00a0 an\u00a0\nexception.\nx\nexcept block\u00a0- Catch\u00a0the\u00a0raised exception\u00a0in\u00a0it.\u00a0It\u00a0must\u00a0immediately\u00a0\nfollow\u00a0the\u00a0try block.\ntry\u00a0:\na\u00a0=\u00a0int(input('Enter\u00a0an\u00a0integer:\u00a0'))\nb\u00a0=\u00a0int(input('Enter\u00a0an\u00a0integer:\u00a0'))\nc\u00a0=\u00a0a\u00a0/\u00a0b\nprint('c\u00a0=',\u00a0c)\nexcept\u00a0ZeroDivisionError :\nprint('Denominator\u00a0is\u00a00')\nGiven\u00a0below\u00a0is\u00a0the\u00a0sample\u00a0interaction\u00a0with\u00a0the\u00a0program:\nEnter\u00a0an\u00a0integer:\u00a010\nEnter\u00a0an\u00a0integer:\u00a00\nDenominator\u00a0is\u00a00\nx\nIf\u00a0no\u00a0exception\u00a0occurs\u00a0while\u00a0executing\u00a0the\u00a0try block,\u00a0control goes\u00a0to\u00a0\nfirst\u00a0line\u00a0beyond\u00a0the\u00a0except block.\nx\nIf\u00a0 an\u00a0exception\u00a0occurs\u00a0during\u00a0execution\u00a0of\u00a0statements\u00a0in\u00a0 try block,\u00a0\nan\u00a0 exception\u00a0is\u00a0raised\u00a0and\u00a0rest\u00a0of\u00a0the\u00a0try block\u00a0is\u00a0 skipped.\u00a0Control\u00a0\nnow\u00a0goes\u00a0to\u00a0the\u00a0except block.\u00a0Here, if\u00a0the\u00a0type\u00a0of\u00a0exception\u00a0raised\u00a0\nmatches\u00a0 the\u00a0 exception\u00a0 named\u00a0 after\u00a0 except keyword,\u00a0 that\u00a0 except\nblock is\u00a0executed.\nx\nIf\u00a0an\u00a0exception\u00a0occurs\u00a0which\u00a0does\u00a0not\u00a0match\u00a0the\u00a0exception\u00a0named\u00a0in\u00a0\nexcept block,\u00a0 then\u00a0 the\u00a0 default exception\u00a0 handler\u00a0 catches\u00a0 the\u00a0\nexception,\u00a0p", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_443", "chunk_strategy": "fixed_size"}}, {"text": " except keyword,\u00a0 that\u00a0 except\nblock is\u00a0executed.\nx\nIf\u00a0an\u00a0exception\u00a0occurs\u00a0which\u00a0does\u00a0not\u00a0match\u00a0the\u00a0exception\u00a0named\u00a0in\u00a0\nexcept block,\u00a0 then\u00a0 the\u00a0 default exception\u00a0 handler\u00a0 catches\u00a0 the\u00a0\nexception,\u00a0prints\u00a0stack\u00a0trace\u00a0and terminates\u00a0execution.\n304\nLet\u00a0Us\u00a0Python\nx\nWhen\u00a0exception\u00a0is\u00a0raised and except block\u00a0is\u00a0executed,\u00a0control\u00a0goes\u00a0\nto\u00a0the\u00a0next\u00a0line\u00a0after\u00a0except block,\u00a0unless\u00a0there\u00a0is\u00a0a\u00a0return or\u00a0raise in\u00a0\nexcept block.\nNuances\u00a0of\u00a0try and\u00a0except\nx\ntry block:\n-\nCan\u00a0be\u00a0nested\u00a0inside\u00a0another\u00a0try block.\n-\nIf\u00a0 an\u00a0exception\u00a0 occurs\u00a0and\u00a0if\u00a0 a\u00a0matching\u00a0 except\u00a0 handler\u00a0 is\u00a0not\u00a0\nfound\u00a0in\u00a0the\u00a0except block,\u00a0then\u00a0the\u00a0outer\u00a0try's\u00a0except handlers\u00a0\nare\u00a0inspected\u00a0for\u00a0a\u00a0match.\nx\nexcept block:\n-\nMultiple\u00a0except blocks\u00a0for\u00a0one\u00a0try block\u00a0are\u00a0ok.\n-\nAt\u00a0a\u00a0time\u00a0only\u00a0one\u00a0except block\u00a0goes\u00a0to\u00a0work.\u00a0\n-\nIf\u00a0same\u00a0action\u00a0is\u00a0to\u00a0be\u00a0taken\u00a0in\u00a0case\u00a0of\u00a0multiple\u00a0exceptions,\u00a0then\u00a0\nthe\u00a0except\u00a0clause\u00a0can\u00a0mention\u00a0these\u00a0exceptions\u00a0in\u00a0a\u00a0tuple\ntry\u00a0:\n#\u00a0some\u00a0statements\nexcept\u00a0(NameError,\u00a0TypeError,\u00a0ZeroDivisionError)\u00a0:\n#\u00a0some\u00a0other\u00a0s", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_444", "chunk_strategy": "fixed_size"}}, {"text": "is\u00a0to\u00a0be\u00a0taken\u00a0in\u00a0case\u00a0of\u00a0multiple\u00a0exceptions,\u00a0then\u00a0\nthe\u00a0except\u00a0clause\u00a0can\u00a0mention\u00a0these\u00a0exceptions\u00a0in\u00a0a\u00a0tuple\ntry\u00a0:\n#\u00a0some\u00a0statements\nexcept\u00a0(NameError,\u00a0TypeError,\u00a0ZeroDivisionError)\u00a0:\n#\u00a0some\u00a0other\u00a0statements\n-\nOrder\u00a0of\u00a0except blocks\u00a0is\u00a0important\u00a0- Derived\u00a0first,\u00a0Base\u00a0last.\n-\nAn\u00a0empty\u00a0except is\u00a0like\u00a0a\u00a0catchall\u0376catches\u00a0all\u00a0exceptions.\n-\nAn\u00a0exception\u00a0may\u00a0be\u00a0re-raised\u00a0from\u00a0any\u00a0except block.\nx\nGiven\u00a0below is\u00a0a\u00a0program\u00a0that\u00a0puts some\u00a0of\u00a0the\u00a0try,\u00a0except nuances\u00a0\nto\u00a0a\u00a0practical\u00a0stint:\ntry\u00a0:\na\u00a0=\u00a0int(input('Enter\u00a0an\u00a0integer:\u00a0'))\nb\u00a0=\u00a0int(input('Enter\u00a0an\u00a0integer:\u00a0'))\nc\u00a0=\u00a0a\u00a0/\u00a0b\nprint('c\u00a0=',\u00a0c)\nexcept\u00a0ZeroDivisionError\u00a0as\u00a0zde\u00a0:\nprint('Denominator\u00a0is\u00a00')\nprint(zde.args)\nprint(zde)\nexcept\u00a0ValueError\u00a0:\nprint('Unable\u00a0to\u00a0convert\u00a0string\u00a0to\u00a0int')\nexcept\u00a0:\nChapter 22:\u00a0Exception\u00a0Handling\u00a0\n305\nprint('Some\u00a0unknown\u00a0error')\nGiven\u00a0below\u00a0is\u00a0the\u00a0sample\u00a0interaction with\u00a0the\u00a0program:\nEnter\u00a0an\u00a0integer:\u00a010\nEnter\u00a0an\u00a0integer:\u00a020\nc\u00a0=\u00a00.5\nEnter\u00a0an\u00a0integer:\u00a010\nEnter\u00a0an\u00a0integer:\u00a00\nDenominator\u00a0is\u00a00\n('division\u00a0by\u00a0zero',)\ndiv", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_445", "chunk_strategy": "fixed_size"}}, {"text": "wn\u00a0error')\nGiven\u00a0below\u00a0is\u00a0the\u00a0sample\u00a0interaction with\u00a0the\u00a0program:\nEnter\u00a0an\u00a0integer:\u00a010\nEnter\u00a0an\u00a0integer:\u00a020\nc\u00a0=\u00a00.5\nEnter\u00a0an\u00a0integer:\u00a010\nEnter\u00a0an\u00a0integer:\u00a00\nDenominator\u00a0is\u00a00\n('division\u00a0by\u00a0zero',)\ndivision\u00a0by\u00a0zero\nEnter\u00a0an\u00a0integer:\u00a010\nEnter\u00a0an\u00a0integer:\u00a0abc\nUnable\u00a0to\u00a0convert\u00a0string\u00a0to\u00a0int\nx\nIf\u00a0an\u00a0exception\u00a0occurs, the\u00a0type\u00a0of\u00a0exception\u00a0raised\u00a0is\u00a0matched with\u00a0\nthe\u00a0exceptions named\u00a0after\u00a0except keyword.\u00a0When\u00a0a\u00a0match\u00a0occurs,\u00a0\nthat\u00a0 except block is\u00a0executed,\u00a0and\u00a0 then\u00a0 execution\u00a0continues\u00a0 after\u00a0\nthe\u00a0last\u00a0except block.\nx\nIf\u00a0 we\u00a0wish\u00a0to\u00a0 do\u00a0something\u00a0more\u00a0before\u00a0doing\u00a0a\u00a0 graceful\u00a0exit,\u00a0we\u00a0\ncan\u00a0use\u00a0the\u00a0keyword\u00a0as to\u00a0receive\u00a0the\u00a0exception\u00a0object.\u00a0We\u00a0can\u00a0then\u00a0\naccess\u00a0its\u00a0argument\u00a0either\u00a0using\u00a0its\u00a0args variable,\u00a0or\u00a0by\u00a0simply\u00a0using\u00a0\nthe\u00a0exception\u00a0object.\nx\nargs refers\u00a0 to\u00a0 arguments\u00a0 that\u00a0 were\u00a0 used\u00a0 while\u00a0 creating\u00a0 the\u00a0\nexception\u00a0object.\nUser-defined\u00a0Exceptions\nx\nSince\u00a0 all\u00a0 exceptional\u00a0 conditions\u00a0 cannot\u00a0 be\u00a0 anticipated,\u00a0 for\u00a0 every\u00a0\nexceptional condition\u00a0there\u00a0cannot\u00a0be\u00a0a\u00a0class\u00a0in\u00a0Python\u00a0l", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_446", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0 while\u00a0 creating\u00a0 the\u00a0\nexception\u00a0object.\nUser-defined\u00a0Exceptions\nx\nSince\u00a0 all\u00a0 exceptional\u00a0 conditions\u00a0 cannot\u00a0 be\u00a0 anticipated,\u00a0 for\u00a0 every\u00a0\nexceptional condition\u00a0there\u00a0cannot\u00a0be\u00a0a\u00a0class\u00a0in\u00a0Python\u00a0library.\nx\nIn\u00a0such\u00a0cases\u00a0we\u00a0can\u00a0define\u00a0our\u00a0own\u00a0exception\u00a0class\u00a0as\u00a0shown\u00a0in\u00a0the\u00a0\nfollowing\u00a0program:\nclass\u00a0InsufficientBalanceError(Exception)\u00a0:\ndef\u00a0__init__(self,\u00a0accno,\u00a0cb)\u00a0:\nself.__accno\u00a0=\u00a0accno\nself.__curbal\u00a0=\u00a0cb\u00a0\n306\nLet\u00a0Us\u00a0Python\ndef\u00a0get_details(self)\u00a0:\nreturn\u00a0{\u00a0'Acc\u00a0no'\u00a0:\u00a0self.__accno,\u00a0\n'Current\u00a0Balance'\u00a0:\u00a0self.__curbal}\nclass\u00a0Customers\u00a0:\ndef\u00a0__init__(self)\u00a0:\nself.__dct\u00a0=\u00a0{\u00a0}\ndef\u00a0append(self,\u00a0accno,\u00a0n,\u00a0bal)\u00a0:\nself.__dct[accno]\u00a0=\u00a0{\u00a0'Name'\u00a0:\u00a0n,\u00a0'Balance'\u00a0:\u00a0bal\u00a0}\ndef\u00a0deposit(self,\u00a0accno,\u00a0amt)\u00a0:\nd\u00a0=\u00a0self.__dct[accno]\nd['Balance']\u00a0=\u00a0d['Balance']\u00a0+\u00a0amt\nself.__dct[accno]\u00a0=\u00a0d\ndef\u00a0display(self)\u00a0:\nfor\u00a0k,\u00a0v\u00a0in\u00a0self.__dct.items(\u00a0)\u00a0:\nprint(k,\u00a0v)\nprint(\u00a0)\ndef\u00a0withdraw(self,\u00a0accno,\u00a0amt)\u00a0:\nd\u00a0=\u00a0self.__dct[accno]\ncurbal\u00a0=\u00a0d['Balance']\nif\u00a0curbal\u00a0- amt\u00a0<\u00a05000\u00a0:\nraise\u00a0InsufficientBalanceError(accno,\u00a0curbal", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_447", "chunk_strategy": "fixed_size"}}, {"text": "or\u00a0k,\u00a0v\u00a0in\u00a0self.__dct.items(\u00a0)\u00a0:\nprint(k,\u00a0v)\nprint(\u00a0)\ndef\u00a0withdraw(self,\u00a0accno,\u00a0amt)\u00a0:\nd\u00a0=\u00a0self.__dct[accno]\ncurbal\u00a0=\u00a0d['Balance']\nif\u00a0curbal\u00a0- amt\u00a0<\u00a05000\u00a0:\nraise\u00a0InsufficientBalanceError(accno,\u00a0curbal)\nelse\u00a0:\nd['Balance']\u00a0=\u00a0d['Balance']\u00a0- amt\nself.__dct[accno]\u00a0=\u00a0d\nc\u00a0=\u00a0Customers(\u00a0)\nc.append(123,\u00a0'Sanjay',\u00a09000)\nc.append(101,\u00a0'Sameer',\u00a08000)\nc.append(423,\u00a0'Ajay',\u00a07000)\nc.append(133,\u00a0'Sanket',\u00a06000)\nc.display(\u00a0)\nc.deposit(123,\u00a01000)\nc.deposit(423,\u00a02000)\nc.display(\u00a0)\ntry\u00a0:\nc.withdraw(423,\u00a03000)\nprint('Amount\u00a0withdrawn\u00a0successfully')\nc.display(\u00a0)\nc.withdraw(101,\u00a05000)\nChapter 22:\u00a0Exception\u00a0Handling\u00a0\n307\nprint('Amount\u00a0withdrawn\u00a0successfully')\nc.display(\u00a0)\nexcept\u00a0InsufficientBalanceError\u00a0as\u00a0ibe\u00a0:\nprint('Withdrawal\u00a0denied')\nprint('Insufficient\u00a0balance')\nprint(ibe.get_details(\u00a0))\nOn\u00a0execution of\u00a0this\u00a0program\u00a0we\u00a0get\u00a0the\u00a0following\u00a0output:\n123\u00a0{'Name':\u00a0'Sanjay',\u00a0'Balance':\u00a09000}\n101\u00a0{'Name':\u00a0'Sameer',\u00a0'Balance':\u00a08000}\n423\u00a0{'Name':\u00a0'Ajay',\u00a0'Balance':\u00a07000}\n133\u00a0{'Name':\u00a0'Sanket',\u00a0'Balance':\u00a06000}\n12", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_448", "chunk_strategy": "fixed_size"}}, {"text": "is\u00a0program\u00a0we\u00a0get\u00a0the\u00a0following\u00a0output:\n123\u00a0{'Name':\u00a0'Sanjay',\u00a0'Balance':\u00a09000}\n101\u00a0{'Name':\u00a0'Sameer',\u00a0'Balance':\u00a08000}\n423\u00a0{'Name':\u00a0'Ajay',\u00a0'Balance':\u00a07000}\n133\u00a0{'Name':\u00a0'Sanket',\u00a0'Balance':\u00a06000}\n123\u00a0{'Name':\u00a0'Sanjay',\u00a0'Balance':\u00a010000}\n101\u00a0{'Name':\u00a0'Sameer',\u00a0'Balance':\u00a08000}\n423\u00a0{'Name':\u00a0'Ajay',\u00a0'Balance':\u00a09000}\n133\u00a0{'Name':\u00a0'Sanket',\u00a0'Balance':\u00a06000}\nAmount\u00a0withdrawn\u00a0successfully\n123\u00a0{'Name':\u00a0'Sanjay',\u00a0'Balance':\u00a010000}\n101\u00a0{'Name':\u00a0'Sameer',\u00a0'Balance':\u00a08000}\n423\u00a0{'Name':\u00a0'Ajay',\u00a0'Balance':\u00a06000}\n133\u00a0{'Name':\u00a0'Sanket',\u00a0'Balance':\u00a06000}\nWithdrawal\u00a0denied\nInsufficient\u00a0balance\n{'Acc\u00a0no':\u00a0101,\u00a0'Current\u00a0Balance':\u00a08000}\nx\nEach\u00a0customer\u00a0 in\u00a0a\u00a0Bank\u00a0has\u00a0data\u00a0like\u00a0account\u00a0number,\u00a0name\u00a0and\u00a0\nbalance\u00a0amount.\u00a0This\u00a0data\u00a0is\u00a0maintained\u00a0in\u00a0nested\u00a0directories.\u00a0\nx\nIf\u00a0during\u00a0withdrawal\u00a0of\u00a0money\u00a0from\u00a0a\u00a0particular\u00a0account\u00a0the\u00a0balance\u00a0\ngoes\u00a0 below\u00a0 Rs.\u00a0 5000,\u00a0 then\u00a0 a\u00a0 user-defined\u00a0 exception\u00a0 called\u00a0\nInsufficientBalanceError is\u00a0raised.\nx\nIn\u00a0the\u00a0matching\u00a0except block,\u00a0details\u00a0of\u00a0the\u00a0withdrawal\u00a0transaction", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_449", "chunk_strategy": "fixed_size"}}, {"text": "icular\u00a0account\u00a0the\u00a0balance\u00a0\ngoes\u00a0 below\u00a0 Rs.\u00a0 5000,\u00a0 then\u00a0 a\u00a0 user-defined\u00a0 exception\u00a0 called\u00a0\nInsufficientBalanceError is\u00a0raised.\nx\nIn\u00a0the\u00a0matching\u00a0except block,\u00a0details\u00a0of\u00a0the\u00a0withdrawal\u00a0transaction\u00a0\nthat\u00a0resulted\u00a0into\u00a0an\u00a0exception\u00a0are\u00a0fetched\u00a0by\u00a0calling\u00a0get_details(\u00a0)\u00a0\nmethod\u00a0present\u00a0in InsufficientBalanceError class\u00a0and\u00a0displayed.\nx\nget_details(\u00a0) returns\u00a0the\u00a0formatted\u00a0data.\u00a0If\u00a0we\u00a0wish\u00a0to\u00a0get\u00a0raw\u00a0data,\u00a0\nthen\u00a0we\u00a0can\u00a0use\u00a0ibe.args variable,\u00a0or\u00a0simply\u00a0ibe.\n308\nLet\u00a0Us\u00a0Python\nprint(ibe.args)\nprint(ibe)\nelse Block\nx\nThe\u00a0try ..\u00a0except statement\u00a0may\u00a0also\u00a0have\u00a0an\u00a0optional\u00a0else block.\nx\nIf\u00a0it is present,\u00a0it\u00a0must\u00a0occur\u00a0after\u00a0all\u00a0the\u00a0except blocks.\nx\nControl\u00a0goes\u00a0to\u00a0else block\u00a0if\u00a0no\u00a0exception\u00a0occurs\u00a0during\u00a0execution\u00a0of\u00a0\nthe\u00a0try block.\nx\nProgram\u00a0given\u00a0below\u00a0shows\u00a0how\u00a0to\u00a0use\u00a0the\u00a0else block.\ntry :\nlst\u00a0=\u00a0[10,\u00a020,\u00a030,\u00a040,\u00a050]\nfor\u00a0num\u00a0in\u00a0lst\u00a0:\ni\u00a0=\u00a0int(num)\nj\u00a0=\u00a0i\u00a0*\u00a0i\nprint(i,\u00a0j)\nexcept\u00a0NameError:\nprint(NameError.args)\nelse:\nprint('Total\u00a0numbers\u00a0processed',\u00a0len(lst))\ndel(lst)\nWe\u00a0get\u00a0the\u00a0following\u00a0outpu", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_450", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0=\u00a0[10,\u00a020,\u00a030,\u00a040,\u00a050]\nfor\u00a0num\u00a0in\u00a0lst\u00a0:\ni\u00a0=\u00a0int(num)\nj\u00a0=\u00a0i\u00a0*\u00a0i\nprint(i,\u00a0j)\nexcept\u00a0NameError:\nprint(NameError.args)\nelse:\nprint('Total\u00a0numbers\u00a0processed',\u00a0len(lst))\ndel(lst)\nWe\u00a0get\u00a0the\u00a0following\u00a0output\u00a0on\u00a0executing\u00a0this\u00a0program:\n10\u00a0100\n20\u00a0400\n30\u00a0900\n40\u00a01600\n50\u00a02500\nTotal\u00a0numbers\u00a0processed\u00a05\nx\nControl\u00a0 goes\u00a0 to\u00a0 else block\u00a0 since\u00a0 no\u00a0 exception\u00a0 occurred\u00a0 while\u00a0\nobtaining\u00a0squares.\nx\nIf\u00a0we\u00a0replace\u00a0one\u00a0of\u00a0the\u00a0elements\u00a0in\u00a0lst to\u00a0'abc',\u00a0then\u00a0a\u00a0NameError\nwill\u00a0 occur\u00a0 which\u00a0 will\u00a0 be\u00a0 caught\u00a0 by\u00a0 except block.\u00a0 In\u00a0 this\u00a0 case\u00a0 else\nblock\u00a0doesn't\u00a0go\u00a0to\u00a0work.\nChapter 22:\u00a0Exception\u00a0Handling\u00a0\n309\nfinally Block\nx\nfinally block\u00a0is\u00a0optional.\nx\nCode\u00a0 in\u00a0 finally always\u00a0 runs,\u00a0no\u00a0 matter\u00a0 what!\u00a0 Even\u00a0 if\u00a0 a\u00a0 return or\u00a0\nbreak occurs\u00a0first.\nx\nfinally block\u00a0is\u00a0placed\u00a0after\u00a0except blocks\u00a0(if\u00a0they\u00a0exist).\nx\ntry block\u00a0must\u00a0have\u00a0except block\u00a0and/or\u00a0finally block.\nx\nfinally block\u00a0is\u00a0commonly\u00a0used\u00a0for\u00a0releasing\u00a0external\u00a0resources\u00a0like\u00a0\nfiles,\u00a0 network\u00a0connections\u00a0or\u00a0database\u00a0connections,\u00a0irrespective\u00a0of\u00a0\nwheth", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_451", "chunk_strategy": "fixed_size"}}, {"text": "y block\u00a0must\u00a0have\u00a0except block\u00a0and/or\u00a0finally block.\nx\nfinally block\u00a0is\u00a0commonly\u00a0used\u00a0for\u00a0releasing\u00a0external\u00a0resources\u00a0like\u00a0\nfiles,\u00a0 network\u00a0connections\u00a0or\u00a0database\u00a0connections,\u00a0irrespective\u00a0of\u00a0\nwhether\u00a0the\u00a0use\u00a0of\u00a0the\u00a0resource\u00a0was\u00a0successful or\u00a0not.\nException Handling Tips\nx\nDon\ue001\u019a\u00a0ca\u019ach\u00a0and ignore\u00a0an\u00a0exception.\nx\nDon't\u00a0catch\u00a0everything\u00a0using\u00a0a\u00a0catchall\u00a0except,\u00a0distinguish\u00a0between\u00a0\ntypes\u00a0of\u00a0exceptions.\nx\nMake\u00a0exception\u00a0handling optimally\u00a0elaborate;\u00a0not\u00a0too\u00a0much,\u00a0not too\u00a0\nlittle.\n____________________________________________________________________\nProblem\u00a022.1\nWrite\u00a0 a\u00a0 program\u00a0 that\u00a0 infinitely\u00a0 receives\u00a0 positive\u00a0 integer\u00a0 as\u00a0 input\u00a0 and\u00a0\nprints\u00a0 its\u00a0 square.\u00a0 If\u00a0 a\u00a0 negative\u00a0 number\u00a0 is\u00a0 entered\u00a0 then\u00a0 raise\u00a0 an\u00a0\nexception,\u00a0display\u00a0a\u00a0relevant\u00a0error\u00a0message\u00a0and\u00a0make\u00a0a\u00a0graceful\u00a0exit.\nProgram\ntry:\nwhile\u00a0True\u00a0:\nnum\u00a0=\u00a0int(input('Enter\u00a0a\u00a0positive\u00a0number:\u00a0'))\nif\u00a0num\u00a0>=\u00a00\u00a0:\nprint(num\u00a0*\u00a0num)\nelse\u00a0:\nraise\u00a0ValueError('Negative\u00a0number')\nexcept\u00a0ValueError\u00a0as\u00a0ve\u00a0:\nprint(ve.args)\n310\nLet\u00a0Us\u00a0Python\nO", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_452", "chunk_strategy": "fixed_size"}}, {"text": "m\ntry:\nwhile\u00a0True\u00a0:\nnum\u00a0=\u00a0int(input('Enter\u00a0a\u00a0positive\u00a0number:\u00a0'))\nif\u00a0num\u00a0>=\u00a00\u00a0:\nprint(num\u00a0*\u00a0num)\nelse\u00a0:\nraise\u00a0ValueError('Negative\u00a0number')\nexcept\u00a0ValueError\u00a0as\u00a0ve\u00a0:\nprint(ve.args)\n310\nLet\u00a0Us\u00a0Python\nOutput\nEnter\u00a0a\u00a0positive\u00a0number:\u00a012\n144\nEnter\u00a0a\u00a0positive\u00a0number:\u00a034\n1156\nEnter\u00a0a\u00a0positive\u00a0number:\u00a045\n2025\nEnter\u00a0a\u00a0positive\u00a0number:\u00a0-9\n('Negative\u00a0number',)\n____________________________________________________________________\nProblem\u00a022.2\nWrite\u00a0a\u00a0program\u00a0that\u00a0implements\u00a0a\u00a0stack\u00a0data\u00a0structure\u00a0of\u00a0specified\u00a0size.\u00a0\nIf\u00a0the\u00a0stack\u00a0becomes\u00a0full\u00a0and\u00a0we\u00a0still\u00a0try\u00a0to\u00a0push\u00a0an\u00a0element\u00a0to\u00a0it,\u00a0then\u00a0\nan\u00a0IndexError exception\u00a0should\u00a0be\u00a0raised.\u00a0Similarly,\u00a0if\u00a0the\u00a0stack\u00a0is\u00a0empty\u00a0\nand\u00a0 we\u00a0 try\u00a0 to pop\u00a0 an\u00a0 element\u00a0 from\u00a0 it\u00a0 then\u00a0 an\u00a0 IndexError exception\u00a0\nshould\u00a0be\u00a0raised.\nProgram\nclass\u00a0Stack\u00a0:\ndef\u00a0__init__(self,\u00a0sz)\u00a0:\nself.size\u00a0=\u00a0sz\u00a0\nself.arr\u00a0=\u00a0[\u00a0]\nself.top\u00a0=\u00a0-1\ndef\u00a0push(self,\u00a0n)\u00a0:\nif\u00a0self.top\u00a0+\u00a01\u00a0==\u00a0self.size\u00a0:\nraise\u00a0IndexError('Stack is\u00a0full')\nelse\u00a0:\nself.top\u00a0+=\u00a01\nself.arr\u00a0=\u00a0self.arr\u00a0+\u00a0[n]\ndef\u00a0pop(self)\u00a0:\nif\u00a0s", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_453", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0:\nself.size\u00a0=\u00a0sz\u00a0\nself.arr\u00a0=\u00a0[\u00a0]\nself.top\u00a0=\u00a0-1\ndef\u00a0push(self,\u00a0n)\u00a0:\nif\u00a0self.top\u00a0+\u00a01\u00a0==\u00a0self.size\u00a0:\nraise\u00a0IndexError('Stack is\u00a0full')\nelse\u00a0:\nself.top\u00a0+=\u00a01\nself.arr\u00a0=\u00a0self.arr\u00a0+\u00a0[n]\ndef\u00a0pop(self)\u00a0:\nif\u00a0self.top\u00a0==\u00a0-1\u00a0:\nraise\u00a0IndexError('Stack\u00a0is\u00a0empty')\nelse\u00a0:\nn\u00a0=\u00a0self.arr[self.top]\u00a0\nself.top\u00a0-=\u00a01\nChapter 22:\u00a0Exception\u00a0Handling\u00a0\n311\nreturn\u00a0n\ndef\u00a0printall(self)\u00a0:\nprint(self.arr)\ns\u00a0=\u00a0Stack(5)\ntry\u00a0:\ns.push(10)\nn\u00a0=\u00a0s.pop(\u00a0)\nprint(n)\nn\u00a0=\u00a0s.pop(\u00a0)\nprint(n)\ns.push(20)\ns.push(30)\ns.push(40)\ns.push(50)\ns.push(60)\ns.printall(\u00a0)\ns.push(70)\nexcept\u00a0IndexError\u00a0as\u00a0ie\u00a0:\nprint(ie.args)\nOutput\n10\n('Stack\u00a0is\u00a0empty',)\nTips\nx\nA\u00a0new\u00a0element is\u00a0added\u00a0to\u00a0the\u00a0stack\u00a0by\u00a0merging\u00a0two\u00a0lists.\nx\nIndexError is\u00a0a\u00a0readymade\u00a0exception\u00a0class.\u00a0Here\u00a0we\u00a0have\u00a0used\u00a0it\u00a0to\u00a0\nraise\u00a0a\u00a0stack\u00a0full\u00a0or\u00a0stack\u00a0empty\u00a0exception.\n____________________________________________________________________\nProblem\u00a022.3\nWrite\u00a0 a\u00a0program\u00a0 that\u00a0 implements\u00a0 a\u00a0 queue\u00a0data\u00a0structure\u00a0 of\u00a0 specified\u00a0\nsize.\u00a0If\u00a0the\u00a0queue\u00a0becomes\u00a0full\u00a0and\u00a0we\u00a0still\u00a0try\u00a0to\u00a0add\u00a0an\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_454", "chunk_strategy": "fixed_size"}}, {"text": "___________________________________________________\nProblem\u00a022.3\nWrite\u00a0 a\u00a0program\u00a0 that\u00a0 implements\u00a0 a\u00a0 queue\u00a0data\u00a0structure\u00a0 of\u00a0 specified\u00a0\nsize.\u00a0If\u00a0the\u00a0queue\u00a0becomes\u00a0full\u00a0and\u00a0we\u00a0still\u00a0try\u00a0to\u00a0add\u00a0an\u00a0element\u00a0to\u00a0it,\u00a0\nthen\u00a0a\u00a0user-defined\u00a0QueueError exception\u00a0should\u00a0be\u00a0raised.\u00a0Similarly,\u00a0if\u00a0\nthe\u00a0 queue\u00a0 is\u00a0 empty\u00a0 and\u00a0 we\u00a0 try\u00a0 to\u00a0 delete\u00a0 an\u00a0 element\u00a0 from\u00a0it\u00a0 then\u00a0 a\u00a0\nQueueError exception\u00a0should\u00a0be\u00a0raised.\n312\nLet\u00a0Us\u00a0Python\nProgram\nclass\u00a0QueueError(Exception)\u00a0:\ndef\u00a0__init__(self,\u00a0msg,\u00a0front,\u00a0rear\u00a0)\u00a0:\nself.errmsg\u00a0=\u00a0msg\u00a0+\u00a0'\u00a0front\u00a0=\u00a0'\u00a0+\u00a0str(front)\u00a0+\u00a0'\u00a0rear\u00a0=\u00a0'\u00a0+\u00a0str(rear)\ndef\u00a0get_message(self)\u00a0:\nreturn\u00a0self.errmsg\u00a0\nclass Queue\u00a0:\ndef\u00a0__init__(self,\u00a0sz)\u00a0:\nself.size\u00a0=\u00a0sz\u00a0\nself.arr\u00a0=\u00a0[\u00a0]\nself.front\u00a0=\u00a0self.rear\u00a0=\u00a0-1\u00a0\ndef\u00a0add_queue(self,\u00a0item)\u00a0:\nif\u00a0self.rear\u00a0==\u00a0self.size\u00a0- 1\u00a0:\nraise\u00a0QueueError('Queue\u00a0is\u00a0full.',\u00a0self.front,\u00a0self.rear)\nelse\u00a0:\nself.rear\u00a0+=\u00a01\nself.arr\u00a0=\u00a0self.arr\u00a0+\u00a0[item]\nif\u00a0self.front\u00a0==\u00a0-1\u00a0:\nself.front\u00a0=\u00a00\ndef\u00a0delete_queue(self)\u00a0:\nif\u00a0self.front\u00a0==\u00a0-1\u00a0:\nraise\u00a0QueueError('Queue\u00a0is\u00a0em", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_455", "chunk_strategy": "fixed_size"}}, {"text": "e\u00a0is\u00a0full.',\u00a0self.front,\u00a0self.rear)\nelse\u00a0:\nself.rear\u00a0+=\u00a01\nself.arr\u00a0=\u00a0self.arr\u00a0+\u00a0[item]\nif\u00a0self.front\u00a0==\u00a0-1\u00a0:\nself.front\u00a0=\u00a00\ndef\u00a0delete_queue(self)\u00a0:\nif\u00a0self.front\u00a0==\u00a0-1\u00a0:\nraise\u00a0QueueError('Queue\u00a0is\u00a0empty.',\u00a0self.front,\u00a0self.rear)\nelse\u00a0:\ndata\u00a0=\u00a0self.arr[self.front]\nif\u00a0(\u00a0self.front\u00a0==\u00a0self.rear\u00a0)\u00a0:\nself.front\u00a0=\u00a0self.rear\u00a0=\u00a0-1\u00a0\nelse\u00a0:\nself.front\u00a0+=\u00a01\nreturn\u00a0data\ndef\u00a0printall(self)\u00a0:\nprint(self.arr)\nq\u00a0=\u00a0Queue(5)\ntry\u00a0:\u00a0\nChapter 22:\u00a0Exception\u00a0Handling\u00a0\n313\nq.add_queue(11)\nq.add_queue(12)\nq.add_queue(13)\nq.add_queue(14)\nq.add_queue(15)\u00a0#\u00a0oops,\u00a0queue\u00a0is\u00a0full\nq.printall(\u00a0)\ni\u00a0=\u00a0q.delete_queue(\u00a0)\nprint('Item\u00a0deleted\u00a0=\u00a0',\u00a0i)\ni\u00a0=\u00a0q.delete_queue(\u00a0)\nprint('Item\u00a0deleted\u00a0=\u00a0',\u00a0i)\ni\u00a0=\u00a0q.delete_queue(\u00a0)\nprint('Item\u00a0deleted\u00a0=\u00a0',\u00a0i)\ni\u00a0=\u00a0q.delete_queue(\u00a0)\nprint('Item\u00a0deleted\u00a0=\u00a0',\u00a0i)\ni\u00a0=\u00a0q.delete_queue(\u00a0)\u00a0\nprint('Item\u00a0deleted\u00a0=\u00a0',\u00a0i)\ni\u00a0=\u00a0q.delete_queue(\u00a0)\u00a0#\u00a0oops,\u00a0queue\u00a0is\u00a0empty\nprint('Item\u00a0deleted\u00a0=\u00a0',\u00a0i)\nexcept\u00a0QueueError as\u00a0qe\u00a0:\nprint(qe.get_message( ))\nOutput\n[11,\u00a012,\u00a013,\u00a014,\u00a015]\nItem\u00a0deleted\u00a0=\u00a0 11\nItem\u00a0de", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_456", "chunk_strategy": "fixed_size"}}, {"text": "'Item\u00a0deleted\u00a0=\u00a0',\u00a0i)\ni\u00a0=\u00a0q.delete_queue(\u00a0)\u00a0#\u00a0oops,\u00a0queue\u00a0is\u00a0empty\nprint('Item\u00a0deleted\u00a0=\u00a0',\u00a0i)\nexcept\u00a0QueueError as\u00a0qe\u00a0:\nprint(qe.get_message( ))\nOutput\n[11,\u00a012,\u00a013,\u00a014,\u00a015]\nItem\u00a0deleted\u00a0=\u00a0 11\nItem\u00a0deleted\u00a0=\u00a0 12\nItem\u00a0deleted\u00a0=\u00a0 13\nItem\u00a0deleted\u00a0=\u00a0 14\nItem\u00a0deleted\u00a0=\u00a0 15\nQueue\u00a0is\u00a0empty.\u00a0front\u00a0=\u00a0-1\u00a0rear\u00a0=\u00a0-1\n____________________________________________________________________\nProblem\u00a022.4\nWrite\u00a0a\u00a0program\u00a0that\u00a0receives\u00a0an\u00a0integer\u00a0as\u00a0input.\u00a0If\u00a0a\u00a0string\u00a0is\u00a0entered\u00a0\ninstead\u00a0of\u00a0an\u00a0integer,\u00a0then\u00a0report\u00a0an\u00a0error and\u00a0give\u00a0another\u00a0chance\u00a0to\u00a0\nuser\u00a0 to\u00a0 enter\u00a0 an\u00a0 integer.\u00a0 Continue\u00a0 this\u00a0 process\u00a0 till\u00a0 correct\u00a0 input\u00a0 is\u00a0\nsupplied.\n314\nLet\u00a0Us\u00a0Python\nProgram\nwhile\u00a0True\u00a0:\ntry\u00a0:\nnum\u00a0=\u00a0int(input('Enter\u00a0a\u00a0number:\u00a0'))\nbreak\nexcept\u00a0ValueError\u00a0:\nprint('Incorrect\u00a0Input')\nprint('You\u00a0entered:\u00a0',\u00a0num)\nOutput\nEnter\u00a0a\u00a0number:\u00a0aa\nIncorrect\u00a0Input\nEnter\u00a0a\u00a0number:\u00a0abc\nIncorrect\u00a0Input\nEnter\u00a0a\u00a0number:\u00a0a\nIncorrect\u00a0Input\nEnter\u00a0a\u00a0number:\u00a023\nYou\u00a0entered:\u00a0 23\n________________________________________________________________", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_457", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0a\u00a0number:\u00a0aa\nIncorrect\u00a0Input\nEnter\u00a0a\u00a0number:\u00a0abc\nIncorrect\u00a0Input\nEnter\u00a0a\u00a0number:\u00a0a\nIncorrect\u00a0Input\nEnter\u00a0a\u00a0number:\u00a023\nYou\u00a0entered:\u00a0 23\n____________________________________________________________________\n[A] State\u00a0whether\u00a0the\u00a0following\u00a0statements\u00a0are\u00a0True\u00a0or\u00a0False:\n(a) The\u00a0exception\u00a0handling\u00a0mechanism\u00a0 is\u00a0supposed\u00a0to\u00a0handle\u00a0compile\u00a0\ntime\u00a0errors.\n(b) It\u00a0 is\u00a0 necessary\u00a0 to\u00a0 declare\u00a0 the\u00a0 exception\u00a0 class\u00a0 within\u00a0 the\u00a0 class\u00a0 in\u00a0\nwhich\u00a0an\u00a0exception\u00a0is\u00a0going\u00a0to\u00a0be\u00a0thrown.\n(c)\nEvery\u00a0raised\u00a0exception\u00a0must\u00a0be\u00a0caught.\n(d) For\u00a0one\u00a0try block\u00a0there\u00a0can\u00a0be\u00a0multiple\u00a0except blocks.\n(e) When\u00a0an\u00a0e\u01c6cep\u019aion\u00a0is\u00a0raised\ue002\u00a0an\u00a0e\u01c6cep\u019aion\u00a0class\ue001s\u00a0cons\u019ar\u01b5c\u019aor\u00a0ge\u019as\u00a0\ncalled.\n(f)\ntry blocks\u00a0cannot\u00a0be\u00a0nested.\nChapter 22:\u00a0Exception\u00a0Handling\u00a0\n315\n(g)\nProper\u00a0destruction\u00a0of\u00a0an\u00a0object\u00a0is\u00a0guaranteed\u00a0by\u00a0exception\u00a0handling\u00a0\nmechanism.\n(h) All\u00a0exceptions\u00a0occur\u00a0at\u00a0runtime.\n(i)\nExceptions\u00a0offer\u00a0an\u00a0object-oriented\u00a0way\u00a0of\u00a0handling\u00a0runtime\u00a0errors.\n(j)\nIf\u00a0 an\u00a0 exception\u00a0 occurs,\u00a0 then\u00a0 the\u00a0 program\u00a0 terminates\u00a0 abruptly\u00a0\nwithout\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_458", "chunk_strategy": "fixed_size"}}, {"text": "chanism.\n(h) All\u00a0exceptions\u00a0occur\u00a0at\u00a0runtime.\n(i)\nExceptions\u00a0offer\u00a0an\u00a0object-oriented\u00a0way\u00a0of\u00a0handling\u00a0runtime\u00a0errors.\n(j)\nIf\u00a0 an\u00a0 exception\u00a0 occurs,\u00a0 then\u00a0 the\u00a0 program\u00a0 terminates\u00a0 abruptly\u00a0\nwithout\u00a0getting\u00a0any\u00a0chance\u00a0to\u00a0recover\u00a0from\u00a0the\u00a0exception.\n(k)\nNo\u00a0matter\u00a0whether\u00a0an\u00a0exception\u00a0occurs\u00a0or\u00a0not,\u00a0the\u00a0statements\u00a0 in\u00a0\nthe\u00a0finally clause\u00a0(if\u00a0present)\u00a0will\u00a0get\u00a0executed.\n(l)\nA\u00a0program\u00a0can\u00a0contain\u00a0multiple\u00a0finally clauses.\n(m) finally clause\u00a0is\u00a0used\u00a0to\u00a0perform\u00a0cleanup\u00a0operations\u00a0like\u00a0closing\u00a0the\u00a0\nnetwork/database\u00a0connections.\n(n) While\u00a0raising\u00a0a\u00a0user-defined\u00a0exception,\u00a0multiple\u00a0values\u00a0can\u00a0be\u00a0set\u00a0in\u00a0\nthe\u00a0exception\u00a0object.\n(o) In\u00a0one\u00a0function/method,\u00a0there\u00a0can\u00a0be\u00a0only\u00a0one\u00a0try block.\n(p) An\u00a0exception\u00a0must\u00a0be\u00a0caught\u00a0in\u00a0the\u00a0same\u00a0function/method\u00a0in\u00a0which\u00a0\nit\u00a0is\u00a0raised.\n(q) All\u00a0values\u00a0set\u00a0up\u00a0in\u00a0the\u00a0exception\u00a0object\u00a0are\u00a0available\u00a0in\u00a0the\u00a0except\u00a0\nblock\u00a0that\u00a0catches\u00a0the\u00a0exception.\n(r)\nIf\u00a0our\u00a0program\u00a0 does\u00a0not\u00a0catch\u00a0an\u00a0exception\u00a0then\u00a0Python Runtime\u00a0\ncatches\u00a0it.\n(s)\nIt\u00a0is\u00a0possible\u00a0to\u00a0create\u00a0user-define", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_459", "chunk_strategy": "fixed_size"}}, {"text": "xception\u00a0object\u00a0are\u00a0available\u00a0in\u00a0the\u00a0except\u00a0\nblock\u00a0that\u00a0catches\u00a0the\u00a0exception.\n(r)\nIf\u00a0our\u00a0program\u00a0 does\u00a0not\u00a0catch\u00a0an\u00a0exception\u00a0then\u00a0Python Runtime\u00a0\ncatches\u00a0it.\n(s)\nIt\u00a0is\u00a0possible\u00a0to\u00a0create\u00a0user-defined\u00a0exceptions.\n(t)\nAll\u00a0types\u00a0of\u00a0exceptions\u00a0can\u00a0be\u00a0caught\u00a0using\u00a0the\u00a0Exception class.\n(u) For\u00a0every try block\u00a0there\u00a0must\u00a0be\u00a0a\u00a0corresponding\u00a0finally block.\n[B] Answer\u00a0the\u00a0following questions:\n(a) If\u00a0 we\u00a0 do\u00a0 not\u00a0 catch\u00a0 the\u00a0 exception\u00a0 thrown\u00a0 at\u00a0 runtime\u00a0 then\u00a0 who\u00a0\ncatches\u00a0it?\n316\nLet\u00a0Us\u00a0Python\n(b) Explain\u00a0 in\u00a0 short\u00a0 most\u00a0 compelling\u00a0 reasons\u00a0 for\u00a0 using\u00a0 exception\u00a0\nhandling\u00a0over\u00a0conventional\u00a0error\u00a0handling\u00a0approaches.\n(c)\nIs\u00a0 it\u00a0 necessary\u00a0 that\u00a0 all\u00a0 classes\u00a0 that\u00a0 can\u00a0 be\u00a0 used\u00a0 to\u00a0 represent\u00a0\nexceptions\u00a0be\u00a0derived\u00a0from\u00a0base\u00a0class\u00a0Exception?\u00a0\n(d) What\u00a0 is\u00a0 the\u00a0 use\u00a0 of\u00a0 a\u00a0 finally block\u00a0 in\u00a0 Python\u00a0 exception\u00a0 handling\u00a0\nmechanism?\n(e) How\u00a0does\u00a0nested\u00a0exception\u00a0handling\u00a0work\u00a0in\u00a0Python?\n(f)\nWrite\u00a0a\u00a0program\u00a0that\u00a0receives\u00a010\u00a0integers\u00a0and\u00a0stores\u00a0them\u00a0and\u00a0their\u00a0\ncubes\u00a0in\u00a0a\u00a0dictionary.\u00a0If\u00a0the\u00a0n", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_460", "chunk_strategy": "fixed_size"}}, {"text": " Python\u00a0 exception\u00a0 handling\u00a0\nmechanism?\n(e) How\u00a0does\u00a0nested\u00a0exception\u00a0handling\u00a0work\u00a0in\u00a0Python?\n(f)\nWrite\u00a0a\u00a0program\u00a0that\u00a0receives\u00a010\u00a0integers\u00a0and\u00a0stores\u00a0them\u00a0and\u00a0their\u00a0\ncubes\u00a0in\u00a0a\u00a0dictionary.\u00a0If\u00a0the\u00a0number\u00a0entered\u00a0is\u00a0less\u00a0than\u00a03,\u00a0raise\u00a0a\u00a0\nuser-defined\u00a0 exception\u00a0 NumberTooSmall,\u00a0 and\u00a0 if\u00a0 the\u00a0 number\u00a0\nentered\u00a0 is\u00a0 more\u00a0 than\u00a0 30,\u00a0 then\u00a0 raise\u00a0 a\u00a0 user-defined\u00a0 exception\u00a0\nNumberTooBig.\u00a0 Whether\u00a0 an\u00a0 exception\u00a0 occurs\u00a0 or\u00a0 not,\u00a0 at\u00a0 the\u00a0 end\u00a0\nprint\u00a0the\u00a0contents\u00a0of\u00a0the\u00a0dictionary.\n(g)\nWhat's\u00a0wrong\u00a0with\u00a0the\u00a0following\u00a0code\u00a0snippet?\ntry\u00a0:\n#\u00a0some\u00a0statements\nexcept\u00a0:\n#\u00a0report\u00a0error\u00a01\nexcept\u00a0ZeroDivisionError\u00a0:\n#\u00a0report\u00a0error\u00a02\n(h) Which\u00a0of\u00a0these\u00a0keywords\u00a0is\u00a0not\u00a0part\u00a0of\u00a0Python's\u00a0exception\u00a0handling\nvocabulary\u0376try,\u00a0catch,\u00a0throw,\u00a0except,\u00a0raise,\u00a0finally,\u00a0else?\n(i)\nWhat\u00a0will\u00a0be\u00a0the\u00a0output\u00a0of\u00a0the\u00a0following\u00a0code?\ndef\u00a0fun( ) :\ntry :\nreturn\u00a010\nfinally :\nreturn\u00a020\nk\u00a0=\u00a0fun( )\nprint(k)\nLet\u00a0Us\nPython\n317\nFile\u00a0Input/Output\nx\nI/O\u00a0System\nx\nSerialization\u00a0and\u00a0Deserialization\nx\nFile\u00a0I/O\nx\nSerialization\u00a0of\u00a0User-de", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_461", "chunk_strategy": "fixed_size"}}, {"text": "ng\u00a0code?\ndef\u00a0fun( ) :\ntry :\nreturn\u00a010\nfinally :\nreturn\u00a020\nk\u00a0=\u00a0fun( )\nprint(k)\nLet\u00a0Us\nPython\n317\nFile\u00a0Input/Output\nx\nI/O\u00a0System\nx\nSerialization\u00a0and\u00a0Deserialization\nx\nFile\u00a0I/O\nx\nSerialization\u00a0of\u00a0User-defined\u00a0Types\nx\nRead\u00a0/\u00a0Write\u00a0Operations\nx\nFile\u00a0and\u00a0Directory\u00a0Operations\nx\nFile\u00a0Opening\u00a0Modes\nx\nPrograms\nx\nwith Keyword\nx\nExercises\nx\nMoving\u00a0within\u00a0a\u00a0File\n23\n\u201cSave\u00a0in\u00a0file,\u00a0or\u00a0perish...\u201d\n318\nLet\u00a0Us\u00a0Python\nI/O\u00a0System\nx\nExpectations from\u00a0an\u00a0I/O\u00a0System:\n-\nIt\u00a0 should\u00a0 allow\u00a0 us\u00a0 to\u00a0 communicate\u00a0 with\u00a0 multiple\u00a0 sources\u00a0 and\u00a0\ndestinations.\nEx.\u00a0Sources\u00a0- Keyboard,\u00a0File,\u00a0Network\nEx.\u00a0Destinations\u00a0- Screen,\u00a0File,\u00a0Network\n-\nIt\u00a0should\u00a0allow\u00a0us\u00a0to\u00a0input/output\u00a0varied\u00a0entities.\u00a0\nEx.\u00a0Numbers,\u00a0Strings,\u00a0Lists,\u00a0Tuples,\u00a0Sets,\u00a0Dictionaries,\u00a0etc.\n-\nIt\u00a0should\u00a0allow\u00a0us\u00a0to\u00a0communicate\u00a0in\u00a0multiple\u00a0ways.\nEx.\u00a0Sequential\u00a0access,\u00a0Random\u00a0access\n-\nIt\u00a0should\u00a0allow\u00a0us\u00a0to\u00a0deal\u00a0with\u00a0underlying\u00a0file\u00a0system.\nEx.\u00a0Create,\u00a0Modify,\u00a0Rename,\u00a0Delete\u00a0files\u00a0and\u00a0directories\nx\nTypes\u00a0of\u00a0data used\u00a0for\u00a0I/O:\nText\u00a0- '485000'\u00a0as\u00a0a\u00a0sequence\u00a0of\u00a0U", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_462", "chunk_strategy": "fixed_size"}}, {"text": "ccess,\u00a0Random\u00a0access\n-\nIt\u00a0should\u00a0allow\u00a0us\u00a0to\u00a0deal\u00a0with\u00a0underlying\u00a0file\u00a0system.\nEx.\u00a0Create,\u00a0Modify,\u00a0Rename,\u00a0Delete\u00a0files\u00a0and\u00a0directories\nx\nTypes\u00a0of\u00a0data used\u00a0for\u00a0I/O:\nText\u00a0- '485000'\u00a0as\u00a0a\u00a0sequence\u00a0of\u00a0Unicode\u00a0characters.\nBinary\u00a0- 485000\u00a0as\u00a0sequence\u00a0of\u00a0bytes\u00a0of\u00a0its\u00a0binary\u00a0equivalent.\nx\nFile\u00a0Types:\nAll\u00a0program\u00a0files\u00a0are\u00a0text\u00a0files.\nAll\u00a0image,\u00a0music,\u00a0video,\u00a0executable\u00a0files\u00a0are\u00a0binary\u00a0files.\nFile\u00a0I/O\nx\nSequence\u00a0of\u00a0operations\u00a0in\u00a0file\u00a0I/O:\n-\nOpen\u00a0a\u00a0file\n-\nRead/Write\u00a0data\u00a0to\u00a0it\n-\nClose\u00a0the\u00a0file\nx\nGiven\u00a0below\u00a0is\u00a0a\u00a0program\u00a0that\u00a0implements\u00a0this\u00a0sequence\u00a0of\u00a0file\u00a0I/O\u00a0\noperations:\n#\u00a0write/read\u00a0text\u00a0data\nmsg1\u00a0=\u00a0'Pay\u00a0taxes\u00a0with\u00a0a\u00a0smile...\\n'\nmsg2\u00a0=\u00a0'I\u00a0tried,\u00a0but\u00a0they\u00a0wanted\u00a0money!\\n'\nmsg3\u00a0=\u00a0'Don\\'t\u00a0feel\u00a0bad...\\n'\nmsg4\u00a0=\u00a0'It\u00a0is\u00a0alright\u00a0to\u00a0have\u00a0no\u00a0talent!\\n'\nf\u00a0=\u00a0open('messages',\u00a0'w')\nf.write(msg1)\nf.write(msg2)\nChapter 23:\u00a0File\u00a0Input/Output\u00a0\n319\nf.write(msg3)\nf.write(msg4)\nf.close(\u00a0)\nf\u00a0=\u00a0open('messages',\u00a0'r')\ndata\u00a0=\u00a0f.read(\u00a0)\nprint(data)\nf.close(\u00a0)\nOn\u00a0executing\u00a0this\u00a0program,\u00a0we\u00a0get\u00a0the\u00a0following\u00a0output:", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_463", "chunk_strategy": "fixed_size"}}, {"text": "sg2)\nChapter 23:\u00a0File\u00a0Input/Output\u00a0\n319\nf.write(msg3)\nf.write(msg4)\nf.close(\u00a0)\nf\u00a0=\u00a0open('messages',\u00a0'r')\ndata\u00a0=\u00a0f.read(\u00a0)\nprint(data)\nf.close(\u00a0)\nOn\u00a0executing\u00a0this\u00a0program,\u00a0we\u00a0get\u00a0the\u00a0following\u00a0output:\nPay\u00a0taxes\u00a0with\u00a0a\u00a0smile...\nI\u00a0tried,\u00a0but\u00a0they\u00a0wanted\u00a0money!\nDon't\u00a0feel\u00a0bad...\nIt\u00a0is\u00a0alright\u00a0to\u00a0have\u00a0no\u00a0talent!\nx\nOpening\u00a0 a\u00a0 file\u00a0 brings\u00a0 its\u00a0 contents\u00a0 to\u00a0 a\u00a0 buffer\u00a0 in\u00a0 memory.\u00a0 While\u00a0\nperforming\u00a0 read/write operations,\u00a0 data\u00a0is\u00a0read\u00a0 from\u00a0or\u00a0 written\u00a0to\u00a0\nbuffer.\nf\u00a0=\u00a0open(filename,\u00a0'r')\u00a0\n#\u00a0opens\u00a0file\u00a0for\u00a0reading\nf\u00a0=\u00a0open(filename,\u00a0'w')\u00a0\n#\u00a0opens\u00a0file\u00a0for\u00a0writing\nf.close(\u00a0)\n#\u00a0closes\u00a0the\u00a0file\u00a0by\u00a0vacating\u00a0the\u00a0buffer\nOnce\u00a0file\u00a0is\u00a0closed\u00a0read/write\u00a0operation\u00a0on\u00a0it\u00a0are\u00a0not\u00a0feasible.\nx\nf.write(msg1) writes\u00a0msg1 string\u00a0to\u00a0the\u00a0file.\nx\ndata\u00a0=\u00a0f.read( ) reads\u00a0all\u00a0the\u00a0lines\u00a0present\u00a0in\u00a0the\u00a0file\u00a0represented\u00a0by\u00a0\nobject\u00a0f into\u00a0data.\nRead\u00a0/\u00a0Write\u00a0Operations\nx\nThere\u00a0are\u00a0two\u00a0functions\u00a0for\u00a0writing\u00a0data\u00a0to\u00a0a\u00a0file:\nmsg =\u00a0'Bad\u00a0officials\u00a0are\u00a0elected\u00a0by\u00a0good\u00a0citizens\u00a0who\u00a0do\u00a0not\u00a0vote.\\n'\nmsgs\u00a0=\u00a0['Humpty\\n',\u00a0'Dump", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_464", "chunk_strategy": "fixed_size"}}, {"text": "ed\u00a0by\u00a0\nobject\u00a0f into\u00a0data.\nRead\u00a0/\u00a0Write\u00a0Operations\nx\nThere\u00a0are\u00a0two\u00a0functions\u00a0for\u00a0writing\u00a0data\u00a0to\u00a0a\u00a0file:\nmsg =\u00a0'Bad\u00a0officials\u00a0are\u00a0elected\u00a0by\u00a0good\u00a0citizens\u00a0who\u00a0do\u00a0not\u00a0vote.\\n'\nmsgs\u00a0=\u00a0['Humpty\\n',\u00a0'Dumpty\\n',\u00a0'Sat\\n',\u00a0'On\\n',\u00a0'a\\n',\u00a0'wall\\n']\nf.write(msg)\nf.writelines(msgs)\nx\nTo\u00a0 write\u00a0 objects\u00a0 other\u00a0 than\u00a0 strings,\u00a0 we\u00a0 need\u00a0 to\u00a0convert\u00a0 them\u00a0 to\u00a0\nstrings\u00a0before\u00a0writing:\ntpl\u00a0=\u00a0('Ajay',\u00a023,\u00a015000)\n320\nLet\u00a0Us\u00a0Python\nlst\u00a0=\u00a0{23,\u00a045,\u00a056,\u00a078,\u00a090}\nd\u00a0=\u00a0{'Name'\u00a0:\u00a0'Dilip',\u00a0'Age'\u00a0:\u00a025}\nf.write(str(tpl))\nf.write(str(lst))\nf.write(str(d))\nx\nThere\u00a0are\u00a0three\u00a0functions\u00a0for\u00a0reading\u00a0data\u00a0from\u00a0a\u00a0file represented\u00a0by\u00a0\nfile\u00a0object\u00a0f.\u00a0\ndata\u00a0=\u00a0f.read(\u00a0)\n#\u00a0reads\u00a0entire\u00a0file\u00a0contents\u00a0and\u00a0returns\u00a0as\u00a0string\ndata\u00a0=\u00a0f.read(n)\n#\u00a0reads\u00a0n\u00a0characters,\u00a0and\u00a0returns\u00a0as\u00a0string\ndata\u00a0=\u00a0f.readline(\u00a0)\n#\u00a0reads\u00a0a\u00a0line,\u00a0and\u00a0returns\u00a0as\u00a0string\nIf\u00a0end\u00a0of\u00a0file\u00a0is\u00a0reached\u00a0f.read(\u00a0) returns\u00a0an\u00a0empty\u00a0string.\nx\nThere\u00a0are\u00a0two\u00a0ways\u00a0to\u00a0read\u00a0a\u00a0file\u00a0line-by-line\u00a0till\u00a0end\u00a0of\u00a0file:\n#\u00a0first\u00a0way\nwhile\u00a0True\u00a0:\ndata\u00a0=\u00a0f.readline( )\nif\u00a0data\u00a0==\u00a0''\u00a0:\nb", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_465", "chunk_strategy": "fixed_size"}}, {"text": "s\u00a0string\nIf\u00a0end\u00a0of\u00a0file\u00a0is\u00a0reached\u00a0f.read(\u00a0) returns\u00a0an\u00a0empty\u00a0string.\nx\nThere\u00a0are\u00a0two\u00a0ways\u00a0to\u00a0read\u00a0a\u00a0file\u00a0line-by-line\u00a0till\u00a0end\u00a0of\u00a0file:\n#\u00a0first\u00a0way\nwhile\u00a0True\u00a0:\ndata\u00a0=\u00a0f.readline( )\nif\u00a0data\u00a0==\u00a0''\u00a0:\nbreak\u00a0\nprint(data,\u00a0end\u00a0='')\n#\u00a0second\u00a0way\nfor\u00a0data\u00a0in\u00a0f\u00a0:\nprint(data,\u00a0end\u00a0='')\nx\nTo\u00a0read\u00a0all\u00a0the\u00a0lines\u00a0in\u00a0a\u00a0file\u00a0and\u00a0form\u00a0a\u00a0list of\u00a0lines:\ndata\u00a0=\u00a0f.readlines(\u00a0)\nFile\u00a0Opening\u00a0Modes\nx\nThere\u00a0are\u00a0multiple\u00a0file-opening\u00a0modes\u00a0available:\n'r'\u00a0- Opens file\u00a0for\u00a0reading\u00a0in\u00a0text\u00a0mode.\n'w'\u00a0- Opens file\u00a0for\u00a0writing\u00a0in\u00a0text\u00a0mode.\n'a'\u00a0- Opens file\u00a0for\u00a0appending\u00a0in\u00a0text\u00a0mode.\n'r+'\u00a0- Opens\u00a0file\u00a0for\u00a0reading\u00a0and\u00a0writing\u00a0in\u00a0text\u00a0mode.\n'w+'\u00a0- Opens\u00a0file\u00a0for\u00a0writing\u00a0and\u00a0reading\u00a0in\u00a0text\u00a0mode.\n'a+'\u00a0- Opens\u00a0file\u00a0for\u00a0appending\u00a0and\u00a0reading\u00a0in\u00a0text\u00a0mode.\nChapter 23:\u00a0File\u00a0Input/Output\u00a0\n321\n'rb'\u00a0- Opens file\u00a0for\u00a0reading\u00a0in\u00a0binary mode.\n'wb'\u00a0- Opens file\u00a0for\u00a0writing\u00a0in\u00a0binary\u00a0mode.\n'ab'\u00a0- Opens file\u00a0for\u00a0appending\u00a0in\u00a0binary\u00a0mode.\n'rb+'\u00a0- Opens\u00a0file\u00a0for\u00a0reading\u00a0and\u00a0writing in\u00a0binary\u00a0mode.\n'wb+'\u00a0- Opens\u00a0file\u00a0for\u00a0writing and\u00a0r", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_466", "chunk_strategy": "fixed_size"}}, {"text": "nary mode.\n'wb'\u00a0- Opens file\u00a0for\u00a0writing\u00a0in\u00a0binary\u00a0mode.\n'ab'\u00a0- Opens file\u00a0for\u00a0appending\u00a0in\u00a0binary\u00a0mode.\n'rb+'\u00a0- Opens\u00a0file\u00a0for\u00a0reading\u00a0and\u00a0writing in\u00a0binary\u00a0mode.\n'wb+'\u00a0- Opens\u00a0file\u00a0for\u00a0writing and\u00a0reading in\u00a0binary\u00a0mode.\n'ab+'\u00a0- Opens\u00a0file\u00a0for\u00a0appending\u00a0and\u00a0reading in\u00a0binary\u00a0mode.\nIf\u00a0 mode\u00a0argument\u00a0is\u00a0not\u00a0mentioned\u00a0while\u00a0opening\u00a0a\u00a0file,\u00a0then\u00a0'r'\u00a0is\u00a0\nassumed.\nx\nWhile\u00a0 opening\u00a0 a\u00a0 file\u00a0 for\u00a0 writing,\u00a0 if\u00a0 the\u00a0 file\u00a0 already\u00a0 exists,\u00a0 it\u00a0 is\u00a0\noverwritten.\nx\nIf\u00a0 file\u00a0is\u00a0opened\u00a0for\u00a0writing\u00a0in\u00a0binary\u00a0mode\u00a0then\u00a0a\u00a0bytes-like\u00a0object\u00a0\nshould\u00a0be\u00a0passed\u00a0to\u00a0write(\u00a0) as\u00a0shown\u00a0below:\nf\u00a0=\u00a0open('a.dat',\u00a0'wb+')\nd\u00a0=\u00a0b'\\xee\\x86\\xaa'\n#\u00a0series\u00a0of\u00a03\u00a0bytes,\u00a0\\x\u00a0indicates\u00a0hexadecimal\nf.write(d)\nwith Keyword\nx\nIt\u00a0is\u00a0a\u00a0good\u00a0idea\u00a0to\u00a0close\u00a0a\u00a0file\u00a0once\u00a0its\u00a0usage\u00a0is\u00a0over,\u00a0as\u00a0it\u00a0will\u00a0free\u00a0up\u00a0\nsystem\u00a0resources.\nx\nIf\u00a0we\u00a0don\u2019t\u00a0close\u00a0a\u00a0file,\u00a0when\u00a0the\u00a0file\u00a0object\u00a0is\u00a0destroyed\u00a0file\u00a0will\u00a0be\u00a0\nclosed\u00a0for\u00a0us by\u00a0Python's\u00a0garbage\u00a0collector\u00a0program.\nx\nIf\u00a0we\u00a0use\u00a0with keyword\u00a0while\u00a0opening\u00a0the\u00a0file,\u00a0the\u00a0file\u00a0gets\u00a0closed\u00a0as\u00a0\nsoon\u00a0a", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_467", "chunk_strategy": "fixed_size"}}, {"text": "on\u2019t\u00a0close\u00a0a\u00a0file,\u00a0when\u00a0the\u00a0file\u00a0object\u00a0is\u00a0destroyed\u00a0file\u00a0will\u00a0be\u00a0\nclosed\u00a0for\u00a0us by\u00a0Python's\u00a0garbage\u00a0collector\u00a0program.\nx\nIf\u00a0we\u00a0use\u00a0with keyword\u00a0while\u00a0opening\u00a0the\u00a0file,\u00a0the\u00a0file\u00a0gets\u00a0closed\u00a0as\u00a0\nsoon\u00a0as\u00a0its\u00a0usage\u00a0is\u00a0over.\nwith\u00a0open('messages',\u00a0'r')\u00a0as\u00a0f\u00a0:\ndata\u00a0=\u00a0f.read(\u00a0)\nx\nwith ensures\u00a0that\u00a0the\u00a0file\u00a0is\u00a0closed\u00a0even\u00a0if\u00a0an\u00a0exception\u00a0occurs\u00a0while\u00a0\nprocessing\u00a0it.\nMoving\u00a0within\u00a0a\u00a0File\nx\nWhen\u00a0we\u00a0are\u00a0reading\u00a0a\u00a0file\u00a0or\u00a0writing\u00a0a\u00a0file,\u00a0the\u00a0next\u00a0read\u00a0or\u00a0write\u00a0\noperation\u00a0 is\u00a0performed\u00a0 from\u00a0the\u00a0next\u00a0 character/byte\u00a0as\u00a0compared\u00a0\nto\u00a0the\u00a0previous\u00a0read/write\u00a0operation.\nx\nThus\u00a0if\u00a0we\u00a0 read\u00a0the\u00a0first\u00a0character\u00a0from\u00a0a\u00a0 file\u00a0using\u00a0f.read(1),\u00a0next\u00a0\ncall\u00a0to\u00a0f.read(1) will\u00a0automatically\u00a0read\u00a0the\u00a0second\u00a0character\u00a0in\u00a0the\u00a0\nfile.\n322\nLet\u00a0Us\u00a0Python\nx\nAt\u00a0times\u00a0we\u00a0may\u00a0 wish\u00a0to\u00a0move\u00a0to\u00a0desired\u00a0 position\u00a0in\u00a0a\u00a0 file\u00a0before\u00a0\nreading/writing.\u00a0This\u00a0can\u00a0be\u00a0done\u00a0using\u00a0f.seek(\u00a0) method.\nx\nGeneral\u00a0form\u00a0of\u00a0seek(\u00a0) is\u00a0given\u00a0below:\nf.seek(offset,\u00a0reference)\u00a0\nreference can\u00a0 take\u00a0 values\u00a0 0,\u00a0 1,\u00a0 2\u00a0 standing\u00a0 for\u00a0 beginning\u00a0 of\u00a0 f", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_468", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0\nreading/writing.\u00a0This\u00a0can\u00a0be\u00a0done\u00a0using\u00a0f.seek(\u00a0) method.\nx\nGeneral\u00a0form\u00a0of\u00a0seek(\u00a0) is\u00a0given\u00a0below:\nf.seek(offset,\u00a0reference)\u00a0\nreference can\u00a0 take\u00a0 values\u00a0 0,\u00a0 1,\u00a0 2\u00a0 standing\u00a0 for\u00a0 beginning\u00a0 of\u00a0 file,\u00a0\ncurrent\u00a0position\u00a0in\u00a0file\u00a0and\u00a0end\u00a0of\u00a0file\u00a0respectively.\nx\nFor\u00a0file\u00a0opened\u00a0in\u00a0text\u00a0mode,\u00a0reference\u00a0values\u00a00\u00a0and\u00a02\u00a0alone\u00a0can\u00a0be\u00a0\nused.\u00a0Also,\u00a0using 2,\u00a0we\u00a0can\u00a0only\u00a0move\u00a0to\u00a0end\u00a0of\u00a0file.\nf.seek(512,\u00a00)\n#\u00a0moves\u00a0to\u00a0position\u00a0512\u00a0from\u00a0beginning\u00a0of\u00a0file\nf.seek(0,\u00a02)\n#\u00a0moves\u00a0to\u00a0end\u00a0of\u00a0file\nx\nFor\u00a0file\u00a0opened\u00a0in\u00a0binary\u00a0mode,\u00a0reference\u00a0values\u00a00,\u00a01,\u00a02\u00a0can\u00a0be\u00a0used.\nf.seek(0)\n#\u00a0moves\u00a0to\u00a0beginning\u00a0of\u00a0file\nf.seek(12,\u00a00)\n#\u00a0moves\u00a0to\u00a0position\u00a012\u00a0from\u00a0beginning\u00a0of\u00a0file\nf.seek(-15,\u00a02)\n#\u00a0moves\u00a015\u00a0positions\u00a0to\u00a0left\u00a0from\u00a0end\u00a0of\u00a0file\nf.seek(6,\u00a01)\n#\u00a0moves\u00a06\u00a0positions\u00a0to\u00a0right\u00a0from\u00a0current\u00a0position\nf.seek(-10,\u00a01)\n#\u00a0moves\u00a010\u00a0positions\u00a0to\u00a0left\u00a0from\u00a0current position\nSerialization\u00a0and\u00a0Deserialization\nx\nCompared\u00a0 to\u00a0 strings,\u00a0 reading/writing\u00a0 numbers\u00a0 from/to\u00a0 a\u00a0 file\u00a0 is\u00a0\ntedious.\u00a0This\u00a0is\u00a0because\u00a0write(\u00a0) writes\u00a0a\u00a0str", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_469", "chunk_strategy": "fixed_size"}}, {"text": "es\u00a010\u00a0positions\u00a0to\u00a0left\u00a0from\u00a0current position\nSerialization\u00a0and\u00a0Deserialization\nx\nCompared\u00a0 to\u00a0 strings,\u00a0 reading/writing\u00a0 numbers\u00a0 from/to\u00a0 a\u00a0 file\u00a0 is\u00a0\ntedious.\u00a0This\u00a0is\u00a0because\u00a0write(\u00a0) writes\u00a0a\u00a0string\u00a0to\u00a0a\u00a0file\u00a0and\u00a0read(\u00a0)\u00a0\nreturns\u00a0a\u00a0string\u00a0read\u00a0from\u00a0a\u00a0file.\u00a0So\u00a0we\u00a0need\u00a0to\u00a0do\u00a0conversions\u00a0while\u00a0\nreading/writing,\u00a0as\u00a0shown\u00a0in\u00a0the\u00a0following\u00a0program:\nf\u00a0=\u00a0open('numberstxt',\u00a0'w+')\nf.write(str(233)+'\\n')\nf.write(str(13.45))\nf.seek(0)\na\u00a0=\u00a0int(f.readline(\u00a0))\nb\u00a0=\u00a0float(f.readline(\u00a0))\nprint(a\u00a0+\u00a0a)\nprint(b\u00a0+\u00a0b)\nx\nIf\u00a0we\u00a0are\u00a0to\u00a0read/write\u00a0more\u00a0complicated\u00a0data\u00a0in\u00a0the form\u00a0of\u00a0tuple,\u00a0\ndictionaries,\u00a0etc.\u00a0from/to\u00a0file\u00a0using\u00a0the\u00a0above\u00a0method,\u00a0it\u00a0will\u00a0become\u00a0\nmore\u00a0difficult.\u00a0In\u00a0such\u00a0cases\u00a0a\u00a0module\u00a0called\u00a0json should\u00a0be\u00a0used.\nChapter 23:\u00a0File\u00a0Input/Output\u00a0\n323\nx\njson module\u00a0 converts\u00a0 Python\u00a0 data\u00a0 into\u00a0 appropriate\u00a0 JSON\u00a0 types\u00a0\nbefore\u00a0 writing\u00a0data\u00a0to\u00a0a\u00a0file.\u00a0Likewise,\u00a0 it\u00a0converts\u00a0JSON\u00a0 types\u00a0read\u00a0\nfrom\u00a0a\u00a0file\u00a0into\u00a0Python\u00a0data.\u00a0The\u00a0first\u00a0process\u00a0is\u00a0called\u00a0 serialization\nand\u00a0the\u00a0second\u00a0is\u00a0called\u00a0deseria", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_470", "chunk_strategy": "fixed_size"}}, {"text": "opriate\u00a0 JSON\u00a0 types\u00a0\nbefore\u00a0 writing\u00a0data\u00a0to\u00a0a\u00a0file.\u00a0Likewise,\u00a0 it\u00a0converts\u00a0JSON\u00a0 types\u00a0read\u00a0\nfrom\u00a0a\u00a0file\u00a0into\u00a0Python\u00a0data.\u00a0The\u00a0first\u00a0process\u00a0is\u00a0called\u00a0 serialization\nand\u00a0the\u00a0second\u00a0is\u00a0called\u00a0deserialization.\n#\u00a0serialize/deserialize\u00a0a\u00a0list\nimport\u00a0json\nf\u00a0=\u00a0open('sampledata',\u00a0'w+')\nlst\u00a0=\u00a0[10,\u00a020,\u00a030,\u00a040,\u00a050,\u00a060,\u00a070,\u00a080,\u00a090]\njson.dump(lst,\u00a0f)\nf.seek(0)\ninlst\u00a0=\u00a0json.load(f)\nprint(inlst)\nf.close(\u00a0)\n#\u00a0serialize/deserialize\u00a0a\u00a0tuple\nimport\u00a0json\nf\u00a0=\u00a0open('sampledata',\u00a0'w+')\ntpl\u00a0=\u00a0('Ajay',\u00a023,\u00a02455.55)\njson.dump(tpl,\u00a0f)\nf.seek(0)\nintpl\u00a0=\u00a0json.load(f)\nprint(tuple(intpl))\nf.close(\u00a0)\n#\u00a0serialize/deserialize\u00a0a\u00a0dictionary\nimport\u00a0json\nf\u00a0=\u00a0open('sampledata',\u00a0'w+')\ndct\u00a0=\u00a0{\u00a0'Anil'\u00a0:\u00a024,\u00a0'Ajay'\u00a0:\u00a023,\u00a0'Nisha'\u00a0:\u00a022}\njson.dump(dct,\u00a0f)\nf.seek(0)\nindct\u00a0=\u00a0json.load(f)\nprint(indct)\nf.close(\u00a0)\nx\nSerialization\u00a0of\u00a0a\u00a0Python\u00a0type\u00a0to\u00a0JSON\u00a0data\u00a0is\u00a0done\u00a0using\u00a0a\u00a0function\u00a0\ndump(\u00a0).\u00a0It\u00a0writes\u00a0the\u00a0serialized\u00a0data\u00a0to\u00a0a\u00a0file.\nx\nDeserialization\u00a0 of\u00a0 a\u00a0 JSON\u00a0 type\u00a0 to\u00a0 a\u00a0 Python\u00a0 type\u00a0 is\u00a0 done\u00a0 using\u00a0 a\u00a0\nfunction\u00a0load(\u00a0 ).\u00a0It", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_471", "chunk_strategy": "fixed_size"}}, {"text": "ython\u00a0type\u00a0to\u00a0JSON\u00a0data\u00a0is\u00a0done\u00a0using\u00a0a\u00a0function\u00a0\ndump(\u00a0).\u00a0It\u00a0writes\u00a0the\u00a0serialized\u00a0data\u00a0to\u00a0a\u00a0file.\nx\nDeserialization\u00a0 of\u00a0 a\u00a0 JSON\u00a0 type\u00a0 to\u00a0 a\u00a0 Python\u00a0 type\u00a0 is\u00a0 done\u00a0 using\u00a0 a\u00a0\nfunction\u00a0load(\u00a0 ).\u00a0It\u00a0reads\u00a0 the\u00a0data\u00a0from\u00a0a\u00a0file,\u00a0does\u00a0 the\u00a0conversion\u00a0\nand\u00a0returns\u00a0the\u00a0converted\u00a0data.\n324\nLet\u00a0Us\u00a0Python\nx\nWhile\u00a0deserializing\u00a0a\u00a0tuple,\u00a0load(\u00a0) returns\u00a0a\u00a0list\u00a0and\u00a0not\u00a0a\u00a0tuple.\u00a0So\u00a0\nwe\u00a0 need\u00a0 to\u00a0 convert\u00a0 the\u00a0 list\u00a0 to\u00a0 a\u00a0 tuple\u00a0 using\u00a0 tuple(\u00a0 ) conversion\u00a0\nfunction.\nx\nInstead\u00a0of\u00a0writing\u00a0JSON\u00a0data\u00a0to\u00a0a\u00a0file,\u00a0we\u00a0can\u00a0write\u00a0it\u00a0to\u00a0a\u00a0string,\u00a0and\u00a0\nread\u00a0it\u00a0back\u00a0from\u00a0a\u00a0string\u00a0as\u00a0shown\u00a0below:\nimport\u00a0json\nlst\u00a0=\u00a0[10,\u00a020,\u00a030,\u00a040,\u00a050,\u00a060,\u00a070,\u00a080,\u00a090]\ntpl\u00a0=\u00a0('Ajay',\u00a023,\u00a02455.55)\ndct\u00a0=\u00a0{\u00a0'Anil'\u00a0:\u00a024,\u00a0'Ajay'\u00a0:\u00a023,\u00a0'Nisha'\u00a0:\u00a022}\nstr1\u00a0=\u00a0json.dumps(lst)\nstr2\u00a0=\u00a0json.dumps(tpl)\nstr3\u00a0=\u00a0json.dumps(dct)\nl\u00a0=\u00a0json.loads(str1)\nt\u00a0=\u00a0tuple(json.loads(str2))\nd\u00a0=\u00a0json.loads(str3)\nprint(l)\nprint(t)\nprint(d)\nx\nIt\u00a0 is\u00a0 possible\u00a0 to\u00a0serialize/deserialize\u00a0 nested\u00a0 lists\u00a0 and\u00a0directories\u00a0 as\u00a0\nshown\u00a0below:\n#\u00a0serialize/deserialize\u00a0a", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_472", "chunk_strategy": "fixed_size"}}, {"text": "r1)\nt\u00a0=\u00a0tuple(json.loads(str2))\nd\u00a0=\u00a0json.loads(str3)\nprint(l)\nprint(t)\nprint(d)\nx\nIt\u00a0 is\u00a0 possible\u00a0 to\u00a0serialize/deserialize\u00a0 nested\u00a0 lists\u00a0 and\u00a0directories\u00a0 as\u00a0\nshown\u00a0below:\n#\u00a0serialize/deserialize\u00a0a\u00a0dictionary\nimport\u00a0json\nlofl\u00a0=\u00a0[10,\u00a0[20,\u00a030,\u00a040],\u00a0[\u00a050,\u00a060,\u00a070],\u00a080,\u00a090]\nf\u00a0=\u00a0open('data',\u00a0'w+')\njson.dump(lofl,\u00a0f)\nf.seek(0)\ninlofl\u00a0=\u00a0json.load(f)\nprint(inlofl)\nf.close(\u00a0)\n#\u00a0serialize/deserialize\u00a0a\u00a0dictionary\nimport\u00a0json\ncontacts\u00a0=\u00a0{\u00a0'Anil':\u00a0{\u00a0'DOB'\u00a0:\u00a0'17/11/98',\u00a0'Favorite'\u00a0:\u00a0'Igloo'\u00a0},\n'Amol':\u00a0{\u00a0'DOB'\u00a0:\u00a0'14/10/99',\u00a0'Favorite'\u00a0:\u00a0'Tundra'\u00a0},\n'Ravi':\u00a0{\u00a0'DOB'\u00a0:\u00a0'19/11/97',\u00a0'Favorite'\u00a0:\u00a0'Artic'\u00a0}\u00a0}\nf\u00a0=\u00a0open('data',\u00a0'w+')\njson.dump(contacts,\u00a0f)\nf.seek(0)\nChapter 23:\u00a0File\u00a0Input/Output\u00a0\n325\nincontacts\u00a0=\u00a0json.load(f)\nprint(incontacts)\nf.close(\u00a0)\nSerialization\u00a0of\u00a0User-defined\u00a0Types\nx\nStandard\u00a0 Python\u00a0 types\u00a0 can\u00a0 be\u00a0 easily\u00a0converted\u00a0 to\u00a0 JSON\u00a0 and\u00a0 vice-\ncersa.\u00a0 However,\u00a0if\u00a0 we\u00a0attempt\u00a0 to\u00a0serialize\u00a0a\u00a0user-defined\u00a0 Complex\ntype\u00a0to\u00a0JSON\u00a0we\u00a0get\u00a0following\u00a0error:\nTypeError:\u00a0Object of\u00a0type\u00a0'Complex'\u00a0is", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_473", "chunk_strategy": "fixed_size"}}, {"text": "types\u00a0 can\u00a0 be\u00a0 easily\u00a0converted\u00a0 to\u00a0 JSON\u00a0 and\u00a0 vice-\ncersa.\u00a0 However,\u00a0if\u00a0 we\u00a0attempt\u00a0 to\u00a0serialize\u00a0a\u00a0user-defined\u00a0 Complex\ntype\u00a0to\u00a0JSON\u00a0we\u00a0get\u00a0following\u00a0error:\nTypeError:\u00a0Object of\u00a0type\u00a0'Complex'\u00a0is\u00a0not\u00a0JSON\u00a0serializable\nx\nTo\u00a0 serialize\u00a0 user-defined\u00a0 types\u00a0 we\u00a0 need\u00a0 to\u00a0 define\u00a0 encoding\u00a0 and\u00a0\ndecoding\u00a0 functions.\u00a0This\u00a0is\u00a0shown\u00a0in\u00a0the\u00a0following\u00a0program\u00a0where,\u00a0\nwe\u00a0serialize\u00a0Complex type.\nimport\u00a0json\ndef\u00a0encode_complex(x):\nif\u00a0isinstance(x,\u00a0Complex)\u00a0:\nreturn(x.real,\u00a0x.imag)\nelse\u00a0:\nraise\u00a0TypeError('Complex\u00a0object\u00a0is\u00a0not\u00a0JSON\u00a0serializable')\ndef\u00a0decode_complex(dct):\nif\u00a0'__Complex__'\u00a0in\u00a0dct\u00a0:\nreturn\u00a0Complex(dct['real'],\u00a0dct['imag'])\nreturn\u00a0dct\nclass\u00a0Complex\u00a0:\ndef\u00a0__init__(self,\u00a0r\u00a0=\u00a00,\u00a0i\u00a0=\u00a00)\u00a0:\nself.real\u00a0=\u00a0r\u00a0\nself.imag\u00a0=\u00a0i\ndef\u00a0print_data(self)\u00a0:\nprint(self.real,\u00a0self.imag)\nc\u00a0=\u00a0Complex(1.0,\u00a02.0)\nf\u00a0=\u00a0open('data',\u00a0'w+')\njson.dump(c,\u00a0f,\u00a0default\u00a0=\u00a0encode_complex)\nf.seek(0)\ninc\u00a0=\u00a0json.load(f,\u00a0object_hook\u00a0=\u00a0decode_complex)\nprint(inc)\n326\nLet\u00a0Us\u00a0Python\nx\nTo\u00a0 translate\u00a0 a\u00a0 Complex object\u00a0 into\u00a0 JSON", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_474", "chunk_strategy": "fixed_size"}}, {"text": "\nf\u00a0=\u00a0open('data',\u00a0'w+')\njson.dump(c,\u00a0f,\u00a0default\u00a0=\u00a0encode_complex)\nf.seek(0)\ninc\u00a0=\u00a0json.load(f,\u00a0object_hook\u00a0=\u00a0decode_complex)\nprint(inc)\n326\nLet\u00a0Us\u00a0Python\nx\nTo\u00a0 translate\u00a0 a\u00a0 Complex object\u00a0 into\u00a0 JSON,\u00a0 we\u00a0 have\u00a0 defined\u00a0 an\u00a0\nencoding\u00a0function called\u00a0encode_complex(\u00a0). We\u00a0have\u00a0provided\u00a0this\nfunction\u00a0 to\u00a0 dump(\u00a0 ) method\u2019s default parameter.\u00a0dump(\u00a0 ) method\u00a0\nwill\u00a0 use\u00a0 encode_complex(\u00a0 ) function\u00a0 while\u00a0 serializing\u00a0 a\u00a0 Complex\nobject.\nx\nIn\u00a0encode_complex(\u00a0) we\u00a0have\u00a0checked\u00a0whether\u00a0the\u00a0object\u00a0received\u00a0\nis\u00a0of\u00a0the\u00a0type\u00a0Complex.\u00a0If\u00a0it\u00a0is, then\u00a0we\u00a0return\u00a0the\u00a0Complex object\u00a0\ndata\u00a0as\u00a0a\u00a0tuple.\u00a0If\u00a0not,\u00a0we\u00a0raise\u00a0a\u00a0TypeError exception.\nx\nDuring\u00a0 deserialization\u00a0 when\u00a0 load(\u00a0 ) method\u00a0 attempts\u00a0 to\u00a0 parse\u00a0 an\u00a0\nobject,\u00a0 instead\u00a0 of\u00a0 the\u00a0 default\u00a0 decoder\u00a0 we\u00a0 provide\u00a0 our\u00a0 decoder\u00a0\ndecode_complex(\u00a0) through\u00a0the\u00a0object_hook parameter.\nFile\u00a0and\u00a0Directory\u00a0Operations\nx\nPython\u00a0lets\u00a0us\u00a0interact\u00a0with\u00a0the\u00a0underlying\u00a0file\u00a0 system.\u00a0This\u00a0lets\u00a0us\u00a0\nperform\u00a0many\u00a0file\u00a0and\u00a0directory\u00a0operations.\nx\nFile\u00a0 operations\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_475", "chunk_strategy": "fixed_size"}}, {"text": "rough\u00a0the\u00a0object_hook parameter.\nFile\u00a0and\u00a0Directory\u00a0Operations\nx\nPython\u00a0lets\u00a0us\u00a0interact\u00a0with\u00a0the\u00a0underlying\u00a0file\u00a0 system.\u00a0This\u00a0lets\u00a0us\u00a0\nperform\u00a0many\u00a0file\u00a0and\u00a0directory\u00a0operations.\nx\nFile\u00a0 operations\u00a0 include\u00a0 creation,\u00a0 deletion,\u00a0 renaming,\u00a0 copying,\u00a0\nchecking\u00a0if\u00a0an\u00a0entry\u00a0is\u00a0a\u00a0file,\u00a0obtaining\u00a0statistics\u00a0of\u00a0a\u00a0file,\u00a0etc.\nx\nDirectory\u00a0operations\u00a0include\u00a0creation,\u00a0recursive\u00a0creation,\u00a0renaming,\u00a0\nchanging\u00a0into,\u00a0deleting,\u00a0listing\u00a0a\u00a0directory,\u00a0etc.\nx\nPath\u00a0 operations\u00a0 include\u00a0 obtaining\u00a0 the\u00a0 absolute\u00a0 and\u00a0 relative\u00a0 path,\u00a0\nsplitting\u00a0path\u00a0elements,\u00a0joining\u00a0paths,\u00a0etc.\nx\n'.'\u00a0represents\u00a0current\u00a0directory\u00a0and\u00a0'..'\u00a0represents\u00a0parent\u00a0of\u00a0current\u00a0\ndirectory.\nx\nGiven\u00a0below\u00a0is\u00a0a\u00a0program\u00a0that\u00a0demonstrates\u00a0some\u00a0file,\u00a0directory\u00a0and\u00a0\npath\u00a0operations.\nimport\u00a0os\nimport\u00a0shutil\nprint(os.name)\nprint(os.getcwd(\u00a0))\nprint(os.listdir('.'))\u00a0\nprint(os.listdir('..'))\nif\u00a0os.path.exists('mydir')\u00a0:\nprint('mydir\u00a0already\u00a0exists')\nelse\u00a0:\nChapter 23:\u00a0File\u00a0Input/Output\u00a0\n327\nos.mkdir('mydir')\nos.chdir('mydir')\nos.makedirs('.\\\\", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_476", "chunk_strategy": "fixed_size"}}, {"text": "rint(os.listdir('.'))\u00a0\nprint(os.listdir('..'))\nif\u00a0os.path.exists('mydir')\u00a0:\nprint('mydir\u00a0already\u00a0exists')\nelse\u00a0:\nChapter 23:\u00a0File\u00a0Input/Output\u00a0\n327\nos.mkdir('mydir')\nos.chdir('mydir')\nos.makedirs('.\\\\dir1\\\\dir2\\\\dir3')\nf\u00a0=\u00a0open('myfile',\u00a0'w')\nf.write('Having\u00a0one\u00a0child\u00a0makes\u00a0you\u00a0a\u00a0parent...')\nf.write('Having\u00a0two\u00a0you\u00a0are\u00a0a\u00a0referee')\nf.close(\u00a0)\nstats\u00a0=\u00a0os.stat('myfile')\nprint('Size\u00a0=\u00a0',\u00a0stats.st_size)\nos.rename('myfile',\u00a0'yourfile')\nshutil.copyfile('yourfile',\u00a0'ourfile')\nos.remove('yourfile')\ncurpath\u00a0=\u00a0os.path.abspath('.')\nos.path.join(curpath,\u00a0'yourfile')\nif\u00a0os.path.isfile(curpath)\u00a0:\nprint('yourfile\u00a0file\u00a0exists')\nelse\u00a0:\nprint('yourfile\u00a0file\u00a0doesn\\'t\u00a0exist')\n____________________________________________________________________\nProblem\u00a023.1\nWrite\u00a0a\u00a0program\u00a0to\u00a0read\u00a0the\u00a0contents\u00a0of\u00a0file\u00a0'messages'\u00a0one\u00a0character\u00a0at\u00a0\na\u00a0time.\u00a0Print\u00a0each\u00a0character\u00a0that\u00a0is\u00a0read.\nProgram\nf\u00a0=\u00a0open('messages',\u00a0'r')\nwhile\u00a0True\u00a0:\ndata\u00a0=\u00a0f.read(1)\nif\u00a0data\u00a0==\u00a0''\u00a0:\nbreak\u00a0\nprint(data,\u00a0end\u00a0= '')\nf.close(\u00a0)\n328\nLet\u00a0Us\u00a0Python", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_477", "chunk_strategy": "fixed_size"}}, {"text": "'\u00a0one\u00a0character\u00a0at\u00a0\na\u00a0time.\u00a0Print\u00a0each\u00a0character\u00a0that\u00a0is\u00a0read.\nProgram\nf\u00a0=\u00a0open('messages',\u00a0'r')\nwhile\u00a0True\u00a0:\ndata\u00a0=\u00a0f.read(1)\nif\u00a0data\u00a0==\u00a0''\u00a0:\nbreak\u00a0\nprint(data,\u00a0end\u00a0= '')\nf.close(\u00a0)\n328\nLet\u00a0Us\u00a0Python\nOutput\nYou\u00a0may\u00a0not\u00a0be\u00a0great\u00a0when\u00a0you\u00a0start,\u00a0but\u00a0you\u00a0need\u00a0to\u00a0start\u00a0to\u00a0be\u00a0great.\nWork\u00a0hard\u00a0until\u00a0you\u00a0don't\u00a0need\u00a0an\u00a0introduction.\nWork\u00a0so\u00a0hard\u00a0that\u00a0one\u00a0day\u00a0your\u00a0signature\u00a0becomes\u00a0an\u00a0autograph.\nTips\nx\nf.read(1) reads\u00a01\u00a0character\u00a0from\u00a0a\u00a0file\u00a0object\u00a0f.\nx\nread(\u00a0) returns\u00a0an\u00a0empty\u00a0string\u00a0on\u00a0reaching\u00a0end\u00a0of\u00a0file.\nx\nif\u00a0end = '' is\u00a0not\u00a0used\u00a0in\u00a0the\u00a0call\u00a0to\u00a0print(\u00a0),\u00a0each\u00a0character\u00a0read\u00a0will\u00a0\nbe\u00a0printed\u00a0in\u00a0a\u00a0new\u00a0line.\n____________________________________________________________________\nProblem\u00a023.2\nWrite\u00a0a\u00a0program\u00a0that\u00a0writes\u00a0four\u00a0integers\u00a0to\u00a0a\u00a0file\u00a0called\u00a0'numbers'.\u00a0Go\u00a0\nto\u00a0following\u00a0positions\u00a0in\u00a0the\u00a0file\u00a0and\u00a0report\u00a0these\u00a0positions.\n10\u00a0positions\u00a0from\u00a0beginning\n2\u00a0positions\u00a0to\u00a0the\u00a0right\u00a0of\u00a0current\u00a0position\n5\u00a0positions\u00a0to\u00a0the\u00a0left\u00a0of\u00a0current\u00a0position\n10\u00a0positions\u00a0to\u00a0the\u00a0left\u00a0from\u00a0end\nProgram\nf\u00a0=\u00a0open('nu", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_478", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0and\u00a0report\u00a0these\u00a0positions.\n10\u00a0positions\u00a0from\u00a0beginning\n2\u00a0positions\u00a0to\u00a0the\u00a0right\u00a0of\u00a0current\u00a0position\n5\u00a0positions\u00a0to\u00a0the\u00a0left\u00a0of\u00a0current\u00a0position\n10\u00a0positions\u00a0to\u00a0the\u00a0left\u00a0from\u00a0end\nProgram\nf\u00a0=\u00a0open('numbers',\u00a0'wb')\nf.write(b'231')\nf.write(b'431')\nf.write(b'2632')\nf.write(b'833')\nf.close(\u00a0)\nf\u00a0=\u00a0open('numbers',\u00a0'rb')\nf.seek(10, 0)\nprint(f.tell(\u00a0))\nf.seek(2, 1)\nprint(f.tell(\u00a0))\nf.seek(-5, 1)\nprint(f.tell(\u00a0))\nf.seek(-10, 2)\nprint(f.tell(\u00a0))\nChapter 23:\u00a0File\u00a0Input/Output\u00a0\n329\nf.close(\u00a0)\nOutput\n10\n12\n7\n1\n____________________________________________________________________\nProblem\u00a023.3\nWrite\u00a0 a\u00a0 Python\u00a0 program\u00a0 that\u00a0 searches\u00a0 for\u00a0 a\u00a0 file,\u00a0 obtains\u00a0 its\u00a0 size\u00a0and\u00a0\nreports\u00a0the\u00a0size\u00a0in\u00a0bytes/KB/MB/GB/TB\u00a0as\u00a0appropriate.\nProgram\nimport\u00a0os\ndef\u00a0convert(num)\u00a0:\nfor\u00a0x\u00a0in\u00a0['bytes',\u00a0'KB',\u00a0'MB',\u00a0'GB', 'TB'] :\nif\u00a0num\u00a0<\u00a01024.0 :\nreturn\u00a0\"%3.1f\u00a0%s\"\u00a0%\u00a0(num,\u00a0x)\nnum\u00a0/=\u00a01024.0\ndef\u00a0file_size(file_path) :\nif\u00a0os.path.isfile(file_path) :\nfile_info\u00a0=\u00a0os.stat(file_path)\nreturn\u00a0convert(file_info.st_size)\nfile_path\u00a0=\u00a0r", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_479", "chunk_strategy": "fixed_size"}}, {"text": " :\nif\u00a0num\u00a0<\u00a01024.0 :\nreturn\u00a0\"%3.1f\u00a0%s\"\u00a0%\u00a0(num,\u00a0x)\nnum\u00a0/=\u00a01024.0\ndef\u00a0file_size(file_path) :\nif\u00a0os.path.isfile(file_path) :\nfile_info\u00a0=\u00a0os.stat(file_path)\nreturn\u00a0convert(file_info.st_size)\nfile_path\u00a0=\u00a0r'C:\\Windows\\System32\\mspaint.exe'\nprint(file_size(file_path))\nOutput\n6.1\u00a0MB\n____________________________________________________________________\nProblem\u00a023.4\nWrite\u00a0a\u00a0Python\u00a0program\u00a0that\u00a0reports\u00a0the\u00a0time\u00a0of\u00a0creation,\u00a0time\u00a0of\u00a0last\u00a0\naccess\u00a0and\u00a0time\u00a0of\u00a0last\u00a0modification\u00a0for\u00a0a\u00a0given\u00a0file.\n330\nLet\u00a0Us\u00a0Python\nProgram\nimport\u00a0os,\u00a0time\nfile\u00a0=\u00a0'sampledata'\nprint(file)\ncreated\u00a0=\u00a0os.path.getctime(file)\nmodified\u00a0=\u00a0os.path.getmtime(file)\naccessed\u00a0=\u00a0os.path.getatime(file)\nprint('Date\u00a0created:\u00a0'\u00a0+\u00a0time.ctime(created))\nprint('Date\u00a0modified:\u00a0'\u00a0+\u00a0time.ctime(modified))\nprint('Date\u00a0accessed:\u00a0'\u00a0+\u00a0time.ctime(accessed))\nOutput\nsampledata\nDate\u00a0created:\u00a0Tue\u00a0May\u00a014\u00a008:51:52\u00a02019\nDate\u00a0modified:\u00a0Tue\u00a0May\u00a014\u00a009:11:59\u00a02019\nDate\u00a0accessed:\u00a0Tue\u00a0May\u00a014\u00a008:51:52\u00a02019\nTips\nx\nFunctions getctime(\u00a0 ),\u00a0 getmtime(\u00a0 )\u00a0 and getatime(\u00a0 ", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_480", "chunk_strategy": "fixed_size"}}, {"text": ")\nOutput\nsampledata\nDate\u00a0created:\u00a0Tue\u00a0May\u00a014\u00a008:51:52\u00a02019\nDate\u00a0modified:\u00a0Tue\u00a0May\u00a014\u00a009:11:59\u00a02019\nDate\u00a0accessed:\u00a0Tue\u00a0May\u00a014\u00a008:51:52\u00a02019\nTips\nx\nFunctions getctime(\u00a0 ),\u00a0 getmtime(\u00a0 )\u00a0 and getatime(\u00a0 )\u00a0 return\u00a0 the\u00a0\ncreation,\u00a0modification\u00a0and\u00a0access\u00a0time\u00a0for\u00a0the\u00a0given\u00a0file.\u00a0The\u00a0times\u00a0\nare\u00a0 returned\u00a0 as\u00a0 number\u00a0 of\u00a0 seconds\u00a0 since\u00a0 the\u00a0 epoch.\u00a0 Epoch\u00a0 is\u00a0\nconsidered\u00a0to\u00a0be\u00a01st Jan\u00a01970,\u00a000:00:00.\nx\nctime(\u00a0 ) function\u00a0 of\u00a0 time module\u00a0 converts\u00a0 the\u00a0 time\u00a0 expressed\u00a0 in\u00a0\nseconds\u00a0since\u00a0epoch\u00a0into\u00a0a\u00a0string\u00a0representing\u00a0local\u00a0time.\n____________________________________________________________________\n[A] State\u00a0whether\u00a0the\u00a0following\u00a0statements\u00a0are\u00a0True\u00a0or\u00a0False:\n(a) If\u00a0a\u00a0file\u00a0is\u00a0opened\u00a0for\u00a0reading,\u00a0it\u00a0is\u00a0necessary\u00a0that\u00a0the\u00a0file\u00a0must\u00a0exist.\nChapter 23:\u00a0File\u00a0Input/Output\u00a0\n331\n(b) If\u00a0 a\u00a0 file\u00a0 opened\u00a0 for\u00a0 writing\u00a0 already\u00a0 exists,\u00a0 its\u00a0 contents\u00a0 would\u00a0 be\u00a0\noverwritten.\n(c)\nFor\u00a0opening\u00a0a\u00a0file\u00a0in\u00a0append\u00a0mode\u00a0it\u00a0is\u00a0necessary\u00a0that\u00a0the\u00a0file\u00a0should\u00a0\nexist.\n[B] Answer\u00a0the\u00a0following questions:\n(a) What", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_481", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0 for\u00a0 writing\u00a0 already\u00a0 exists,\u00a0 its\u00a0 contents\u00a0 would\u00a0 be\u00a0\noverwritten.\n(c)\nFor\u00a0opening\u00a0a\u00a0file\u00a0in\u00a0append\u00a0mode\u00a0it\u00a0is\u00a0necessary\u00a0that\u00a0the\u00a0file\u00a0should\u00a0\nexist.\n[B] Answer\u00a0the\u00a0following questions:\n(a) What\u00a0sequence\u00a0of\u00a0activities\u00a0take\u00a0place\u00a0on\u00a0opening\u00a0a\u00a0file\u00a0for\u00a0reading\nin\u00a0text\u00a0mode?\n(b) Is\u00a0 it\u00a0 necessary\u00a0 that\u00a0 a\u00a0 file\u00a0 created\u00a0 in\u00a0 text\u00a0 mode\u00a0 must\u00a0 always\u00a0 be\u00a0\nopened\u00a0in\u00a0text\u00a0mode\u00a0for\u00a0subsequent\u00a0operations?\n(c)\nWhile\u00a0using\u00a0the\u00a0statement,\nfp\u00a0=\u00a0open('myfile',\u00a0'r')\nwhat\u00a0happens\u00a0if,\n\ue001\n'myfile'\u00a0does\u00a0not\u00a0exist\u00a0on\u00a0the\u00a0disk\n\ue001\n'myfile'\u00a0exists\u00a0on\u00a0the\u00a0disk\n(d) While\u00a0using\u00a0the\u00a0statement,\nf\u00a0=\u00a0open('myfile',\u00a0'wb')\nwhat\u00a0happens\u00a0if,\n\ue001\n'myfile'\u00a0does\u00a0not\u00a0exist\u00a0on\u00a0the\u00a0disk\n\ue001\n'myfile'\u00a0exists\u00a0on\u00a0the\u00a0disk\n(e) A\u00a0 floating-point\u00a0 list\u00a0 contains\u00a0 percentage\u00a0 marks\u00a0 obtained\u00a0 by\u00a0\nstudents\u00a0 in\u00a0 an\u00a0 examination.\u00a0 To\u00a0 store\u00a0 these\u00a0 marks\u00a0 in\u00a0 a\u00a0 file\u00a0\n\u2018marks.dat\u2019,\u00a0in\u00a0which\u00a0mode\u00a0would\u00a0you\u00a0open\u00a0the\u00a0file\u00a0and\u00a0why?\n[C] Attempt\u00a0the\u00a0following questions:\n(a) Write\u00a0a\u00a0program\u00a0to\u00a0 read\u00a0a\u00a0file\u00a0and\u00a0display\u00a0its\u00a0contents\u00a0 along\u00a0with", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_482", "chunk_strategy": "fixed_size"}}, {"text": "re\u00a0 these\u00a0 marks\u00a0 in\u00a0 a\u00a0 file\u00a0\n\u2018marks.dat\u2019,\u00a0in\u00a0which\u00a0mode\u00a0would\u00a0you\u00a0open\u00a0the\u00a0file\u00a0and\u00a0why?\n[C] Attempt\u00a0the\u00a0following questions:\n(a) Write\u00a0a\u00a0program\u00a0to\u00a0 read\u00a0a\u00a0file\u00a0and\u00a0display\u00a0its\u00a0contents\u00a0 along\u00a0with\u00a0\nline\u00a0numbers\u00a0before\u00a0each\u00a0line.\n(b) Write\u00a0a\u00a0program\u00a0to\u00a0append\u00a0the\u00a0contents\u00a0of\u00a0one\u00a0file\u00a0 at\u00a0the\u00a0end\u00a0of\u00a0\nanother.\n332\nLet\u00a0Us\u00a0Python\n(c)\nSuppose\u00a0 a\u00a0 file\u00a0 contains\u00a0 student\u2019s\u00a0 records\u00a0 with\u00a0 each\u00a0 record\u00a0\ncontaining\u00a0 name\u00a0 and\u00a0 age\u00a0 of\u00a0 a\u00a0 student.\u00a0 Write\u00a0 a\u00a0 program\u00a0to\u00a0 read\u00a0\nthese\u00a0records\u00a0and\u00a0display\u00a0them\u00a0in\u00a0sorted\u00a0order\u00a0by\u00a0name.\n(d) Write\u00a0 a\u00a0 program\u00a0 to\u00a0 copy\u00a0 contents\u00a0 of\u00a0 one\u00a0 file\u00a0 to\u00a0 another.\u00a0 While\u00a0\ndoing\u00a0 so\u00a0 replace\u00a0 all\u00a0 lowercase\u00a0 characters\u00a0 with\u00a0 their\u00a0 equivalent\u00a0\nuppercase\u00a0characters.\n(e) Write\u00a0a\u00a0 program\u00a0 that\u00a0 merges\u00a0 lines\u00a0alternately\u00a0from\u00a0two\u00a0 files\u00a0and\u00a0\nwrites\u00a0the\u00a0 results\u00a0to\u00a0 new\u00a0 file.\u00a0If\u00a0 one\u00a0 file\u00a0 has\u00a0less\u00a0number\u00a0of\u00a0lines\nthan\u00a0the\u00a0other,\u00a0 the\u00a0remaining\u00a0lines\u00a0from\u00a0the\u00a0larger\u00a0 file\u00a0should\u00a0 be\u00a0\nsimply\u00a0copied\u00a0into\u00a0the\u00a0target\u00a0file.\n(f)\nSuppose\u00a0an\u00a0Employee object\u00a0contai", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_483", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0to\u00a0 new\u00a0 file.\u00a0If\u00a0 one\u00a0 file\u00a0 has\u00a0less\u00a0number\u00a0of\u00a0lines\nthan\u00a0the\u00a0other,\u00a0 the\u00a0remaining\u00a0lines\u00a0from\u00a0the\u00a0larger\u00a0 file\u00a0should\u00a0 be\u00a0\nsimply\u00a0copied\u00a0into\u00a0the\u00a0target\u00a0file.\n(f)\nSuppose\u00a0an\u00a0Employee object\u00a0contains\u00a0following\u00a0details:\nemployee\u00a0code,\u00a0employee\u00a0name,\u00a0date\u00a0of\u00a0joining,\u00a0salary\u00a0\nWrite\u00a0a\u00a0program\u00a0to\u00a0serialize\u00a0and\u00a0deserialize\u00a0this\u00a0data.\n(g)\nA\u00a0hospital\u00a0keeps\u00a0a\u00a0file\u00a0of\u00a0blood\u00a0donors\u00a0in\u00a0which\u00a0each\u00a0record\u00a0has\u00a0the\u00a0\nformat:\nName:\u00a020\u00a0Columns\nAddress:\u00a040\u00a0Columns\nAge:\u00a02\u00a0Columns\nBlood\u00a0Type:\u00a01\u00a0Column\u00a0(Type\u00a01,\u00a02,\u00a03\u00a0or\u00a04)\nWrite\u00a0a\u00a0program\u00a0to\u00a0read\u00a0the\u00a0file\u00a0and\u00a0print\u00a0a\u00a0list\u00a0of\u00a0all\u00a0blood donors\u00a0\nwhose\u00a0age\u00a0is\u00a0below\u00a025\u00a0and\u00a0whose\u00a0blood\u00a0type\u00a0is\u00a02.\n(h) Given\u00a0a\u00a0list\u00a0of\u00a0names\u00a0of\u00a0students\u00a0in\u00a0a\u00a0class,\u00a0write\u00a0a\u00a0program\u00a0to\u00a0store\u00a0\nthe\u00a0names\u00a0in\u00a0a\u00a0file\u00a0on\u00a0disk.\u00a0Make\u00a0a\u00a0provision\u00a0to\u00a0display\u00a0the\u00a0nth name\u00a0\nin\u00a0the\u00a0list,\u00a0where\u00a0n is\u00a0read\u00a0from\u00a0the\u00a0keyboard.\n(i)\nAssume\u00a0 that\u00a0 a\u00a0 Master\u00a0 file\u00a0 contains\u00a0 two\u00a0 fields,\u00a0 roll\u00a0 number\u00a0 and\u00a0\nname\u00a0of\u00a0the\u00a0student.\u00a0At\u00a0the\u00a0end\u00a0of\u00a0the\u00a0year,\u00a0a\u00a0set\u00a0of\u00a0students\u00a0join\u00a0\nthe\u00a0class\u00a0and\u00a0another\u00a0set\u00a0leav", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_484", "chunk_strategy": "fixed_size"}}, {"text": "ead\u00a0from\u00a0the\u00a0keyboard.\n(i)\nAssume\u00a0 that\u00a0 a\u00a0 Master\u00a0 file\u00a0 contains\u00a0 two\u00a0 fields,\u00a0 roll\u00a0 number\u00a0 and\u00a0\nname\u00a0of\u00a0the\u00a0student.\u00a0At\u00a0the\u00a0end\u00a0of\u00a0the\u00a0year,\u00a0a\u00a0set\u00a0of\u00a0students\u00a0join\u00a0\nthe\u00a0class\u00a0and\u00a0another\u00a0set\u00a0leaves.\u00a0A\u00a0Transaction\u00a0file\u00a0contains\u00a0the\u00a0roll\u00a0\nnumbers\u00a0and\u00a0an\u00a0appropriate\u00a0code\u00a0to\u00a0add\u00a0or\u00a0delete\u00a0a\u00a0student.\nWrite\u00a0a\u00a0 program\u00a0to\u00a0create\u00a0another\u00a0 file\u00a0that\u00a0 contains\u00a0 the\u00a0updated\u00a0\nlist\u00a0of\u00a0names\u00a0and\u00a0roll\u00a0numbers.\u00a0Assume\u00a0that\u00a0the\u00a0Master file\u00a0and\u00a0the\nTransaction\u00a0file\u00a0 are\u00a0 arranged\u00a0 in\u00a0ascending\u00a0 order\u00a0 by\u00a0 roll\u00a0numbers.\u00a0\nThe\u00a0updated\u00a0file\u00a0should\u00a0also\u00a0be\u00a0in\u00a0ascending\u00a0order\u00a0by\u00a0roll numbers.\n(j)\nGiven\u00a0a\u00a0text\u00a0file,\u00a0write\u00a0a\u00a0program\u00a0to\u00a0create\u00a0another\u00a0text\u00a0file\u00a0deleting\u00a0\nthe\u00a0words\u00a0\u201ca\u201d,\u00a0\u201cthe\u201d,\u00a0 \u201can\u201d\u00a0and\u00a0replacing\u00a0each\u00a0one\u00a0of\u00a0them\u00a0with\u00a0a\u00a0\nblank\u00a0space.\nLet\u00a0Us\nPython\n333\nMiscellany\nx\nDocumentation\u00a0Strings\nx\nDecorating\u00a0Functions\u00a0with\u00a0Args\nx\nCommand-line\u00a0Arguments\nx\nUnicode\nx\nParsing\u00a0of\u00a0Command-line\nx\nbytes Datatype\nx\nBitwise\u00a0Operators\nx\nCreate\u00a0Executable\u00a0File\nx\nAssertion\nx\nPrograms\nx\nDecorators\nx\nExercises\n24\n\u201cE", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_485", "chunk_strategy": "fixed_size"}}, {"text": "ing\u00a0Functions\u00a0with\u00a0Args\nx\nCommand-line\u00a0Arguments\nx\nUnicode\nx\nParsing\u00a0of\u00a0Command-line\nx\nbytes Datatype\nx\nBitwise\u00a0Operators\nx\nCreate\u00a0Executable\u00a0File\nx\nAssertion\nx\nPrograms\nx\nDecorators\nx\nExercises\n24\n\u201cEfficient\u00a0is\u00a0better...\u201d\n334\nLet\u00a0Us\u00a0Python\nThe\u00a0 topics\u00a0 discussed\u00a0 in\u00a0 this\u00a0 chapter\u00a0 are\u00a0 far\u00a0 too\u00a0 removed\u00a0 from\u00a0 the\u00a0\nmainstream\u00a0 Python\u00a0programming\u00a0for\u00a0 inclusion\u00a0 in\u00a0the\u00a0earlier\u00a0 chapters.\u00a0\nThese\u00a0 topics\u00a0 provide\u00a0 certain\u00a0 useful\u00a0 programming\u00a0 features,\u00a0 and\u00a0 could\u00a0\nprove\u00a0to\u00a0be\u00a0of\u00a0immense\u00a0help\u00a0in\u00a0certain\u00a0programming\u00a0strategies.\nDocumentation\u00a0Strings\nx\nIt\u00a0 is\u00a0 a\u00a0good\u00a0 idea\u00a0 to\u00a0mention\u00a0 a\u00a0 documentation\u00a0 string\u00a0(often\u00a0 called\u00a0\ndoscstring)\u00a0below\u00a0a\u00a0module,\u00a0function,\u00a0class\u00a0or\u00a0method\u00a0definition.\u00a0It\u00a0\nshould\u00a0be\u00a0the\u00a0first\u00a0line\u00a0below\u00a0the\u00a0def or\u00a0the\u00a0class statement.\nx\nThe\u00a0 docstring\u00a0 is\u00a0 available\u00a0 in\u00a0 the\u00a0 attribute\u00a0 __doc__ of\u00a0 a\u00a0 module,\u00a0\nfunction,\u00a0class\u00a0or\u00a0method.\u00a0\nx\nIf\u00a0 the\u00a0 docstring\u00a0 is\u00a0 multi-line\u00a0 it should\u00a0 contain\u00a0 a\u00a0 summary\u00a0 line\u00a0\nfollowed\u00a0by\u00a0a\u00a0blank\u00a0line,\u00a0followed\u00a0by\u00a0a\u00a0detailed\u00a0comme", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_486", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0 the\u00a0 attribute\u00a0 __doc__ of\u00a0 a\u00a0 module,\u00a0\nfunction,\u00a0class\u00a0or\u00a0method.\u00a0\nx\nIf\u00a0 the\u00a0 docstring\u00a0 is\u00a0 multi-line\u00a0 it should\u00a0 contain\u00a0 a\u00a0 summary\u00a0 line\u00a0\nfollowed\u00a0by\u00a0a\u00a0blank\u00a0line,\u00a0followed\u00a0by\u00a0a\u00a0detailed\u00a0comment.\u00a0\nx\nSingle-line\u00a0and\u00a0Multi-line\u00a0docstrings\u00a0are\u00a0written\u00a0within\u00a0triple\u00a0quotes.\nx\nUsing\u00a0 help(\u00a0 ) method\u00a0 we\u00a0 can\u00a0 print\u00a0 the\u00a0 functions/class/method\u00a0\ndocumentation\u00a0systematically.\nx\nIn\u00a0 the\u00a0 program\u00a0 given\u00a0 below\u00a0 the function\u00a0 display(\u00a0 ) displays\u00a0 a\u00a0\nmessage\u00a0 and\u00a0 the\u00a0 function\u00a0 show(msg1,\u00a0 msg2) displays\u00a0 msg1 in\u00a0\nlowercase\u00a0and\u00a0msg2 in\u00a0uppercase.\u00a0It\u00a0uses\u00a0a\u00a0single\u00a0line\u00a0docstring\u00a0for\u00a0\ndisplay(\u00a0)\u00a0and\u00a0a\u00a0mulit-line\u00a0docstring\u00a0for\u00a0show(\u00a0).\u00a0It\u00a0displays\u00a0both\u00a0the\u00a0\ndocstrings.\u00a0Also,\u00a0it\u00a0generates\u00a0help\u00a0on\u00a0both\u00a0the\u00a0functions.\ndef\u00a0display(\u00a0)\u00a0:\n\"\"\"Display\u00a0a\u00a0message\"\"\"\nprint('Hello')\nprint(display.__doc__)\ndef\u00a0show(msg1\u00a0=\u00a0'\u00a0',\u00a0msg2\u00a0=\u00a0'\u00a0') :\n\"\"\"Display\u00a02\u00a0messages\nArguments:\nmsg1\u00a0-- message\u00a0to\u00a0be\u00a0displayed\u00a0in\u00a0lowercase\u00a0(default\u00a0'\u00a0')\nmsg2\u00a0-- message\u00a0to\u00a0be\u00a0displayed\u00a0in\u00a0uppercase\u00a0(default\u00a0'\u00a0')\n\"\"\"\nprint(msg1", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_487", "chunk_strategy": "fixed_size"}}, {"text": "def\u00a0show(msg1\u00a0=\u00a0'\u00a0',\u00a0msg2\u00a0=\u00a0'\u00a0') :\n\"\"\"Display\u00a02\u00a0messages\nArguments:\nmsg1\u00a0-- message\u00a0to\u00a0be\u00a0displayed\u00a0in\u00a0lowercase\u00a0(default\u00a0'\u00a0')\nmsg2\u00a0-- message\u00a0to\u00a0be\u00a0displayed\u00a0in\u00a0uppercase\u00a0(default\u00a0'\u00a0')\n\"\"\"\nprint(msg1.lower( ))\nprint(msg2.upper( ))\nChapter 24:\u00a0Miscellany\n335\nprint(show.__doc__)\ndisplay(\u00a0)\nshow('Cindrella',\u00a0'Mozerella')\nhelp(display)\u00a0\nhelp(show)\u00a0\nOn\u00a0execution\u00a0of\u00a0the\u00a0program\u00a0it\u00a0produces\u00a0the\u00a0following\u00a0output:\nHello\nDisplay\u00a0a\u00a0message.\ncindrella\nMOZERELLA\nDisplay\u00a02\u00a0messages.\nArguments:\nmsg1\u00a0-- message\u00a0to\u00a0be\u00a0displayed in\u00a0lowercase\u00a0(default\u00a0'\u00a0')\nmsg2\u00a0-- message\u00a0to\u00a0be\u00a0displayed\u00a0in\u00a0uppercase\u00a0(default\u00a0'\u00a0')\nHelp\u00a0on\u00a0function\u00a0display\u00a0in\u00a0module\u00a0__main__:\ndisplay( )\nDisplay\u00a0a\u00a0message.\nHelp\u00a0on\u00a0function\u00a0show\u00a0in\u00a0module\u00a0__main__:\nshow(msg1='\u00a0',\u00a0msg2='\u00a0')\nDisplay\u00a02\u00a0messages.\nArguments:\nmsg1\u00a0-- message\u00a0to\u00a0be\u00a0displayed\u00a0in\u00a0lowercase\u00a0(default\u00a0'\u00a0')\nmsg1\u00a0-- message\u00a0to\u00a0be\u00a0displayed\u00a0in\u00a0uppercase\u00a0(default\u00a0'\u00a0')\nCommand-line\u00a0Arguments\nx\nArguments\u00a0passed\u00a0to\u00a0a\u00a0Python\u00a0script\u00a0are\u00a0available\u00a0in\u00a0sys.argv.\n#\u00a0sample.py\nimpor", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_488", "chunk_strategy": "fixed_size"}}, {"text": "isplayed\u00a0in\u00a0lowercase\u00a0(default\u00a0'\u00a0')\nmsg1\u00a0-- message\u00a0to\u00a0be\u00a0displayed\u00a0in\u00a0uppercase\u00a0(default\u00a0'\u00a0')\nCommand-line\u00a0Arguments\nx\nArguments\u00a0passed\u00a0to\u00a0a\u00a0Python\u00a0script\u00a0are\u00a0available\u00a0in\u00a0sys.argv.\n#\u00a0sample.py\nimport\u00a0sys\nprint('Number\u00a0of\u00a0arguments\u00a0received =\u00a0',\u00a0len(sys.argv))\nprint('Arguments\u00a0received =\u00a0',\u00a0str(sys.argv))\nIf\u00a0we\u00a0execute\u00a0the\u00a0script\u00a0as\n336\nLet\u00a0Us\u00a0Python\nC:\\>sample.py\u00a0cat\u00a0dog\u00a0parrot\nwe\u00a0get\u00a0the\u00a0following\u00a0output:\nNumber\u00a0of\u00a0arguments\u00a0received =\u00a04\nArguments\u00a0received =\u00a0sample.py\u00a0 cat\u00a0 dog\u00a0 parrot\nx\nIf\u00a0 we\u00a0 are\u00a0 to\u00a0 write\u00a0 a\u00a0 program for\u00a0 copying\u00a0 contents\u00a0 of\u00a0 one\u00a0 file\u00a0 to\u00a0\nanother,\u00a0 we\u00a0 can\u00a0 receive\u00a0 source\u00a0 and\u00a0 target\u00a0 filenames\u00a0 through\u00a0\ncommand-line\u00a0arguments.\n#\u00a0filecopy.py\nimport\u00a0sys\nimport\u00a0shutil\nargc\u00a0=\u00a0len(sys.argv)\nif\u00a0argc\u00a0!=\u00a03\u00a0:\nprint('Incorrect\u00a0usage')\nprint('Correct\u00a0usage:\u00a0filecopy\u00a0source\u00a0target')\nelse\u00a0:\nsource\u00a0=\u00a0sys.argv[1]\ntarget\u00a0=\u00a0sys.argv[2]\nshutil.copyfile(source,\u00a0target)\nParsing\u00a0of\u00a0Command-line\nx\nWhile\u00a0 using\u00a0 the\u00a0 'filecopy.py'\u00a0 program\u00a0 discussed above,\u00a0 the\u00a0 first\u00a0\nfilena", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_489", "chunk_strategy": "fixed_size"}}, {"text": "urce\u00a0target')\nelse\u00a0:\nsource\u00a0=\u00a0sys.argv[1]\ntarget\u00a0=\u00a0sys.argv[2]\nshutil.copyfile(source,\u00a0target)\nParsing\u00a0of\u00a0Command-line\nx\nWhile\u00a0 using\u00a0 the\u00a0 'filecopy.py'\u00a0 program\u00a0 discussed above,\u00a0 the\u00a0 first\u00a0\nfilename\u00a0is\u00a0always\u00a0treated\u00a0as\u00a0source\u00a0and\u00a0second\u00a0as\u00a0target.\u00a0Instead\u00a0of\u00a0\nthis,\u00a0 if\u00a0 we\u00a0 wish\u00a0 to\u00a0 have\u00a0 flexibility\u00a0 in\u00a0 supplying\u00a0 source\u00a0 and\u00a0 target\u00a0\nfilenames,\u00a0we\u00a0can\u00a0use\u00a0options\u00a0at\u00a0command-line as\u00a0shown\u00a0below:\nfilecopy.py\u00a0 -s\u00a0 phone\u00a0 -t\u00a0newphone\nfilecopy\u00a0-t\u00a0newphone\u00a0-s\u00a0phone\nfilecopy -h\nNow\u00a0argument\u00a0that\u00a0follows\u00a0-s would\u00a0be\u00a0treated\u00a0as\u00a0source\u00a0filename\u00a0\nand\u00a0the\u00a0one\u00a0that\u00a0follows\u00a0-t would\u00a0be\u00a0treated\u00a0as\u00a0target\u00a0filename.\u00a0The\u00a0\noption\u00a0-h is\u00a0for\u00a0receiving\u00a0help\u00a0about\u00a0the\u00a0program.\nx\nTo\u00a0permit\u00a0this\u00a0flexibility,\u00a0we\u00a0should\u00a0use\u00a0the\u00a0getopt module\u00a0to\u00a0parse\u00a0\nthe\u00a0command-line.\n#\u00a0filecopy.py\nimport\u00a0sys,\u00a0getopt\nChapter 24:\u00a0Miscellany\n337\nimport\u00a0shutil\nif\u00a0len(sys.argv)\u00a0==\u00a01\u00a0:\nprint('Incorrect\u00a0usage')\nprint('Correct\u00a0usage:\u00a0filecopy.py\u00a0-s\u00a0<source>\u00a0-t\u00a0<target>')\nsys.exit(1)\nsource\u00a0=\u00a0''\ntarget\u00a0=\u00a0''\ntry :\noptions,\u00a0argu", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_490", "chunk_strategy": "fixed_size"}}, {"text": "er 24:\u00a0Miscellany\n337\nimport\u00a0shutil\nif\u00a0len(sys.argv)\u00a0==\u00a01\u00a0:\nprint('Incorrect\u00a0usage')\nprint('Correct\u00a0usage:\u00a0filecopy.py\u00a0-s\u00a0<source>\u00a0-t\u00a0<target>')\nsys.exit(1)\nsource\u00a0=\u00a0''\ntarget\u00a0=\u00a0''\ntry :\noptions,\u00a0arguments\u00a0=\u00a0getopt.getopt(sys.argv[1:],'hs:t:')\nexcept\u00a0getopt.GetoptError :\nprint('filecopy.py\u00a0-s\u00a0<source>\u00a0-t\u00a0<target>')\nelse\u00a0:\nfor\u00a0opt,\u00a0arg\u00a0in\u00a0options :\nif\u00a0opt\u00a0==\u00a0'-h' :\nprint('filecopy.py\u00a0-s\u00a0<source>\u00a0-t\u00a0<target>')\nsys.exit(2)\nelif\u00a0opt\u00a0==\u00a0'-s'\u00a0:\nsource\u00a0=\u00a0arg\nelif\u00a0opt\u00a0==\u00a0'-t'\u00a0:\ntarget\u00a0=\u00a0arg\nelse\u00a0:\nprint('source\u00a0file:\u00a0',\u00a0source)\nprint('target\u00a0file:\u00a0',\u00a0target)\nif\u00a0source\u00a0and\u00a0target\u00a0:\nshutil.copyfile(source,\u00a0target)\nx\nsys.argv[1:] returns\u00a0 the\u00a0 command-line\u00a0 except\u00a0 the\u00a0 name\u00a0 of\u00a0 the\u00a0\nprogram,\u00a0i.e.\u00a0filecopy.py.\nx\nCommand\u00a0line\u00a0and\u00a0the\u00a0valid\u00a0options\u00a0are\u00a0passed\u00a0to\u00a0getopt(\u00a0).\u00a0In\u00a0our\u00a0\ncase\u00a0the\u00a0valid\u00a0options\u00a0are\u00a0-s,\u00a0-t and\u00a0-h.\u00a0If\u00a0an\u00a0option\u00a0has\u00a0an argument\u00a0\nit\u00a0is\u00a0indicated\u00a0using\u00a0the\u00a0: after\u00a0the\u00a0argument,\u00a0as\u00a0in\u00a0s: and\u00a0t:. -h option\u00a0\nhas\u00a0no\u00a0argument.\nx\nThe\u00a0getopt(\u00a0) method\u00a0parses\u00a0sys.argv[1:] and\u00a0returns\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_491", "chunk_strategy": "fixed_size"}}, {"text": "ns\u00a0are\u00a0-s,\u00a0-t and\u00a0-h.\u00a0If\u00a0an\u00a0option\u00a0has\u00a0an argument\u00a0\nit\u00a0is\u00a0indicated\u00a0using\u00a0the\u00a0: after\u00a0the\u00a0argument,\u00a0as\u00a0in\u00a0s: and\u00a0t:. -h option\u00a0\nhas\u00a0no\u00a0argument.\nx\nThe\u00a0getopt(\u00a0) method\u00a0parses\u00a0sys.argv[1:] and\u00a0returns\u00a0two\u00a0lists\u0376a\u00a0list\nof\u00a0(option,\u00a0argument)\u00a0pairs\u00a0and\u00a0a\u00a0list\u00a0of\u00a0non-option\u00a0arguments.\nx\nSome\u00a0examples\u00a0of\u00a0contents\u00a0of\u00a0these\u00a0two\u00a0lists\u00a0are\u00a0given\u00a0below:\nExample\u00a01:\nfilecopy.py\u00a0 -s\u00a0 phone\u00a0 -t\u00a0newphone\u00a0\n338\nLet\u00a0Us\u00a0Python\noptions would\u00a0be\u00a0[('-s',\u00a0'phone'),\u00a0('-t',\u00a0'newphone')]\narguments would\u00a0be\u00a0[\u00a0]\u00a0\nExample\u00a02:\nfilecopy.py\u00a0 -h\noptions would\u00a0be\u00a0[('-h',\u00a0'\u00a0')]\narguments would\u00a0be\u00a0[\u00a0]\nExample\u00a03:\nfilecopy.py\u00a0 -s\u00a0 phone\u00a0 -t\u00a0newphone\u00a0word1\u00a0word2\noptions would\u00a0be\u00a0[('-s',\u00a0'phone'),\u00a0('-t',\u00a0'newphone')]\narguments would\u00a0be\u00a0['word1',\u00a0'word2']\nx\nNote\u00a0 that\u00a0 non-option\u00a0 arguments\u00a0 like\u00a0 word1,\u00a0 word2 must\u00a0 always\u00a0\nfollow\u00a0option\u00a0arguments like\u00a0-s,\u00a0-t,\u00a0-h,\u00a0otherwise\u00a0they\u00a0too\u00a0would\u00a0be\u00a0\ntreated\u00a0as\u00a0non-option\u00a0arguments.\nx\nsys.exit( ) terminates\u00a0the\u00a0execution\u00a0of\u00a0the\u00a0program.\nx\nIDLE\u00a0 has\u00a0 no\u00a0 GUI-based\u00a0 provision\u00a0 to\u00a0 provi", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_492", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0option\u00a0arguments like\u00a0-s,\u00a0-t,\u00a0-h,\u00a0otherwise\u00a0they\u00a0too\u00a0would\u00a0be\u00a0\ntreated\u00a0as\u00a0non-option\u00a0arguments.\nx\nsys.exit( ) terminates\u00a0the\u00a0execution\u00a0of\u00a0the\u00a0program.\nx\nIDLE\u00a0 has\u00a0 no\u00a0 GUI-based\u00a0 provision\u00a0 to\u00a0 provide\u00a0 command-line\u00a0\narguments.\u00a0So\u00a0at\u00a0command\u00a0prompt\u00a0you\u00a0have\u00a0to\u00a0execute\u00a0program\u00a0as\u00a0\nfollows:\nC:\\>idle.py\u00a0-r\u00a0filecopy.py\u00a0 -s\u00a0 phone\u00a0 -t\u00a0newphone\nHere\u00a0-r indicates\u00a0that\u00a0when\u00a0IDLE\u00a0is\u00a0launched\u00a0it\u00a0should\u00a0run\u00a0the\u00a0script\u00a0\nfollowing\u00a0-r.\nx\nWhen\u00a0 we\u00a0 are\u00a0 experimenting\u00a0 with\u00a0 getopt(\u00a0 ) function,\u00a0 frequently\u00a0\ngoing\u00a0 to\u00a0command-prompt\u00a0to\u00a0execute\u00a0the\u00a0script\u00a0 becomes\u00a0tedious.\u00a0\nInstead\u00a0you\u00a0can\u00a0set\u00a0up\u00a0sys.argv[\u00a0] at\u00a0the\u00a0beginning\u00a0of\u00a0the\u00a0program\u00a0as\u00a0\nshown\u00a0below:\nsys.argv\u00a0=\u00a0['filecopy.py',\u00a0 '-s',\u00a0 'phone',\u00a0 '-t',\u00a0'newphone']\nBitwise\u00a0Operators\nx\nBitwise\u00a0 operators\u00a0permit\u00a0us\u00a0 to\u00a0 work\u00a0with\u00a0individual\u00a0bits\u00a0of\u00a0 a\u00a0byte.\u00a0\nThere\u00a0are\u00a0many\u00a0bitwise\u00a0operators\u00a0available:\n~\u00a0- not\u00a0(also\u00a0called\u00a0complement\u00a0operator)\n<<\u00a0- left\u00a0shift,\u00a0>>\u00a0- right\u00a0shift\n&\u00a0- and,\u00a0|\u00a0- or,\u00a0^\u00a0- xor\nx\nBitwise\u00a0operators\u00a0usage:\nChapter 24:\u00a0Miscellany\n", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_493", "chunk_strategy": "fixed_size"}}, {"text": "te.\u00a0\nThere\u00a0are\u00a0many\u00a0bitwise\u00a0operators\u00a0available:\n~\u00a0- not\u00a0(also\u00a0called\u00a0complement\u00a0operator)\n<<\u00a0- left\u00a0shift,\u00a0>>\u00a0- right\u00a0shift\n&\u00a0- and,\u00a0|\u00a0- or,\u00a0^\u00a0- xor\nx\nBitwise\u00a0operators\u00a0usage:\nChapter 24:\u00a0Miscellany\n339\nch\u00a0=\u00a032\ndh\u00a0=\u00a0~ch\n#\u00a0toggles\u00a00s\u00a0to1s\u00a0and\u00a01s\u00a0to\u00a00s\neh\u00a0=\u00a0ch\u00a0<<\u00a03\u00a0\n#\u00a0<<\u00a0shifts\u00a0bits\u00a0in\u00a0ch\u00a03\u00a0positions\u00a0to\u00a0left\nfh\u00a0=\u00a0ch\u00a0>>\u00a02\u00a0\n#\u00a0>>\u00a0shifts\u00a0bits\u00a0in\u00a0ch\u00a02\u00a0positions\u00a0to\u00a0right\na\u00a0=\u00a045\u00a0&\u00a032\n#\u00a0and\u00a0bits\u00a0of\u00a045\u00a0and\u00a032\nb\u00a0=\u00a045\u00a0|\u00a032\n#\u00a0or\u00a0bits\u00a0of\u00a045\u00a0and\u00a032\nc\u00a0=\u00a045\u00a0^\u00a032\n#\u00a0xor\u00a0bits\u00a0of\u00a045\u00a0and\u00a032\nx\nRemember:\nAnything\u00a0ANDed\u00a0with\u00a00\u00a0is\u00a00.\nAnything\u00a0ORed\u00a0with\u00a01\u00a0is\u00a01.\n1\u00a0XORed\u00a0with\u00a01\u00a0is\u00a00.\n<<\u00a0- As\u00a0bits\u00a0are\u00a0shifted\u00a0from\u00a0left,\u00a0zeros\u00a0are\u00a0pushed\u00a0from\u00a0right.\n>>\u00a0- As\u00a0bits\u00a0are\u00a0shifted\u00a0from\u00a0right,\u00a0left-most\u00a0bit\u00a0is\u00a0copied\u00a0from\u00a0left.\nx\nPurpose\u00a0of\u00a0each\u00a0bitwise\u00a0operator is\u00a0given\u00a0below:\u00a0\n~\u00a0\n- Convert\u00a00\u00a0to\u00a01\u00a0and\u00a01\u00a0to\u00a00\n<<\u00a0 >>\u00a0 - Shift\u00a0out\u00a0desired\u00a0number\u00a0of\u00a0bits\u00a0from\u00a0left\u00a0or\u00a0right\n&\u00a0\n- Check\u00a0whether\u00a0a\u00a0bit\u00a0is\u00a0on\u00a0/\u00a0off.\u00a0 Put\u00a0off\u00a0a\u00a0particular\u00a0bit\n|\u00a0\n- Put on\u00a0a\u00a0particular\u00a0bit\n^\u00a0\n- Toggle\u00a0a\u00a0bit\nx\nBitwise\u00a0in-place\u00a0operators:\u00a0<<=\u00a0 >>=\u00a0 &=\u00a0|=", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_494", "chunk_strategy": "fixed_size"}}, {"text": "t\u00a0desired\u00a0number\u00a0of\u00a0bits\u00a0from\u00a0left\u00a0or\u00a0right\n&\u00a0\n- Check\u00a0whether\u00a0a\u00a0bit\u00a0is\u00a0on\u00a0/\u00a0off.\u00a0 Put\u00a0off\u00a0a\u00a0particular\u00a0bit\n|\u00a0\n- Put on\u00a0a\u00a0particular\u00a0bit\n^\u00a0\n- Toggle\u00a0a\u00a0bit\nx\nBitwise\u00a0in-place\u00a0operators:\u00a0<<=\u00a0 >>=\u00a0 &=\u00a0|=\u00a0 ^=\na\u00a0=\u00a0a\u00a0<<\u00a05 is\u00a0same\u00a0as\u00a0a\u00a0<<=\u00a05\nb =\u00a0b & 2 is\u00a0same\u00a0as\u00a0b\u00a0&=\u00a02\nx\nExcept\u00a0~\u00a0all\u00a0other\u00a0bitwise\u00a0operators\u00a0are\u00a0binary\u00a0operators.\nAssertion\nx\nAn\u00a0 assertion\u00a0 allows\u00a0 you\u00a0 to\u00a0 express\u00a0 programmatically\u00a0 your\u00a0\nassumption\u00a0about\u00a0the\u00a0data\u00a0at\u00a0a\u00a0particular\u00a0point\u00a0in\u00a0execution.\nx\nAssertions\u00a0perform\u00a0run-time\u00a0checks of\u00a0assumptions\u00a0that\u00a0you\u00a0would\u00a0\nhave\u00a0otherwise\u00a0put\u00a0in code\u00a0comments.\u00a0\n#\u00a0denominator\u00a0should\u00a0be\u00a0non-zero,\u00a0i.e.\u00a0numlist\u00a0must\u00a0not\u00a0be\u00a0empty\navg\u00a0=\u00a0sum(numlist)\u00a0/\u00a0len(numlist)\nInstead\u00a0of\u00a0this,\u00a0a\u00a0safer\u00a0way\u00a0to\u00a0code\u00a0will\u00a0be:\n340\nLet\u00a0Us\u00a0Python\nassert\u00a0len(numlist)\u00a0!=\u00a00\navg\u00a0=\u00a0sum(numlist)\u00a0/\u00a0len(numlist)\nIf\u00a0 the\u00a0condition\u00a0following\u00a0assert is\u00a0true,\u00a0 program\u00a0proceeds\u00a0to\u00a0next\u00a0\ninstruction.\u00a0 If\u00a0 it\u00a0 turns\u00a0 out\u00a0 to\u00a0 be\u00a0 false\u00a0 then an\u00a0 AssertionError\nexception\u00a0occurs.\u00a0\nx\nAssertion\u00a0may\u00a0also\u00a0be\u00a0followed\u00a0by\u00a0a\u00a0relevant", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_495", "chunk_strategy": "fixed_size"}}, {"text": "ondition\u00a0following\u00a0assert is\u00a0true,\u00a0 program\u00a0proceeds\u00a0to\u00a0next\u00a0\ninstruction.\u00a0 If\u00a0 it\u00a0 turns\u00a0 out\u00a0 to\u00a0 be\u00a0 false\u00a0 then an\u00a0 AssertionError\nexception\u00a0occurs.\u00a0\nx\nAssertion\u00a0may\u00a0also\u00a0be\u00a0followed\u00a0by\u00a0a\u00a0relevant\u00a0message,\u00a0which\u00a0will\u00a0be\u00a0\ndisplayed\u00a0if\u00a0the\u00a0condition\u00a0fails.\nassert\u00a0len(numlist)\u00a0!=\u00a00,\u00a0'Check\u00a0denominator,\u00a0it\u00a0appears\u00a0to\u00a0be\u00a00'\u00a0\navg\u00a0=\u00a0sum(numlist)\u00a0/\u00a0len(numlist)\nx\nBenefits\u00a0of\u00a0Assertions:\n-\nOver\u00a0a\u00a0period\u00a0of\u00a0time\u00a0comments\u00a0may\u00a0get\u00a0out-of-date.\u00a0Same\u00a0will\u00a0\nnot\u00a0be\u00a0the\u00a0case\u00a0with\u00a0assert,\u00a0because\u00a0if\u00a0they\u00a0do,\u00a0then\u00a0they\u00a0will\u00a0fail\u00a0\nfor\u00a0legitimate\u00a0cases,\u00a0and\u00a0you\u00a0will\u00a0be\u00a0forced\u00a0to\u00a0update\u00a0them.\n-\nAssert\u00a0statements are\u00a0very\u00a0useful\u00a0while\u00a0debugging\u00a0a program\u00a0as\u00a0\nit\u00a0 halts\u00a0 the\u00a0 program\u00a0 at\u00a0 the\u00a0 point\u00a0 where\u00a0 an\u00a0 error\u00a0 occurs.\u00a0 This\u00a0\nmakes\u00a0sense\u00a0as\u00a0there\u00a0is\u00a0no\u00a0point\u00a0 in\u00a0continuing\u00a0the\u00a0execution\u00a0if\u00a0\nthe\u00a0assumption\u00a0is\u00a0no\u00a0longer\u00a0true.\n-\nWith assert statements, failures\u00a0appear\u00a0earlier and\u00a0closer\u00a0to\u00a0the\u00a0\nlocations\u00a0of\u00a0the\u00a0errors,\u00a0which\u00a0makes\u00a0it easier\u00a0to\u00a0diagnose\u00a0and\u00a0fix\nthem.\nDecorators\nx\nFunctions\u00a0are\u00a0'first-cl", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_496", "chunk_strategy": "fixed_size"}}, {"text": "on\u00a0is\u00a0no\u00a0longer\u00a0true.\n-\nWith assert statements, failures\u00a0appear\u00a0earlier and\u00a0closer\u00a0to\u00a0the\u00a0\nlocations\u00a0of\u00a0the\u00a0errors,\u00a0which\u00a0makes\u00a0it easier\u00a0to\u00a0diagnose\u00a0and\u00a0fix\nthem.\nDecorators\nx\nFunctions\u00a0are\u00a0'first-class\u00a0citizens' of\u00a0Python.\u00a0This\u00a0means\u00a0like\u00a0integers,\u00a0\nstrings,\u00a0 lists,\u00a0 modules,\u00a0 etc.\u00a0 functions\u00a0 too\u00a0 can\u00a0 be\u00a0 created\u00a0 and\u00a0\ndestroyed\u00a0 dynamically,\u00a0 passed\u00a0 to\u00a0other\u00a0 functions and returned\u00a0 as\u00a0\nvalues.\nx\nFirst\u00a0class\u00a0citizenship\u00a0feature\u00a0is\u00a0used\u00a0in\u00a0developing\u00a0decorators.\u00a0\nx\nA\u00a0 decorator\u00a0 function\u00a0 receives\u00a0 a\u00a0 function,\u00a0 adds\u00a0 some\u00a0 functionality\u00a0\n(decoration)\u00a0to\u00a0it\u00a0and\u00a0returns\u00a0it.\nx\nThere\u00a0are\u00a0many\u00a0decorators\u00a0available\u00a0in\u00a0the\u00a0library.\u00a0These\u00a0include\u00a0the\u00a0\ndecorator\u00a0@abstractmethod that\u00a0we\u00a0used\u00a0in\u00a0Chapter\u00a020.\nx\nOther\u00a0 commonly\u00a0 used\u00a0 library\u00a0 decorators\u00a0 are\u00a0 @classmethod,\u00a0\n@staticmethod\u00a0and\u00a0@property.\u00a0@classmethod and\u00a0@staticmethod\nChapter 24:\u00a0Miscellany\n341\ndecorators\u00a0 are\u00a0 used\u00a0 to\u00a0 define\u00a0 methods\u00a0 inside\u00a0 a\u00a0 class\u00a0 namespace\u00a0\nthat\u00a0 are\u00a0 not\u00a0connected\u00a0 to\u00a0 a\u00a0 particular\u00a0 instance\u00a0 of\u00a0 tha", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_497", "chunk_strategy": "fixed_size"}}, {"text": "perty.\u00a0@classmethod and\u00a0@staticmethod\nChapter 24:\u00a0Miscellany\n341\ndecorators\u00a0 are\u00a0 used\u00a0 to\u00a0 define\u00a0 methods\u00a0 inside\u00a0 a\u00a0 class\u00a0 namespace\u00a0\nthat\u00a0 are\u00a0 not\u00a0connected\u00a0 to\u00a0 a\u00a0 particular\u00a0 instance\u00a0 of\u00a0 that\u00a0 class.\u00a0 The\u00a0\n@property decorator\u00a0 is\u00a0 used\u00a0 to\u00a0customize\u00a0 getters\u00a0 and\u00a0 setters\u00a0for\u00a0\nclass\u00a0attributes.\u00a0\nx\nWe\u00a0 can\u00a0 also\u00a0 create\u00a0 user-defined\u00a0 decorators,\u00a0 as\u00a0 shown\u00a0 in\u00a0 the\u00a0\nfollowing\u00a0program:\ndef\u00a0my_decorator(func)\u00a0:\ndef\u00a0wrapper(\u00a0)\u00a0:\nprint('*****************')\nfunc(\u00a0)\nprint('~~~~~~~~~~~~~~~~~')\nreturn\u00a0wrapper\ndef\u00a0display(\u00a0)\u00a0:\nprint('I\u00a0stand\u00a0decorated')\ndef\u00a0show(\u00a0)\u00a0:\nprint('Nothing\u00a0great. Me\u00a0too!')\ndisplay\u00a0=\u00a0my_decorator(display)\ndisplay(\u00a0)\nshow\u00a0=\u00a0my_decorator(show)\nshow(\u00a0)\nOn\u00a0executing\u00a0the\u00a0program,\u00a0we\u00a0get\u00a0the\u00a0following\u00a0output.\n*****************\nI\u00a0stand\u00a0decorated\n~~~~~~~~~~~~~~~~~\n*****************\nNothing\u00a0great.\u00a0Me\u00a0too!\n~~~~~~~~~~~~~~~~~\nx\nHere\u00a0 display(\u00a0 ) and\u00a0 show(\u00a0 ) are\u00a0 normal\u00a0 functions.\u00a0 Both\u00a0 these\u00a0\nfunctions\u00a0 have\u00a0 been\u00a0 decorated\u00a0 by\u00a0 a\u00a0 decorator\u00a0 function\u00a0 called\u00a0\nmy_dec", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_498", "chunk_strategy": "fixed_size"}}, {"text": "**********\nNothing\u00a0great.\u00a0Me\u00a0too!\n~~~~~~~~~~~~~~~~~\nx\nHere\u00a0 display(\u00a0 ) and\u00a0 show(\u00a0 ) are\u00a0 normal\u00a0 functions.\u00a0 Both\u00a0 these\u00a0\nfunctions\u00a0 have\u00a0 been\u00a0 decorated\u00a0 by\u00a0 a\u00a0 decorator\u00a0 function\u00a0 called\u00a0\nmy_decorator(\u00a0).\u00a0The\u00a0decorator\u00a0function\u00a0has\u00a0an\u00a0inner\u00a0function\u00a0called\u00a0\nwrapper(\u00a0).\u00a0\nx\nName\u00a0of\u00a0a\u00a0function\u00a0merely\u00a0contains\u00a0address\u00a0of\u00a0the\u00a0function\u00a0object.\u00a0\nHence,\u00a0in\u00a0the\u00a0statement\ndisplay\u00a0=\u00a0my_decorator(display)\n342\nLet\u00a0Us\u00a0Python\nwe\u00a0 are\u00a0 passing\u00a0 address\u00a0 of\u00a0 function\u00a0display(\u00a0 ) to\u00a0my_decorator(\u00a0 ).\u00a0\nmy_decorator(\u00a0) collects\u00a0it\u00a0in\u00a0func,\u00a0and\u00a0returns\u00a0address\u00a0of\u00a0the\u00a0inner\u00a0\nfunction\u00a0wrapper(\u00a0).\u00a0We\u00a0are\u00a0collecting\u00a0this\u00a0address\u00a0back\u00a0in\u00a0display.\nx\nWhen\u00a0we\u00a0call\u00a0display(\u00a0),\u00a0in\u00a0reality\u00a0wrapper(\u00a0) gets\u00a0called.\u00a0Since\u00a0it\u00a0is\u00a0\nan\u00a0inner\u00a0function,\u00a0it\u00a0has\u00a0access\u00a0to\u00a0variable\u00a0func of\u00a0the\u00a0outer\u00a0function.\u00a0\nIt\u00a0uses\u00a0the\u00a0 address\u00a0stored\u00a0 in\u00a0func to\u00a0call\u00a0 the\u00a0function\u00a0display(\u00a0).\u00a0 It\u00a0\nprints\u00a0a\u00a0pattern before\u00a0and\u00a0after\u00a0this\u00a0call.\nx\nOnce\u00a0 a\u00a0 decorator\u00a0 has\u00a0 been\u00a0 created,\u00a0 it\u00a0can\u00a0 be\u00a0 applied\u00a0 to multiple\u00a0\nfunctions.\u00a0In\u00a0addi", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_499", "chunk_strategy": "fixed_size"}}, {"text": "ress\u00a0stored\u00a0 in\u00a0func to\u00a0call\u00a0 the\u00a0function\u00a0display(\u00a0).\u00a0 It\u00a0\nprints\u00a0a\u00a0pattern before\u00a0and\u00a0after\u00a0this\u00a0call.\nx\nOnce\u00a0 a\u00a0 decorator\u00a0 has\u00a0 been\u00a0 created,\u00a0 it\u00a0can\u00a0 be\u00a0 applied\u00a0 to multiple\u00a0\nfunctions.\u00a0In\u00a0addition\u00a0to\u00a0display(\u00a0),\u00a0we\u00a0have\u00a0also\u00a0applied\u00a0it\u00a0to\u00a0show(\u00a0)\nfunction.\nx\nThe\u00a0 syntax\u00a0 of\u00a0 decorating\u00a0 display(\u00a0 ) is\u00a0 complex\u00a0 for\u00a0 two\u00a0 reasons.\u00a0\nFirstly,\u00a0 we\u00a0 have\u00a0 to\u00a0 use\u00a0 the\u00a0 word\u00a0 display thrice.\u00a0 Secondly,\u00a0 the\u00a0\ndecoration\u00a0 gets\u00a0 a\u00a0 bit\u00a0 hidden\u00a0 away\u00a0 below\u00a0 the\u00a0 definition\u00a0 of\u00a0 the\u00a0\nfunction.\nx\nTo\u00a0 solve\u00a0both\u00a0 the\u00a0problems,\u00a0Python\u00a0permits\u00a0usage\u00a0of\u00a0@ symbol to\u00a0\ndecorate\u00a0a\u00a0function\u00a0as\u00a0shown\u00a0below:\ndef\u00a0my_decorator(func)\u00a0:\ndef\u00a0wrapper(\u00a0)\u00a0:\nprint('*****************')\nfunc(\u00a0)\nprint('~~~~~~~~~~~~~~~~~')\nreturn\u00a0wrapper\n@my_decorator\ndef\u00a0display(\u00a0)\u00a0:\nprint('I\u00a0stand\u00a0decorated')\n@my_decorator\ndef\u00a0show(\u00a0)\u00a0:\nprint('Nothing\u00a0great.\u00a0Me\u00a0too!')\ndisplay(\u00a0)\nshow(\u00a0)\nDecorating\u00a0Functions\u00a0with\u00a0Arguments\nx\nSuppose\u00a0we\u00a0wish\u00a0to\u00a0define\u00a0a\u00a0decorator\u00a0that\u00a0can\u00a0report\u00a0time\u00a0required\u00a0\nfor\u00a0executing\u00a0any\u00a0function.\u00a0We\u00a0want", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_500", "chunk_strategy": "fixed_size"}}, {"text": "w(\u00a0)\u00a0:\nprint('Nothing\u00a0great.\u00a0Me\u00a0too!')\ndisplay(\u00a0)\nshow(\u00a0)\nDecorating\u00a0Functions\u00a0with\u00a0Arguments\nx\nSuppose\u00a0we\u00a0wish\u00a0to\u00a0define\u00a0a\u00a0decorator\u00a0that\u00a0can\u00a0report\u00a0time\u00a0required\u00a0\nfor\u00a0executing\u00a0any\u00a0function.\u00a0We\u00a0want\u00a0a\u00a0common\u00a0decorator\u00a0which\u00a0will\u00a0\nChapter 24:\u00a0Miscellany\n343\nwork\u00a0for\u00a0any\u00a0function\u00a0regardless\u00a0of\u00a0number\u00a0and\u00a0type\u00a0of\u00a0arguments\u00a0\nthat\u00a0it\u00a0receives\u00a0and\u00a0returns.\u00a0\nimport\u00a0time\ndef\u00a0timer(func) :\ndef\u00a0calculate(*args,\u00a0**kwargs) :\nstart_time\u00a0=\u00a0time.perf_counter( )\nvalue\u00a0=\u00a0func(*args,\u00a0**kwargs)\nend_time\u00a0=\u00a0time.perf_counter( )\nruntime\u00a0=\u00a0end_time\u00a0- start_time\nprint(f'Finished\u00a0{func.__name__!r}\u00a0in\u00a0{runtime:.8f}\u00a0secs')\nreturn\u00a0value\nreturn\u00a0calculate\n@timer\ndef\u00a0product(num)\u00a0:\nfact\u00a0=\u00a01\nfor\u00a0i\u00a0in\u00a0range(num)\u00a0:\nfact\u00a0=\u00a0fact\u00a0*\u00a0i\u00a0+\u00a01\nreturn\u00a0fact\n@timer\ndef\u00a0product_and_sum(num)\u00a0:\np\u00a0=\u00a01\nfor\u00a0i\u00a0in\u00a0range(num)\u00a0:\np\u00a0=\u00a0p\u00a0*\u00a0i\u00a0+\u00a01\ns\u00a0=\u00a00\nfor\u00a0i\u00a0in\u00a0range(num)\u00a0:\ns\u00a0=\u00a0s\u00a0+\u00a0i\u00a0+\u00a01\nreturn\u00a0(p,\u00a0s)\n@timer\ndef\u00a0time_pass(num) :\nfor\u00a0i\u00a0in\u00a0range(num)\u00a0:\ni\u00a0+=\u00a01\np\u00a0= product(10)\nprint('product\u00a0of\u00a0first\u00a010\u00a0numbers\u00a0=',\u00a0p)\np\u00a0=\u00a0product(20)\nprint('produ", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_501", "chunk_strategy": "fixed_size"}}, {"text": "\ns\u00a0=\u00a00\nfor\u00a0i\u00a0in\u00a0range(num)\u00a0:\ns\u00a0=\u00a0s\u00a0+\u00a0i\u00a0+\u00a01\nreturn\u00a0(p,\u00a0s)\n@timer\ndef\u00a0time_pass(num) :\nfor\u00a0i\u00a0in\u00a0range(num)\u00a0:\ni\u00a0+=\u00a01\np\u00a0= product(10)\nprint('product\u00a0of\u00a0first\u00a010\u00a0numbers\u00a0=',\u00a0p)\np\u00a0=\u00a0product(20)\nprint('product\u00a0of\u00a0first\u00a020\u00a0numbers\u00a0=',\u00a0p)\nfs\u00a0=\u00a0product_and_sum(10)\n344\nLet\u00a0Us\u00a0Python\nprint('product\u00a0and\u00a0sum\u00a0of\u00a0first\u00a010\u00a0numbers =',\u00a0fs)\nfs\u00a0=\u00a0product_and_sum(20)\nprint('product\u00a0and\u00a0sum\u00a0of\u00a0first\u00a020\u00a0numbers =',\u00a0fs)\ntime_pass(20)\nHere\u00a0is\u00a0the\u00a0output\u00a0of\u00a0the\u00a0program...\nFinished\u00a0'product'\u00a0in\u00a00.00000770\u00a0secs\nproduct\u00a0of\u00a0first\u00a010\u00a0numbers\u00a0=\u00a0986410\nFinished\u00a0'product'\u00a0in\u00a00.00001240\u00a0secs\nproduct\u00a0of\u00a0first\u00a020\u00a0numbers\u00a0=\u00a0330665665962404000\nFinished\u00a0'product_and_sum'\u00a0in 0.00001583\u00a0secs\nproduct\u00a0and\u00a0sum\u00a0of\u00a0first\u00a010\u00a0numbers\u00a0=\u00a0(986410,\u00a055)\nFinished\u00a0'product_and_sum'\u00a0in\u00a00.00001968\u00a0secs\nproduct\u00a0and\u00a0sum\u00a0of\u00a0first\u00a020\u00a0numbers\u00a0=\u00a0(330665665962404000,\u00a0210)\nFinished\u00a0'time_pass'\u00a0in\u00a00.00000813\u00a0secs\nx\nWe\u00a0have\u00a0determined\u00a0execution\u00a0time\u00a0of\u00a0three\u00a0functions\u0376product(\u00a0),\u00a0\nproduct_and_sum(\u00a0)\u00a0and\u00a0time_pass(\u00a0).\u00a0Each\u00a0varies\u00a0in\u00a0arguments\u00a0and\u00a0\nretur", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_502", "chunk_strategy": "fixed_size"}}, {"text": "5665962404000,\u00a0210)\nFinished\u00a0'time_pass'\u00a0in\u00a00.00000813\u00a0secs\nx\nWe\u00a0have\u00a0determined\u00a0execution\u00a0time\u00a0of\u00a0three\u00a0functions\u0376product(\u00a0),\u00a0\nproduct_and_sum(\u00a0)\u00a0and\u00a0time_pass(\u00a0).\u00a0Each\u00a0varies\u00a0in\u00a0arguments\u00a0and\u00a0\nreturn\u00a0type.\u00a0We\u00a0are\u00a0still\u00a0able\u00a0to\u00a0apply\u00a0the\u00a0same\u00a0decorator\u00a0@timer to\u00a0\nall\u00a0of\u00a0them.\nx\nThe\u00a0arguments\u00a0passed\u00a0while\u00a0calling\u00a0the\u00a0three functions\u00a0are\u00a0received\u00a0\nin\u00a0*args and **kwargs. This\u00a0 takes\u00a0care\u00a0of\u00a0any\u00a0number\u00a0of\u00a0positional\u00a0\narguments\u00a0and\u00a0any\u00a0number\u00a0of\u00a0keyword\u00a0arguments\u00a0that\u00a0are\u00a0needed\u00a0\nby\u00a0 the\u00a0 function.\u00a0 They\u00a0 are\u00a0 then\u00a0 passed\u00a0 to\u00a0 the\u00a0 suitable\u00a0 functions\u00a0\nthrough\u00a0the\u00a0call\u00a0\nvalue\u00a0=\u00a0func(*args,\u00a0**kwargs)\nx\nThe\u00a0value(s)\u00a0returned\u00a0by\u00a0the\u00a0function\u00a0being\u00a0called\u00a0is/are collected\u00a0in\u00a0\nvalue and\u00a0returned.\nx\nRather\u00a0than\u00a0finding\u00a0the\u00a0difference\u00a0between\u00a0the\u00a0start\u00a0and\u00a0end\u00a0time\u00a0of\u00a0\na\u00a0function\u00a0in\u00a0terms\u00a0of\u00a0seconds\u00a0a\u00a0performance\u00a0counter\u00a0is\u00a0used.\nx\ntime.perf_counter(\u00a0) returns\u00a0the\u00a0value\u00a0of\u00a0a\u00a0performance\u00a0counter,\u00a0i.e.\u00a0\na\u00a0 clock\u00a0 in\u00a0fractional\u00a0 seconds.\u00a0 Difference\u00a0 between\u00a0 two\u00a0consecutive\u00a0\ncalls\u00a0 to\u00a0this\u00a0 functi", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_503", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0a\u00a0performance\u00a0counter\u00a0is\u00a0used.\nx\ntime.perf_counter(\u00a0) returns\u00a0the\u00a0value\u00a0of\u00a0a\u00a0performance\u00a0counter,\u00a0i.e.\u00a0\na\u00a0 clock\u00a0 in\u00a0fractional\u00a0 seconds.\u00a0 Difference\u00a0 between\u00a0 two\u00a0consecutive\u00a0\ncalls\u00a0 to\u00a0this\u00a0 function\u00a0determines\u00a0the\u00a0time\u00a0required\u00a0 for\u00a0executing\u00a0a\u00a0\nfunction.\nx\nOn\u00a0similar\u00a0lines\u00a0it\u00a0is\u00a0possible\u00a0to\u00a0define\u00a0decorators\u00a0for\u00a0methods\u00a0in\u00a0a\u00a0\nclass.\nChapter 24:\u00a0Miscellany\n345\nUnicode\nx\nUnicode\u00a0is\u00a0a\u00a0standard\u00a0for\u00a0representation,\u00a0encoding,\u00a0and\u00a0handling\u00a0of\u00a0\ntext\u00a0expressed\u00a0in\u00a0all\u00a0scripts\u00a0of\u00a0the\u00a0world.\nx\nIt\u00a0is\u00a0a\u00a0myth\u00a0that\u00a0every\u00a0character\u00a0in\u00a0Unicode\u00a0is\u00a02\u00a0bytes\u00a0long.\u00a0Unicode\u00a0\nhas\u00a0already\u00a0gone\u00a0beyond\u00a065536\u00a0characters\u0376the\u00a0maximum\u00a0number\u00a0\nof\u00a0characters\u00a0that\u00a0can\u00a0be\u00a0represented\u00a0using\u00a02\u00a0bytes.\u00a0\nx\nIn\u00a0Unicode\u00a0every\u00a0character\u00a0is\u00a0assigned\u00a0an\u00a0integer\u00a0value\u00a0called\u00a0code\u00a0\npoint,\u00a0which\u00a0is usually\u00a0expressed\u00a0in\u00a0Hexadecimal.\u00a0\nx\nCode\u00a0points\u00a0for\u00a0A,\u00a0B,\u00a0C,\u00a0D,\u00a0E\u00a0are\u00a00041,\u00a00042,\u00a00043,\u00a00044,\u00a00045.\u00a0Code\u00a0\npoints\u00a0for\u00a0characters\u00a0\u0905\u0906\u0907\u0908\u00ea\nof\u00a0Devanagari\u00a0script\u00a0are\u00a00905,\u00a0\n0906,\u00a00907,\u00a00908,\u00a00909.\nx\nComputers\u00a0 understand\u00a0only\u00a0bytes.\u00a0So\u00a0we\u00a0ne", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_504", "chunk_strategy": "fixed_size"}}, {"text": "x\nCode\u00a0points\u00a0for\u00a0A,\u00a0B,\u00a0C,\u00a0D,\u00a0E\u00a0are\u00a00041,\u00a00042,\u00a00043,\u00a00044,\u00a00045.\u00a0Code\u00a0\npoints\u00a0for\u00a0characters\u00a0\u0905\u0906\u0907\u0908\u00ea\nof\u00a0Devanagari\u00a0script\u00a0are\u00a00905,\u00a0\n0906,\u00a00907,\u00a00908,\u00a00909.\nx\nComputers\u00a0 understand\u00a0only\u00a0bytes.\u00a0So\u00a0we\u00a0need\u00a0a\u00a0way\u00a0to\u00a0represent\u00a0\nUnicode\u00a0 code\u00a0 points\u00a0 as\u00a0 bytes\u00a0 in\u00a0 order\u00a0 to\u00a0 store\u00a0 or\u00a0 transmit\u00a0them.\u00a0\nUnicode\u00a0 standard\u00a0 defines\u00a0 a\u00a0 number\u00a0 of\u00a0 ways\u00a0 to\u00a0 represent\u00a0 code\u00a0\npoints\u00a0as\u00a0bytes.\u00a0These\u00a0are\u00a0called\u00a0encodings.\nx\nThere\u00a0 are\u00a0 different\u00a0 encoding\u00a0 schemes\u00a0 like\u00a0 UTF-8,\u00a0 UTF-16,\u00a0 ASCII,\u00a0\n8859-1,\u00a0 Windows\u00a0 1252,\u00a0 etc.\u00a0 UTF-8\u00a0 is\u00a0 perhaps\u00a0 the\u00a0 most\u00a0 popular\u00a0\nencoding\u00a0scheme.\nx\nThe\u00a0 same\u00a0 Unicode\u00a0 code\u00a0 point\u00a0 will\u00a0 be\u00a0 interpreted\u00a0 differently\u00a0 by\u00a0\ndifferent\u00a0encoding\u00a0schemes.\u00a0\nx\nCode\u00a0point 0041\u00a0maps\u00a0to\u00a0byte\u00a0value\u00a041\u00a0in\u00a0UTF-8,\u00a0whereas\u00a0it\u00a0maps\u00a0to\u00a0\nbyte\u00a0 values\u00a0ff fe 00 in\u00a0UTF-16.\u00a0Similarly,\u00a0 code\u00a0 point\u00a00905\u00a0 maps\u00a0 to\u00a0\nbyte\u00a0values\u00a0e0\u00a0a4\u00a085\u00a0and\u00a0ff\u00a0fe\u00a005\u00a0\\t\u00a0in\u00a0UTF-8\u00a0and\u00a0UTF-16\u00a0repsectively.\u00a0\nYou\u00a0may\u00a0refer\u00a0table\u00a0available\u00a0at\u00a0https://en.wikipedia.org/wiki/UTF-8 (https://en\nfor\u00a0one\u00a0to\u00a0one\u00a0mapping\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_505", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0 point\u00a00905\u00a0 maps\u00a0 to\u00a0\nbyte\u00a0values\u00a0e0\u00a0a4\u00a085\u00a0and\u00a0ff\u00a0fe\u00a005\u00a0\\t\u00a0in\u00a0UTF-8\u00a0and\u00a0UTF-16\u00a0repsectively.\u00a0\nYou\u00a0may\u00a0refer\u00a0table\u00a0available\u00a0at\u00a0https://en.wikipedia.org/wiki/UTF-8 (https://en\nfor\u00a0one\u00a0to\u00a0one\u00a0mapping\u00a0of\u00a0code\u00a0points\u00a0to\u00a0byte\u00a0values.\nx\nUTF-8\u00a0uses\u00a0 a\u00a0variable\u00a0number\u00a0of\u00a0bytes\u00a0for\u00a0each\u00a0code\u00a0point.\u00a0Higher\u00a0\nthe\u00a0code\u00a0point\u00a0value,\u00a0more\u00a0the\u00a0bytes\u00a0it\u00a0needs\u00a0in\u00a0UTF-8.\u00a0\nbytes Datatype\nx\nIn\u00a0 Python\u00a0 text\u00a0 is\u00a0always\u00a0represented\u00a0as\u00a0 Unicode\u00a0 characters\u00a0 and\u00a0is\u00a0\nrepresented\u00a0 by\u00a0 str type,\u00a0 whereas,\u00a0 binary\u00a0 data\u00a0 is\u00a0 represented\u00a0 by\u00a0\nbytes type.\u00a0You\u00a0can\u00a0create\u00a0a\u00a0bytes literal\u00a0with\u00a0a\u00a0prefix b.\ns\u00a0=\u00a0'Hi'\nprint(type(s))\n346\nLet\u00a0Us\u00a0Python\nprint(type('Hello'))\nby =\u00a0b'\\xe0\\xa4\\x85'\nprint(type(by))\nprint(type(b'\\xee\\x84\\x65'))\nwill\u00a0output\n<class\u00a0'str'>\n<class\u00a0'str'>\n<class\u00a0'bytes'>\n<class\u00a0'bytes'>\nx\nWe\u00a0 can't\u00a0mix\u00a0str and\u00a0 bytes in\u00a0 concatenation,\u00a0in\u00a0checking\u00a0 whether\u00a0\none\u00a0is\u00a0embedded\u00a0inside\u00a0another, or\u00a0while\u00a0passing\u00a0one\u00a0to\u00a0a\u00a0function\u00a0\nthat\u00a0expects\u00a0the\u00a0other.\u00a0\nx\nStrings\u00a0can\u00a0be encoded to\u00a0bytes,\u00a0and\u00a0bytes\u00a0can\u00a0be d", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_506", "chunk_strategy": "fixed_size"}}, {"text": "r and\u00a0 bytes in\u00a0 concatenation,\u00a0in\u00a0checking\u00a0 whether\u00a0\none\u00a0is\u00a0embedded\u00a0inside\u00a0another, or\u00a0while\u00a0passing\u00a0one\u00a0to\u00a0a\u00a0function\u00a0\nthat\u00a0expects\u00a0the\u00a0other.\u00a0\nx\nStrings\u00a0can\u00a0be encoded to\u00a0bytes,\u00a0and\u00a0bytes\u00a0can\u00a0be decoded back\u00a0to\u00a0\nstrings as\u00a0shown\u00a0below:\neng\u00a0=\u00a0'A\u00a0B\u00a0C\u00a0D'\ndev\u00a0\u0441\u00a0\u0396\u0905\u0906\n\u0907\u0908\u0396\nprint(type(eng))\nprint(type(dev))\nprint(eng)\nprint(dev)\nprint\u00a0(eng.encode('utf-8')\u00a0)\nprint\u00a0(eng.encode('utf-16')\u00a0)\nprint\u00a0(dev.encode('utf-8')\u00a0)\nprint\u00a0(dev.encode('utf-16')\u00a0)\nprint(b'A\u00a0B\u00a0C\u00a0D'.decode('utf-8'))\nprint(b'\\xff\\xfeA\\x00\u00a0\\x00B\\x00\u00a0\\x00C\\x00\u00a0\\x00D\\x00'\n.decode('utf-16'))\nprint(b'\\xe0\\xa4\\x85\u00a0\\xe0\\xa4\\x86\u00a0\\xe0\\xa4\\x87\\xe0\\xa4\\x88'\n.decode('utf-8'))\nprint(b'\\xff\\xfe\\x05\\t\u00a0\\x00\\x06\\t\u00a0\\x00\\x07\\t\u00a0\\x00\\x08\\t'\n.decode('utf-16'))\nExecution\u00a0of\u00a0this\u00a0program\u00a0produces\u00a0the\u00a0following\u00a0output:\n<class\u00a0'str'>\nChapter 24:\u00a0Miscellany\n347\n<class\u00a0'str'>\n\u0905\u0906\u0907\u0908\nA\u00a0B\u00a0C\u00a0D\nb'A\u00a0B\u00a0C\u00a0D'\nb'\\xff\\xfeA\\x00\u00a0\\x00B\\x00\u00a0\\x00C\\x00\u00a0\\x00D\\x00'\nb'\\xe0\\xa4\\x85\u00a0\\xe0\\xa4\\x86\u00a0\\xe0\\xa4\\x87\u00a0\\xe0\\xa4\\x88'\nb'\\xff\\xfe\\x05\\t\u00a0\\x00\\x06\\t\u00a0\\x00\\x07\\t\u00a0\\x00\\x08\\t'\nA\u00a0B\u00a0C\u00a0D", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_507", "chunk_strategy": "fixed_size"}}, {"text": "7\n<class\u00a0'str'>\n\u0905\u0906\u0907\u0908\nA\u00a0B\u00a0C\u00a0D\nb'A\u00a0B\u00a0C\u00a0D'\nb'\\xff\\xfeA\\x00\u00a0\\x00B\\x00\u00a0\\x00C\\x00\u00a0\\x00D\\x00'\nb'\\xe0\\xa4\\x85\u00a0\\xe0\\xa4\\x86\u00a0\\xe0\\xa4\\x87\u00a0\\xe0\\xa4\\x88'\nb'\\xff\\xfe\\x05\\t\u00a0\\x00\\x06\\t\u00a0\\x00\\x07\\t\u00a0\\x00\\x08\\t'\nA\u00a0B\u00a0C\u00a0D\nA\u00a0B\u00a0C\u00a0D\n\u0905\u0906\u0907\u0908\n\u0905\u0906\u0907\u0908\nx\nHow\u00a0these\u00a0Unicode\u00a0code\u00a0points\u00a0will\u00a0be interpreted\u00a0by\u00a0your\u00a0machine\u00a0\nor\u00a0your\u00a0software\u00a0depends\u00a0upon\u00a0the\u00a0encoding\u00a0scheme\u00a0used.\u00a0If\u00a0we\u00a0do\u00a0\nnot\u00a0specify\u00a0the\u00a0encoding\u00a0scheme,\u00a0then\u00a0the\u00a0default\u00a0encoding\u00a0scheme\u00a0\nset\u00a0on\u00a0your\u00a0machine\u00a0will\u00a0be\u00a0used.\nx\nWe\u00a0can\u00a0find\u00a0out\u00a0the\u00a0default\u00a0encoding\u00a0scheme\u00a0by\u00a0printing\u00a0the\u00a0value\u00a0\npresent\u00a0in\u00a0sys.stdin.encoding.\u00a0On\u00a0my\u00a0machine\u00a0it\u00a0is\u00a0set\u00a0to\u00a0UTF-8.\nx\nSo\u00a0when\u00a0we\u00a0print\u00a0eng or\u00a0dev strings,\u00a0the\u00a0code\u00a0points\u00a0present\u00a0in\u00a0the\u00a0\nstrings\u00a0 are\u00a0 mapped\u00a0 to\u00a0 UTF-8\u00a0 byte\u00a0 values\u00a0 and\u00a0 characters\u00a0\ncorresponding\u00a0to\u00a0these\u00a0byte\u00a0values\u00a0are\u00a0printed.\nCreate\u00a0Executable\u00a0File\u00a0\nx\nIf\u00a0 we\u00a0are\u00a0developing\u00a0a\u00a0 program\u00a0for\u00a0a\u00a0client,\u00a0 rather\u00a0than\u00a0giving\u00a0the\u00a0\nsource\u00a0code\u00a0of\u00a0our\u00a0program,\u00a0we\u00a0would\u00a0prefer\u00a0to\u00a0given\u00a0an\u00a0executable\u00a0\nversion\u00a0of\u00a0it.\u00a0The\u00a0steps\u00a0 involved\u00a0in\u00a0creating\u00a0the\u00a0executable\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_508", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0 we\u00a0are\u00a0developing\u00a0a\u00a0 program\u00a0for\u00a0a\u00a0client,\u00a0 rather\u00a0than\u00a0giving\u00a0the\u00a0\nsource\u00a0code\u00a0of\u00a0our\u00a0program,\u00a0we\u00a0would\u00a0prefer\u00a0to\u00a0given\u00a0an\u00a0executable\u00a0\nversion\u00a0of\u00a0it.\u00a0The\u00a0steps\u00a0 involved\u00a0in\u00a0creating\u00a0the\u00a0executable\u00a0file\u00a0 are\u00a0\ngiven\u00a0below:\nx\nStep\u00a01:\u00a0Install\u00a0the\u00a0Pyinstaller\u00a0Package\u00a0\nIn\u00a0the\u00a0Windows\u00a0Command\u00a0Prompt,\u00a0type\u00a0the\u00a0following\u00a0command\u00a0to\u00a0\ninstall\u00a0the\u00a0pyinstaller\u00a0package\u00a0(and\u00a0then\u00a0press\u00a0Enter):\nC:\\Users\\Kanetkar>pip\u00a0install\u00a0pyinstaller\nx\nStep\u00a02:\u00a0Go\u00a0to\u00a0folder\u00a0where\u00a0the\u00a0Python\u00a0script\u00a0is\u00a0stored.\nC:\\Users\\Kanetkar>CD\u00a0Programs\nx\nStep\u00a03:\u00a0Create\u00a0the\u00a0Executable\u00a0using\u00a0Pyinstaller\nC:\\Users\\Kanetkar\\Programs>pyinstaller\u00a0--onefile\u00a0ScriptName.py\n348\nLet\u00a0Us\u00a0Python\nx\nStep\u00a04:\u00a0Executable\u00a0file\u00a0pythonScriptName.exe\u00a0will\u00a0be\u00a0created\u00a0in\u00a0'dist'\u00a0\nfolder.\u00a0Double-click\u00a0the\u00a0EXE\u00a0file to\u00a0execute\u00a0it.\n____________________________________________________________________\nProblem\u00a024.1\nWrite\u00a0a\u00a0program\u00a0that\u00a0displays\u00a0all\u00a0files\u00a0in\u00a0current\u00a0directory.\u00a0It\u00a0can\u00a0receive\u00a0\noptions\u00a0-h\u00a0or\u00a0-l\u00a0or\u00a0-w\u00a0from\u00a0command-line.\u00a0If\u00a0-h\u00a0is\u00a0received\u00a0display\u00a0hel", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_509", "chunk_strategy": "fixed_size"}}, {"text": "_____________________________________\nProblem\u00a024.1\nWrite\u00a0a\u00a0program\u00a0that\u00a0displays\u00a0all\u00a0files\u00a0in\u00a0current\u00a0directory.\u00a0It\u00a0can\u00a0receive\u00a0\noptions\u00a0-h\u00a0or\u00a0-l\u00a0or\u00a0-w\u00a0from\u00a0command-line.\u00a0If\u00a0-h\u00a0is\u00a0received\u00a0display\u00a0help\u00a0\nabout\u00a0the\u00a0program.\u00a0If\u00a0-l\u00a0is\u00a0received,\u00a0display\u00a0files\u00a0one\u00a0line\u00a0at\u00a0a\u00a0time,.\u00a0If\u00a0-w\u00a0\nis\u00a0received,\u00a0display\u00a0files\u00a0separated\u00a0by\u00a0tab\u00a0character.\nProgram\n#\u00a0mydir.py\nimport\u00a0os,\u00a0sys,\u00a0getopt\nif\u00a0len(sys.argv)\u00a0==\u00a01\u00a0:\nprint(os.listdir('.'))\nsys.exit(1)\ntry :\noptions,\u00a0arguments\u00a0=\u00a0getopt.getopt(sys.argv[1:],'hlw')\nprint(options)\nprint(arguments)\nfor\u00a0opt,\u00a0arg\u00a0in\u00a0options\u00a0:\nprint(opt)\nif\u00a0opt\u00a0==\u00a0'-h':\nprint('mydir.py\u00a0-h\u00a0-l\u00a0-w')\nsys.exit(2)\nelif\u00a0opt\u00a0==\u00a0'-l'\u00a0:\nlst\u00a0=\u00a0os.listdir('.')\nprint(*lst,\u00a0sep\u00a0=\u00a0'\\n')\nelif\u00a0opt\u00a0==\u00a0'-w'\u00a0:\nlst\u00a0=\u00a0os.listdir('.')\nprint(*lst,\u00a0sep\u00a0=\u00a0'\\t')\nexcept\u00a0getopt.GetoptError :\nprint('mydir.py\u00a0-h\u00a0-l\u00a0-w')\nChapter 24:\u00a0Miscellany\n349\nOutput\nC:\\>mydir\u00a0 -l\ndata\nmessages\nmydir\nnbproject\nnumbers\nnumbersbin\nnumberstxt\nsampledata\nsrc\n____________________________________________________________________", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_510", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0-l\u00a0-w')\nChapter 24:\u00a0Miscellany\n349\nOutput\nC:\\>mydir\u00a0 -l\ndata\nmessages\nmydir\nnbproject\nnumbers\nnumbersbin\nnumberstxt\nsampledata\nsrc\n____________________________________________________________________\nProblem 24.2\nDefine\u00a0a\u00a0 function\u00a0show_bits(\u00a0 ) which\u00a0 displays\u00a0the\u00a0 binary\u00a0equivalent\u00a0of\u00a0\nthe\u00a0integer\u00a0passed\u00a0to\u00a0it.\u00a0Call\u00a0it\u00a0to\u00a0display\u00a0binary\u00a0equivalent\u00a0of\u00a045.\nProgram\ndef\u00a0show_bits(n)\u00a0:\nfor\u00a0i\u00a0in\u00a0range(32,\u00a0-1,\u00a0-1)\u00a0:\nandmask\u00a0=\u00a01\u00a0<<\u00a0i\u00a0\nk\u00a0=\u00a0n\u00a0&\u00a0andmask\u00a0\nprint('0',\u00a0end\u00a0=\u00a0'')\u00a0if\u00a0k\u00a0==\u00a00\u00a0else\u00a0print('1',\u00a0end\u00a0=\u00a0'')\u00a0\nshow_bits(45)\nprint(\u00a0)\nprint(bin(45))\nOutput\n000000000000000000000000000101101\n0b101101\nTips\nx\nshow_bits(\u00a0) performs\u00a0a\u00a0bitwise\u00a0and\u00a0operation\u00a0with\u00a0individual\u00a0bits\u00a0of\u00a0\n45,\u00a0and\u00a0prints\u00a0a\u00a01\u00a0or\u00a00\u00a0based\u00a0on\u00a0the\u00a0value\u00a0of\u00a0the\u00a0individual\u00a0bit.\n____________________________________________________________________\n350\nLet\u00a0Us\u00a0Python\nProblem\u00a024.3\nWindows\u00a0stores\u00a0date\u00a0of\u00a0creation\u00a0of\u00a0a\u00a0file\u00a0as\u00a0a\u00a02-byte\u00a0number\u00a0with\u00a0the\u00a0\nfollowing\u00a0bit\u00a0distribution:\nleft-most\u00a07\u00a0bits:\u00a0 year\u00a0- 1980\nmiddle\u00a04\u00a0bits\u00a0- month\nright-m", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_511", "chunk_strategy": "fixed_size"}}, {"text": "_________\n350\nLet\u00a0Us\u00a0Python\nProblem\u00a024.3\nWindows\u00a0stores\u00a0date\u00a0of\u00a0creation\u00a0of\u00a0a\u00a0file\u00a0as\u00a0a\u00a02-byte\u00a0number\u00a0with\u00a0the\u00a0\nfollowing\u00a0bit\u00a0distribution:\nleft-most\u00a07\u00a0bits:\u00a0 year\u00a0- 1980\nmiddle\u00a04\u00a0bits\u00a0- month\nright-most\u00a05\u00a0bits\u00a0- day\nWrite\u00a0a\u00a0program\u00a0that\u00a0converts\u00a09766\u00a0into\u00a0a\u00a0date\u00a06/1/1999.\nProgram\ndt\u00a0=\u00a09766\ny\u00a0=\u00a0(dt\u00a0>>\u00a09)\u00a0+\u00a01980\nm\u00a0=\u00a0(dt\u00a0&\u00a00b111100000)\u00a0>>\u00a05\nd\u00a0=\u00a0(dt\u00a0&\u00a00b11111)\u00a0\nprint(str(d)\u00a0+\u00a0'/'\u00a0+\u00a0str(m)\u00a0+\u00a0'/'\u00a0+\u00a0str(y))\u00a0\nOutput\n6/1/1999\nTips\nx\nNumber\u00a0preceded\u00a0by\u00a00b\u00a0is\u00a0treated\u00a0as\u00a0a\u00a0binary\u00a0number.\n____________________________________________________________________\nProblem\u00a024.4\nWindows\u00a0 stores\u00a0 time\u00a0 of\u00a0 creation\u00a0 of\u00a0 a\u00a0 file\u00a0 as\u00a0 a\u00a0 2-byte number.\u00a0\nDistribution\u00a0 of\u00a0 different\u00a0 bits\u00a0 which\u00a0 account\u00a0 for\u00a0 hours,\u00a0 minutes\u00a0 and\u00a0\nseconds\u00a0is\u00a0as\u00a0follows:\nleft-most\u00a05\u00a0bits:\u00a0 hours\nmiddle\u00a06\u00a0bits\u00a0- minute\nright-most\u00a05\u00a0bits\u00a0- second\u00a0/\u00a02\nWrite\u00a0a\u00a0program\u00a0to\u00a0convert\u00a0time\u00a0represented\u00a0by\u00a0a\u00a0number\u00a026031\u00a0into\u00a0\n12:45:30.\nProgram\ntm\u00a0=\u00a026031\nChapter 24:\u00a0Miscellany\n351\nhr\u00a0=\u00a0tm\u00a0>>\u00a011\nmin\u00a0=\u00a0(tm\u00a0&\u00a00b11111100000)\u00a0>>\u00a05\nsec\u00a0=\u00a0(tm\u00a0&\u00a00", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_512", "chunk_strategy": "fixed_size"}}, {"text": "its\u00a0- second\u00a0/\u00a02\nWrite\u00a0a\u00a0program\u00a0to\u00a0convert\u00a0time\u00a0represented\u00a0by\u00a0a\u00a0number\u00a026031\u00a0into\u00a0\n12:45:30.\nProgram\ntm\u00a0=\u00a026031\nChapter 24:\u00a0Miscellany\n351\nhr\u00a0=\u00a0tm\u00a0>>\u00a011\nmin\u00a0=\u00a0(tm\u00a0&\u00a00b11111100000)\u00a0>>\u00a05\nsec\u00a0=\u00a0(tm\u00a0&\u00a00b11111)\u00a0*\u00a02\nprint(str(hr)\u00a0+\u00a0':'\u00a0+\u00a0str(min)\u00a0+\u00a0':'\u00a0+\u00a0str(sec))\u00a0\nOutput\n12:45:30\n____________________________________________________________________\nProblem\u00a024.5\nWrite\u00a0assert\u00a0statements\u00a0for\u00a0the\u00a0following\u00a0with\u00a0suitable\u00a0messages:\n- Salary\u00a0multiplier\u00a0sm\u00a0must\u00a0be\u00a0non-zero\n- Both\u00a0p\u00a0and\u00a0q\u00a0are\u00a0of\u00a0same\u00a0type\n- Value\u00a0present\u00a0in\u00a0num\u00a0is\u00a0part\u00a0of\u00a0the\u00a0list\u00a0lst\n- Length\u00a0of\u00a0combined\u00a0string\u00a0is\u00a045\u00a0characters\n- Gross\u00a0salary\u00a0is\u00a0in\u00a0the\u00a0range\u00a030,000\u00a0to\u00a045,000\nProgram\n#\u00a0Salary\u00a0multiplier\u00a0m\u00a0must\u00a0be\u00a0non-zero\nsm\u00a0=\u00a045\nassert\u00a0sm\u00a0!=\u00a00,\u00a0'Oops,\u00a0salary\u00a0multiplier\u00a0is\u00a00'\n#\u00a0Both\u00a0p\u00a0and\u00a0q\u00a0are\u00a0of\u00a0type\u00a0Sample\nclass\u00a0Sample\u00a0:\npass\nclass\u00a0NewSample\u00a0:\npass\np\u00a0=\u00a0Sample(\u00a0)\nq\u00a0=\u00a0NewSample(\u00a0)\nassert\u00a0type(p)\u00a0==\u00a0type(q),\u00a0'Type\u00a0mismatch'\u00a0\n#\u00a0Value\u00a0present\u00a0in\u00a0num\u00a0is\u00a0part\u00a0of\u00a0the\u00a0list\u00a0lst\nnum\u00a0=\u00a045\nlst\u00a0=\u00a0[10,\u00a020,\u00a030,\u00a040,\u00a050]\nassert\u00a0num\u00a0in\u00a0lst,\u00a0'num\u00a0i", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_513", "chunk_strategy": "fixed_size"}}, {"text": "NewSample\u00a0:\npass\np\u00a0=\u00a0Sample(\u00a0)\nq\u00a0=\u00a0NewSample(\u00a0)\nassert\u00a0type(p)\u00a0==\u00a0type(q),\u00a0'Type\u00a0mismatch'\u00a0\n#\u00a0Value\u00a0present\u00a0in\u00a0num\u00a0is\u00a0part\u00a0of\u00a0the\u00a0list\u00a0lst\nnum\u00a0=\u00a045\nlst\u00a0=\u00a0[10,\u00a020,\u00a030,\u00a040,\u00a050]\nassert\u00a0num\u00a0in\u00a0lst,\u00a0'num\u00a0is\u00a0missing\u00a0from\u00a0lst'\n352\nLet\u00a0Us\u00a0Python\n#\u00a0Length\u00a0of\u00a0combined\u00a0string\u00a0is\u00a0less\u00a0than\u00a045\u00a0characters\ns1\u00a0=\u00a0'A\u00a0successful\u00a0marriage\u00a0requires\u00a0falling\u00a0in\u00a0love\u00a0many\u00a0times...'\ns2\u00a0=\u00a0'Always\u00a0with\u00a0the\u00a0same\u00a0person!'\ns\u00a0=\u00a0s1\u00a0+\u00a0s2\u00a0\nassert\u00a0len(s)\u00a0<=\u00a045,\u00a0'String\u00a0s\u00a0is\u00a0too\u00a0long'\n#\u00a0Gross\u00a0salary\u00a0is\u00a0in\u00a0the\u00a0range\u00a030,000\u00a0to\u00a045,000\ngs\u00a0=\u00a030000\u00a0+\u00a020000\u00a0*\u00a015\u00a0/\u00a0100\u00a0+\u00a020000\u00a0*\u00a012\u00a0/\u00a0100\nassert\u00a0gs\u00a0>=\u00a030000\u00a0and\u00a0gs\u00a0<=\u00a045000,\u00a0'Gross\u00a0salary\u00a0out\u00a0of\u00a0range'\n____________________________________________________________________\nProblem\u00a024.6\nDefine\u00a0a\u00a0decorator\u00a0that\u00a0will\u00a0decorate\u00a0any\u00a0function\u00a0such\u00a0that\u00a0it\u00a0prepends\u00a0\na\u00a0 call\u00a0 with\u00a0a\u00a0 message\u00a0 indicating\u00a0 that\u00a0 the\u00a0 function\u00a0is\u00a0 being\u00a0 called\u00a0and\u00a0\nfollows\u00a0the\u00a0 call\u00a0 with\u00a0a\u00a0 message\u00a0 indicating\u00a0 that\u00a0 the\u00a0function\u00a0 has\u00a0been\u00a0\ncalled.\u00a0Also, report\u00a0the\u00a0name\u00a0of\u00a0the\u00a0function\u00a0being\u00a0called,\u00a0its\u00a0argume", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_514", "chunk_strategy": "fixed_size"}}, {"text": "icating\u00a0 that\u00a0 the\u00a0 function\u00a0is\u00a0 being\u00a0 called\u00a0and\u00a0\nfollows\u00a0the\u00a0 call\u00a0 with\u00a0a\u00a0 message\u00a0 indicating\u00a0 that\u00a0 the\u00a0function\u00a0 has\u00a0been\u00a0\ncalled.\u00a0Also, report\u00a0the\u00a0name\u00a0of\u00a0the\u00a0function\u00a0being\u00a0called,\u00a0its\u00a0arguments\u00a0\nand\u00a0its\u00a0return\u00a0value.\u00a0A\u00a0sample\u00a0output\u00a0is\u00a0given\u00a0below:\nCalling\u00a0sum_num\u00a0((10,\u00a020),\u00a0{\u00a0})\nCalled\u00a0sum_num\u00a0((10,\u00a020),\u00a0{\u00a0})\u00a0got\u00a0return\u00a0value:\u00a030\nProgram\ndef\u00a0calldecorator(func)\u00a0:\ndef\u00a0_decorated(*arg, **kwargs)\u00a0:\nprint(f'Calling\u00a0{func.__name__}\u00a0({arg}, {kwargs})')\nret\u00a0=\u00a0func(*arg, **kwargs)\nprint(f'Called\u00a0{func.__name__}\u00a0({arg},\u00a0{kwargs})\u00a0got\u00a0ret val:\u00a0{ret}')\nreturn\u00a0ret\nreturn\u00a0_decorated\n@calldecorator\ndef\u00a0sum_num(arg1,arg2)\u00a0:\nreturn\u00a0arg1\u00a0+\u00a0arg2\u00a0\n@calldecorator\ndef\u00a0prod_num(arg1,arg2)\u00a0:\nreturn\u00a0arg1\u00a0*\u00a0arg2\u00a0\n@calldecorator\ndef\u00a0message(msg)\u00a0:\npass\nChapter 24:\u00a0Miscellany\n353\nsum_num(10,\u00a020)\nprod_num(10,\u00a020)\nmessage('Errors\u00a0should\u00a0never\u00a0pass\u00a0silently')\nOutput\nCalling\u00a0sum_num\u00a0((10,\u00a020),\u00a0{\u00a0})\nCalled\u00a0sum_num\u00a0((10,\u00a020),\u00a0{\u00a0})\u00a0got\u00a0return\u00a0value:\u00a030\nCalling\u00a0prod_num\u00a0((10,\u00a020),\u00a0{\u00a0})\nCalled\u00a0prod_num\u00a0((10,\u00a02", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_515", "chunk_strategy": "fixed_size"}}, {"text": "10,\u00a020)\nmessage('Errors\u00a0should\u00a0never\u00a0pass\u00a0silently')\nOutput\nCalling\u00a0sum_num\u00a0((10,\u00a020),\u00a0{\u00a0})\nCalled\u00a0sum_num\u00a0((10,\u00a020),\u00a0{\u00a0})\u00a0got\u00a0return\u00a0value:\u00a030\nCalling\u00a0prod_num\u00a0((10,\u00a020),\u00a0{\u00a0})\nCalled\u00a0prod_num\u00a0((10,\u00a020),\u00a0{\u00a0})\u00a0got\u00a0return\u00a0value:\u00a0200\nCalling\u00a0message\u00a0(('Errors\u00a0should\u00a0never\u00a0pass\u00a0silently',),\u00a0{\u00a0})\nCalled\u00a0 message\u00a0 (('Errors\u00a0 should\u00a0 never\u00a0 pass\u00a0 silently',),\u00a0 {\u00a0 })\u00a0 got\u00a0 return\u00a0\nvalue:\u00a0None\n____________________________________________________________________\n[A] State\u00a0whether\u00a0the\u00a0following\u00a0statements\u00a0are\u00a0True\u00a0or\u00a0False:\n(a) We\u00a0can\u00a0send\u00a0arguments\u00a0at\u00a0command-line\u00a0to\u00a0any\u00a0Python\u00a0program.\n(b) The\u00a0zeroth\u00a0element\u00a0of\u00a0sys.argv is\u00a0always\u00a0the\u00a0name\u00a0of\u00a0the file\u00a0being\u00a0\nexecuted.\n(c)\nIn\u00a0Python\u00a0a\u00a0function\u00a0is\u00a0treated\u00a0as\u00a0an\u00a0object.\n(d) A\u00a0function\u00a0can\u00a0be\u00a0passed\u00a0to\u00a0a\u00a0function\u00a0and\u00a0can\u00a0be\u00a0returned\u00a0from\u00a0a\u00a0\nfunction.\n(e) A\u00a0decorator\u00a0adds\u00a0some\u00a0features\u00a0to\u00a0an\u00a0existing\u00a0function.\n(f)\nOnce\u00a0a\u00a0decorator\u00a0has\u00a0been\u00a0created,\u00a0it\u00a0can\u00a0be\u00a0applied to\u00a0only\u00a0one\u00a0\nfunction\u00a0within\u00a0the\u00a0program.\n(g)\nIt\u00a0is\u00a0mandatory\u00a0that\u00a0the\u00a0function\u00a0being", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_516", "chunk_strategy": "fixed_size"}}, {"text": ") A\u00a0decorator\u00a0adds\u00a0some\u00a0features\u00a0to\u00a0an\u00a0existing\u00a0function.\n(f)\nOnce\u00a0a\u00a0decorator\u00a0has\u00a0been\u00a0created,\u00a0it\u00a0can\u00a0be\u00a0applied to\u00a0only\u00a0one\u00a0\nfunction\u00a0within\u00a0the\u00a0program.\n(g)\nIt\u00a0is\u00a0mandatory\u00a0that\u00a0the\u00a0function\u00a0being\u00a0decorated\u00a0should\u00a0not\u00a0\nreceive\u00a0any\u00a0arguments.\n(h) It\u00a0is\u00a0mandatory that\u00a0the\u00a0function\u00a0being\u00a0decorated\u00a0should\u00a0not\u00a0return\u00a0\nany\u00a0value.\n(i)\nType\u00a0of\u00a0'Good!'\u00a0is\u00a0bytes.\n(j)\nType\u00a0of\u00a0msg in the\u00a0statement msg\u00a0=\u00a0'Good!' is\u00a0str.\n354\nLet\u00a0Us\u00a0Python\n[B] Answer\u00a0the\u00a0following questions:\n(a) Is\u00a0it\u00a0necessary\u00a0to\u00a0mention\u00a0the\u00a0docstring\u00a0for\u00a0a\u00a0function\u00a0immediately\u00a0\nbelow\u00a0the\u00a0def statement?\n(b) Write\u00a0 a\u00a0 program\u00a0 using\u00a0 command-line\u00a0 arguments\u00a0 to\u00a0 search\u00a0 for\u00a0 a\u00a0\nword\u00a0in\u00a0a\u00a0file\u00a0and\u00a0replace\u00a0it\u00a0with\u00a0the\u00a0specified\u00a0word.\u00a0The\u00a0usage\u00a0of\u00a0\nthe\u00a0program\u00a0is\u00a0shown\u00a0below.\nC:\\>\u00a0change\u00a0 -o\u00a0oldword\u00a0 -n\u00a0newword\u00a0 -f\u00a0filename\n(c)\nWrite\u00a0 a\u00a0 program\u00a0 that\u00a0 can\u00a0 be\u00a0 used\u00a0 at\u00a0 command\u00a0 prompt\u00a0 as\u00a0 a\u00a0\ncalculating\u00a0utility.\u00a0The\u00a0usage\u00a0of\u00a0the\u00a0program\u00a0is\u00a0shown\u00a0below.\nC:\\>\u00a0calc\u00a0<switch>\u00a0<n>\u00a0<m>\nWhere,\u00a0 n\u00a0 and\u00a0 m\u00a0 are\u00a0 two\u00a0 integer\u00a0 operands.\u00a0 sw", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_517", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0 program\u00a0 that\u00a0 can\u00a0 be\u00a0 used\u00a0 at\u00a0 command\u00a0 prompt\u00a0 as\u00a0 a\u00a0\ncalculating\u00a0utility.\u00a0The\u00a0usage\u00a0of\u00a0the\u00a0program\u00a0is\u00a0shown\u00a0below.\nC:\\>\u00a0calc\u00a0<switch>\u00a0<n>\u00a0<m>\nWhere,\u00a0 n\u00a0 and\u00a0 m\u00a0 are\u00a0 two\u00a0 integer\u00a0 operands.\u00a0 switch can\u00a0 be\u00a0 any\u00a0\narithmetic\u00a0 operator.\u00a0 The\u00a0 output\u00a0 should\u00a0 be\u00a0 the\u00a0 result\u00a0 of\u00a0 the\u00a0\noperation.\u00a0\n(d) Rewrite\u00a0the\u00a0following expressions using\u00a0bitwise\u00a0in-place operators:\na\u00a0=\u00a0a\u00a0|\u00a03\na\u00a0=\u00a0a\u00a0&\u00a00x48\nb\u00a0=\u00a0b\u00a0^\u00a00x22\nc\u00a0=\u00a0c\u00a0<<\u00a02\u00a0\nd\u00a0=\u00a0d\u00a0>>\u00a04\n(e) Consider\u00a0an\u00a0unsigned integer\u00a0in\u00a0which\u00a0rightmost\u00a0bit\u00a0is\u00a0numbered\u00a0as\u00a0\n0.\u00a0Write\u00a0a\u00a0function\u00a0checkbits(x,\u00a0p,\u00a0n) which\u00a0returns\u00a0True\u00a0if\u00a0all\u00a0'n' bits\u00a0\nstarting\u00a0 from\u00a0 position\u00a0 'p' are\u00a0 on,\u00a0 False\u00a0 otherwise.\u00a0 For\u00a0 example,\ncheckbits(x,\u00a04,\u00a03) will\u00a0return\u00a0true\u00a0if\u00a0bits\u00a04,\u00a03\u00a0and\u00a02\u00a0are\u00a01\u00a0in\u00a0number\u00a0x.\n(f)\nWrite\u00a0a\u00a0program to\u00a0receive\u00a0a\u00a0number\u00a0as\u00a0 input\u00a0and\u00a0check\u00a0whether\u00a0\nits\u00a03rd,\u00a06th and\u00a07th bit\u00a0is\u00a0on.\n(g)\nWrite\u00a0a\u00a0program to\u00a0receive\u00a0a\u00a08-bit\u00a0number\u00a0into\u00a0a\u00a0variable\u00a0and\u00a0then\u00a0\nexchange\u00a0its\u00a0higher\u00a04\u00a0bits\u00a0with\u00a0lower\u00a04\u00a0bits.\n(h) Write\u00a0a\u00a0program\u00a0to\u00a0receive\u00a0a\u00a08-bit\u00a0number\u00a0into\u00a0a\u00a0va", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_518", "chunk_strategy": "fixed_size"}}, {"text": "rd,\u00a06th and\u00a07th bit\u00a0is\u00a0on.\n(g)\nWrite\u00a0a\u00a0program to\u00a0receive\u00a0a\u00a08-bit\u00a0number\u00a0into\u00a0a\u00a0variable\u00a0and\u00a0then\u00a0\nexchange\u00a0its\u00a0higher\u00a04\u00a0bits\u00a0with\u00a0lower\u00a04\u00a0bits.\n(h) Write\u00a0a\u00a0program\u00a0to\u00a0receive\u00a0a\u00a08-bit\u00a0number\u00a0into\u00a0a\u00a0variable\u00a0and\u00a0then\u00a0\nset\u00a0its\u00a0odd\u00a0bits\u00a0to\u00a01.\nLet\u00a0Us\nPython\n355\nConcurrency\u00a0and\nParallelism\u00a0\nx\nConcurrency\u00a0and\u00a0Parallelism\nx\nTypes\u00a0of\u00a0Concurrencies\nx\nWhat\u00a0are\u00a0Threads?\nx\nThread\u00a0Properties\nx\nConcurrency\u00a0&\u00a0Parallelism\u00a0in\u00a0\nProgramming\nx\nLaunching\u00a0Threads\nx\nCPU-bound\u00a0&\u00a0I/O-bound\u00a0Programs\nx\nPassing\u00a0parameters\u00a0to\u00a0a\nThread\nx\nWhich\u00a0to\u00a0use\u00a0when?\nx\nPrograms\nx\nConcurrency\u00a0for\u00a0Improving\u00a0\nPerformance\nx\nExercises\n25\n\u201cEfficient\u00a0is\u00a0better...\u201d\n356\nLet\u00a0Us\u00a0Python\nConcurrency\u00a0and\u00a0Parallelism\nx\nA\u00a0 task\u00a0is\u00a0an\u00a0 activity\u00a0that\u00a0 we\u00a0carry\u00a0out.\u00a0 For\u00a0 example,\u00a0driving\u00a0 a\u00a0car,\u00a0\nwatering\u00a0a\u00a0plant,\u00a0cooking\u00a0food,\u00a0etc.\u00a0are\u00a0all\u00a0tasks.\u00a0\nx\nWhen\u00a0we\u00a0perform\u00a0multiple\u00a0tasks in\u00a0overlapping times\u00a0we\u00a0are\u00a0doing\u00a0\nthem\u00a0 concurrently.\u00a0When\u00a0 we\u00a0perform\u00a0tasks\u00a0simultaneously we\u00a0are\u00a0\ndoing\u00a0them\u00a0parallelly.\nx\nThus\u00a0 though\u00a0 the\u00a0 words\u00a0 concurrency\u00a0 ", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_519", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0\nx\nWhen\u00a0we\u00a0perform\u00a0multiple\u00a0tasks in\u00a0overlapping times\u00a0we\u00a0are\u00a0doing\u00a0\nthem\u00a0 concurrently.\u00a0When\u00a0 we\u00a0perform\u00a0tasks\u00a0simultaneously we\u00a0are\u00a0\ndoing\u00a0them\u00a0parallelly.\nx\nThus\u00a0 though\u00a0 the\u00a0 words\u00a0 concurrency\u00a0 and\u00a0 parallelism\u00a0 indicate\u00a0\nhappening\u00a0of\u00a0two\u00a0or\u00a0more\u00a0tasks at\u00a0the\u00a0same\u00a0time,\u00a0they\u00a0are\u00a0not\u00a0the\u00a0\nsame\u00a0thing.\nx\nExample 1\u00a0 of\u00a0 concurrency:\u00a0 We\u00a0 watch\u00a0 TV,\u00a0 read\u00a0 a\u00a0 news-paper,\u00a0 sip\u00a0\ncoffee\u00a0in\u00a0overlapping\u00a0times.\u00a0At\u00a0any\u00a0given\u00a0moment\u00a0you\u00a0are\u00a0doing\u00a0only\u00a0\none\u00a0task.\nx\nExample\u00a02\u00a0of\u00a0concurrency:\u00a0In\u00a0a\u00a04\u00a0x\u00a0100\u00a0meter\u00a0relay\u00a0race,\u00a0each\u00a0runner\u00a0\nin\u00a0a\u00a0given\u00a0lane\u00a0has\u00a0to\u00a0run,\u00a0but\u00a0unless\u00a0the\u00a0first\u00a0runner\u00a0hands\u00a0over\u00a0the\u00a0\nbaton,\u00a0second\u00a0doesn't\u00a0start\u00a0and\u00a0unless\u00a0second\u00a0hands\u00a0over\u00a0the\u00a0baton\u00a0\nthe\u00a0third\u00a0doesn't\u00a0start.\u00a0So\u00a0at\u00a0any\u00a0given\u00a0moment\u00a0only\u00a0one\u00a0runner\u00a0in\u00a0\nrunning.\nx\nExample\u00a01\u00a0of\u00a0parallelism:\u00a0Example\u00a0of\u00a0parallelism:\u00a0While\u00a0driving\u00a0a\u00a0car\u00a0\nwe\u00a0 carry\u00a0 out\u00a0 several\u00a0 activities\u00a0 in\u00a0 parallel\u2014we\u00a0 listen\u00a0 to\u00a0music,\u00a0 we\u00a0\ndrive\u00a0the\u00a0car\u00a0and\u00a0we\u00a0talk\u00a0to\u00a0the\u00a0co-passengers.\u00a0\nx\nExample\u00a02\u00a0of\u00a0parallelism:\u00a0In\u00a0a\u00a0100\u00a0meter\u00a0race\u00a0each", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_520", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0While\u00a0driving\u00a0a\u00a0car\u00a0\nwe\u00a0 carry\u00a0 out\u00a0 several\u00a0 activities\u00a0 in\u00a0 parallel\u2014we\u00a0 listen\u00a0 to\u00a0music,\u00a0 we\u00a0\ndrive\u00a0the\u00a0car\u00a0and\u00a0we\u00a0talk\u00a0to\u00a0the\u00a0co-passengers.\u00a0\nx\nExample\u00a02\u00a0of\u00a0parallelism:\u00a0In\u00a0a\u00a0100\u00a0meter\u00a0race\u00a0each\u00a0runner\u00a0is\u00a0running\u00a0\nin\u00a0his\u00a0own\u00a0lane.\u00a0At\u00a0a\u00a0given\u00a0moment\u00a0all\u00a0runners\u00a0are\u00a0running.\u00a0\nWhat\u00a0are\u00a0Threads?\nx\nA\u00a0program\u00a0may\u00a0have\u00a0several\u00a0units\u00a0(parts).\u00a0Each\u00a0unit\u00a0of\u00a0execution\u00a0is\u00a0\ncalled\u00a0a\u00a0thread.\nx\nExample\u00a01\u00a0of\u00a0multiple\u00a0threads:\u00a0One\u00a0unit\u00a0of\u00a0execution\u00a0may\u00a0carry\u00a0out\u00a0\ncopying\u00a0of\u00a0files,\u00a0whereas\u00a0another\u00a0unit\u00a0may\u00a0display a\u00a0progress\u00a0bar.\nx\nExample\u00a02\u00a0of\u00a0multiple\u00a0threads:\u00a0One\u00a0unit\u00a0of\u00a0execution\u00a0may\u00a0download\u00a0\nimages,\u00a0whereas\u00a0another\u00a0unit\u00a0may\u00a0display\u00a0text.\nChapter 25:\u00a0Concurrency\u00a0and\u00a0Parallelism\u00a0\n357\nx\nExample\u00a0 3\u00a0 of\u00a0 multiple\u00a0 threads:\u00a0 One\u00a0 unit\u00a0 may\u00a0 let\u00a0 you\u00a0 edit\u00a0 a\u00a0\ndocument,\u00a0 second\u00a0 unit\u00a0 may\u00a0 check\u00a0 spellings,\u00a0third\u00a0 unit\u00a0 may\u00a0 check\u00a0\ngrammar\u00a0and\u00a0fourth\u00a0unit\u00a0may\u00a0do\u00a0printing.\nx\nExample\u00a04\u00a0of\u00a0multiple\u00a0threads:\u00a0One\u00a0unit\u00a0may\u00a0 scan\u00a0disk\u00a0 for\u00a0viruses,\u00a0\nsecond\u00a0unit\u00a0may\u00a0scan\u00a0memory for\u00a0viruses\u00a0and\u00a0third\u00a0unit\u00a0m", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_521", "chunk_strategy": "fixed_size"}}, {"text": "ings,\u00a0third\u00a0 unit\u00a0 may\u00a0 check\u00a0\ngrammar\u00a0and\u00a0fourth\u00a0unit\u00a0may\u00a0do\u00a0printing.\nx\nExample\u00a04\u00a0of\u00a0multiple\u00a0threads:\u00a0One\u00a0unit\u00a0may\u00a0 scan\u00a0disk\u00a0 for\u00a0viruses,\u00a0\nsecond\u00a0unit\u00a0may\u00a0scan\u00a0memory for\u00a0viruses\u00a0and\u00a0third\u00a0unit\u00a0may\u00a0let\u00a0you\u00a0\ninteract\u00a0with\u00a0the\u00a0program\u00a0user-interface\u00a0to\u00a0stop/pause\u00a0the\u00a0scanning\u00a0\nof\u00a0viruses\u00a0by\u00a0first\u00a0two\u00a0units.\nConcurrency\u00a0and\u00a0Parallelism\u00a0in\u00a0Programming\nx\nConcurrency is\u00a0when\u00a0multiple threads\u00a0of\u00a0a\u00a0 program\u00a0start,\u00a0run,\u00a0 and\u00a0\ncomplete\u00a0in overlapping time\u00a0periods.\u00a0\nx\nOnce\u00a0 the\u00a0program\u00a0 execution\u00a0begins\u00a0one\u00a0 thread\u00a0may\u00a0 run\u00a0for\u00a0 some\u00a0\ntime,\u00a0 then\u00a0 it\u00a0 may\u00a0 stop\u00a0 and\u00a0the\u00a0 second\u00a0 thread\u00a0 may\u00a0 start\u00a0 running.\u00a0\nAfter\u00a0 some\u00a0time,\u00a0second\u00a0 thread\u00a0may\u00a0 stop\u00a0 and\u00a0the\u00a0 third\u00a0may\u00a0 start\u00a0\nrunning.\u00a0\nx\nThreads\u00a0 may\u00a0 get\u00a0 executed\u00a0 in\u00a0 a\u00a0 round-robin\u00a0 fashion\u00a0 or\u00a0 based\u00a0 on\u00a0\npriority\u00a0 of\u00a0 each\u00a0 thread.\u00a0 At\u00a0 any\u00a0 given\u00a0 instance\u00a0 only\u00a0 one\u00a0 thread\u00a0 is\u00a0\nrunning.\u00a0\nx\nParallelism is\u00a0when\u00a0multiple\u00a0threads\u00a0of\u00a0a\u00a0program literally\u00a0run at\u00a0the\u00a0\nsame\u00a0time.\u00a0So\u00a0at\u00a0any\u00a0given\u00a0instance\u00a0multiple\u00a0threads\u00a0are\u00a0running.\u00a0\nx\nIn\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_522", "chunk_strategy": "fixed_size"}}, {"text": "ny\u00a0 given\u00a0 instance\u00a0 only\u00a0 one\u00a0 thread\u00a0 is\u00a0\nrunning.\u00a0\nx\nParallelism is\u00a0when\u00a0multiple\u00a0threads\u00a0of\u00a0a\u00a0program literally\u00a0run at\u00a0the\u00a0\nsame\u00a0time.\u00a0So\u00a0at\u00a0any\u00a0given\u00a0instance\u00a0multiple\u00a0threads\u00a0are\u00a0running.\u00a0\nx\nIn\u00a0concurrency\u00a0multiple\u00a0units\u00a0of\u00a0a\u00a0program\u00a0can\u00a0run\u00a0on\u00a0a\u00a0single-core\u00a0\nprocessor,\u00a0whereas,\u00a0in\u00a0parallelism\u00a0multiple\u00a0units\u00a0can\u00a0run\u00a0on\u00a0multiple\u00a0\ncores\u00a0of\u00a0a\u00a0multi-core\u00a0processor.\nx\nFigure\u00a025.1\u00a0shows\u00a0 working\u00a0how\u00a0threads\u00a0t1,\u00a0t2\u00a0and\u00a0t3\u00a0in\u00a0a\u00a0program\u00a0\nmay\u00a0run concurrently\u00a0or\u00a0in\u00a0parallel over\u00a0a\u00a0period\u00a0of\u00a0time.\nConcurrency\nTime\nTime\nParallelism\nt1\nt2\nt1\nt3\nt2\nt1\nt3\nt2\nFigure\u00a025.1\n358\nLet\u00a0Us\u00a0Python\nx\nAdvantages\u00a0of\u00a0Concurrency:\n-\nImproves\u00a0 application's\u00a0 speed,\u00a0 by\u00a0 making\u00a0 CPU\u00a0 do\u00a0 other\u00a0 things\u00a0\ninstead\u00a0of\u00a0waiting\u00a0for\u00a0slow\u00a0I/O\u00a0operations to\u00a0finish\n-\nSimplifies\u00a0 program\u00a0 design.\u00a0 For\u00a0 example,\u00a0 the\u00a0 logic\u00a0 that\u00a0 copies\u00a0\nfiles\u00a0 and\u00a0 logic\u00a0 that\u00a0 displays\u00a0 the\u00a0 progress\u00a0 bar\u00a0 can\u00a0 be\u00a0 kept\u00a0\nseparate.\nx\nAdvantage\u00a0of\u00a0Parallelism:\n-\nCapability\u00a0of\u00a0multi-core\u00a0processors\u00a0can\u00a0be\u00a0exploited\u00a0by\u00a0running\u00a0\ndifferent\u00a0pro", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_523", "chunk_strategy": "fixed_size"}}, {"text": "at\u00a0 copies\u00a0\nfiles\u00a0 and\u00a0 logic\u00a0 that\u00a0 displays\u00a0 the\u00a0 progress\u00a0 bar\u00a0 can\u00a0 be\u00a0 kept\u00a0\nseparate.\nx\nAdvantage\u00a0of\u00a0Parallelism:\n-\nCapability\u00a0of\u00a0multi-core\u00a0processors\u00a0can\u00a0be\u00a0exploited\u00a0by\u00a0running\u00a0\ndifferent\u00a0processes\u00a0in\u00a0each\u00a0processor\u00a0simultaneously.\nCPU-bound\u00a0and\u00a0I/O-bound\u00a0Programs\nx\nA\u00a0program\u00a0typically\u00a0performs\u00a0two\u00a0types\u00a0of\u00a0operations:\n-\nOperations\u00a0involving CPU\u00a0for\u00a0calculations,\u00a0comparisons,\u00a0etc.\u00a0\n-\nOperations\u00a0that\u00a0perform\u00a0input or\u00a0output\nx\nUsually\u00a0CPU\u00a0operations\u00a0run\u00a0several\u00a0times\u00a0faster\u00a0than\u00a0I/O\u00a0operations.\nx\nA\u00a0 program\u00a0 that\u00a0 predominantly\u00a0 performs CPU\u00a0 operations\u00a0 is called\u00a0\nCPU-bound\u00a0 program.\u00a0 A\u00a0 program\u00a0 that\u00a0 predominantly\u00a0 performs\u00a0 I/O\u00a0\noperations\u00a0is\u00a0called\u00a0I/O-bound\u00a0program.\nx\nExample\u00a0 of\u00a0 CPU-bound\u00a0 program:\u00a0 A\u00a0 program\u00a0 that\u00a0 perform\u00a0\nmultiplication\u00a0of\u00a0matrices,\u00a0or\u00a0a\u00a0program\u00a0that\u00a0finds\u00a0sum\u00a0of\u00a0first\u00a0200\u00a0\nprime\u00a0numbers.\nx\nExample\u00a0 of\u00a0I/O-bound\u00a0 program:\u00a0A\u00a0program\u00a0 that\u00a0 processes\u00a0files\u00a0on\u00a0\nthe\u00a0disk,\u00a0or\u00a0a\u00a0program\u00a0that does\u00a0database\u00a0queries\u00a0or\u00a0sends\u00a0a\u00a0lot\u00a0of\u00a0\ndata\u00a0over\u00a0a\u00a0network.\nWhi", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_524", "chunk_strategy": "fixed_size"}}, {"text": "ds\u00a0sum\u00a0of\u00a0first\u00a0200\u00a0\nprime\u00a0numbers.\nx\nExample\u00a0 of\u00a0I/O-bound\u00a0 program:\u00a0A\u00a0program\u00a0 that\u00a0 processes\u00a0files\u00a0on\u00a0\nthe\u00a0disk,\u00a0or\u00a0a\u00a0program\u00a0that does\u00a0database\u00a0queries\u00a0or\u00a0sends\u00a0a\u00a0lot\u00a0of\u00a0\ndata\u00a0over\u00a0a\u00a0network.\nWhich\u00a0to use\u00a0when?\nx\nA\u00a0 CPU-bound\u00a0 program\u00a0 will\u00a0 perform\u00a0 better\u00a0 on\u00a0 a\u00a0 faster\u00a0 CPU.\u00a0 For\u00a0\nexample,\u00a0using\u00a0i7\u00a0CPU\u00a0instead\u00a0of\u00a0i3\u00a0CPU.\nx\nAn\u00a0IO-bound\u00a0program\u00a0will\u00a0perform\u00a0better on\u00a0a\u00a0faster\u00a0I/O\u00a0subsystem.\u00a0\nFor\u00a0example\u00a0using\u00a0a\u00a0faster\u00a0disk\u00a0or\u00a0faster\u00a0network.\nx\nThe\u00a0solution\u00a0 to\u00a0improve\u00a0performance\u00a0cannot\u00a0 always\u00a0be\u00a0to\u00a0replace\u00a0\nexisting\u00a0CPU\u00a0with\u00a0a\u00a0faster\u00a0CPU\u00a0or\u00a0an\u00a0existing\u00a0I/O\u00a0subsystem\u00a0 with\u00a0a\u00a0\nfaster\u00a0I/O\u00a0subsystem.\nChapter 25:\u00a0Concurrency\u00a0and\u00a0Parallelism\u00a0\n359\nx\nInstead,\u00a0 we\u00a0 should\u00a0 organize\u00a0 our\u00a0 program\u00a0 to\u00a0 use\u00a0 concurrency or\u00a0\nparallelism\u00a0to\u00a0improve\u00a0performance.\u00a0\nx\nPerformance\u00a0of\u00a0I/O-bound\u00a0program can\u00a0improve if\u00a0different\u00a0units\u00a0of\u00a0\nthe\u00a0program\u00a0are\u00a0executed\u00a0in\u00a0overlapping\u00a0times.\u00a0\nx\nPerformance\u00a0of\u00a0CPU-bound\u00a0program\u00a0can\u00a0improve\u00a0if\u00a0different\u00a0units\u00a0of\u00a0\nthe program\u00a0are\u00a0executed\u00a0parallelly\u00a0on\u00a0multip", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_525", "chunk_strategy": "fixed_size"}}, {"text": "m can\u00a0improve if\u00a0different\u00a0units\u00a0of\u00a0\nthe\u00a0program\u00a0are\u00a0executed\u00a0in\u00a0overlapping\u00a0times.\u00a0\nx\nPerformance\u00a0of\u00a0CPU-bound\u00a0program\u00a0can\u00a0improve\u00a0if\u00a0different\u00a0units\u00a0of\u00a0\nthe program\u00a0are\u00a0executed\u00a0parallelly\u00a0on\u00a0multiple\u00a0cores\u00a0of\u00a0a\u00a0processor.\nx\nIt\u00a0 is\u00a0 quite\u00a0 easy\u00a0 to\u00a0 imagine\u00a0 how\u00a0 performance\u00a0 of\u00a0 a\u00a0 CPU-bound\u00a0\nprogram\u00a0can\u00a0improve\u00a0with\u00a0parallelism.\u00a0Performance\u00a0improvement\u00a0of\u00a0\nan\u00a0 I/O-bound\u00a0 program\u00a0 using\u00a0 concurrency\u00a0 is\u00a0discussed\u00a0 in\u00a0 the\u00a0 next\u00a0\nsection.\nConcurrency\u00a0for\u00a0improving\u00a0Performance\nx\nSuppose\u00a0we\u00a0wish\u00a0to\u00a0write\u00a0a\u00a0program\u00a0that\u00a0finds\u00a0squares\u00a0and\u00a0cubes\u00a0of\u00a0\nfirst\u00a05000\u00a0natural\u00a0numbers\u00a0and\u00a0prints\u00a0them\u00a0on\u00a0the\u00a0screen.\u00a0\nx\nWe\u00a0can\u00a0write\u00a0this\u00a0program\u00a0in\u00a0two\u00a0ways:\n-\nA\u00a0single-threaded\u00a0program - calculation\u00a0of\u00a0squares,\u00a0calculation\u00a0of\u00a0\ncubes\u00a0and\u00a0printing\u00a0are\u00a0done\u00a0in\u00a0same\u00a0thread.\n-\nA\u00a0multi-threaded program\u00a0- calculation\u00a0of\u00a0squares\u00a0is\u00a0done\u00a0in\u00a0one\u00a0\nthread,\u00a0 calculation\u00a0 of\u00a0 cubes\u00a0 in\u00a0 second\u00a0 thread\u00a0 and\u00a0 printing\u00a0 in\u00a0\nthird thread.\nx\nIn\u00a0 the\u00a0single-threaded\u00a0program\u00a0the\u00a0CPU\u00a0has\u00a0to\u00a0frequently\u00a0wait\u00a0 for\u00a0\nprinting", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_526", "chunk_strategy": "fixed_size"}}, {"text": "ulation\u00a0of\u00a0squares\u00a0is\u00a0done\u00a0in\u00a0one\u00a0\nthread,\u00a0 calculation\u00a0 of\u00a0 cubes\u00a0 in\u00a0 second\u00a0 thread\u00a0 and\u00a0 printing\u00a0 in\u00a0\nthird thread.\nx\nIn\u00a0 the\u00a0single-threaded\u00a0program\u00a0the\u00a0CPU\u00a0has\u00a0to\u00a0frequently\u00a0wait\u00a0 for\u00a0\nprinting\u00a0 of square/cube (I/O\u00a0 operation) to\u00a0 get\u00a0 over before\u00a0 it\u00a0 can\u00a0\nproceed\u00a0 to\u00a0 calculate\u00a0 square\u00a0 or\u00a0cube\u00a0 of\u00a0 the\u00a0 next\u00a0 number.\u00a0 So\u00a0 CPU\u00a0\nremains under-utilized. This\u00a0scenario\u00a0is\u00a0shown\u00a0in\u00a0Figure\u00a025.2.\nSingle-threaded program\nTime\nPrint 1\n12\nPrint 1\n13\nPrint 4\n22\nPrint 8\n23\n32\nI/O\nCPU\nFigure\u00a025.2\n360\nLet\u00a0Us\u00a0Python\nx\nIn\u00a0 the\u00a0multi-threaded\u00a0program\u00a0the CPU\u00a0can\u00a0 proceed\u00a0with\u00a0the\u00a0next\u00a0\ncalculation\u00a0 (square\u00a0 or\u00a0 cube)\u00a0 and\u00a0 need\u00a0 not\u00a0wait\u00a0 for\u00a0 the\u00a0 square\u00a0 or\u00a0\ncube\u00a0 to\u00a0get\u00a0printed\u00a0on\u00a0the\u00a0screen. This scenario is shown\u00a0in\u00a0Figure\u00a0\n25.3.\nMulti-threaded program\nTime\nPrint 1\n12\nPrint 4\n22\n32\nPrint 8\nI/O\nCPU\n13\n23\n33\nPrint 1\nCPU\nFigure\u00a025.3\nTypes\u00a0of\u00a0Concurrencies\nx\nIn\u00a0a\u00a0multi-threaded\u00a0program\u00a0one\u00a0thread\u00a0runs\u00a0for\u00a0some\u00a0time,\u00a0then\u00a0it\u00a0\nstops\u00a0and\u00a0the\u00a0second\u00a0thread\u00a0starts\u00a0running.\u00a0After\u00a0some\u00a0time,\u00a0second\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_527", "chunk_strategy": "fixed_size"}}, {"text": "O\nCPU\n13\n23\n33\nPrint 1\nCPU\nFigure\u00a025.3\nTypes\u00a0of\u00a0Concurrencies\nx\nIn\u00a0a\u00a0multi-threaded\u00a0program\u00a0one\u00a0thread\u00a0runs\u00a0for\u00a0some\u00a0time,\u00a0then\u00a0it\u00a0\nstops\u00a0and\u00a0the\u00a0second\u00a0thread\u00a0starts\u00a0running.\u00a0After\u00a0some\u00a0time,\u00a0second\u00a0\nthread\u00a0stops\u00a0and\u00a0the\u00a0third\u00a0thread\u00a0starts\u00a0running.\u00a0This\u00a0is\u00a0true\u00a0even\u00a0if\u00a0\nthe\u00a0program\u00a0is\u00a0being\u00a0executed\u00a0on\u00a0a\u00a0multi-core\u00a0processor.\nx\nWhen\u00a0context\u00a0would\u00a0switch\u00a0from\u00a0one\u00a0thread\u00a0to\u00a0another\u00a0depends\u00a0on\u00a0\nthe\u00a0type\u00a0of\u00a0concurrency\u00a0that\u00a0we\u00a0use\u00a0in\u00a0our\u00a0program.\nx\nConcurrencies\u00a0are\u00a0of\u00a0two\u00a0types:\n-\nPre-emptive\u00a0concurrency - The\u00a0OS\u00a0decides\u00a0when\u00a0to\u00a0switch\u00a0from\u00a0\none\u00a0thread to\u00a0another.\n-\nCooperative\u00a0 concurrency - The\u00a0thread decides\u00a0when\u00a0to\u00a0give\u00a0up\u00a0\nthe\u00a0control\u00a0to\u00a0the\u00a0next\u00a0task.\nx\nPython\u00a0 modules\u00a0 available\nfor\u00a0 implementing\u00a0 concurrency\u00a0 and\u00a0\nparallelism\u00a0in\u00a0our\u00a0program\u00a0are\u00a0as\u00a0follows:\nPre-emptive\u00a0concurrency - threading\nCooperative\u00a0concurrency - asyncio\nParallelism - multiprocessing\nChapter 25:\u00a0Concurrency\u00a0and\u00a0Parallelism\u00a0\n361\nThis\u00a0 book\u00a0 discusses\u00a0 the\u00a0 technique\u00a0 for\u00a0 pre-emptive\u00a0 concurrency\u00a0\nalone.\nThre", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_528", "chunk_strategy": "fixed_size"}}, {"text": "threading\nCooperative\u00a0concurrency - asyncio\nParallelism - multiprocessing\nChapter 25:\u00a0Concurrency\u00a0and\u00a0Parallelism\u00a0\n361\nThis\u00a0 book\u00a0 discusses\u00a0 the\u00a0 technique\u00a0 for\u00a0 pre-emptive\u00a0 concurrency\u00a0\nalone.\nThread\u00a0Properties\nx\nEvery\u00a0running\u00a0thread\u00a0has\u00a0a\u00a0name\u00a0a\u00a0number\u00a0called\u00a0 thread\u00a0identifier\nassociated\u00a0with\u00a0it.\u00a0\nx\nThe\u00a0name\u00a0of\u00a0 all\u00a0running\u00a0threads\u00a0need\u00a0not\u00a0be\u00a0 unique,\u00a0whereas\u00a0the\u00a0\nidentifier must\u00a0be\u00a0unique.\u00a0\nx\nThe\u00a0 identifier could\u00a0 be\u00a0 reused\u00a0 for\u00a0 other\u00a0 threads,\u00a0 if\u00a0 the\u00a0 current\u00a0\nthread\u00a0ends.\nimport\u00a0threading\nt\u00a0=\u00a0threading.current_thread(\u00a0)\u00a0 #\u00a0returns\u00a0current\u00a0Thread\u00a0object\nprint(\"Current\u00a0thread:\",\u00a0t)\u00a0 #\u00a0prints\u00a0thread\u00a0name,\u00a0identifier\u00a0&\u00a0status\nprint(\"Thread\u00a0name:\",\u00a0t.name)\nprint(\"Thread\u00a0identifier:\",\u00a0t.ident)\nprint(\"Is\u00a0thread\u00a0alive:\",\u00a0t.is_alive( ))\nt.name\u00a0=\u00a0'MyThread'\nprint(\"After\u00a0name\u00a0change:\",\u00a0t.name)\nHere,\u00a0 current_thread(\u00a0) is\u00a0a\u00a0 function\u00a0defined\u00a0in\u00a0 threading module\nand\u00a0name and\u00a0ident are\u00a0attributes of\u00a0Thread object.\nLaunching\u00a0Threads\nx\nThere\u00a0are\u00a0two\u00a0ways\u00a0to\u00a0launch\u00a0a\u00a0new\u00a0thread:\n-\nBy\u00a0 pa", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_529", "chunk_strategy": "fixed_size"}}, {"text": "t.name)\nHere,\u00a0 current_thread(\u00a0) is\u00a0a\u00a0 function\u00a0defined\u00a0in\u00a0 threading module\nand\u00a0name and\u00a0ident are\u00a0attributes of\u00a0Thread object.\nLaunching\u00a0Threads\nx\nThere\u00a0are\u00a0two\u00a0ways\u00a0to\u00a0launch\u00a0a\u00a0new\u00a0thread:\n-\nBy\u00a0 passing\u00a0 the\u00a0 name\u00a0 of\u00a0 the\u00a0 function\u00a0 that\u00a0 should\u00a0 run\u00a0 as\u00a0 a\u00a0\nseparate\u00a0thread,\u00a0to\u00a0the\u00a0constructor\u00a0of\u00a0the\u00a0Thread class.\n-\nBy\u00a0 overriding\u00a0 __init__(\u00a0 ) and\u00a0 run(\u00a0 ) methods\u00a0 in\u00a0 a\u00a0 subclass\u00a0 of\nThread class.\nx\nMethod\u00a01 - thread creation\nth1\u00a0=\u00a0threading.Thread(name\u00a0=\u00a0'My\u00a0first\u00a0thread',\u00a0target\u00a0=\u00a0func1)\nth2\u00a0=\u00a0threading.Thread(target\u00a0=\u00a0func2)\u00a0\n#\u00a0use\u00a0default\u00a0name\nth1.start(\u00a0)\nth2.start(\u00a0)\nx\nMethod\u00a02\u00a0- thread\u00a0creation\n362\nLet\u00a0Us\u00a0Python\nclass\u00a0SquareGeneratorThread(threading.Thread)\u00a0:\ndef\u00a0__init__(self)\u00a0:\nthreading.Thread.__init__(self)\ndef\u00a0run(self)\u00a0:\nprint('Launching...')\nth\u00a0=\u00a0SquareGeneratorThread(\u00a0)\nth.start(\u00a0)\nx\nOnce\u00a0a\u00a0thread\u00a0object\u00a0is\u00a0created,\u00a0its\u00a0activity\u00a0must\u00a0be\u00a0started\u00a0by\u00a0calling\u00a0\nthe\u00a0thread's\u00a0start(\u00a0) method.\u00a0This\u00a0method\u00a0in\u00a0turn\u00a0invokes\u00a0the\u00a0run(\u00a0)\nmethod.\nx\nstart(\u00a0) method\u00a0will\u00a0raise\u00a0an\u00a0e", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_530", "chunk_strategy": "fixed_size"}}, {"text": ")\nth.start(\u00a0)\nx\nOnce\u00a0a\u00a0thread\u00a0object\u00a0is\u00a0created,\u00a0its\u00a0activity\u00a0must\u00a0be\u00a0started\u00a0by\u00a0calling\u00a0\nthe\u00a0thread's\u00a0start(\u00a0) method.\u00a0This\u00a0method\u00a0in\u00a0turn\u00a0invokes\u00a0the\u00a0run(\u00a0)\nmethod.\nx\nstart(\u00a0) method\u00a0will\u00a0raise\u00a0an\u00a0exception RuntimeError if\u00a0called\u00a0more\u00a0\nthan\u00a0once\u00a0on\u00a0the\u00a0same\u00a0thread\u00a0object.\nPassing\u00a0parameters\u00a0to\u00a0a\u00a0Thread\nx\nSometimes\u00a0 we\u00a0 may\u00a0 wish\u00a0 to\u00a0 pass\u00a0 some\u00a0 parameters\u00a0 to\u00a0 the\u00a0 target\u00a0\nfunction\u00a0of\u00a0a\u00a0thread\u00a0object.\u00a0\nth1\u00a0=\u00a0threading.Thread(target = squares,\u00a0args = (a,\u00a0b))\nth2\u00a0=\u00a0threading.Thread(target = cubes,\u00a0args = (a,))\nArguments\u00a0 being\u00a0 passed\u00a0 to\u00a0 the\u00a0 constructor\u00a0 of\u00a0 Thread class\u00a0 will\u00a0\nultimately\u00a0 be\u00a0passed\u00a0to\u00a0the\u00a0target\u00a0function.\u00a0Arguments\u00a0 must\u00a0be\u00a0 in\u00a0\nthe\u00a0form\u00a0of\u00a0a\u00a0tuple.\nx\nOnce\u00a0thread\u00a0have\u00a0been\u00a0launched\u00a0we\u00a0have\u00a0no\u00a0control\u00a0over\u00a0the\u00a0order\u00a0\nin\u00a0which\u00a0they\u00a0are\u00a0executed.\u00a0It\u00a0is\u00a0controlled\u00a0by\u00a0the\u00a0thread\u00a0scheduler\u00a0\nof\u00a0the\u00a0Python\u00a0runtime\u00a0environment.\nx\nSometimes\u00a0 we\u00a0 may\u00a0 wish\u00a0 to\u00a0 pass\u00a0 some\u00a0 parameters\u00a0 to\u00a0 the run(\u00a0 )\nmethod\u00a0 in\u00a0 the\u00a0 thread class.\u00a0 For\u00a0 this\u00a0 pass\u00a0 the\u00a0 parameters\u00a0 to\u00a0 the\u00a0\n", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_531", "chunk_strategy": "fixed_size"}}, {"text": "thread\u00a0scheduler\u00a0\nof\u00a0the\u00a0Python\u00a0runtime\u00a0environment.\nx\nSometimes\u00a0 we\u00a0 may\u00a0 wish\u00a0 to\u00a0 pass\u00a0 some\u00a0 parameters\u00a0 to\u00a0 the run(\u00a0 )\nmethod\u00a0 in\u00a0 the\u00a0 thread class.\u00a0 For\u00a0 this\u00a0 pass\u00a0 the\u00a0 parameters\u00a0 to\u00a0 the\u00a0\nconstructor\u00a0while\u00a0creating\u00a0the\u00a0thread\u00a0object.\u00a0The\u00a0constructor\u00a0should\u00a0\nstore\u00a0them\u00a0in\u00a0object's\u00a0variables.\u00a0Once\u00a0stored,\u00a0run(\u00a0) will\u00a0be\u00a0able\u00a0to\u00a0\naccess\u00a0them.\nth\u00a0=\u00a0SquareGeneratorThread(a,\u00a0b,\u00a0c)\n____________________________________________________________________\nChapter 25:\u00a0Concurrency\u00a0and\u00a0Parallelism\u00a0\n363\nProblem\u00a025.1\nWrite\u00a0a\u00a0program\u00a0that\u00a0launches\u00a0three\u00a0threads,\u00a0assigns\u00a0new\u00a0names\u00a0to\u00a0two\u00a0\nof\u00a0them.\u00a0Suspend\u00a0each\u00a0thread\u00a0for\u00a01\u00a0second\u00a0after\u00a0it\u00a0has\u00a0been\u00a0launched.\nProgram\nimport\u00a0threading\nimport\u00a0time\ndef\u00a0fun1( ):\nt\u00a0=\u00a0threading.current_thread(\u00a0)\nprint('Starting',\u00a0t.name)\ntime.sleep(1)\nprint('Exiting',\u00a0t.name)\ndef\u00a0fun2( ):\nt\u00a0=\u00a0threading.current_thread(\u00a0)\nprint('Starting',\u00a0t.name)\ntime.sleep(1)\nprint('Exiting',\u00a0t.name)\ndef\u00a0fun3( ):\nt\u00a0=\u00a0threading.current_thread(\u00a0)\nprint('Starting',\u00a0t.name)\ntime.sleep(1)\n", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_532", "chunk_strategy": "fixed_size"}}, {"text": "ame)\ndef\u00a0fun2( ):\nt\u00a0=\u00a0threading.current_thread(\u00a0)\nprint('Starting',\u00a0t.name)\ntime.sleep(1)\nprint('Exiting',\u00a0t.name)\ndef\u00a0fun3( ):\nt\u00a0=\u00a0threading.current_thread(\u00a0)\nprint('Starting',\u00a0t.name)\ntime.sleep(1)\nprint('Exiting',\u00a0t.name)\nt1\u00a0=\u00a0threading.Thread(target=fun1)\u00a0 #\u00a0use\u00a0default\u00a0name\nt2\u00a0=\u00a0threading.Thread(name = 'My\u00a0second\u00a0thread',\u00a0target\u00a0=\u00a0fun2)\nt3\u00a0=\u00a0threading.Thread(name = 'My\u00a0third\u00a0thread',\u00a0target\u00a0=\u00a0fun3)\nt1.start( )\nt2.start( )\nt3.start( )\nOutput\nStarting\u00a0Thread-1\nStarting\u00a0My\u00a0second\u00a0thread\n364\nLet\u00a0Us\u00a0Python\nStarting\u00a0My\u00a0third\u00a0thread\nExiting\u00a0Thread-1\nExiting\u00a0My\u00a0third\u00a0thread\nExiting\u00a0My\u00a0second\u00a0thread\nTips\nx\nsleep(\u00a0) function\u00a0of\u00a0time module\u00a0suspends\u00a0 execution\u00a0of\u00a0the\u00a0calling\u00a0\nthread\u00a0for\u00a0the\u00a0number\u00a0of\u00a0seconds passed\u00a0to\u00a0it.\n____________________________________________________________________\nProblem\u00a025.2\nWrite\u00a0 a\u00a0 program\u00a0 that\u00a0 calculates\u00a0 the\u00a0 squares\u00a0and\u00a0 cubes\u00a0 of\u00a0 first\u00a0 6\u00a0odd\u00a0\nnumbers\u00a0through\u00a0functions\u00a0that\u00a0are\u00a0executed\u00a0sequentially.\u00a0Incorporate\u00a0\na\u00a0 delay\u00a0 of\u00a0 0.5\u00a0 seconds after\u00a0 calcula", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_533", "chunk_strategy": "fixed_size"}}, {"text": "em\u00a025.2\nWrite\u00a0 a\u00a0 program\u00a0 that\u00a0 calculates\u00a0 the\u00a0 squares\u00a0and\u00a0 cubes\u00a0 of\u00a0 first\u00a0 6\u00a0odd\u00a0\nnumbers\u00a0through\u00a0functions\u00a0that\u00a0are\u00a0executed\u00a0sequentially.\u00a0Incorporate\u00a0\na\u00a0 delay\u00a0 of\u00a0 0.5\u00a0 seconds after\u00a0 calculation\u00a0 of\u00a0 each\u00a0 square/cube\u00a0 value.\u00a0\nReport\u00a0the\u00a0time\u00a0required\u00a0for\u00a0execution\u00a0of\u00a0the\u00a0program.\nProgram\nimport\u00a0time\nimport\u00a0threading\ndef\u00a0squares(nos) :\nprint('Calculating\u00a0squares...')\nfor\u00a0n\u00a0in\u00a0nos\u00a0:\ntime.sleep(0.5)\nprint('n\u00a0=\u00a0',\u00a0n,\u00a0'\u00a0square\u00a0=',\u00a0n\u00a0*\u00a0n)\ndef\u00a0cubes(nos) :\nprint('Calculating\u00a0cubes...')\nfor\u00a0n\u00a0in\u00a0nos\u00a0:\ntime.sleep(0.5)\nprint('n\u00a0=\u00a0',\u00a0n,\u00a0'\u00a0cube\u00a0=',\u00a0n\u00a0*\u00a0n\u00a0*\u00a0n)\narr\u00a0=\u00a0[1,\u00a03,\u00a05,\u00a07,\u00a09,\u00a011]\nstartTime\u00a0=\u00a0time.time( )\nsquares(arr)\ncubes(arr)\nendTime\u00a0=\u00a0time.time( )\nprint('Time\u00a0required\u00a0=\u00a0',\u00a0endTime\u00a0- startTime,\u00a0'sec')\nChapter 25:\u00a0Concurrency\u00a0and\u00a0Parallelism\u00a0\n365\nOutput\nCalculating\u00a0squares...\nn\u00a0=\u00a0 1\u00a0 square\u00a0=\u00a01\nn\u00a0=\u00a0 3\u00a0 square\u00a0=\u00a09\nn\u00a0=\u00a0 5\u00a0 square\u00a0=\u00a025\nn\u00a0=\u00a0 7\u00a0 square\u00a0=\u00a049\nn\u00a0=\u00a0 9\u00a0 square\u00a0=\u00a081\nn\u00a0=\u00a0 11\u00a0 square\u00a0=\u00a0121\nCalculating\u00a0cubes...\nn\u00a0=\u00a0 1\u00a0 cube\u00a0=\u00a01\nn\u00a0=\u00a0 3\u00a0 cube\u00a0=\u00a027\nn\u00a0=\u00a0 5\u00a0 cube\u00a0=\u00a0125\nn\u00a0=\u00a0 7\u00a0 cube\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_534", "chunk_strategy": "fixed_size"}}, {"text": "square\u00a0=\u00a01\nn\u00a0=\u00a0 3\u00a0 square\u00a0=\u00a09\nn\u00a0=\u00a0 5\u00a0 square\u00a0=\u00a025\nn\u00a0=\u00a0 7\u00a0 square\u00a0=\u00a049\nn\u00a0=\u00a0 9\u00a0 square\u00a0=\u00a081\nn\u00a0=\u00a0 11\u00a0 square\u00a0=\u00a0121\nCalculating\u00a0cubes...\nn\u00a0=\u00a0 1\u00a0 cube\u00a0=\u00a01\nn\u00a0=\u00a0 3\u00a0 cube\u00a0=\u00a027\nn\u00a0=\u00a0 5\u00a0 cube\u00a0=\u00a0125\nn\u00a0=\u00a0 7\u00a0 cube\u00a0=\u00a0343\nn\u00a0=\u00a0 9\u00a0 cube\u00a0=\u00a0729\nn\u00a0=\u00a0 11\u00a0 cube\u00a0=\u00a01331\nTime\u00a0required =\u00a0 6.000343322753906\u00a0sec\nTips\nx\nThe\u00a0 functions\u00a0 squares(\u00a0 ) and\u00a0 cubes(\u00a0 ) are\u00a0 running\u00a0 in\u00a0 the\u00a0 same\u00a0\nthread.\nx\ntime(\u00a0) function\u00a0returns\u00a0the\u00a0time\u00a0in\u00a0seconds\u00a0since\u00a0the epoch\u00a0(Jan\u00a01,\u00a0\n1970,\u00a000:00:00)\u00a0 as\u00a0a\u00a0floating\u00a0point\u00a0number.\n____________________________________________________________________\nProblem\u00a025.3\nWrite\u00a0 a\u00a0 program\u00a0 that\u00a0 calculates\u00a0 squares\u00a0 and\u00a0 cubes\u00a0 of\u00a0 first\u00a0 6\u00a0 odd\u00a0\nnumbers\u00a0 through\u00a0 functions\u00a0 that\u00a0 are\u00a0 executed\u00a0 in\u00a0 two\u00a0 independent\u00a0\nthreads.\u00a0 Incorporate\u00a0 a\u00a0 delay\u00a0 of\u00a0 0.5\u00a0 seconds after\u00a0 calculation\u00a0 of\u00a0 each\u00a0\nsquare/cube\u00a0 value.\u00a0 Report\u00a0 the\u00a0 time\u00a0 required\u00a0 for\u00a0 execution\u00a0 of\u00a0 the\u00a0\nprogram.\nProgram\nimport\u00a0time\nimport\u00a0threading\ndef\u00a0squares(nos)\u00a0:\n366\nLet\u00a0Us\u00a0Python\nprint('Calculating\u00a0squares...')\nfor\u00a0n\u00a0in\u00a0n", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_535", "chunk_strategy": "fixed_size"}}, {"text": "square/cube\u00a0 value.\u00a0 Report\u00a0 the\u00a0 time\u00a0 required\u00a0 for\u00a0 execution\u00a0 of\u00a0 the\u00a0\nprogram.\nProgram\nimport\u00a0time\nimport\u00a0threading\ndef\u00a0squares(nos)\u00a0:\n366\nLet\u00a0Us\u00a0Python\nprint('Calculating\u00a0squares...')\nfor\u00a0n\u00a0in\u00a0nos\u00a0:\ntime.sleep(0.5)\nprint('n\u00a0=\u00a0',\u00a0n,\u00a0'\u00a0square\u00a0=',\u00a0n\u00a0*\u00a0n)\ndef\u00a0cubes(nos)\u00a0:\nprint('Calculating\u00a0cubes...')\nfor\u00a0n\u00a0in\u00a0nos\u00a0:\ntime.sleep(0.5)\nprint('n\u00a0=\u00a0',\u00a0n,\u00a0'\u00a0cube\u00a0=',\u00a0n\u00a0*\u00a0n\u00a0*\u00a0n)\narr\u00a0=\u00a0[1,\u00a03,\u00a05, 7,\u00a09,\u00a011]\nstartTime\u00a0=\u00a0time.time(\u00a0)\nth1\u00a0=\u00a0threading.Thread(target\u00a0=\u00a0squares,\u00a0args\u00a0=\u00a0(arr,))\nth2\u00a0=\u00a0threading.Thread(target\u00a0=\u00a0cubes,\u00a0args\u00a0=\u00a0(arr,))\nth1.start(\u00a0)\nth2.start(\u00a0)\nth1.join(\u00a0)\nth2.join(\u00a0)\nendTime\u00a0=\u00a0time.time(\u00a0)\nprint('Time\u00a0required\u00a0=\u00a0',\u00a0endTime\u00a0- startTime,\u00a0'sec')\nOutput\nCalculating\u00a0squares...\nCalculating\u00a0cubes...\nn\u00a0=\u00a0 1\u00a0 square\u00a0=\u00a01\nn\u00a0=\u00a0 1\u00a0 cube\u00a0=\u00a01\nn\u00a0=\u00a0 3\u00a0 square\u00a0=\u00a09\nn\u00a0=\u00a0 3\u00a0 cube\u00a0=\u00a027\nn\u00a0=\u00a0 5\u00a0 square\u00a0=\u00a025\nn\u00a0=\u00a0 5\u00a0 cube\u00a0=\u00a0125\nn\u00a0=\u00a0 7\u00a0 square\u00a0=\u00a049\nn\u00a0=\u00a0 7\u00a0 cube\u00a0=\u00a0343\nn\u00a0=\u00a0 9\u00a0 square\u00a0=\u00a081\nn\u00a0=\u00a0 9\u00a0 cube\u00a0=\u00a0729\nn\u00a0=\u00a0 11\u00a0 square\u00a0=\u00a0121\nn\u00a0=\u00a0 11\u00a0 cube\u00a0=\u00a01331\nTime\u00a0required\u00a0=\u00a0 3.001171588897705\u00a0sec\nChapter 25:\u00a0Co", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_536", "chunk_strategy": "fixed_size"}}, {"text": "e\u00a0=\u00a025\nn\u00a0=\u00a0 5\u00a0 cube\u00a0=\u00a0125\nn\u00a0=\u00a0 7\u00a0 square\u00a0=\u00a049\nn\u00a0=\u00a0 7\u00a0 cube\u00a0=\u00a0343\nn\u00a0=\u00a0 9\u00a0 square\u00a0=\u00a081\nn\u00a0=\u00a0 9\u00a0 cube\u00a0=\u00a0729\nn\u00a0=\u00a0 11\u00a0 square\u00a0=\u00a0121\nn\u00a0=\u00a0 11\u00a0 cube\u00a0=\u00a01331\nTime\u00a0required\u00a0=\u00a0 3.001171588897705\u00a0sec\nChapter 25:\u00a0Concurrency\u00a0and\u00a0Parallelism\u00a0\n367\nTips\nx\nsquares(\u00a0) and\u00a0cubes(\u00a0) are\u00a0being\u00a0launched\u00a0in\u00a0separate\u00a0threads.\nx\nSince\u00a0squares(\u00a0) and\u00a0cubes(\u00a0) need\u00a0arr,\u00a0it\u00a0is\u00a0passed\u00a0to\u00a0the\u00a0constructor\u00a0\nwhile\u00a0launching\u00a0the\u00a0threads.\nx\nArguments\u00a0meant\u00a0for\u00a0target\u00a0functions\u00a0must\u00a0be\u00a0passed\u00a0as\u00a0a\u00a0tuple.\nx\njoin(\u00a0) waits\u00a0until\u00a0the\u00a0thread\u00a0on\u00a0which\u00a0it\u00a0is\u00a0called\u00a0terminates.\nx\nIf\u00a0this\u00a0program\u00a0is\u00a0executed\u00a0on\u00a0a\u00a0single\u00a0processor\u00a0machine\u00a0it\u00a0will\u00a0still\u00a0\nwork\u00a0faster\u00a0than\u00a0the\u00a0one\u00a0in\u00a0Problem\u00a025.2.\u00a0This\u00a0is\u00a0because\u00a0when\u00a0one\u00a0\nthread\u00a0 is\u00a0 performing\u00a0 I/O,\u00a0 i.e.\u00a0 printing\u00a0 value\u00a0 of\u00a0 square/cube,\u00a0 the\u00a0\nother\u00a0thread\u00a0can\u00a0proceed\u00a0with\u00a0the\u00a0calculation\u00a0of\u00a0cube/square.\nx\nThe\u00a0output\u00a0shows\u00a0values\u00a0of\u00a0squares\u00a0and\u00a0cubes\u00a0mixed.\u00a0How\u00a0to\u00a0take\u00a0\ncare\u00a0of\u00a0it\u00a0has\u00a0been\u00a0shown\u00a0in\u00a0Chapter\u00a026.\n____________________________________________________________________\nPro", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_537", "chunk_strategy": "fixed_size"}}, {"text": "ion\u00a0of\u00a0cube/square.\nx\nThe\u00a0output\u00a0shows\u00a0values\u00a0of\u00a0squares\u00a0and\u00a0cubes\u00a0mixed.\u00a0How\u00a0to\u00a0take\u00a0\ncare\u00a0of\u00a0it\u00a0has\u00a0been\u00a0shown\u00a0in\u00a0Chapter\u00a026.\n____________________________________________________________________\nProblem\u00a025.4\nWrite\u00a0a\u00a0program\u00a0that\u00a0reads\u00a0the\u00a0contents\u00a0of\u00a03\u00a0files\u00a0a.txt,\u00a0b.txt\u00a0and\u00a0c.txt\u00a0\nsequentially\u00a0and\u00a0reports\u00a0the\u00a0number\u00a0of\u00a0lines\u00a0present\u00a0in\u00a0it\u00a0as\u00a0well\u00a0as\u00a0the\u00a0\ntotal\u00a0reading\u00a0time.\u00a0These\u00a0files\u00a0should\u00a0be\u00a0added\u00a0to\u00a0the\u00a0project\u00a0and\u00a0filled\u00a0\nwith\u00a0some\u00a0text.\u00a0The\u00a0program\u00a0should\u00a0receive\u00a0the\u00a0file\u00a0names\u00a0as\u00a0command-\nline\u00a0 arguments.\u00a0Suspend\u00a0 the\u00a0 program\u00a0for\u00a0 0.5\u00a0 seconds after\u00a0 reading\u00a0 a\u00a0\nline\u00a0from\u00a0any\u00a0file.\u00a0\nProgram\nimport\u00a0time,\u00a0sys\nstartTime\u00a0=\u00a0time.time(\u00a0)\nlst\u00a0=\u00a0sys.argv\nlst\u00a0=\u00a0lst[1:]\nfor\u00a0file\u00a0in\u00a0lst:\nf\u00a0=\u00a0open(file,\u00a0'r')\ncount\u00a0=\u00a00\nwhile\u00a0True\u00a0:\ndata\u00a0=\u00a0f.readline(\u00a0)\ntime.sleep(0.5)\nif\u00a0data\u00a0==\u00a0''\u00a0:\n368\nLet\u00a0Us\u00a0Python\nbreak\ncount\u00a0=\u00a0count\u00a0+\u00a01\nprint('File:',\u00a0file,\u00a0'Lines:',\u00a0count)\nendTime\u00a0=\u00a0time.time(\u00a0)\nprint('Time\u00a0required\u00a0=',\u00a0endTime\u00a0- startTime,\u00a0'sec')\nOutput\nFile:\u00a0a.txt\u00a0Lines:\u00a05\nFile:\u00a0b.txt\u00a0Lines:\u00a024\n", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_538", "chunk_strategy": "fixed_size"}}, {"text": "t\u00a0Us\u00a0Python\nbreak\ncount\u00a0=\u00a0count\u00a0+\u00a01\nprint('File:',\u00a0file,\u00a0'Lines:',\u00a0count)\nendTime\u00a0=\u00a0time.time(\u00a0)\nprint('Time\u00a0required\u00a0=',\u00a0endTime\u00a0- startTime,\u00a0'sec')\nOutput\nFile:\u00a0a.txt\u00a0Lines:\u00a05\nFile:\u00a0b.txt\u00a0Lines:\u00a024\nFile:\u00a0c.txt\u00a0Lines:\u00a06\nTime\u00a0required\u00a0=\u00a019.009087324142456\u00a0sec\u00a0\nTips\nx\nIf\u00a0 you\u00a0 are\u00a0 using\u00a0 IDLE\u00a0 then\u00a0 create\u00a0 three\u00a0 files\u00a0 a.txt,\u00a0 b.txt\u00a0 and\u00a0 c.txt\u00a0\nthese\u00a0files\u00a0in\u00a0the\u00a0same\u00a0folder\u00a0as\u00a0the\u00a0source\u00a0file.\nx\nIf\u00a0you\u00a0are\u00a0using\u00a0NetBeans\u00a0add\u00a0files\u00a0a.txt,\u00a0b.txt\u00a0and\u00a0c.txt\u00a0to\u00a0the\u00a0project\u00a0\nas\u00a0 'Empty'\u00a0 files\u00a0 by\u00a0 right-clicking\u00a0 the\u00a0 project\u00a0 in\u00a0 Project\u00a0 window\u00a0 in\u00a0\nNetBeans.\u00a0Once\u00a0created,\u00a0add\u00a0some\u00a0lines\u00a0to\u00a0each\u00a0of\u00a0these\u00a0files.\nx\nIf\u00a0 you\u00a0 are\u00a0 using\u00a0 IDLE\u00a0 then provide\u00a0 command-line\u00a0 arguments\u00a0 as\u00a0\nfollows:\nc:\\>idle\u00a0 -r\u00a0 SingleThreading.py\u00a0 a.txt\u00a0 b.txt\u00a0 c.txt\nEnsure\u00a0that\u00a0the\u00a0path\u00a0of\u00a0idle\u00a0batch\u00a0file\u00a0given\u00a0below\u00a0is\u00a0added\u00a0to\u00a0PATH\u00a0\nenvironment variable\u00a0through\u00a0Control\u00a0Panel:\nC:\\Users\\Kanetkar\\AppData\\Local\\Programs\\Python\\Python36-32\\\nLib\\idlelib\nx\nIf\u00a0 you\u00a0 are\u00a0 using\u00a0 NetBeans,\u00a0 to\u00a0 provide\u00a0 a.txt,\u00a0 b.t", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_539", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0below\u00a0is\u00a0added\u00a0to\u00a0PATH\u00a0\nenvironment variable\u00a0through\u00a0Control\u00a0Panel:\nC:\\Users\\Kanetkar\\AppData\\Local\\Programs\\Python\\Python36-32\\\nLib\\idlelib\nx\nIf\u00a0 you\u00a0 are\u00a0 using\u00a0 NetBeans,\u00a0 to\u00a0 provide\u00a0 a.txt,\u00a0 b.txt\u00a0 and\u00a0 c.txt\u00a0 as\u00a0\ncommand-line\u00a0arguments,\u00a0right-click\u00a0the\u00a0project\u00a0 in\u00a0Project\u00a0window\u00a0\nin\u00a0NetBeans\u00a0and\u00a0select\u00a0'Properties'\u00a0followed\u00a0by\u00a0'Run'.\u00a0Add\u00a0'a.txt\u00a0b.txt\u00a0\nc.txt'\u00a0as\u00a0'Application\u00a0Arguments'.\nx\nApplication\u00a0arguments\u00a0 become\u00a0available\u00a0 through\u00a0sys.argv as\u00a0a\u00a0list.\u00a0\nThis\u00a0list\u00a0also\u00a0includes\u00a0application\u00a0name\u00a0as\u00a0the\u00a00th element\u00a0in\u00a0the\u00a0list.\u00a0\nSo\u00a0we\u00a0have\u00a0sliced the\u00a0list\u00a0to\u00a0eliminate\u00a0it.\nChapter 25:\u00a0Concurrency\u00a0and\u00a0Parallelism\u00a0\n369\nx\nFile\u00a0is\u00a0opened\u00a0for\u00a0reading\u00a0using\u00a0open(\u00a0) and\u00a0file\u00a0is\u00a0read\u00a0line\u00a0by\u00a0line\u00a0in\u00a0\na\u00a0loop\u00a0using\u00a0readline(\u00a0).\n____________________________________________________________________\nProblem\u00a025.5\nWrite\u00a0a\u00a0program\u00a0that\u00a0reads\u00a0the\u00a0contents\u00a0of\u00a03\u00a0files\u00a0a.txt,\u00a0b.txt\u00a0and\u00a0c.txt\u00a0in\u00a0\ndifferent\u00a0threads\u00a0and\u00a0reports\u00a0the\u00a0number\u00a0of\u00a0lines\u00a0present\u00a0in\u00a0it\u00a0as\u00a0well\u00a0as\u00a0\nthe\u00a0total\u00a0reading\u00a0 time.\u00a0These", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_540", "chunk_strategy": "fixed_size"}}, {"text": "__\nProblem\u00a025.5\nWrite\u00a0a\u00a0program\u00a0that\u00a0reads\u00a0the\u00a0contents\u00a0of\u00a03\u00a0files\u00a0a.txt,\u00a0b.txt\u00a0and\u00a0c.txt\u00a0in\u00a0\ndifferent\u00a0threads\u00a0and\u00a0reports\u00a0the\u00a0number\u00a0of\u00a0lines\u00a0present\u00a0in\u00a0it\u00a0as\u00a0well\u00a0as\u00a0\nthe\u00a0total\u00a0reading\u00a0 time.\u00a0These\u00a0files\u00a0should\u00a0 be\u00a0added\u00a0to\u00a0the\u00a0project\u00a0and\u00a0\nfilled\u00a0 with\u00a0 some\u00a0 text.\u00a0 The\u00a0 program\u00a0 should\u00a0 receive\u00a0 the\u00a0 file\u00a0 names\u00a0 as\u00a0\ncommand-line\u00a0arguments.\u00a0 Suspend\u00a0the\u00a0 program\u00a0 for\u00a00.5\u00a0 seconds after\u00a0\nreading\u00a0a\u00a0line\u00a0from\u00a0any\u00a0file.\u00a0\nProgram\nimport\u00a0time\nimport\u00a0sys\nimport\u00a0threading\ndef\u00a0readFile(inputFile):\nf\u00a0=\u00a0open(inputFile,\u00a0'r')\ncount\u00a0=\u00a00\nwhile\u00a0True\u00a0:\ndata\u00a0=\u00a0f.readline(\u00a0)\ntime.sleep(0.5)\nif\u00a0data\u00a0==\u00a0''\u00a0:\nbreak\ncount\u00a0=\u00a0count\u00a0+\u00a01\nprint('File:',\u00a0inputFile,\u00a0'Lines:',\u00a0count)\nstartTime\u00a0=\u00a0time.time(\u00a0)\nlst\u00a0=\u00a0sys.argv\nlst\u00a0=\u00a0lst[1:]\ntharr\u00a0=\u00a0[\u00a0]\nfor\u00a0file\u00a0in\u00a0lst:\nth\u00a0=\u00a0threading.Thread(target = readFile,\u00a0args = (file,))\nth.start(\u00a0)\ntharr.append(th)\nfor\u00a0th\u00a0in\u00a0tharr:\n370\nLet\u00a0Us\u00a0Python\nth.join(\u00a0)\nendTime\u00a0=\u00a0time.time( )\nprint('Time\u00a0required\u00a0=\u00a0',\u00a0endTime\u00a0- startTime,\u00a0'sec')\nOutput\nFile:\u00a0a.txt\u00a0Lines:\u00a05\nFile:\u00a0c.txt\u00a0L", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_541", "chunk_strategy": "fixed_size"}}, {"text": "ile,))\nth.start(\u00a0)\ntharr.append(th)\nfor\u00a0th\u00a0in\u00a0tharr:\n370\nLet\u00a0Us\u00a0Python\nth.join(\u00a0)\nendTime\u00a0=\u00a0time.time( )\nprint('Time\u00a0required\u00a0=\u00a0',\u00a0endTime\u00a0- startTime,\u00a0'sec')\nOutput\nFile:\u00a0a.txt\u00a0Lines:\u00a05\nFile:\u00a0c.txt\u00a0Lines:\u00a06\nFile:\u00a0b.txt\u00a0Lines:\u00a024\nTime\u00a0required\u00a0=\u00a012.504715204238892\u00a0sec\nTips\nx\nFor\u00a0details\u00a0of\u00a0adding\u00a0files\u00a0to\u00a0the\u00a0project,\u00a0making\u00a0 them\u00a0available\u00a0 to\u00a0\napplication\u00a0 as\u00a0command-line\u00a0 arguments\u00a0 and\u00a0slicing\u00a0 the\u00a0 command-\nline\u00a0argument\u00a0list\u00a0refer\u00a0tips\u00a0in\u00a0Problem\u00a025.4.\nx\nAs\u00a0each\u00a0thread\u00a0is\u00a0launched,\u00a0the\u00a0thread\u00a0object\u00a0is\u00a0added\u00a0to\u00a0the\u00a0thread\u00a0\narray\u00a0through\u00a0tharr.append(\u00a0).\u00a0This\u00a0is\u00a0necessary,\u00a0so\u00a0that\u00a0we\u00a0can\u00a0later\u00a0\ncall\u00a0join(\u00a0) on\u00a0each\u00a0thread.\nx\nThis\u00a0program\u00a0performs\u00a0better\u00a0than\u00a0the\u00a0one\u00a0in\u00a0Problem\u00a025.4\u00a0because\u00a0\nas\u00a0one\u00a0thread\u00a0is\u00a0busy\u00a0printing\u00a0the\u00a0file\u00a0statistics,\u00a0the\u00a0other\u00a0thread\u00a0can\u00a0\ncontinue\u00a0reading\u00a0a\u00a0file.\u00a0\n____________________________________________________________________\n[A] State\u00a0whether\u00a0the\u00a0following\u00a0statements\u00a0are\u00a0True\u00a0or\u00a0False:\n(a) Multi-threading\u00a0improves\u00a0the\u00a0speed\u00a0of\u00a0execution\u00a0of\u00a0the\u00a0progr", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_542", "chunk_strategy": "fixed_size"}}, {"text": "le.\u00a0\n____________________________________________________________________\n[A] State\u00a0whether\u00a0the\u00a0following\u00a0statements\u00a0are\u00a0True\u00a0or\u00a0False:\n(a) Multi-threading\u00a0improves\u00a0the\u00a0speed\u00a0of\u00a0execution\u00a0of\u00a0the\u00a0program.\n(b) A\u00a0running task\u00a0may\u00a0have\u00a0several\u00a0threads\u00a0running\u00a0in\u00a0it.\n(c)\nMulti-processing\u00a0is\u00a0same\u00a0as\u00a0multi-threading.\n(d) If\u00a0we\u00a0create\u00a0a\u00a0class\u00a0that\u00a0inherits\u00a0from\u00a0the\u00a0Thread class,\u00a0we\u00a0can\u00a0still\u00a0\ninherit\u00a0our\u00a0class\u00a0from\u00a0some\u00a0other\u00a0class.\n(e) It\u00a0is\u00a0possible\u00a0to\u00a0change\u00a0the\u00a0name\u00a0of\u00a0the\u00a0running\u00a0thread.\nChapter 25:\u00a0Concurrency\u00a0and\u00a0Parallelism\u00a0\n371\n(f)\nTo\u00a0 launch\u00a0 a\u00a0 thread\u00a0 we\u00a0 must\u00a0 explicitly\u00a0 call\u00a0 the\u00a0 function\u00a0 that\u00a0 is\u00a0\nsupposed\u00a0to\u00a0run\u00a0in\u00a0a\u00a0separate\u00a0thread.\n(g)\nTo\u00a0launch\u00a0a\u00a0thread\u00a0we\u00a0must\u00a0explicitly\u00a0call\u00a0the\u00a0run(\u00a0) method\u00a0defined\u00a0\nin\u00a0a\u00a0class\u00a0that\u00a0extends\u00a0the\u00a0Thread class.\n(h) Though\u00a0we\u00a0do\u00a0not\u00a0explicitly\u00a0call\u00a0the\u00a0function\u00a0that\u00a0is\u00a0supposed\u00a0to\u00a0run\u00a0\nin\u00a0 a\u00a0 separate\u00a0 thread,\u00a0 it\u00a0 is\u00a0 possible\u00a0 to\u00a0 pass\u00a0 arguments\u00a0 to\u00a0 the\u00a0\nfunction.\n(i)\nWe\u00a0 cannot\u00a0 control\u00a0 the\u00a0 priority\u00a0 of\u00a0 multiple\u00a0 threads\u00a0 that\u00a0 we\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_543", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0call\u00a0the\u00a0function\u00a0that\u00a0is\u00a0supposed\u00a0to\u00a0run\u00a0\nin\u00a0 a\u00a0 separate\u00a0 thread,\u00a0 it\u00a0 is\u00a0 possible\u00a0 to\u00a0 pass\u00a0 arguments\u00a0 to\u00a0 the\u00a0\nfunction.\n(i)\nWe\u00a0 cannot\u00a0 control\u00a0 the\u00a0 priority\u00a0 of\u00a0 multiple\u00a0 threads\u00a0 that\u00a0 we\u00a0 may\u00a0\nlaunch\u00a0in\u00a0a\u00a0program.\n[B] Answer\u00a0the\u00a0following questions:\n(a) What\u00a0 is\u00a0 the\u00a0 difference\u00a0 between\u00a0 multi-processing\u00a0 and\u00a0 multi-\nthreading?\n(b) What\u00a0 is\u00a0 the\u00a0 difference\u00a0 between\u00a0 preemptive\u00a0 multi-threading\u00a0 and\u00a0\ncooperative\u00a0multi-threading?\n(c)\nWhich\u00a0 are\u00a0 the\u00a0 two\u00a0 methods available\u00a0 for\u00a0 launching\u00a0 threads\u00a0 in\u00a0 a\u00a0\nPython\u00a0program?\u00a0\n(d) If\u00a0 Ex class\u00a0 extends\u00a0 the\u00a0 Thread class,\u00a0then\u00a0can\u00a0 we\u00a0launch\u00a0multiple\u00a0\nthreads\u00a0for\u00a0objects\u00a0of\u00a0Ex class?\u00a0If\u00a0yes,\u00a0how?\n(e) What\u00a0do\u00a0different\u00a0elements\u00a0of\u00a0the\u00a0following\u00a0statement\u00a0signify?\nth1\u00a0=\u00a0threading.Thread(target = quads,\u00a0args = (a,\u00a0b))\n(f)\nWrite\u00a0a\u00a0multithreaded\u00a0program\u00a0that\u00a0copies\u00a0contents\u00a0of\u00a0one\u00a0folder\u00a0\ninto\u00a0 another.\u00a0 The\u00a0source\u00a0 and\u00a0target\u00a0 folder\u00a0 paths\u00a0 should\u00a0 be\u00a0 input\u00a0\nthrough\u00a0keyboard.\u00a0\n(g)\nWrite\u00a0a\u00a0program\u00a0that\u00a0 reads\u00a0the\u00a0contents\u00a0of\u00a03\u00a0fil", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_544", "chunk_strategy": "fixed_size"}}, {"text": "ithreaded\u00a0program\u00a0that\u00a0copies\u00a0contents\u00a0of\u00a0one\u00a0folder\u00a0\ninto\u00a0 another.\u00a0 The\u00a0source\u00a0 and\u00a0target\u00a0 folder\u00a0 paths\u00a0 should\u00a0 be\u00a0 input\u00a0\nthrough\u00a0keyboard.\u00a0\n(g)\nWrite\u00a0a\u00a0program\u00a0that\u00a0 reads\u00a0the\u00a0contents\u00a0of\u00a03\u00a0files\u00a0a.txt,\u00a0b.txt\u00a0and\u00a0\nc.txt\u00a0 sequentially\u00a0and\u00a0 converts\u00a0 their\u00a0contents\u00a0 into\u00a0 uppercase\u00a0and\u00a0\nwrites\u00a0 them\u00a0 into\u00a0 files\u00a0 aa.txt,\u00a0 bb.txt\u00a0 and\u00a0 cc.txt\u00a0 respectively.\u00a0 The\u00a0\nprogram\u00a0 should\u00a0 report\u00a0 the\u00a0 time\u00a0 required\u00a0 in\u00a0 carrying\u00a0 out\u00a0 this\u00a0\nconversion.\u00a0The\u00a0files\u00a0 a.txt,\u00a0 b.txt\u00a0and\u00a0c.txt\u00a0 should\u00a0 be\u00a0added\u00a0 to\u00a0the\u00a0\nproject\u00a0and\u00a0filled\u00a0with\u00a0some\u00a0 text.\u00a0The\u00a0program\u00a0should\u00a0receive\u00a0the\u00a0\nfile\u00a0 names\u00a0as\u00a0command-line\u00a0arguments.\u00a0Suspend\u00a0the\u00a0program\u00a0for\u00a0\n0.5\u00a0seconds\u00a0after\u00a0reading\u00a0a\u00a0line\u00a0from\u00a0any\u00a0file.\n372\nLet\u00a0Us\u00a0Python\n(h) Write\u00a0 a\u00a0 program\u00a0 that\u00a0 accomplishes\u00a0 the\u00a0 same\u00a0 task\u00a0 mentioned\u00a0 in\u00a0\nExercise\u00a0 [B](g)\u00a0above\u00a0 by launching\u00a0the\u00a0conversion\u00a0 operations\u00a0in\u00a03\u00a0\ndifferent\u00a0threads.\n[C] Match\u00a0the\u00a0following pairs:\na.\u00a0 Multiprocessing\n1.\u00a0 use\u00a0multiprocessing module\nb.\u00a0 Pre-emptive\u00a0multi-threading\n2.\u00a0 use\u00a0m", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_545", "chunk_strategy": "fixed_size"}}, {"text": "](g)\u00a0above\u00a0 by launching\u00a0the\u00a0conversion\u00a0 operations\u00a0in\u00a03\u00a0\ndifferent\u00a0threads.\n[C] Match\u00a0the\u00a0following pairs:\na.\u00a0 Multiprocessing\n1.\u00a0 use\u00a0multiprocessing module\nb.\u00a0 Pre-emptive\u00a0multi-threading\n2.\u00a0 use\u00a0multi-threading\nc.\u00a0 Cooperative\u00a0multi-threading\n3.\u00a0 use\u00a0threading module\nd.\u00a0 CPU-bound\u00a0programs\n4.\u00a0 use\u00a0multi-processing\ne.\u00a0 I/O-bound programs\n5.\u00a0 use\u00a0asyncio module\nLet\u00a0Us\nPython\n373\nSynchronization\nx\nSynchronization\nx\nSemaphore\nx\nExamples\u00a0of\u00a0sharing\u00a0Resources\nx\nMechanisms\u00a0for\u00a0ITC\nx\nExample\u00a0of\u00a0comm.\u00a0between\u00a0Threads\nx\nEvent\nx\nMechanisms\u00a0for\u00a0Sharing\u00a0Resources\nx\nCondition\nx\nLock\nx\nPrograms\nx\nRLock\nx\nExercises\n26\n\u201cWell-oiled\u00a0threads run\u00a0smoother...\u201d\n374\nLet\u00a0Us\u00a0Python\nSynchronization\nx\nIn\u00a0 a\u00a0 multithreaded\u00a0 application\u00a0 we\u00a0 may\u00a0 be\u00a0 needed\u00a0 to\u00a0 coordinate\u00a0\n(synchronize)\u00a0the\u00a0activities\u00a0of\u00a0the\u00a0threads\u00a0running\u00a0in\u00a0it.\u00a0\nx\nThe\u00a0 need\u00a0 to\u00a0 coordinate\u00a0 activities\u00a0 of\u00a0 threads\u00a0 will\u00a0 arise\u00a0 in\u00a0 two\u00a0\nsituations:\n(a) When\u00a0data\u00a0or\u00a0other\u00a0resources\u00a0are\u00a0to\u00a0be\u00a0shared\u00a0amongst\u00a0threads.\n(b) When\u00a0we\u00a0need\u00a0to\u00a0carry\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_546", "chunk_strategy": "fixed_size"}}, {"text": "ds\u00a0running\u00a0in\u00a0it.\u00a0\nx\nThe\u00a0 need\u00a0 to\u00a0 coordinate\u00a0 activities\u00a0 of\u00a0 threads\u00a0 will\u00a0 arise\u00a0 in\u00a0 two\u00a0\nsituations:\n(a) When\u00a0data\u00a0or\u00a0other\u00a0resources\u00a0are\u00a0to\u00a0be\u00a0shared\u00a0amongst\u00a0threads.\n(b) When\u00a0we\u00a0need\u00a0to\u00a0carry\u00a0out\u00a0communication\u00a0between\u00a0threads.\nExamples of\u00a0Sharing\u00a0Resources\nx\nExample\u00a01:\u00a0Suppose\u00a0a\u00a0function\u00a0has\u00a0a\u00a0statement\u00a0n\u00a0=\u00a0n\u00a0+\u00a01.\u00a0Here\u00a0value\u00a0\nof\u00a0n is\u00a0read,\u00a01\u00a0is\u00a0added\u00a0to\u00a0it\u00a0and\u00a0the\u00a0result\u00a0is\u00a0written back. If\u00a0multiple\u00a0\nthreads call\u00a0 this\u00a0 function\u00a0 then\u00a0 n will\u00a0 be\u00a0 shared\u00a0 amongst\u00a0 these\u00a0\nthreads.\u00a0 In\u00a0 such\u00a0 a\u00a0 case,\u00a0 if\u00a0 one thread\u00a0 has\u00a0 read\u00a0 n and\u00a0 before\u00a0 it\u00a0\nupdates\u00a0it\u00a0another\u00a0thread\u00a0may\u00a0read\u00a0and\u00a0update\u00a0it.\u00a0Such\u00a0overlapping\u00a0\naccesses\u00a0 and\nmodifications\u00a0 from\u00a0 multiple\u00a0 threads\u00a0 may\u00a0 not\u00a0\nincrement\u00a0n systematically.\nx\nSolution\u00a0 to\u00a0Example\u00a0 1:\u00a0 To\u00a0ensure\u00a0 proper\u00a0incrementation\u00a0of\u00a0 n,\u00a0we\u00a0\nshould\u00a0ensure\u00a0 that\u00a0whichever\u00a0thread\u00a0gets\u00a0the\u00a0time-slot\u00a0first\u00a0should\u00a0\ncomplete\u00a0 working\u00a0 with\u00a0n.\u00a0If\u00a0in the\u00a0meanwhile\u00a0another\u00a0 thread\u00a0gets\u00a0\nthe\u00a0 time-slot,\u00a0it\u00a0should\u00a0be\u00a0 made\u00a0to\u00a0 wait.\u00a0Only\u00a0when\u00a0first\u00a0 thread\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_547", "chunk_strategy": "fixed_size"}}, {"text": "nsure\u00a0 that\u00a0whichever\u00a0thread\u00a0gets\u00a0the\u00a0time-slot\u00a0first\u00a0should\u00a0\ncomplete\u00a0 working\u00a0 with\u00a0n.\u00a0If\u00a0in the\u00a0meanwhile\u00a0another\u00a0 thread\u00a0gets\u00a0\nthe\u00a0 time-slot,\u00a0it\u00a0should\u00a0be\u00a0 made\u00a0to\u00a0 wait.\u00a0Only\u00a0when\u00a0first\u00a0 thread\u00a0is\u00a0\ndone,\u00a0the\u00a0other\u00a0thread\u00a0should\u00a0be\u00a0able\u00a0to\u00a0access\u00a0to\u00a0n.\nx\nExample\u00a0 2:\u00a0 Suppose\u00a0 there\u00a0 are\u00a0two\u00a0threads\u00a0 in\u00a0an\u00a0 application.\u00a0One\u00a0\nthread\u00a0 reads\u00a0 a\u00a0 list\u00a0of\u00a0 numbers\u00a0 and\u00a0 prints\u00a0its\u00a0 squares\u00a0and\u00a0 another\u00a0\nreads\u00a0the\u00a0list\u00a0and\u00a0prints\u00a0cubes\u00a0of\u00a0numbers\u00a0in\u00a0it. So\u00a0both\u00a0threads\u00a0are\u00a0\ngoing\u00a0 to\u00a0 share\u00a0 the\u00a0 list.\u00a0 When\u00a0 the threads\u00a0 print\u00a0 the\u00a0 squares\u00a0 and\u00a0\ncubes,\u00a0the\u00a0output\u00a0is\u00a0likely\u00a0to\u00a0get\u00a0mixed\u00a0up.\u00a0\nx\nSolution\u00a0to\u00a0Example\u00a02:\u00a0To\u00a0avoid\u00a0mixing\u00a0of\u00a0output\u00a0we\u00a0should\u00a0ensure\u00a0\nthat\u00a0 whichever\u00a0 thread\u00a0 gets\u00a0 the\u00a0 time-slot\u00a0 first\u00a0 should\u00a0 complete\u00a0\nworking\u00a0with\u00a0the\u00a0list.\u00a0If\u00a0in the\u00a0meanwhile\u00a0other\u00a0thread\u00a0gets\u00a0the\u00a0time-\nslot,\u00a0it\u00a0should\u00a0be\u00a0made\u00a0to\u00a0wait.\u00a0Only\u00a0when\u00a0first\u00a0thread\u00a0is\u00a0done,\u00a0the\u00a0\nother\u00a0thread\u00a0should\u00a0be\u00a0able\u00a0to\u00a0access\u00a0the\u00a0list.\nExample\u00a0of\u00a0Communication\u00a0between\u00a0Threads\nx\nSuppose\u00a0 one\u00a0 thread\u00a0is\u00a0 gene", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_548", "chunk_strategy": "fixed_size"}}, {"text": "the\u00a0time-\nslot,\u00a0it\u00a0should\u00a0be\u00a0made\u00a0to\u00a0wait.\u00a0Only\u00a0when\u00a0first\u00a0thread\u00a0is\u00a0done,\u00a0the\u00a0\nother\u00a0thread\u00a0should\u00a0be\u00a0able\u00a0to\u00a0access\u00a0the\u00a0list.\nExample\u00a0of\u00a0Communication\u00a0between\u00a0Threads\nx\nSuppose\u00a0 one\u00a0 thread\u00a0is\u00a0 generating\u00a0numbers\u00a0 in\u00a0an\u00a0 infinite\u00a0loop\u00a0and\u00a0\nanother\u00a0thread\u00a0is\u00a0finding\u00a0squares\u00a0of\u00a0generated\u00a0numbers.\u00a0Unless\u00a0the\u00a0\nChapter 26:\u00a0Synchronization\n375\nnew\u00a0number\u00a0is\u00a0generated\u00a0its\u00a0square\u00a0cannot\u00a0be\u00a0found.\u00a0So\u00a0if\u00a0squaring\u00a0\nthread\u00a0 gets\u00a0 the\u00a0 time\u00a0 slot\u00a0 earlier\u00a0 than\u00a0 the\u00a0 generating\u00a0 thread,\u00a0\nsquaring\u00a0 thread\u00a0must\u00a0be\u00a0made\u00a0to\u00a0wait.\u00a0Also,\u00a0 when\u00a0square\u00a0is\u00a0being\u00a0\ngenerated,\u00a0new\u00a0numbers\u00a0should\u00a0not\u00a0get\u00a0generated.\u00a0This\u00a0is\u00a0necessary\u00a0\notherwise\u00a0the\u00a0squaring\u00a0thread\u00a0may\u00a0miss\u00a0some\u00a0numbers.\u00a0\nx\nThis\u00a0 is\u00a0 a\u00a0 typical\u00a0 producer-consumer\u00a0 problem,\u00a0 where\u00a0 the\u00a0 number\u00a0\ngenerating\u00a0 thread\u00a0 is\u00a0the\u00a0 producer\u00a0and\u00a0 the\u00a0 squaring\u00a0 thread\u00a0 is\u00a0 the\u00a0\nconsumer.\u00a0\nx\nHere\u00a0 communication\u00a0 between\u00a0 two\u00a0 threads\u00a0 would\u00a0 be\u00a0 required.\u00a0\nWhen\u00a0producer\u00a0thread\u00a0completes\u00a0production\u00a0it\u00a0should\u00a0communicate\u00a0\nto\u00a0 the\u00a0 squaring\u00a0 thread\u00a0 that\u00a0 it\u00a0 ", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_549", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0 thread\u00a0 is\u00a0 the\u00a0\nconsumer.\u00a0\nx\nHere\u00a0 communication\u00a0 between\u00a0 two\u00a0 threads\u00a0 would\u00a0 be\u00a0 required.\u00a0\nWhen\u00a0producer\u00a0thread\u00a0completes\u00a0production\u00a0it\u00a0should\u00a0communicate\u00a0\nto\u00a0 the\u00a0 squaring\u00a0 thread\u00a0 that\u00a0 it\u00a0 is\u00a0 done\u00a0 with\u00a0 production.\u00a0 When\u00a0\nconsumer\u00a0thread\u00a0completes\u00a0squaring\u00a0it\u00a0should\u00a0communicate\u00a0to\u00a0the\u00a0\nproducer\u00a0thread\u00a0that\u00a0it\u00a0is\u00a0done\u00a0and\u00a0producer\u00a0thread\u00a0can\u00a0produce\u00a0the\u00a0\nnext\u00a0number.\nMechanisms\u00a0for\u00a0Sharing\u00a0Resources\nx\nPython's\u00a0 threading module\u00a0provides\u00a0 three\u00a0mechanisms\u00a0 for\u00a0sharing\u00a0\nresources\u00a0between\u00a0threads:\n(a) Lock\n(b) RLock\u00a0\n(c) Semaphore\nx\nThey\u00a0should\u00a0be\u00a0used\u00a0in\u00a0following\u00a0situations:\n-\nFor\u00a0synchronized\u00a0access\u00a0to\u00a0shared\u00a0resources\u00a0- use\u00a0lock.\n-\nFor\u00a0nested\u00a0access\u00a0to\u00a0shared\u00a0resources\u00a0- use\u00a0re-entrant\u00a0lock.\n-\nFor\u00a0 permitting\u00a0limited\u00a0 number\u00a0 of\u00a0 accesses\u00a0 to\u00a0a\u00a0 resource\u00a0 - use\u00a0\nsemaphore.\nLock\nx\nLocks\u00a0 are\u00a0 used\u00a0 to\u00a0 synchronize\u00a0 access\u00a0 to\u00a0 a\u00a0 shared\u00a0 resource.\u00a0 We\u00a0\nshould\u00a0 first\u00a0 create a Lock object.\u00a0 When\u00a0 we\u00a0 need\u00a0 to\u00a0 access\u00a0 the\u00a0\nresource\u00a0we\u00a0should call acquire(\u00a0),\u00a0then\u00a0use\u00a0the\u00a0res", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_550", "chunk_strategy": "fixed_size"}}, {"text": "k\nx\nLocks\u00a0 are\u00a0 used\u00a0 to\u00a0 synchronize\u00a0 access\u00a0 to\u00a0 a\u00a0 shared\u00a0 resource.\u00a0 We\u00a0\nshould\u00a0 first\u00a0 create a Lock object.\u00a0 When\u00a0 we\u00a0 need\u00a0 to\u00a0 access\u00a0 the\u00a0\nresource\u00a0we\u00a0should call acquire(\u00a0),\u00a0then\u00a0use\u00a0the\u00a0resource\u00a0and\u00a0once\u00a0\ndone,\u00a0call release(\u00a0) as\u00a0shown\u00a0below:\nlck\u00a0=\u00a0threading.Lock(\u00a0)\nlck.acquire(\u00a0)\n#\u00a0use\u00a0the\u00a0resource\nlck.release(\u00a0)\n376\nLet\u00a0Us\u00a0Python\nx\nFor\u00a0each\u00a0shared\u00a0resource,\u00a0a\u00a0new\u00a0Lock object\u00a0should\u00a0be\u00a0created.\nx\nA\u00a0lock\u00a0can\u00a0be\u00a0in\u00a0two\u00a0states\u0376'Locked'\u00a0or\u00a0'Unlocked'.\u00a0\nx\nA\u00a0Lock object\u00a0has\u00a0two\u00a0methods\u0376acquire(\u00a0) and\u00a0release(\u00a0).\u00a0If\u00a0a\u00a0thread\u00a0\ncalls\u00a0 acquire(\u00a0) it\u00a0puts\u00a0the\u00a0lock\u00a0in\u00a0'Locked'\u00a0state\u00a0 if\u00a0it\u00a0is\u00a0 currently\u00a0in\u00a0\n'Unlocked'\u00a0state\u00a0and\u00a0returns.\u00a0If\u00a0it\u00a0is\u00a0already\u00a0in\u00a0'Locked'\u00a0state\u00a0then\u00a0the\u00a0\ncall\u00a0 to\u00a0 acquire(\u00a0 ) blocks\u00a0 the\u00a0 thread\u00a0 (means\u00a0 control\u00a0 doesn't\u00a0 return\u00a0\nfrom\u00a0acquire(\u00a0)).\u00a0A\u00a0call\u00a0to\u00a0release(\u00a0) puts\u00a0the\u00a0lock\u00a0in\u00a0'Unlocked'\u00a0state.\nRLock\nx\nSometimes\u00a0 a\u00a0 recursive\u00a0 function\u00a0may\u00a0 be\u00a0 invoked\u00a0 through\u00a0 multiple\u00a0\nthreads.\u00a0In\u00a0such\u00a0cases,\u00a0if\u00a0we\u00a0use\u00a0Lock to\u00a0provide\u00a0synchronized\u00a0access\u00a0\nto\u00a0 share", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_551", "chunk_strategy": "fixed_size"}}, {"text": "se(\u00a0) puts\u00a0the\u00a0lock\u00a0in\u00a0'Unlocked'\u00a0state.\nRLock\nx\nSometimes\u00a0 a\u00a0 recursive\u00a0 function\u00a0may\u00a0 be\u00a0 invoked\u00a0 through\u00a0 multiple\u00a0\nthreads.\u00a0In\u00a0such\u00a0cases,\u00a0if\u00a0we\u00a0use\u00a0Lock to\u00a0provide\u00a0synchronized\u00a0access\u00a0\nto\u00a0 shared\u00a0 variables\u00a0 it\u00a0 would\u00a0 lead\u00a0 to\u00a0 a\u00a0 problem\u0376thread\u00a0 will\u00a0 be\u00a0\nblocked\u00a0when\u00a0it\u00a0attempts\u00a0to\u00a0acquire\u00a0the\u00a0same\u00a0lock\u00a0second\u00a0time.\nx\nThis\u00a0problem\u00a0can\u00a0be\u00a0overcome\u00a0by\u00a0using\u00a0re-entrant\u00a0Lock\u00a0or\u00a0RLock.\u00a0 A\u00a0\nre-entrant\u00a0lock\u00a0only\u00a0blocks\u00a0if\u00a0another\u00a0thread\u00a0currently\u00a0holds\u00a0the\u00a0lock.\u00a0\nIf\u00a0\u019ahe\u00a0c\u01b5rren\u019a\u00a0\u019ahread\u00a0\u019arie\u0190\u00a0\u019ao\u00a0acq\u01b5ire\u00a0a\u00a0lock\u00a0\u019aha\u019a\u00a0i\u019a\ue001\u0190\u00a0alread\u01c7\u00a0holding\ue002\u00a0\nexecution\u00a0continues\u00a0as\u00a0usual.\nx\nA\u00a0lock/rlock\u00a0acquired\u00a0by\u00a0one\u00a0thread\u00a0can\u00a0be\u00a0released\u00a0either\u00a0by\u00a0same\u00a0\nthread\u00a0or\u00a0by\u00a0another\u00a0thread.\nx\nrelease(\u00a0) should\u00a0be\u00a0called\u00a0as\u00a0many\u00a0times\u00a0as\u00a0acquire(\u00a0) is\u00a0called.\nx\nFollowing\u00a0code\u00a0snippet\u00a0shows\u00a0working\u00a0of\u00a0normal\u00a0lock\u00a0and\u00a0re-entrant\u00a0\nlock.\nlck\u00a0=\u00a0threading.Lock(\u00a0)\nlck.acquire(\u00a0)\nlck.acquire(\u00a0)\n#\u00a0this\u00a0will\u00a0block\nrlck\u00a0=\u00a0threading.RLock(\u00a0)\nrlck.acquire(\u00a0)\nrlck.acquire(\u00a0)\u00a0\n#\u00a0this\u00a0won't\u00a0block\nx\nA\u00a0lock/rlock\u00a0 is\u00a0also\u00a0known\u00a0as", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_552", "chunk_strategy": "fixed_size"}}, {"text": "re-entrant\u00a0\nlock.\nlck\u00a0=\u00a0threading.Lock(\u00a0)\nlck.acquire(\u00a0)\nlck.acquire(\u00a0)\n#\u00a0this\u00a0will\u00a0block\nrlck\u00a0=\u00a0threading.RLock(\u00a0)\nrlck.acquire(\u00a0)\nrlck.acquire(\u00a0)\u00a0\n#\u00a0this\u00a0won't\u00a0block\nx\nA\u00a0lock/rlock\u00a0 is\u00a0also\u00a0known\u00a0as\u00a0mutex\u00a0 as\u00a0it\u00a0permits\u00a0mutual\u00a0exclusive\u00a0\naccess\u00a0to\u00a0a\u00a0resource.\nChapter 26:\u00a0Synchronization\n377\nSemaphore\nx\nIf\u00a0we\u00a0wish\u00a0to\u00a0permit access\u00a0to\u00a0a\u00a0resource\u00a0like\u00a0network\u00a0connection\u00a0or\u00a0\na\u00a0database\u00a0server to\u00a0a\u00a0limited\u00a0number\u00a0of\u00a0threads\u00a0we\u00a0can\u00a0do\u00a0so\u00a0using\u00a0\na\u00a0semaphore\u00a0object.\u00a0\nx\nA\u00a0 semaphore\u00a0 object\u00a0 uses\u00a0 a counter\u00a0 rather\u00a0 than\u00a0 a\u00a0 lock\u00a0 flag.\u00a0 The\u00a0\ncounter\u00a0 can\u00a0 be\u00a0 set\u00a0 to\u00a0 indicate\u00a0 the\u00a0 number\u00a0 of\u00a0 threads\u00a0 that\u00a0\ncan acquire the\u00a0semaphore\u00a0before\u00a0blocking\u00a0occurs.\u00a0\nx\nOnce\u00a0 the\u00a0 counter\u00a0 is\u00a0 set,\u00a0the\u00a0 counter\u00a0 decreases\u00a0 per acquire( ) call,\u00a0\nand\u00a0 increases\u00a0 per release( ) call.\u00a0Blocking\u00a0occurs\u00a0only\u00a0 if\u00a0 more\u00a0than\u00a0\nthe\u00a0set number\u00a0of\u00a0threads\u00a0attempt to\u00a0acquire the\u00a0semaphore.\nx\nWe\u00a0have\u00a0to\u00a0only\u00a0initialize\u00a0the\u00a0counter\u00a0to\u00a0the\u00a0maximum\u00a0number while\u00a0\ncreating\u00a0the\u00a0semaphore\u00a0object,\u00a0and\u00a0the\u00a0semaphore\u00a0impleme", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_553", "chunk_strategy": "fixed_size"}}, {"text": "f\u00a0 more\u00a0than\u00a0\nthe\u00a0set number\u00a0of\u00a0threads\u00a0attempt to\u00a0acquire the\u00a0semaphore.\nx\nWe\u00a0have\u00a0to\u00a0only\u00a0initialize\u00a0the\u00a0counter\u00a0to\u00a0the\u00a0maximum\u00a0number while\u00a0\ncreating\u00a0the\u00a0semaphore\u00a0object,\u00a0and\u00a0the\u00a0semaphore\u00a0implementationl\u00a0\ntakes care\u00a0of\u00a0the\u00a0rest.\nMechanisms\u00a0for\u00a0Inter-thread\u00a0Communication (ITC)\nx\nPython's\u00a0 threading module\u00a0 provides\u00a0 two\u00a0 mechanisms\u00a0 for inter-\nthread\u00a0communication:\n(a) Event\n(b) Condition\nEvent\nx\nAn\u00a0Event object\u00a0is\u00a0used\u00a0to\u00a0communicate\u00a0between\u00a0threads.\u00a0It\u00a0has\u00a0an\u00a0\ninternal\u00a0flag\u00a0which\u00a0threads\u00a0can\u00a0set\u00a0or\u00a0clear\u00a0through\u00a0methods\u00a0set(\u00a0)\nand\u00a0clear(\u00a0).\u00a0\nx\nTypical\u00a0 working:\u00a0 If\u00a0 thread\u00a0 1\u00a0 calls\u00a0 the\u00a0 method\u00a0 wait( ),\u00a0 it\u00a0 will\u00a0 wait\u00a0\n(block)\u00a0if\u00a0internal\u00a0flag\u00a0has\u00a0not\u00a0yet\u00a0been\u00a0set.\u00a0Thread\u00a02\u00a0will\u00a0set\u00a0the\u00a0flag.\u00a0\nSince\u00a0the\u00a0flag\u00a0now\u00a0stands\u00a0set,\u00a0Thread\u00a01\u00a0will\u00a0come\u00a0out\u00a0its\u00a0wait\u00a0state,\u00a0\nperform\u00a0 its\u00a0work\u00a0and\u00a0then\u00a0clear\u00a0the\u00a0flag.\u00a0 This\u00a0scenario\u00a0is\u00a0 shown\u00a0in\u00a0\nthe\u00a0following\u00a0program:\ndef fun1( ) :\nwhile\u00a0True\u00a0:\n#\u00a0wait for the flag to be set\nev.wait( )\n#\u00a0once\u00a0flag\u00a0is\u00a0set\u00a0by\u00a0thread\u00a02,\u00a0do\u00a0the\u00a0work\u00a0in\u00a0this\u00a0th", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_554", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0and\u00a0then\u00a0clear\u00a0the\u00a0flag.\u00a0 This\u00a0scenario\u00a0is\u00a0 shown\u00a0in\u00a0\nthe\u00a0following\u00a0program:\ndef fun1( ) :\nwhile\u00a0True\u00a0:\n#\u00a0wait for the flag to be set\nev.wait( )\n#\u00a0once\u00a0flag\u00a0is\u00a0set\u00a0by\u00a0thread\u00a02,\u00a0do\u00a0the\u00a0work\u00a0in\u00a0this\u00a0thread\nev.clear( ) #\u00a0clear\u00a0the\u00a0flag\ndef fun2( ) :\n378\nLet\u00a0Us\u00a0Python\nwhile\u00a0True\u00a0:\n#\u00a0perform\u00a0some\u00a0work\n#\u00a0set\u00a0the\u00a0flag\nev.set( )\nev\u00a0=\u00a0Event(\u00a0)\nth1\u00a0=\u00a0threading.Thread(target\u00a0=\u00a0fun1)\nth2\u00a0=\u00a0threading.Thread(target\u00a0=\u00a0fun2)\nCondition\nx\nA Condition object\u00a0is\u00a0an\u00a0advanced\u00a0version\u00a0of\u00a0the Event object.\u00a0It\u00a0too\u00a0\nis\u00a0used\u00a0to\u00a0communicate\u00a0between\u00a0threads.\u00a0It\u00a0has\u00a0methods\u00a0acquire(\u00a0),\u00a0\nrelease(\u00a0),\u00a0wait(\u00a0),\u00a0notify(\u00a0) and\u00a0notifyAll(\u00a0).\nx\nA\u00a0 Condition object\u00a0 internally\u00a0 uses\u00a0 a\u00a0 lock\u00a0 that\u00a0 can\u00a0 be\u00a0 acquired\u00a0or\u00a0\nreleased\u00a0 using\u00a0 acquire(\u00a0 ) and\u00a0 release(\u00a0 ) functions\u00a0 respectively.\u00a0\nacquire(\u00a0) blocks\u00a0if\u00a0the\u00a0lock\u00a0is\u00a0already\u00a0in\u00a0locked\u00a0state.\nx\nCondition object\u00a0can notify other\u00a0threads\u00a0using\u00a0notify(\u00a0)/notifyAll(\u00a0)\nabout\u00a0a\u00a0change\u00a0in\u00a0the\u00a0state\u00a0of\u00a0the\u00a0program.\u00a0\nx\nThe wait(\u00a0 ) method\u00a0 releases\u00a0 the\u00a0 lock,\u00a0 and\u00a0 then\u00a0 bloc", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_555", "chunk_strategy": "fixed_size"}}, {"text": "eady\u00a0in\u00a0locked\u00a0state.\nx\nCondition object\u00a0can notify other\u00a0threads\u00a0using\u00a0notify(\u00a0)/notifyAll(\u00a0)\nabout\u00a0a\u00a0change\u00a0in\u00a0the\u00a0state\u00a0of\u00a0the\u00a0program.\u00a0\nx\nThe wait(\u00a0 ) method\u00a0 releases\u00a0 the\u00a0 lock,\u00a0 and\u00a0 then\u00a0 blocks\u00a0 until\u00a0 it\u00a0 is\u00a0\nawakened\u00a0by\u00a0a notify( ) or notifyAll( ) call\u00a0for\u00a0the\u00a0same\u00a0Condition in\u00a0\nanother\u00a0thread.\u00a0Once\u00a0awakened,\u00a0it\u00a0re-acquires\u00a0the\u00a0lock\u00a0and\u00a0returns.\nx\nA\u00a0 thread\u00a0 should release a Condition once\u00a0 it\u00a0 has\u00a0 completed\u00a0 the\u00a0\nrelated\u00a0actions,\u00a0so\u00a0that\u00a0other\u00a0threads\u00a0can\u00a0acquire\u00a0the\u00a0condition\u00a0for\u00a0\ntheir\u00a0purposes.\nx\nProducer\u00a0Consumer\u00a0algorithm\u00a0is\u00a0a\u00a0technique\u00a0for\u00a0generating\u00a0requests\u00a0\nand\u00a0 processing\u00a0the\u00a0pending\u00a0requests.\u00a0 Producer\u00a0produces\u00a0requests,\u00a0\nConsumer\u00a0consumes\u00a0generated\u00a0requests.\u00a0Both\u00a0work\u00a0as\u00a0independent\u00a0\nthreads.\nx\nCondition object\u00a0 can\u00a0 be\u00a0 used\u00a0to\u00a0implement\u00a0a\u00a0 Producer\u00a0 Consumer\u00a0\nalgorithm\u00a0as\u00a0shown\u00a0below:\n#\u00a0Producer\u00a0thread\ncond.acquire(\u00a0)\n#\u00a0code\u00a0here\u00a0to\u00a0produce\u00a0one\u00a0item\ncond.notify(\u00a0)\ncond.release(\u00a0)\n#\u00a0Consumer\u00a0thread\nChapter 26:\u00a0Synchronization\n379\ncond.acquire(\u00a0)\nwhile\u00a0item_is_", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_556", "chunk_strategy": "fixed_size"}}, {"text": "orithm\u00a0as\u00a0shown\u00a0below:\n#\u00a0Producer\u00a0thread\ncond.acquire(\u00a0)\n#\u00a0code\u00a0here\u00a0to\u00a0produce\u00a0one\u00a0item\ncond.notify(\u00a0)\ncond.release(\u00a0)\n#\u00a0Consumer\u00a0thread\nChapter 26:\u00a0Synchronization\n379\ncond.acquire(\u00a0)\nwhile\u00a0item_is_not_available(\u00a0)\u00a0:\ncond.wait(\u00a0)\n#\u00a0code\u00a0here\u00a0to\u00a0consume\u00a0the\u00a0item\ncond.release(\u00a0)\nx\nWorking\u00a0of\u00a0Producer\u00a0Consumer\u00a0problem:\n-\nConsumer\u00a0waits while\u00a0Producer\u00a0is\u00a0producing.\n-\nOnce\u00a0Producer\u00a0has\u00a0produced\u00a0it\u00a0sends\u00a0a signal\u00a0to\u00a0Consumer.\n-\nProducer\u00a0waits while\u00a0Consumer\u00a0is\u00a0consuming.\n-\nOnce\u00a0Consumer\u00a0has\u00a0consumed\u00a0it\u00a0sends\u00a0a signal\u00a0to\u00a0Producer.\n____________________________________________________________________\nProblem\u00a026.1\nWrite\u00a0a\u00a0program\u00a0through\u00a0which you\u00a0can\u00a0prove\u00a0that\u00a0in\u00a0this\u00a0programming\u00a0\nsituation\u00a0 synchronization\u00a0 is\u00a0 really\u00a0 required.\u00a0 Then\u00a0 write\u00a0 a\u00a0 program\u00a0 to\u00a0\ndemonstrate\u00a0how\u00a0synchronization\u00a0can\u00a0solve\u00a0the\u00a0problem.\nProgram\nimport\u00a0time\nimport\u00a0threading\u00a0\ndef\u00a0fun1(\u00a0)\u00a0:\nprint('Entering\u00a0fun1')\nglobal\u00a0g\ng\u00a0+=\u00a01\n#time.sleep(10)\ng\u00a0-=\u00a01\nprint('In\u00a0fun1\u00a0g\u00a0=',\u00a0g)\nprint('Exiting\u00a0fun1')\ndef\u00a0fun2(\u00a0)\u00a0:\nprint('", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_557", "chunk_strategy": "fixed_size"}}, {"text": "solve\u00a0the\u00a0problem.\nProgram\nimport\u00a0time\nimport\u00a0threading\u00a0\ndef\u00a0fun1(\u00a0)\u00a0:\nprint('Entering\u00a0fun1')\nglobal\u00a0g\ng\u00a0+=\u00a01\n#time.sleep(10)\ng\u00a0-=\u00a01\nprint('In\u00a0fun1\u00a0g\u00a0=',\u00a0g)\nprint('Exiting\u00a0fun1')\ndef\u00a0fun2(\u00a0)\u00a0:\nprint('Entering\u00a0fun2')\nglobal\u00a0g\ng\u00a0+=\u00a02\ng\u00a0-=\u00a02\nprint('In\u00a0fun2\u00a0g\u00a0=',\u00a0g)\n380\nLet\u00a0Us\u00a0Python\nprint('Exiting\u00a0fun2')\ng\u00a0=\u00a010\nth1\u00a0=\u00a0threading.Thread(target\u00a0=\u00a0fun1)\nth2\u00a0=\u00a0threading.Thread(target\u00a0=\u00a0fun2)\nth1.start(\u00a0)\nth2.start(\u00a0)\nth1.join(\u00a0)\nth2.join(\u00a0)\nOutput\nEntering\u00a0fun1\nIn\u00a0fun1\u00a0g\u00a0=\u00a010\nExiting\u00a0fun1\nEntering\u00a0fun2\nIn\u00a0fun2\u00a0g\u00a0=\u00a010\nExiting\u00a0fun2\nIf\u00a0you\u00a0uncomment\u00a0the\u00a0call\u00a0to\u00a0time.sleep(\u00a0),\u00a0the\u00a0output\u00a0changes\u00a0to:\nEntering\u00a0fun1\nEntering\u00a0fun2\nIn\u00a0fun2\u00a0g\u00a0=\u00a011\nExiting\u00a0fun2\nIn\u00a0fun1\u00a0g\u00a0=\u00a010\nExiting\u00a0fun1\nTips\nx\nWe\u00a0 are\u00a0using\u00a0the\u00a0global\u00a0variable\u00a0g\u00a0in\u00a0fun1(\u00a0) and\u00a0fun2( )\u00a0which\u00a0are\u00a0\nrunning\u00a0 in\u00a0two\u00a0different\u00a0threads.\u00a0As\u00a0expected,\u00a0both\u00a0print\u00a0the\u00a0value\u00a0\nof\u00a0 g as\u00a0 10,\u00a0 as\u00a0 both\u00a0 increment\u00a0 and decrement\u00a0 it\u00a0 by\u00a0 1\u00a0 and\u00a0 2\u00a0\nrespectively.\nx\nIf\u00a0 you\u00a0 uncomment\u00a0 the\u00a0 call\u00a0 to\u00a0 sleep(\u00a0 ) the\u00a0 output\u00a0 becomes\u00a0\ninconsistent.\u00a0 fun1(\u00a0)", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_558", "chunk_strategy": "fixed_size"}}, {"text": "d,\u00a0both\u00a0print\u00a0the\u00a0value\u00a0\nof\u00a0 g as\u00a0 10,\u00a0 as\u00a0 both\u00a0 increment\u00a0 and decrement\u00a0 it\u00a0 by\u00a0 1\u00a0 and\u00a0 2\u00a0\nrespectively.\nx\nIf\u00a0 you\u00a0 uncomment\u00a0 the\u00a0 call\u00a0 to\u00a0 sleep(\u00a0 ) the\u00a0 output\u00a0 becomes\u00a0\ninconsistent.\u00a0 fun1(\u00a0) increments\u00a0the\u00a0value\u00a0of\u00a0 g to\u00a011,\u00a0but\u00a0before\u00a0it\u00a0\ncan\u00a0 decrement\u00a0 the\u00a0 incremented\u00a0 value,\u00a0 fun2(\u00a0 ) gets\u00a0 the\u00a0 time-slot,\u00a0\nwhich\u00a0 increments\u00a0 g to\u00a0 13, decrements\u00a0 it\u00a0to\u00a0 11\u00a0 and\u00a0 prints\u00a0 it.\u00a0 The\u00a0\ntime-slot\u00a0again\u00a0goes\u00a0to\u00a0fun1(\u00a0),\u00a0which\u00a0decrements\u00a0g to\u00a010\u00a0and\u00a0prints\u00a0\nit.\nChapter 26:\u00a0Synchronization\n381\nx\nThe\u00a0solution\u00a0to\u00a0avoid\u00a0this\u00a0mismatch\u00a0is\u00a0given\u00a0in\u00a0the\u00a0program\u00a0 shown\u00a0\nbelow.\nProgram\nimport\u00a0time\nimport\u00a0threading\u00a0\ndef\u00a0fun1(\u00a0)\u00a0:\nprint('Entering\u00a0fun1')\nglobal\u00a0g\nlck.acquire(\u00a0)\ng\u00a0+=\u00a01\ng\u00a0-=\u00a01\nlck.release(\u00a0)\nprint('In\u00a0fun1\u00a0g\u00a0=',\u00a0g)\nprint('Exiting\u00a0fun1')\ndef\u00a0fun2(\u00a0)\u00a0:\nprint('Entering\u00a0fun2')\nglobal\u00a0g\nlck.acquire(\u00a0)\ng\u00a0+=\u00a02\ng\u00a0-=\u00a02\nlck.release(\u00a0)\nprint('In\u00a0fun2\u00a0g\u00a0=',\u00a0g)\nprint('Exiting\u00a0fun2')\ng\u00a0=\u00a010\nlck\u00a0=\u00a0threading.Lock(\u00a0)\nth1\u00a0=\u00a0threading.Thread(target\u00a0=\u00a0fun1)\nth2\u00a0=\u00a0threading.Thread(target\u00a0=\u00a0fun2)\nt", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_559", "chunk_strategy": "fixed_size"}}, {"text": "g\nlck.acquire(\u00a0)\ng\u00a0+=\u00a02\ng\u00a0-=\u00a02\nlck.release(\u00a0)\nprint('In\u00a0fun2\u00a0g\u00a0=',\u00a0g)\nprint('Exiting\u00a0fun2')\ng\u00a0=\u00a010\nlck\u00a0=\u00a0threading.Lock(\u00a0)\nth1\u00a0=\u00a0threading.Thread(target\u00a0=\u00a0fun1)\nth2\u00a0=\u00a0threading.Thread(target\u00a0=\u00a0fun2)\nth1.start(\u00a0)\nth2.start(\u00a0)\nth1.join(\u00a0)\nth2.join(\u00a0)\nTips\nx\nIn\u00a0 main\u00a0 thread\u00a0 we\u00a0 have\u00a0 created\u00a0 a\u00a0 Lock object\u00a0 through\u00a0 the\u00a0 call\u00a0\nthreading.Lock(\u00a0).\u00a0\n382\nLet\u00a0Us\u00a0Python\nx\nIf\u00a0fun1 thread\u00a0gets\u00a0the\u00a0first\u00a0time-slot,\u00a0it\u00a0calls\u00a0acquire(\u00a0). This\u00a0call\u00a0puts\u00a0\nthe\u00a0lock\u00a0in\u00a0'Locked'\u00a0state\u00a0and\u00a0returns.\u00a0So\u00a0fun1 thread can\u00a0work\u00a0with\u00a0\ng.\u00a0If\u00a0midway\u00a0through\u00a0its\u00a0time-slot\u00a0expires\u00a0and\u00a0fun2 thread\u00a0gets\u00a0it,\u00a0it\u00a0\nwill\u00a0also\u00a0call\u00a0acquire(\u00a0),\u00a0but\u00a0it\u00a0will\u00a0be\u00a0blocked\u00a0(control\u00a0will\u00a0not\u00a0return\u00a0\nfrom\u00a0 it)\u00a0since\u00a0 lock\u00a0 is\u00a0 in\u00a0 'Locked'\u00a0 state.\u00a0 In\u00a0 the\u00a0 next\u00a0 time-slot\u00a0 fun1\u00a0\nthread\u00a0 finishes\u00a0 its\u00a0 work\u00a0 and\u00a0 releases\u00a0 the\u00a0 lock\u00a0 (puts\u00a0 the\u00a0 lock\u00a0 in\u00a0\n'Unlocked'\u00a0state)\u00a0by\u00a0 calling\u00a0release(\u00a0 ).\u00a0 As\u00a0a\u00a0result,\u00a0 fun2 thread\u00a0can\u00a0\nwork\u00a0with\u00a0g when\u00a0it\u00a0gets\u00a0time-slot.\n__________________________________________________________________", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_560", "chunk_strategy": "fixed_size"}}, {"text": " (puts\u00a0 the\u00a0 lock\u00a0 in\u00a0\n'Unlocked'\u00a0state)\u00a0by\u00a0 calling\u00a0release(\u00a0 ).\u00a0 As\u00a0a\u00a0result,\u00a0 fun2 thread\u00a0can\u00a0\nwork\u00a0with\u00a0g when\u00a0it\u00a0gets\u00a0time-slot.\n____________________________________________________________________\nProblem\u00a026.2\nWrite\u00a0 a\u00a0 program\u00a0 that\u00a0 calculates\u00a0 the\u00a0 squares\u00a0and\u00a0 cubes\u00a0 of\u00a0 first\u00a0 6\u00a0odd\u00a0\nnumbers\u00a0 through\u00a0 functions\u00a0 that\u00a0 are\u00a0 executed\u00a0 in\u00a0 two\u00a0 independent\u00a0\nthreads.\u00a0 Incorporate\u00a0 a\u00a0 delay\u00a0 of\u00a0 0.5\u00a0 seconds after\u00a0 calculation\u00a0 of\u00a0 each\u00a0\nsquare/cube\u00a0 value.\u00a0 Report\u00a0 the\u00a0 time\u00a0 required\u00a0 for\u00a0 execution\u00a0 of\u00a0 the\u00a0\nprogram.\u00a0Make\u00a0sure\u00a0that\u00a0the\u00a0output\u00a0of\u00a0squares(\u00a0) and\u00a0cubes(\u00a0) doesn't\u00a0\nget\u00a0mixed\u00a0up.\nProgram\nimport\u00a0time\nimport\u00a0threading\ndef\u00a0squares(nos,\u00a0lck) :\nlck.acquire( )\nprint('Calculating\u00a0squares...')\nfor\u00a0n\u00a0in\u00a0nos\u00a0:\ntime.sleep(0.5)\nprint('n\u00a0=\u00a0',\u00a0n,\u00a0'\u00a0square\u00a0=',\u00a0n\u00a0*\u00a0n)\nlck.release( )\ndef\u00a0cubes(nos,\u00a0lck) :\nlck.acquire( )\nprint('Calculating\u00a0cubes...')\nfor\u00a0n\u00a0in\u00a0nos\u00a0:\ntime.sleep(0.5)\nprint('n\u00a0=\u00a0',\u00a0n,\u00a0'\u00a0cube\u00a0=',\u00a0n\u00a0*\u00a0n\u00a0*\u00a0n)\nlck.release( )\narr\u00a0=\u00a0[1,\u00a03,\u00a05,\u00a07,\u00a09,\u00a011]\nstartTime\u00a0=\u00a0time.time( ", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_561", "chunk_strategy": "fixed_size"}}, {"text": "ef\u00a0cubes(nos,\u00a0lck) :\nlck.acquire( )\nprint('Calculating\u00a0cubes...')\nfor\u00a0n\u00a0in\u00a0nos\u00a0:\ntime.sleep(0.5)\nprint('n\u00a0=\u00a0',\u00a0n,\u00a0'\u00a0cube\u00a0=',\u00a0n\u00a0*\u00a0n\u00a0*\u00a0n)\nlck.release( )\narr\u00a0=\u00a0[1,\u00a03,\u00a05,\u00a07,\u00a09,\u00a011]\nstartTime\u00a0=\u00a0time.time( )\nChapter 26:\u00a0Synchronization\n383\nlck\u00a0=\u00a0threading.Lock( )\u00a0\nth1\u00a0=\u00a0threading.Thread(target = squares,\u00a0args = (arr,\u00a0lck))\nth2\u00a0=\u00a0threading.Thread(target = cubes,\u00a0args = (arr,\u00a0lck))\nth1.start( )\nth2.start( )\nth1.join( )\nth2.join( )\nendTime\u00a0=\u00a0time.time( )\nprint('Time\u00a0required\u00a0=\u00a0',\u00a0endTime\u00a0- startTime,\u00a0'sec')\nOutput\nCalculating\u00a0squares...\nn\u00a0=\u00a0 1\u00a0 square\u00a0=\u00a01\nn\u00a0=\u00a0 3\u00a0 square\u00a0=\u00a09\nn\u00a0=\u00a0 5\u00a0 square\u00a0=\u00a025\nn\u00a0=\u00a0 7\u00a0 square\u00a0=\u00a049\nn\u00a0=\u00a0 9\u00a0 square\u00a0=\u00a081\nn\u00a0=\u00a0 11\u00a0 square\u00a0=\u00a0121\nCalculating\u00a0cubes...\nn\u00a0=\u00a0 1\u00a0 cube\u00a0=\u00a01\nn\u00a0=\u00a0 3\u00a0 cube\u00a0=\u00a027\nn\u00a0=\u00a0 5\u00a0 cube\u00a0=\u00a0125\nn\u00a0=\u00a0 7\u00a0 cube\u00a0=\u00a0343\nn\u00a0=\u00a0 9\u00a0 cube\u00a0=\u00a0729\nn\u00a0=\u00a0 11\u00a0 cube\u00a0=\u00a01331\nTime\u00a0required\u00a0=\u00a0 6.001343250274658\u00a0sec\nTips\nx\nTo\u00a0 ensure\u00a0 that\u00a0 output\u00a0 of squares(\u00a0 ) doesn't\u00a0 get\u00a0 mixed\u00a0 up\u00a0 with\u00a0\noutput\u00a0 of\u00a0 cubes(\u00a0 ) we\u00a0 should\u00a0 ensure\u00a0 that\u00a0 when\u00a0 one\u00a0 is\u00a0 working\u00a0\nanother\u00a0should\u00a0be\u00a0put\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_562", "chunk_strategy": "fixed_size"}}, {"text": "d\u00a0=\u00a0 6.001343250274658\u00a0sec\nTips\nx\nTo\u00a0 ensure\u00a0 that\u00a0 output\u00a0 of squares(\u00a0 ) doesn't\u00a0 get\u00a0 mixed\u00a0 up\u00a0 with\u00a0\noutput\u00a0 of\u00a0 cubes(\u00a0 ) we\u00a0 should\u00a0 ensure\u00a0 that\u00a0 when\u00a0 one\u00a0 is\u00a0 working\u00a0\nanother\u00a0should\u00a0be\u00a0put\u00a0on\u00a0hold.\nx\nIn\u00a0 main\u00a0 thread\u00a0 we\u00a0 have\u00a0 created\u00a0 a\u00a0 Lock object\u00a0 through\u00a0 the\u00a0 call\u00a0\nthreading.Lock(\u00a0 ).\u00a0 Along\u00a0 with\u00a0 the\u00a0 list,\u00a0 this\u00a0 Lock object\u00a0 is\u00a0 shared\u00a0\nbetween\u00a0squares(\u00a0) and\u00a0cubes(\u00a0).\nx\nIf\u00a0squares\u00a0thread\u00a0gets\u00a0the\u00a0first\u00a0time-slot,\u00a0it\u00a0calls\u00a0acquire(\u00a0).\u00a0This\u00a0call\u00a0\nputs\u00a0 the\u00a0 lock\u00a0in\u00a0'Locked'\u00a0state\u00a0and\u00a0 returns.\u00a0So\u00a0 squares thread can\u00a0\n384\nLet\u00a0Us\u00a0Python\nstart\u00a0 generating\u00a0 and\u00a0printing\u00a0 squares.\u00a0 If\u00a0 midway\u00a0 through\u00a0 its\u00a0 time-\nslot\u00a0expires\u00a0and\u00a0cubes thread\u00a0gets\u00a0it,\u00a0it\u00a0will\u00a0also\u00a0call\u00a0acquire(\u00a0),\u00a0but\u00a0it\u00a0\nwill\u00a0 be\u00a0 blocked\u00a0 (control\u00a0 will\u00a0 not\u00a0 return\u00a0 from\u00a0 it)\u00a0 since\u00a0 lock\u00a0 is\u00a0 in\u00a0\n'Locked'\u00a0state.\u00a0In\u00a0the\u00a0next\u00a0time-slot\u00a0squares thread\u00a0finishes\u00a0its\u00a0work\u00a0\nand\u00a0 releases\u00a0the\u00a0 lock\u00a0 (puts\u00a0 the\u00a0 lock\u00a0in\u00a0'Unlocked'\u00a0 state)\u00a0 by\u00a0 calling\u00a0\nrelease(\u00a0).\nx\nSimilar\u00a0 reasoning\u00a0 would\u00a0 hold\u00a0 good\u00a0 if\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_563", "chunk_strategy": "fixed_size"}}, {"text": "d'\u00a0state.\u00a0In\u00a0the\u00a0next\u00a0time-slot\u00a0squares thread\u00a0finishes\u00a0its\u00a0work\u00a0\nand\u00a0 releases\u00a0the\u00a0 lock\u00a0 (puts\u00a0 the\u00a0 lock\u00a0in\u00a0'Unlocked'\u00a0 state)\u00a0 by\u00a0 calling\u00a0\nrelease(\u00a0).\nx\nSimilar\u00a0 reasoning\u00a0 would\u00a0 hold\u00a0 good\u00a0 if\u00a0 cubes thread\u00a0 gets\u00a0 the\u00a0 first\u00a0\ntime-slot.\nx\nSuppose\u00a0 there\u00a0were\u00a0 three\u00a0 threads\u00a0squares,\u00a0 cubes and\u00a0quadruples\nand\u00a0 squares thread\u00a0 acquires\u00a0 the\u00a0 lock.\u00a0 When\u00a0 it\u00a0 releases\u00a0 the\u00a0 lock\u00a0\nwhich\u00a0 of\u00a0 the\u00a0two\u00a0 waiting\u00a0 threads\u00a0will\u00a0 proceed\u00a0 is\u00a0not\u00a0defined\u00a0 and\u00a0\nmay\u00a0vary\u00a0across\u00a0Python\u00a0implementations.\n____________________________________________________________________\nProblem\u00a026.3\nWrite\u00a0 a\u00a0 program\u00a0 that\u00a0 prints\u00a0 the\u00a0 following\u00a0 3\u00a0 messages\u00a0 through\u00a0 3\u00a0\ndifferent\u00a0threads:\n[What\u00a0is\u00a0this\u00a0life...]\n[We\u00a0have\u00a0no\u00a0time...]\n[To\u00a0stand and\u00a0stare!]\nEach\u00a0thread\u00a0should\u00a0be\u00a0passed\u00a0the\u00a0relevant\u00a0message\u00a0and\u00a0should\u00a0print\u00a0'[',\u00a0\nmessage\u00a0and\u00a0']'\u00a0through\u00a0three\u00a0different\u00a0print(\u00a0) calls.\nProgram\nimport\u00a0time\nimport\u00a0threading\ndef\u00a0printMsg(msg,\u00a0lck):\nlck.acquire(\u00a0)\nprint('[',\u00a0end\u00a0=\u00a0'')\nprint(msg,\u00a0end\u00a0=\u00a0'')\ntime.sleep(0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_564", "chunk_strategy": "fixed_size"}}, {"text": "d\u00a0print\u00a0'[',\u00a0\nmessage\u00a0and\u00a0']'\u00a0through\u00a0three\u00a0different\u00a0print(\u00a0) calls.\nProgram\nimport\u00a0time\nimport\u00a0threading\ndef\u00a0printMsg(msg,\u00a0lck):\nlck.acquire(\u00a0)\nprint('[',\u00a0end\u00a0=\u00a0'')\nprint(msg,\u00a0end\u00a0=\u00a0'')\ntime.sleep(0.5)\nprint(']')\nlck.release(\u00a0)\nlck\u00a0=\u00a0threading.Lock(\u00a0)\u00a0\nth1\u00a0=\u00a0threading.Thread(target\u00a0=\u00a0printMsg,\u00a0\nargs\u00a0=\u00a0('What\u00a0is\u00a0this\u00a0life...',\u00a0lck))\nChapter 26:\u00a0Synchronization\n385\nth1.start(\u00a0)\nth2\u00a0=\u00a0threading.Thread(target\u00a0=\u00a0printMsg,\u00a0\nargs\u00a0=\u00a0('We\u00a0have\u00a0no\u00a0time...',\u00a0lck))\nth2.start(\u00a0)\nth3\u00a0=\u00a0threading.Thread(target\u00a0=\u00a0printMsg,\u00a0\nargs\u00a0=\u00a0('To\u00a0stand\u00a0and\u00a0stare!',\u00a0lck))\nth3.start(\u00a0)\nth1.join(\u00a0)\nth2.join(\u00a0)\nth3.join(\u00a0)\nTips\nx\nThree\u00a0threads\u00a0are\u00a0created.\u00a0In\u00a0each\u00a0thread\u00a0the\u00a0printMsg(\u00a0) function\u00a0is\u00a0\nexecuted,\u00a0but\u00a0a\u00a0different\u00a0message\u00a0is\u00a0passed\u00a0to\u00a0it\u00a0in\u00a0each\u00a0thread.\nx\nTo\u00a0ensure\u00a0that\u00a0'[',\u00a0message\u00a0and\u00a0']'\u00a0are\u00a0printed\u00a0in\u00a0the\u00a0same\u00a0order\u00a0in\u00a0\neach\u00a0thread,\u00a0the\u00a0activity\u00a0of\u00a0the\u00a0threads\u00a0is\u00a0synchronized.\u00a0\nx\nWhen\u00a0one\u00a0thread\u00a0acquires\u00a0a\u00a0lock,\u00a0others are\u00a0blocked\u00a0until\u00a0the\u00a0thread\u00a0\nthat\u00a0acquired\u00a0the\u00a0lock\u00a0releases\u00a0it.\n_______________", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_565", "chunk_strategy": "fixed_size"}}, {"text": "he\u00a0same\u00a0order\u00a0in\u00a0\neach\u00a0thread,\u00a0the\u00a0activity\u00a0of\u00a0the\u00a0threads\u00a0is\u00a0synchronized.\u00a0\nx\nWhen\u00a0one\u00a0thread\u00a0acquires\u00a0a\u00a0lock,\u00a0others are\u00a0blocked\u00a0until\u00a0the\u00a0thread\u00a0\nthat\u00a0acquired\u00a0the\u00a0lock\u00a0releases\u00a0it.\n____________________________________________________________________\nProblem\u00a026.4\nWrite\u00a0 a\u00a0 program\u00a0 that\u00a0 runs\u00a0 a\u00a0 recursive\u00a0 print_num(\u00a0 ) function\u00a0 in\u00a0 2\u00a0\nthreads.\u00a0This\u00a0function\u00a0should\u00a0 receive\u00a0an\u00a0integer\u00a0 and\u00a0print\u00a0 all\u00a0numbers\nfrom\u00a0that\u00a0number\u00a0up\u00a0to\u00a01.\nProgram\nimport\u00a0threading\u00a0\ndef\u00a0print_num(n)\u00a0:\ntry\u00a0:\nrlck.acquire(\u00a0)\nif\u00a0n\u00a0==\u00a00\u00a0:\u00a0\nreturn\u00a0\nelse\u00a0:\nt\u00a0=\u00a0threading.current_thread(\u00a0)\nprint(t.name,\u00a0':',\u00a0n)\nn\u00a0-=\u00a01\n386\nLet\u00a0Us\u00a0Python\nprint_num(n)\nfinally\u00a0:\nrlck.release(\u00a0)\nrlck\u00a0=\u00a0threading.RLock(\u00a0)\nth1\u00a0=\u00a0threading.Thread(target\u00a0=\u00a0print_num,\u00a0args\u00a0=\u00a0(8,))\nth1.start(\u00a0)\nth2\u00a0=\u00a0threading.Thread(target\u00a0=\u00a0print_num,\u00a0args\u00a0=\u00a0(5,))\nth2.start(\u00a0)\nth1.join(\u00a0)\nth2.join(\u00a0)\nOutput\nThread-1\u00a0:\u00a08\nThread-1\u00a0:\u00a07\nThread-1\u00a0:\u00a06\nThread-1\u00a0:\u00a05\nThread-1\u00a0:\u00a04\nThread-1\u00a0:\u00a03\nThread-1\u00a0:\u00a02\nThread-1\u00a0:\u00a01\nThread-2\u00a0:\u00a05\nThread-2\u00a0:\u00a04\nThread-2\u00a0:\u00a03\nThread", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_566", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0(5,))\nth2.start(\u00a0)\nth1.join(\u00a0)\nth2.join(\u00a0)\nOutput\nThread-1\u00a0:\u00a08\nThread-1\u00a0:\u00a07\nThread-1\u00a0:\u00a06\nThread-1\u00a0:\u00a05\nThread-1\u00a0:\u00a04\nThread-1\u00a0:\u00a03\nThread-1\u00a0:\u00a02\nThread-1\u00a0:\u00a01\nThread-2\u00a0:\u00a05\nThread-2\u00a0:\u00a04\nThread-2\u00a0:\u00a03\nThread-2\u00a0:\u00a02\nThread-2\u00a0:\u00a01\nTips\nx\nSince\u00a0we\u00a0are\u00a0sharing\u00a0resources\u00a0in\u00a0a\u00a0recursive\u00a0function\u00a0we\u00a0have\u00a0used\u00a0\nRLock instead\u00a0of\u00a0Lock.\nx\nA\u00a0 lock\u00a0acquired\u00a0by\u00a0 one\u00a0 thread\u00a0can\u00a0 be\u00a0released\u00a0 by\u00a0 another.\u00a0 So\u00a0we\u00a0\nhave\u00a0released\u00a0the\u00a0lock\u00a0in\u00a0finally\u00a0block\u00a0for\u00a0each\u00a0thread.\u00a0finally block\u00a0\ngoes\u00a0to\u00a0work\u00a0only\u00a0when\u00a0control\u00a0returns\u00a0from\u00a0print_num(\u00a0) last\u00a0time\u00a0\nafter\u00a0completing\u00a0all\u00a0recursive\u00a0calls.\u00a0\nx\nWe\u00a0have\u00a0printed\u00a0name\u00a0of\u00a0each\u00a0thread\u00a0along\u00a0with\u00a0the\u00a0current\u00a0value\u00a0\nof\u00a0n so\u00a0that\u00a0we\u00a0get\u00a0an\u00a0idea\u00a0of\u00a0which\u00a0thread\u00a0are\u00a0we\u00a0working\u00a0in.\nChapter 26:\u00a0Synchronization\n387\nx\nIf\u00a0 we replace\u00a0RLock with\u00a0Lock we will\u00a0get\u00a0output\u00a0from\u00a0one\u00a0thread\u00a0\nonly.\u00a0This\u00a0is\u00a0because\u00a0one\u00a0thread\u00a0will\u00a0acquire\u00a0the\u00a0lock\u00a0and\u00a0do\u00a0some\u00a0\nprinting.\u00a0 When\u00a0 its'\u00a0time-slot\u00a0 expires\u00a0 and\u00a0another\u00a0 thread\u00a0 gets\u00a0it,\u00a0 it\u00a0\nwill\u00a0also\u00a0call\u00a0acquire(\u00a0) and\u00a0would\u00a0get\u00a0blocked.\nx\n", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_567", "chunk_strategy": "fixed_size"}}, {"text": "ad\u00a0\nonly.\u00a0This\u00a0is\u00a0because\u00a0one\u00a0thread\u00a0will\u00a0acquire\u00a0the\u00a0lock\u00a0and\u00a0do\u00a0some\u00a0\nprinting.\u00a0 When\u00a0 its'\u00a0time-slot\u00a0 expires\u00a0 and\u00a0another\u00a0 thread\u00a0 gets\u00a0it,\u00a0 it\u00a0\nwill\u00a0also\u00a0call\u00a0acquire(\u00a0) and\u00a0would\u00a0get\u00a0blocked.\nx\nIf\u00a0you\u00a0do\u00a0not\u00a0use\u00a0any\u00a0lock\u00a0the\u00a0output\u00a0from\u00a0the\u00a0two\u00a0threads\u00a0will\u00a0get\u00a0\nmixed\u00a0up.\n____________________________________________________________________\nProblem\u00a026.5\nWrite\u00a0a\u00a0program\u00a0that\u00a0runs\u00a0a\u00a0recursive\u00a0factorial(\u00a0) function\u00a0in\u00a02\u00a0threads.\u00a0\nThis\u00a0function\u00a0 should\u00a0 receive\u00a0 an\u00a0 integer\u00a0 and\u00a0print\u00a0 all\u00a0 the\u00a0 intermediate\u00a0\nproducts\u00a0and\u00a0final\u00a0product.\nProgram\nimport\u00a0threading\u00a0\ndef\u00a0factorial(n)\u00a0:\ntry\u00a0:\nrlck.acquire(\u00a0)\nif\u00a0n\u00a0==\u00a00\u00a0:\u00a0\nreturn\u00a01\u00a0\nelse\u00a0:\np\u00a0=\u00a0n\u00a0*\u00a0factorial(n\u00a0- 1)\nprint(f'{n}!\u00a0=\u00a0{p}')\nreturn\u00a0p\nfinally\u00a0:\nrlck.release(\u00a0)\nrlck\u00a0=\u00a0threading.RLock(\u00a0)\nth1\u00a0=\u00a0threading.Thread(target\u00a0=\u00a0factorial,\u00a0args\u00a0=\u00a0(5,))\nth1.start(\u00a0)\nth2\u00a0=\u00a0threading.Thread(target\u00a0=\u00a0factorial,\u00a0args\u00a0=\u00a0(8,))\nth2.start(\u00a0)\nth1.join(\u00a0)\nth2.join(\u00a0)\nOutput\n1\u00a0!=\u00a01\n388\nLet\u00a0Us\u00a0Python\n2\u00a0!=\u00a02\n3\u00a0!=\u00a06\n4\u00a0!=\u00a024\n5\u00a0!=\u00a0120\n1\u00a0!=\u00a01\n2\u00a0!=\u00a02\n3\u00a0!=\u00a06\n4\u00a0!=\u00a02", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_568", "chunk_strategy": "fixed_size"}}, {"text": ",))\nth1.start(\u00a0)\nth2\u00a0=\u00a0threading.Thread(target\u00a0=\u00a0factorial,\u00a0args\u00a0=\u00a0(8,))\nth2.start(\u00a0)\nth1.join(\u00a0)\nth2.join(\u00a0)\nOutput\n1\u00a0!=\u00a01\n388\nLet\u00a0Us\u00a0Python\n2\u00a0!=\u00a02\n3\u00a0!=\u00a06\n4\u00a0!=\u00a024\n5\u00a0!=\u00a0120\n1\u00a0!=\u00a01\n2\u00a0!=\u00a02\n3\u00a0!=\u00a06\n4\u00a0!=\u00a024\n5\u00a0!=\u00a0120\n6\u00a0!=\u00a0720\n7\u00a0!=\u00a05040\n8\u00a0!=\u00a040320\nTips\nx\nSince\u00a0we\u00a0are\u00a0sharing\u00a0resources\u00a0in\u00a0a\u00a0recursive\u00a0function\u00a0we\u00a0have\u00a0used\u00a0\nRLock instead\u00a0of\u00a0Lock.\nx\nA\u00a0 lock\u00a0acquired\u00a0by\u00a0 one\u00a0 thread\u00a0can\u00a0 be\u00a0released\u00a0 by\u00a0 another.\u00a0So\u00a0we\u00a0\nhave\u00a0released\u00a0the\u00a0lock\u00a0in\u00a0finally\u00a0block\u00a0for\u00a0each\u00a0thread.\u00a0finally block\u00a0\ngoes\u00a0 to\u00a0 work\u00a0only\u00a0 when\u00a0control\u00a0returns\u00a0 from\u00a0 factorial(\u00a0) last\u00a0time\u00a0\nafter\u00a0completing\u00a0all\u00a0recursive\u00a0calls.\u00a0\nx\nIf\u00a0 we replace\u00a0RLock with\u00a0Lock we will\u00a0get\u00a0output\u00a0from\u00a0one\u00a0thread\u00a0\nonly.\u00a0This\u00a0is\u00a0because\u00a0one\u00a0thread\u00a0will\u00a0acquire\u00a0the\u00a0lock\u00a0and\u00a0do\u00a0some\u00a0\ncalculation\u00a0 and\u00a0 printing.\u00a0 When\u00a0 its'\u00a0 time-slot\u00a0 expires\u00a0 and\u00a0 other\u00a0\nthread\u00a0gets\u00a0it,\u00a0it\u00a0will\u00a0also\u00a0call\u00a0acquire(\u00a0) and\u00a0would\u00a0get\u00a0blocked.\nx\nIf\u00a0we do\u00a0not\u00a0use\u00a0any\u00a0lock\u00a0the\u00a0output\u00a0from\u00a0the\u00a0two\u00a0threads will\u00a0get\u00a0\nmixed\u00a0up.\n_____________________________________________", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_569", "chunk_strategy": "fixed_size"}}, {"text": "other\u00a0\nthread\u00a0gets\u00a0it,\u00a0it\u00a0will\u00a0also\u00a0call\u00a0acquire(\u00a0) and\u00a0would\u00a0get\u00a0blocked.\nx\nIf\u00a0we do\u00a0not\u00a0use\u00a0any\u00a0lock\u00a0the\u00a0output\u00a0from\u00a0the\u00a0two\u00a0threads will\u00a0get\u00a0\nmixed\u00a0up.\n____________________________________________________________________\nProblem\u00a026.6\nWrite\u00a0a\u00a0program\u00a0that\u00a0defines\u00a0a\u00a0function\u00a0fun(\u00a0) that\u00a0prints\u00a0a\u00a0message\u00a0that\u00a0\nit\u00a0receives\u00a0infinite\u00a0times.\u00a0Limit\u00a0the\u00a0 number\u00a0of\u00a0threads\u00a0that\u00a0 can\u00a0 invoke\u00a0\nfun(\u00a0)\u00a0to\u00a03.\u00a0If\u00a04th thread\u00a0tries\u00a0to\u00a0invoke\u00a0fun(\u00a0),\u00a0it\u00a0should\u00a0not\u00a0get\u00a0invoked.\nProgram\nimport\u00a0threading\u00a0\ndef\u00a0fun(msg)\u00a0:\nChapter 26:\u00a0Synchronization\n389\ns.acquire(\u00a0)\nt\u00a0=\u00a0threading.current_thread(\u00a0)\nwhile\u00a0True\u00a0:\nprint(t.name,\u00a0':',\u00a0msg)\ns.release(\u00a0)\ns\u00a0=\u00a0threading.BoundedSemaphore(3)\nth1\u00a0=\u00a0threading.Thread(target\u00a0=\u00a0fun,\u00a0args\u00a0=\u00a0('Hello',))\nth2\u00a0=\u00a0threading.Thread(target\u00a0=\u00a0fun,\u00a0args\u00a0=\u00a0('Hi',))\nth3\u00a0=\u00a0threading.Thread(target\u00a0=\u00a0fun,\u00a0args\u00a0=\u00a0('Welcome',))\nth4\u00a0=\u00a0threading.Thread(target\u00a0=\u00a0fun,\u00a0args\u00a0=\u00a0('ByeBye',))\nth1.start(\u00a0)\nth2.start(\u00a0)\nth3.start(\u00a0)\nth4.start(\u00a0)\nth1.join(\u00a0)\nth2.join(\u00a0)\nth3.join(\u00a0)\nth4.join(\u00a0)\nOutput\nT", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_570", "chunk_strategy": "fixed_size"}}, {"text": "target\u00a0=\u00a0fun,\u00a0args\u00a0=\u00a0('Welcome',))\nth4\u00a0=\u00a0threading.Thread(target\u00a0=\u00a0fun,\u00a0args\u00a0=\u00a0('ByeBye',))\nth1.start(\u00a0)\nth2.start(\u00a0)\nth3.start(\u00a0)\nth4.start(\u00a0)\nth1.join(\u00a0)\nth2.join(\u00a0)\nth3.join(\u00a0)\nth4.join(\u00a0)\nOutput\nThread-2\u00a0:\u00a0Hi\nThread-1\u00a0:\u00a0Hello\nThread-2\u00a0:\u00a0Hi\nThread-1\u00a0:\u00a0Hello\nThread-2\u00a0:\u00a0Hi\nThread-3\u00a0:\u00a0Welcome\nThread-1\u00a0:\u00a0Hello\nThread-2\u00a0:\u00a0Hi\nThread-3\u00a0:\u00a0Welcome\nThread-3\u00a0:\u00a0Welcome\nThread-3\u00a0:\u00a0Welcome\n...\nTips\nx\nFrom\u00a0 the\u00a0 output\u00a0it\u00a0is\u00a0 evident\u00a0that\u00a0 the\u00a0 4th thread\u00a0 could\u00a0not\u00a0invoke\u00a0\nfun(\u00a0).\u00a0\n____________________________________________________________________\n390\nLet\u00a0Us\u00a0Python\nProblem\u00a026.7\nWrite\u00a0a\u00a0program\u00a0that\u00a0runs\u00a0functions\u00a0fun1(\u00a0) and\u00a0fun2(\u00a0) in\u00a0two\u00a0different\u00a0\nthreads.\u00a0Using\u00a0an\u00a0event\u00a0object,\u00a0function\u00a0fun1(\u00a0) should\u00a0wait\u00a0for\u00a0fun2(\u00a0)\nto\u00a0signal\u00a0 it\u00a0at\u00a0random\u00a0intervals\u00a0 that\u00a0 its\u00a0wait\u00a0 is\u00a0over.\u00a0 On\u00a0 receiving\u00a0 the\u00a0\nsignal,\u00a0fun1(\u00a0) should\u00a0report\u00a0the\u00a0time\u00a0and\u00a0clear\u00a0the\u00a0event\u00a0flag.\nProgram\nimport threading\nimport random\nimport time\ndef fun1(ev, n) :\nfor i in range(n) :\nprint(i + 1, 'Waiting for the flag to be s", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_571", "chunk_strategy": "fixed_size"}}, {"text": "he\u00a0\nsignal,\u00a0fun1(\u00a0) should\u00a0report\u00a0the\u00a0time\u00a0and\u00a0clear\u00a0the\u00a0event\u00a0flag.\nProgram\nimport threading\nimport random\nimport time\ndef fun1(ev, n) :\nfor i in range(n) :\nprint(i + 1, 'Waiting for the flag to be set...')\nev.wait( )\nprint('Wait complete at:', time.ctime( ))\nev.clear( )\nprint( )\ndef fun2(ev, n):\nfor i in range(n):\ntime.sleep(random.randrange(2, 5))\nev.set( )\nev = threading.Event( )\nth = [ ]\nnum = random.randrange(4, 8)\nth.append(threading.Thread(target = fun1, args = (ev, num)))\nth[-1].start( )\nth.append(threading.Thread(target = fun2, args = (ev, num)))\nth[-1].start( )\nfor t in th :\nt.join( )\nprint('All\u00a0done!!')\nOutput\n1\u00a0Waiting\u00a0for\u00a0the\u00a0flag\u00a0to\u00a0be\u00a0set...\nWait\u00a0complete\u00a0at:\u00a0Sat\u00a0Nov\u00a0 2\u00a011:03:43\u00a02019\nChapter 26:\u00a0Synchronization\n391\n2\u00a0Waiting\u00a0for\u00a0the\u00a0flag\u00a0to\u00a0be\u00a0set...\nWait\u00a0complete\u00a0at:\u00a0Sat\u00a0Nov\u00a0 2\u00a011:03:45\u00a02019\n3\u00a0Waiting\u00a0for\u00a0the\u00a0flag\u00a0to\u00a0be\u00a0set...\nWait\u00a0complete\u00a0at:\u00a0Sat\u00a0Nov\u00a0 2\u00a011:03:48\u00a02019\n4 Waiting\u00a0for\u00a0the\u00a0flag\u00a0to\u00a0be\u00a0set...\nWait\u00a0complete\u00a0at:\u00a0Sat\u00a0Nov\u00a0 2\u00a011:03:52\u00a02019\n5\u00a0Waiting\u00a0for\u00a0the\u00a0flag", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_572", "chunk_strategy": "fixed_size"}}, {"text": "ov\u00a0 2\u00a011:03:45\u00a02019\n3\u00a0Waiting\u00a0for\u00a0the\u00a0flag\u00a0to\u00a0be\u00a0set...\nWait\u00a0complete\u00a0at:\u00a0Sat\u00a0Nov\u00a0 2\u00a011:03:48\u00a02019\n4 Waiting\u00a0for\u00a0the\u00a0flag\u00a0to\u00a0be\u00a0set...\nWait\u00a0complete\u00a0at:\u00a0Sat\u00a0Nov\u00a0 2\u00a011:03:52\u00a02019\n5\u00a0Waiting\u00a0for\u00a0the\u00a0flag\u00a0to\u00a0be\u00a0set...\nWait\u00a0complete\u00a0at:\u00a0Sat\u00a0Nov\u00a0 2\u00a011:03:54\u00a02019\nAll\u00a0done!!\nTips\nx\nNote\u00a0how\u00a0the\u00a0thread\u00a0array\u00a0is\u00a0maintained\u00a0using\u00a0the\u00a0index value '-1' to\u00a0\nrefer\u00a0to\u00a0the\u00a0last\u00a0thread\u00a0added\u00a0to\u00a0the\u00a0array.\n____________________________________________________________________\nProblem\u00a026.8\nWrite\u00a0a\u00a0program\u00a0that\u00a0implements\u00a0a\u00a0Producer\u00a0- Consumer\u00a0algorithm.\u00a0The\u00a0\nproducer\u00a0 thread\u00a0should\u00a0 generate\u00a0random\u00a0 numbers\u00a0 in\u00a0the\u00a0range\u00a0 10\u00a0 to\u00a0\n20. The\u00a0consumer\u00a0thread\u00a0should\u00a0print\u00a0the\u00a0square\u00a0of\u00a0the\u00a0random\u00a0number\u00a0\nproduced\u00a0by\u00a0the\u00a0producer\u00a0thread.\u00a0\nProgram\nimport threading\nimport random\nimport queue\nimport time\ndef producer( ) :\nfor i in range(5) :\ntime.sleep(random.randrange(2, 5))\ncond.acquire( )\nnum = random.randrange(10, 20)\nprint('Generated number =', num)\nq.append(num)\ncond.notify( )\n392\nLet\u00a0Us\u00a0Python\ncond.release( )\n", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_573", "chunk_strategy": "fixed_size"}}, {"text": ":\nfor i in range(5) :\ntime.sleep(random.randrange(2, 5))\ncond.acquire( )\nnum = random.randrange(10, 20)\nprint('Generated number =', num)\nq.append(num)\ncond.notify( )\n392\nLet\u00a0Us\u00a0Python\ncond.release( )\ndef consumer( ) :\nfor i in range(5) :\ncond.acquire( )\nwhile True:\nif len(q) :\nnum = q.pop( )\nbreak\ncond.wait( )\nprint('Its square =', num * num)\ncond.release( )\ncond = threading.Condition( )\nq = [ ]\nth1 = threading.Thread(target = producer)\nth2 = threading.Thread(target = consumer)\nth1.start( )\nth2.start( )\nth1.join( )\nth2.join( )\nprint('All done!!')\nOutput\nGenerated\u00a0number\u00a0=\u00a014\nIts\u00a0square\u00a0=\u00a0196\nGenerated\u00a0number\u00a0=\u00a010\nIts\u00a0square\u00a0=\u00a0100\nGenerated\u00a0number\u00a0=\u00a013\nIts\u00a0square\u00a0=\u00a0169\nGenerated\u00a0number\u00a0=\u00a015\nIts square\u00a0=\u00a0225\nGenerated\u00a0number\u00a0=\u00a010\nIts\u00a0square\u00a0=\u00a0100\nAll\u00a0done!!\nChapter 26:\u00a0Synchronization\n393\nTips\nx\nExamine\u00a0 the\u00a0 program\u00a0 for\u00a0 the\u00a0 following\u00a0 possibilities\u00a0 and\u00a0 satisfy\u00a0\nyourself\u00a0that\u00a0it\u00a0works\u00a0as\u00a0per\u00a0expectation\u00a0in\u00a0all\u00a0situations:\n-\nProducer\u00a0gets\u00a0a\u00a0time-slot\u00a0before\u00a0Consumer\n-\nProducer\u00a0gets\u00a0t", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_574", "chunk_strategy": "fixed_size"}}, {"text": "ps\nx\nExamine\u00a0 the\u00a0 program\u00a0 for\u00a0 the\u00a0 following\u00a0 possibilities\u00a0 and\u00a0 satisfy\u00a0\nyourself\u00a0that\u00a0it\u00a0works\u00a0as\u00a0per\u00a0expectation\u00a0in\u00a0all\u00a0situations:\n-\nProducer\u00a0gets\u00a0a\u00a0time-slot\u00a0before\u00a0Consumer\n-\nProducer\u00a0gets\u00a0time-slot\u00a0when\u00a0Consumer\u00a0is\u00a0consuming\n-\nProducer\u00a0finishes\u00a0producing\u00a0before\u00a0its\u00a0time-slot\u00a0expires\n-\nConsumer\u00a0gets\u00a0a\u00a0time-slot\u00a0after\u00a0Producer\n-\nConsumer\u00a0finishes\u00a0before\u00a0its\u00a0time-slot\u00a0expires\n-\nConsumer\u00a0gets\u00a0a\u00a0time-slot\u00a0before\u00a0Producer\n-\nConsumer\u00a0gets\u00a0time-slot\u00a0when\u00a0Producer\u00a0is\u00a0busy\n____________________________________________________________________\n[A] State\u00a0whether\u00a0the\u00a0following\u00a0statements\u00a0are\u00a0True\u00a0or\u00a0False:\n(a) All\u00a0multi-threaded\u00a0applications\u00a0should\u00a0use\u00a0synchronization.\n(b) If\u00a03\u00a0threads\u00a0are\u00a0going\u00a0to\u00a0read\u00a0from\u00a0a\u00a0shared\u00a0list\u00a0it\u00a0is\u00a0necessary\u00a0 to\u00a0\nsynchronize\u00a0their\u00a0activities.\n(c)\nA\u00a0Lock\u00a0acquired\u00a0by\u00a0one\u00a0thread\u00a0can\u00a0be\u00a0released\u00a0by\u00a0either the\u00a0same\u00a0\nthread\u00a0or\u00a0any\u00a0other\u00a0thread\u00a0running\u00a0in\u00a0the\u00a0application.\n(d) If\u00a0 Lock\u00a0 is\u00a0used\u00a0 in\u00a0 reentrant\u00a0 code\u00a0 then\u00a0 the\u00a0 thread\u00a0 is\u00a0 likely\u00a0 to\u00a0 get\u00a0\nblocked\u00a0duri", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_575", "chunk_strategy": "fixed_size"}}, {"text": "y\u00a0one\u00a0thread\u00a0can\u00a0be\u00a0released\u00a0by\u00a0either the\u00a0same\u00a0\nthread\u00a0or\u00a0any\u00a0other\u00a0thread\u00a0running\u00a0in\u00a0the\u00a0application.\n(d) If\u00a0 Lock\u00a0 is\u00a0used\u00a0 in\u00a0 reentrant\u00a0 code\u00a0 then\u00a0 the\u00a0 thread\u00a0 is\u00a0 likely\u00a0 to\u00a0 get\u00a0\nblocked\u00a0during\u00a0the\u00a0second\u00a0call.\n(e) Lock\u00a0and\u00a0RLock\u00a0work\u00a0like\u00a0a\u00a0Mutex.\n(f)\nA\u00a0 thread\u00a0 will\u00a0 wait\u00a0 on\u00a0 an\u00a0 Event\u00a0 object\u00a0 unless\u00a0 its\u00a0 internal\u00a0 flag\u00a0 is\u00a0\ncleared.\n(g)\nA\u00a0Condition\u00a0object\u00a0internally\u00a0uses\u00a0a\u00a0lock.\n(h) While\u00a0using\u00a0RLock\u00a0we\u00a0must\u00a0ensure\u00a0that\u00a0we\u00a0call\u00a0release(\u00a0) as\u00a0many\u00a0\ntimes\u00a0as\u00a0the\u00a0number\u00a0of\u00a0calls\u00a0to\u00a0acquire(\u00a0).\n(i)\nUsing\u00a0 Lock\u00a0 we\u00a0 can\u00a0control\u00a0 the\u00a0maximum\u00a0 number\u00a0 of\u00a0threads\u00a0 that\u00a0\ncan\u00a0access\u00a0a\u00a0resource.\n(j)\nThere\u00a0is\u00a0 no\u00a0difference\u00a0between\u00a0 the\u00a0synchronization\u00a0 objects\u00a0 Event\u00a0\nand\u00a0Condition.\n(k)\nIf\u00a0in\u00a0a\u00a0Python\u00a0program\u00a0one\u00a0thread\u00a0reads\u00a0a\u00a0document\u00a0and\u00a0another\u00a0\nthread\u00a0writes\u00a0to\u00a0 the\u00a0same\u00a0document\u00a0then\u00a0the\u00a0two\u00a0threads\u00a0should\u00a0\nbe\u00a0synchronized.\n394\nLet\u00a0Us\u00a0Python\n(l)\nIf\u00a0in\u00a0a\u00a0Python\u00a0program\u00a0one\u00a0thread\u00a0copies\u00a0a\u00a0document\u00a0and\u00a0another\u00a0\nthread\u00a0 displays\u00a0 progress\u00a0 bar\u00a0 then\u00a0 the\u00a0 two\u00a0 threads\u00a0 should\u00a0 b", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_576", "chunk_strategy": "fixed_size"}}, {"text": "then\u00a0the\u00a0two\u00a0threads\u00a0should\u00a0\nbe\u00a0synchronized.\n394\nLet\u00a0Us\u00a0Python\n(l)\nIf\u00a0in\u00a0a\u00a0Python\u00a0program\u00a0one\u00a0thread\u00a0copies\u00a0a\u00a0document\u00a0and\u00a0another\u00a0\nthread\u00a0 displays\u00a0 progress\u00a0 bar\u00a0 then\u00a0 the\u00a0 two\u00a0 threads\u00a0 should\u00a0 be\u00a0\nsynchronized.\n(m) If\u00a0in\u00a0a\u00a0 Python\u00a0program\u00a0one\u00a0 thread\u00a0lets\u00a0you\u00a0type\u00a0a\u00a0document\u00a0and\u00a0\nanother\u00a0 thread\u00a0 performs\u00a0 spellcheck\u00a0 on\u00a0 the\u00a0 same\u00a0document\u00a0 then\u00a0\nthe\u00a0two\u00a0threads\u00a0should\u00a0be\u00a0synchronized.\n(n) If\u00a0in\u00a0a\u00a0Python\u00a0program\u00a0one\u00a0thread\u00a0can scan\u00a0a\u00a0document\u00a0for\u00a0viruses\u00a0\nand\u00a0 another\u00a0 thread\u00a0 can\u00a0 pause\u00a0 or\u00a0 stop\u00a0 the\u00a0 scan\u00a0 then\u00a0 the\u00a0 two\u00a0\nthreads\u00a0should\u00a0be\u00a0synchronized.\n[B] Answer\u00a0the\u00a0following questions:\n(a) Which\u00a0synchronization\u00a0mechanisms\u00a0are\u00a0used\u00a0for\u00a0sharing\u00a0resources\u00a0\namongst\u00a0multiple\u00a0threads?\n(b) Which\u00a0\nsynchronization\u00a0\nobjects\u00a0\nare\u00a0\nused\u00a0\nfor\u00a0\ninter-thread\u00a0\ncommunication\u00a0in\u00a0a\u00a0multi-threaded\u00a0application?\n(c)\nWhat\u00a0is\u00a0the\u00a0difference\u00a0between\u00a0a\u00a0Lock\u00a0and\u00a0RLock?\n(d) What\u00a0is\u00a0the\u00a0purpose\u00a0of\u00a0the\u00a0Semaphore\u00a0synchronization\u00a0primitive?\n(e) Write\u00a0a\u00a0program\u00a0that\u00a0has\u00a0three\u00a0threads\u00a0in\u00a0it.\u00a0The\u00a0first\u00a0thre", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_577", "chunk_strategy": "fixed_size"}}, {"text": "d\u00a0application?\n(c)\nWhat\u00a0is\u00a0the\u00a0difference\u00a0between\u00a0a\u00a0Lock\u00a0and\u00a0RLock?\n(d) What\u00a0is\u00a0the\u00a0purpose\u00a0of\u00a0the\u00a0Semaphore\u00a0synchronization\u00a0primitive?\n(e) Write\u00a0a\u00a0program\u00a0that\u00a0has\u00a0three\u00a0threads\u00a0in\u00a0it.\u00a0The\u00a0first\u00a0thread\u00a0should\u00a0\nproduce\u00a0random\u00a0numbers\u00a0in\u00a0the\u00a0range\u00a01\u00a0to\u00a020,\u00a0the\u00a0second\u00a0thread\u00a0\nshould\u00a0display\u00a0the\u00a0square\u00a0of\u00a0the\u00a0number\u00a0generated\u00a0by\u00a0first\u00a0thread\u00a0\non\u00a0the\u00a0screen,\u00a0and\u00a0the\u00a0 third\u00a0thread\u00a0should\u00a0 write\u00a0cube\u00a0of\u00a0 number\u00a0\ngenerated\u00a0by\u00a0first\u00a0thread\u00a0into\u00a0a\u00a0file.\n(f)\nSuppose\u00a0one\u00a0thread\u00a0is\u00a0producing\u00a0numbers\u00a0from\u00a01 to\u00a0n and\u00a0another\u00a0\nthread\u00a0is\u00a0printing\u00a0the\u00a0produced\u00a0numbers.\u00a0Comment\u00a0on\u00a0the\u00a0output\u00a0\nthat\u00a0we\u00a0are\u00a0likely\u00a0to\u00a0get.\n(g)\nWhat\u00a0 will\u00a0 happen\u00a0 if\u00a0 thread\u00a0 t1 waits\u00a0 for\u00a0 thread\u00a0 t2 to\u00a0 finish\u00a0 and\u00a0\nthread\u00a0t2 waits\u00a0for\u00a0t1 to\u00a0finish?\n[C] Match the\u00a0following pairs:\na.\u00a0 RLock\n1.\u00a0 limits\u00a0no.\u00a0of\u00a0threads\u00a0accessing\u00a0a\u00a0resource\nb.\u00a0 Event\n2.\u00a0 useful\u00a0in\u00a0sharing\u00a0resource\u00a0in\u00a0reentrant\u00a0code\nc.\u00a0 Semaphore\n3.\u00a0 useful\u00a0for\u00a0inter-thread\u00a0communication\nd.\u00a0 Condition\n4.\u00a0 signals\u00a0waiting\u00a0threads\u00a0on\u00a0change\u00a0in\u00a0state\ne.\u00a0 Lock\n5.\u00a0 u", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_578", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0resource\nb.\u00a0 Event\n2.\u00a0 useful\u00a0in\u00a0sharing\u00a0resource\u00a0in\u00a0reentrant\u00a0code\nc.\u00a0 Semaphore\n3.\u00a0 useful\u00a0for\u00a0inter-thread\u00a0communication\nd.\u00a0 Condition\n4.\u00a0 signals\u00a0waiting\u00a0threads\u00a0on\u00a0change\u00a0in\u00a0state\ne.\u00a0 Lock\n5.\u00a0 useful\u00a0in\u00a0sharing\u00a0resource\u00a0among\u00a0threads\nLet\u00a0Us\nPython\n395\nPrecedence\u00a0Table\nA\n\u201cPreferential\u00a0treatments...\u201d\n396\nLet\u00a0Us\u00a0Python\nDescription\nOperator\nAssociativity\nGrouping\nFunction call\nSlicing\nExponentiation\nBitwise NOT\nUnary plus / minus\nMultiplication\nDivision\nModular Divsion\nAddition\nSubtraction\nBitwise left shift\nBitwise right shift\nBitwise AND\nBitwise XOR\nBitwise OR\nMembership\nIdentity\nRelational\nEquality\nInequality\nLogical NOT\nLogical AND\nLogical OR\nAssignment\n( )\nfunction( )\n[start:end:step]\n**\n~\n+ -\n*\n/\n%\n+\n-\n<<\n>>\n&\n^\n|\nIn not in\nis\nis not\n< > <= >=\n==\n!= <>\nnot\nand\nor\n= += -= *= /= %= //= **= &= |= ^= >>= <<=\nLeft to Right\nLeft to Right\nLeft to Right\nRight to Left\nRight to Left\nLeft to Right\nLeft to Right\nLeft to Right\nLeft to Right\nLeft to Right\nLeft to Right\nLeft to Right\nLeft to ", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_579", "chunk_strategy": "fixed_size"}}, {"text": "/= **= &= |= ^= >>= <<=\nLeft to Right\nLeft to Right\nLeft to Right\nRight to Left\nRight to Left\nLeft to Right\nLeft to Right\nLeft to Right\nLeft to Right\nLeft to Right\nLeft to Right\nLeft to Right\nLeft to Right\nLeft to Right\nLeft to Right\nLeft to Right\nLeft to Right\nLeft to Right\nLeft to Right\nLeft to Right\nLeft to Right\nLeft to Right\nLeft to Right\nLeft to Right\nRight to Left\nLet\u00a0Us\nPython\n397\nDebugging\u00a0in\u00a0\nPython\nB\n\ue001Don\ue002t\u00a0bug\u00a0others,\u00a0debug\u00a0instead...\ue003\n398\nLet\u00a0Us\u00a0Python\nDebugging\nx\nTwo\u00a0 types\u00a0 of\u00a0 errors\u00a0occur\u00a0 while\u00a0 creating\u00a0 programs\u0376Syntax\u00a0 errors\u00a0\nand\u00a0Logical\u00a0errors.\nx\nSyntax\u00a0 errors\u00a0 are\u00a0 grammatical\u00a0 errors\u00a0 and\u00a0 are\u00a0 reported\u00a0 by\u00a0 Python\u00a0\ninterpreter.\u00a0 It\u00a0is\u00a0easy\u00a0 to\u00a0 rectify\u00a0 these\u00a0errors\u00a0as\u00a0 interpreter\u00a0 tells\u00a0 us\u00a0\nexactly\u00a0which\u00a0statement\u00a0in\u00a0the\u00a0program\u00a0is\u00a0incorrect\u00a0and\u00a0why\u00a0is\u00a0it\u00a0so.\nx\nLogical\u00a0errors\u00a0are\u00a0diffic\u01b5l\u019a\u00a0\u019ao\u00a0loca\u019ae\u00a0beca\u01b5se\u00a0\u01c1e\u00a0don\ue001\u019a\u00a0ge\u019a\u00a0an\u01c7\u00a0hin\u019a\u00a0as\u00a0\nto\u00a0 where\u00a0 things\u00a0 are\u00a0 wrong\u00a0 in\u00a0 our\u00a0 program\u00a0 and\u00a0 why\u00a0 we\u00a0 are\u00a0 not\u00a0\ngetting\u00a0the\u00a0desired\u00a0results.\nx\nBug\u00a0means\u00a0an\u00a0error.\u00a0D", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_580", "chunk_strategy": "fixed_size"}}, {"text": "x\nLogical\u00a0errors\u00a0are\u00a0diffic\u01b5l\u019a\u00a0\u019ao\u00a0loca\u019ae\u00a0beca\u01b5se\u00a0\u01c1e\u00a0don\ue001\u019a\u00a0ge\u019a\u00a0an\u01c7\u00a0hin\u019a\u00a0as\u00a0\nto\u00a0 where\u00a0 things\u00a0 are\u00a0 wrong\u00a0 in\u00a0 our\u00a0 program\u00a0 and\u00a0 why\u00a0 we\u00a0 are\u00a0 not\u00a0\ngetting\u00a0the\u00a0desired\u00a0results.\nx\nBug\u00a0means\u00a0an\u00a0error.\u00a0Debugging\u00a0means\u00a0process\u00a0of\u00a0removal\u00a0of\u00a0errors.\nDebugger\u00a0is\u00a0a\u00a0special\u00a0program\u00a0the\u00a0can\u00a0help\u00a0us\u00a0detect\u00a0Logical\u00a0errors\u00a0\nin\u00a0our\u00a0program.\nx\nThere\u00a0are\u00a0many\u00a0debuggers\u00a0available\u00a0for\u00a0debugging\u00a0Python\u00a0programs.\u00a0\nNo\u00a0matter which\u00a0debugger\u00a0we\u00a0use,\u00a0the\u00a0steps\u00a0for\u00a0debugging\u00a0remain\u00a0\nsame.\u00a0These\u00a0steps\u00a0are\u00a0given\u00a0below:\n(a) Start\u00a0the\u00a0debugger\n(b) Set\u00a0breakpoints\n(c) Step through\u00a0the\u00a0source\u00a0code\u00a0one\u00a0line\u00a0at\u00a0a\u00a0time\n(d) Inspect\u00a0the\u00a0values\u00a0of\u00a0variables\u00a0as\u00a0they\u00a0change\n(e) Make\u00a0corrections\u00a0to\u00a0the\u00a0source code\n(f) Rerun\u00a0the\u00a0program\u00a0to\u00a0make\u00a0sure\u00a0the\u00a0fixes\u00a0are\u00a0correct\nGiven\u00a0 below\u00a0 is\u00a0 a\u00a0 detailed\u00a0 explanation\u00a0 of\u00a0 these\u00a0 steps for\u00a0 IDLE\ndebugger.\nStart\u00a0Debugger\nx\nStart\u00a0 IDLE\u00a0 and type\u00a0 any\u00a0 program\u00a0 in\u00a0 it,\u00a0 or\u00a0 open\u00a0 an\u00a0 already\u00a0 typed\u00a0\nsource\u00a0file.\nx\nIn\u00a0the\u00a0Shell\u00a0window,\u00a0click\u00a0on\u00a0the\u00a0'Debug'\u00a0menu\u00a0option\u00a0at\u00a0the\u00a0top\u00a0and\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_581", "chunk_strategy": "fixed_size"}}, {"text": "ps for\u00a0 IDLE\ndebugger.\nStart\u00a0Debugger\nx\nStart\u00a0 IDLE\u00a0 and type\u00a0 any\u00a0 program\u00a0 in\u00a0 it,\u00a0 or\u00a0 open\u00a0 an\u00a0 already\u00a0 typed\u00a0\nsource\u00a0file.\nx\nIn\u00a0the\u00a0Shell\u00a0window,\u00a0click\u00a0on\u00a0the\u00a0'Debug'\u00a0menu\u00a0option\u00a0at\u00a0the\u00a0top\u00a0and\u00a0\nthen\u00a0 choose\u00a0 'Debugger'\u00a0 from\u00a0 the\u00a0 pop-up\u00a0 menu.\u00a0 A\u00a0 new\u00a0 window\u00a0\nshown\u00a0 in\u00a0 Figure\u00a0B.1\u00a0 and\u00a0 titled\u00a0'Debug\u00a0 Control'\u00a0 will\u00a0appear\u00a0 on\u00a0the\u00a0\nscreen.\u00a0\nAppendix\u00a0B:\u00a0Debugging\u00a0in\u00a0Python\n399\nFigure\u00a0B.1\nx\nThe\u00a0Shell\u00a0window\u00a0will\u00a0show:\n>>>\n[DEBUG\u00a0ON]\n>>>\nSet\u00a0Breakpoints\nx\nA\u00a0 breakpoint\u00a0is\u00a0 a\u00a0marker\u00a0 in\u00a0our\u00a0code\u00a0 that\u00a0 tells\u00a0the\u00a0debugger\u00a0 that\u00a0\nexecution\u00a0should\u00a0proceed\u00a0at\u00a0normal\u00a0speed\u00a0up\u00a0to\u00a0the\u00a0breakpoint,\u00a0and\u00a0\nstop\u00a0 there.\u00a0Execution\u00a0 will\u00a0not\u00a0 proceed\u00a0 beyond\u00a0it\u00a0unless\u00a0 we\u00a0 do\u00a0 so\u00a0\nthrough\u00a0manual\u00a0intervention.\nx\nBreak\u00a0 points\u00a0 can\u00a0 be\u00a0 set\u00a0 in\u00a0 a\u00a0 program\u00a0 wherever\u00a0 we\u00a0 suspect\u00a0\nsomething\u00a0 may\u00a0go\u00a0wrong. We can\u00a0have\u00a0many\u00a0of\u00a0them at\u00a0different\u00a0\nstatements\u00a0in\u00a0one\u00a0program.\nx\nTo\u00a0set\u00a0up\u00a0a\u00a0break\u00a0point\u00a0right\u00a0click\u00a0on\u00a0a\u00a0line\u00a0of\u00a0the source\u00a0and\u00a0choose\u00a0\n'Set\u00a0breakpoint'\u00a0from\u00a0the\u00a0menu.\nx\nOn\u00a0 setting a\u00a0 breakpo", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_582", "chunk_strategy": "fixed_size"}}, {"text": "ng. We can\u00a0have\u00a0many\u00a0of\u00a0them at\u00a0different\u00a0\nstatements\u00a0in\u00a0one\u00a0program.\nx\nTo\u00a0set\u00a0up\u00a0a\u00a0break\u00a0point\u00a0right\u00a0click\u00a0on\u00a0a\u00a0line\u00a0of\u00a0the source\u00a0and\u00a0choose\u00a0\n'Set\u00a0breakpoint'\u00a0from\u00a0the\u00a0menu.\nx\nOn\u00a0 setting a\u00a0 breakpoint\u00a0 the\u00a0 background\u00a0 color of\u00a0 the\u00a0 line\u00a0 turns\u00a0\nyellow\u00a0to\u00a0show\u00a0that\u00a0a\u00a0breakpoint\u00a0has\u00a0been\u00a0set\u00a0at\u00a0that\u00a0line.\nSingle\u00a0Step\u00a0through\u00a0Program\nx\nExecute\u00a0the\u00a0program\u00a0using\u00a0F5.\nx\nThe\u00a0Debug\u00a0Control\u00a0window\u00a0will\u00a0now\u00a0show\u00a0in\u00a0blue\u00a0color\u00a0the first\u00a0line\u00a0\nfrom\u00a0where\u00a0our\u00a0program\u00a0execution\u00a0is\u00a0to\u00a0start.\u00a0This\u00a0means\u00a0that\u00a0line\u00a0is\u00a0\nready\u00a0to\u00a0be\u00a0executed.\n400\nLet\u00a0Us\u00a0Python\nx\nFrom\u00a0 this\u00a0 point\u00a0we can\u00a0 click\u00a0the\u00a0 'Go' button\u00a0in\u00a0the\u00a0 Debug\u00a0Control\u00a0\nwindow\u00a0to\u00a0execute\u00a0the\u00a0program\u00a0at\u00a0normal\u00a0speed\u00a0until\u00a0a\u00a0breakpoint\u00a0\nis\u00a0encountered\u00a0(or\u00a0input\u00a0is\u00a0requested\u00a0or\u00a0the\u00a0program\u00a0finishes).\u00a0\nx\nOnce\u00a0control\u00a0reaches\u00a0the\u00a0breakpoint,\u00a0we\u00a0can\u00a0use\u00a0the\u00a0'Step' button\u00a0to\u00a0\nstep\u00a0through\u00a0our\u00a0code,\u00a0one\u00a0line\u00a0at\u00a0a\u00a0time.\u00a0If\u00a0the\u00a0line\u00a0being\u00a0stepped\u00a0\nthrough\u00a0has\u00a0a\u00a0function\u00a0call,\u00a0execution\u00a0will\u00a0go\u00a0to\u00a0the\u00a0first\u00a0line\u00a0of\u00a0the\u00a0\nfunction\u00a0definition\u00a0(we are\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_583", "chunk_strategy": "fixed_size"}}, {"text": "an\u00a0use\u00a0the\u00a0'Step' button\u00a0to\u00a0\nstep\u00a0through\u00a0our\u00a0code,\u00a0one\u00a0line\u00a0at\u00a0a\u00a0time.\u00a0If\u00a0the\u00a0line\u00a0being\u00a0stepped\u00a0\nthrough\u00a0has\u00a0a\u00a0function\u00a0call,\u00a0execution\u00a0will\u00a0go\u00a0to\u00a0the\u00a0first\u00a0line\u00a0of\u00a0the\u00a0\nfunction\u00a0definition\u00a0(we are\u00a0 \"stepping\u00a0into\"\u00a0 the\u00a0function).\u00a0If\u00a0we\u00a0not\u00a0\nwish\u00a0to\u00a0examine\u00a0the\u00a0statements\u00a0in\u00a0the\u00a0function,\u00a0we\u00a0can\u00a0choose\u00a0the\u00a0\n'Over'\u00a0button\u00a0to\u00a0step\u00a0over\u00a0the\u00a0function.\nInspect\u00a0Values\nx\nAs\u00a0we\u00a0single\u00a0step\u00a0through\u00a0the\u00a0program\u00a0we\u00a0can\u00a0watch\u00a0the\u00a0type\u00a0and\u00a0\nvalue\u00a0 of\u00a0 local\u00a0 and\u00a0 global\u00a0 variables\u00a0 used\u00a0 in\u00a0 our\u00a0 program\u00a0 at\u00a0 the\u00a0\nbottom\u00a0of\u00a0the\u00a0Debug\u00a0Control\u00a0window.\u00a0\nx\nAs\u00a0different\u00a0steps\u00a0of\u00a0our\u00a0program\u00a0get\u00a0executed\u00a0and\u00a0the\u00a0values\u00a0of\u00a0the\u00a0\nvariables\u00a0 change,\u00a0 the\u00a0 changed\u00a0 values\u00a0 get\u00a0 displayed\u00a0 in\u00a0 the\u00a0 Debug\u00a0\nControl\u00a0window.\nCorrect\u00a0and\u00a0Run\u00a0Again\nx\nBy\u00a0watching\u00a0the\u00a0values\u00a0of\u00a0the\u00a0variables\u00a0if\u00a0we\u00a0get\u00a0a\u00a0clue\u00a0as\u00a0to\u00a0what\u00a0is\u00a0\nwrong\u00a0with\u00a0our\u00a0program,\u00a0we\u00a0can\u00a0stop\u00a0the\u00a0execution\u00a0using\u00a0the\u00a0'Quit'\u00a0\nbutton.\u00a0 We\u00a0 can\u00a0then\u00a0rectify\u00a0the\u00a0program\u00a0and\u00a0debug\u00a0 it\u00a0again\u00a0 using\u00a0\nthe\u00a0same\u00a0steps.\nx\nWhile\u00a0 single\u00a0stepping\u00a0 if\u00a0we\u00a0reach\u00a0insi", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_584", "chunk_strategy": "fixed_size"}}, {"text": "is\u00a0\nwrong\u00a0with\u00a0our\u00a0program,\u00a0we\u00a0can\u00a0stop\u00a0the\u00a0execution\u00a0using\u00a0the\u00a0'Quit'\u00a0\nbutton.\u00a0 We\u00a0 can\u00a0then\u00a0rectify\u00a0the\u00a0program\u00a0and\u00a0debug\u00a0 it\u00a0again\u00a0 using\u00a0\nthe\u00a0same\u00a0steps.\nx\nWhile\u00a0 single\u00a0stepping\u00a0 if\u00a0we\u00a0reach\u00a0inside\u00a0a\u00a0function\u00a0and\u00a0we\u00a0wish\u00a0to\nfinish\u00a0execution\u00a0of\u00a0the\u00a0function\u00a0at\u00a0normal\u00a0speed and return\u00a0from\u00a0the\u00a0\nfunction,\u00a0we\u00a0can\u00a0do\u00a0so\u00a0using\u00a0the\u00a0'Out'\u00a0button.\u00a0\nLet\u00a0Us\nPython\n401\nChasing\u00a0the\u00a0Bugs\nC\n\u201cWading\u00a0through\u00a0the\u00a0choppy\u00a0waters...\u201d\n402\nLet\u00a0Us\u00a0Python\nHow\u00a0can\u00a0we\u00a0 chase\u00a0 away the\u00a0bugs\u00a0 in\u00a0a\u00a0Python\u00a0 program?\u00a0No\u00a0sure-shot\u00a0\nway\u00a0for\u00a0that.\u00a0So\u00a0I\u00a0thought\u00a0if\u00a0I\u00a0make\u00a0a\u00a0list\u00a0of\u00a0more\u00a0common\u00a0programming\u00a0\nmistakes,\u00a0it\u00a0might\u00a0be\u00a0of\u00a0help.\u00a0I\u00a0have\u00a0presented\u00a0them\u00a0below.\u00a0They\u00a0are\u00a0not\u00a0\narranged\u00a0in\u00a0any\u00a0particular\u00a0order,\u00a0but\u00a0I\u00a0think,\u00a0they\u00a0would\u00a0be\u00a0a\u00a0good help!\nBug\u00a01\nMixing\u00a0tabs\u00a0with\u00a0spaces in\u00a0indentation.\u00a0\nConsider\u00a0the\u00a0code\u00a0snippet\u00a0given\u00a0below:\nif\u00a0a\u00a0<\u00a0b\u00a0:\na\u00a0=\u00a010\nb\u00a0=\u00a020\nHere\u00a0the\u00a0first\u00a0statement\u00a0in\u00a0if\u00a0block\u00a0has\u00a0been\u00a0indented\u00a0using\u00a0tab,\u00a0whereas\u00a0\nthe\u00a0 second\u00a0 has\u00a0 been\u00a0 indented\u00a0 using\u00a0 spaces.\u00a0 So\u00a0 on\u00a0 the\u00a0 screen\u00a0 the\u00a0\nsnippet\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_585", "chunk_strategy": "fixed_size"}}, {"text": "et\u00a0given\u00a0below:\nif\u00a0a\u00a0<\u00a0b\u00a0:\na\u00a0=\u00a010\nb\u00a0=\u00a020\nHere\u00a0the\u00a0first\u00a0statement\u00a0in\u00a0if\u00a0block\u00a0has\u00a0been\u00a0indented\u00a0using\u00a0tab,\u00a0whereas\u00a0\nthe\u00a0 second\u00a0 has\u00a0 been\u00a0 indented\u00a0 using\u00a0 spaces.\u00a0 So\u00a0 on\u00a0 the\u00a0 screen\u00a0 the\u00a0\nsnippet\u00a0 looks\u00a0 alright,\u00a0 but\u00a0 Python\u00a0 interpreter\u00a0 will\u00a0 flag\u00a0 an\u00a0 error.\u00a0 Such\u00a0\nerrors\u00a0are\u00a0difficult\u00a0to\u00a0spot,\u00a0so\u00a0always\u00a0use\u00a04\u00a0spaces\u00a0for\u00a0indentation.\nBug\u00a02\nMissing\u00a0:\u00a0after\u00a0if,\u00a0loop,\u00a0function,\u00a0class.\u00a0\nSince\u00a0other\u00a0languages\u00a0do\u00a0not\u00a0need\u00a0a\u00a0:\u00a0those\u00a0who\u00a0migrate\u00a0to\u00a0Python\u00a0from\u00a0\nother\u00a0languages\u00a0tend\u00a0to\u00a0forget\u00a0to\u00a0use\u00a0:.\nBug\u00a03\nUsing\u00a0++\u00a0or\u00a0--.\nDon't\u00a0increment/decrement\u00a0using\u00a0 ++\u00a0or\u00a0--.\u00a0There\u00a0are\u00a0only\u00a0two\u00a0ways\u00a0to\u00a0\nincrement/decrement\u00a0a\u00a0variable:\ni\u00a0=\u00a0i\u00a0+\u00a01\ni\u00a0+=\u00a01\nBug\u00a04\nNo\u00a0static\u00a0types for\u00a0variables.\u00a0\nUnlike\u00a0 other\u00a0 languages,\u00a0 we\u00a0 do\u00a0 not\u00a0 have\u00a0 to\u00a0 define\u00a0 the\u00a0 type\u00a0 of\u00a0 the\u00a0\nvariable.\u00a0Type\u00a0of\u00a0the\u00a0variable\u00a0is\u00a0determined\u00a0dynamically\u00a0at\u00a0the\u00a0time\u00a0of\u00a0\nAppendix\u00a0C:\u00a0Chasing\u00a0the\u00a0Bugs\u00a0\n403\nexecution\u00a0based\u00a0on\u00a0the\u00a0usage\u00a0of\u00a0the\u00a0variable.\u00a0So\u00a0in\u00a0 the\u00a0following\u00a0code\u00a0\nsnippet\u00a0a is\u00a0integer\u00a0to\u00a0begin\u00a0with,\u00a0but\u00a0when\u00a0the\u00a0contex", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_586", "chunk_strategy": "fixed_size"}}, {"text": "etermined\u00a0dynamically\u00a0at\u00a0the\u00a0time\u00a0of\u00a0\nAppendix\u00a0C:\u00a0Chasing\u00a0the\u00a0Bugs\u00a0\n403\nexecution\u00a0based\u00a0on\u00a0the\u00a0usage\u00a0of\u00a0the\u00a0variable.\u00a0So\u00a0in\u00a0 the\u00a0following\u00a0code\u00a0\nsnippet\u00a0a is\u00a0integer\u00a0to\u00a0begin\u00a0with,\u00a0but\u00a0when\u00a0the\u00a0context\u00a0changes\u00a0its\u00a0type\u00a0\nchanges\u00a0to\u00a0str.\na\u00a0=\u00a025\nprint(type(a))\n#\u00a0prints\u00a0<class\u00a0'int'>\na\u00a0=\u00a0'Hi'\nprint(type(a))\n#\u00a0prints\u00a0<class\u00a0'str'>\nBug\u00a05\nDeleting\u00a0an\u00a0item\u00a0from\u00a0a\u00a0list\u00a0while\u00a0iterating\u00a0it.\nlst\u00a0=\u00a0[n\u00a0for\u00a0n\u00a0in\u00a0range(10)]\nfor\u00a0i\u00a0in\u00a0range(len(lst))\u00a0:\nif\u00a0i\u00a0%\u00a02\u00a0==\u00a00\u00a0:\ndel\u00a0lst[i]\nCorrect\u00a0way\u00a0to\u00a0do\u00a0this\u00a0is\u00a0to\u00a0use\u00a0list\u00a0comprehension\u00a0as\u00a0shown\u00a0below:\nlst\u00a0=\u00a0[n\u00a0for\u00a0n\u00a0in\u00a0range(10)]\nlst\u00a0=\u00a0[n\u00a0for\u00a0n\u00a0in\u00a0lst\u00a0if\u00a0n\u00a0%\u00a02\u00a0!=\u00a00]\nprint(lst)\nBug\u00a06\nImproper\u00a0interpretation\u00a0of\u00a0range(\u00a0) function.\nRemember\u00a0the\u00a0following\u00a0for\u00a0loop\u00a0will\u00a0generate\u00a0numbers\u00a0from\u00a00\u00a0to\u00a09\u00a0and\u00a0\nnot\u00a0from\u00a01\u00a0to\u00a010.\nfor\u00a0i\u00a0in\u00a0range(10)\u00a0:\nprint(i)\nBug\u00a07\nUsing\u00a0=\u00a0in\u00a0place\u00a0of\u00a0==.\u00a0\nWhen\u00a0performing\u00a0a\u00a0comparison\u00a0between\u00a0two\u00a0objects\u00a0or\u00a0value,\u00a0you\u00a0just\u00a0\nuse\u00a0 the\u00a0 equality\u00a0 operator\u00a0 (==),\u00a0 not\u00a0 the\u00a0 assignment\u00a0 operator\u00a0 (=).\u00a0 The\u00a0\nassignment\u00a0 operator\u00a0 places\u00a0 an\u00a0 obje", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_587", "chunk_strategy": "fixed_size"}}, {"text": "lace\u00a0of\u00a0==.\u00a0\nWhen\u00a0performing\u00a0a\u00a0comparison\u00a0between\u00a0two\u00a0objects\u00a0or\u00a0value,\u00a0you\u00a0just\u00a0\nuse\u00a0 the\u00a0 equality\u00a0 operator\u00a0 (==),\u00a0 not\u00a0 the\u00a0 assignment\u00a0 operator\u00a0 (=).\u00a0 The\u00a0\nassignment\u00a0 operator\u00a0 places\u00a0 an\u00a0 object\u00a0 or\u00a0 value\u00a0 within\u00a0 a\u00a0 variable\u00a0 and\u00a0\ndoesn\ue001t\u00a0compare\u00a0anything\ue002\n404\nLet\u00a0Us\u00a0Python\nBug\u00a08\nDifference\u00a0in\u00a0built-in\u00a0and\u00a0other\u00a0types\u00a0while\u00a0referring\u00a0to\u00a0objects.\ni\u00a0=\u00a010\nj\u00a0= 10\na\u00a0=\u00a0'Hi'\nb\u00a0=\u00a0'Hi'\nx\u00a0=\u00a0[10]\ny\u00a0=\u00a0[10]\nprint(id(i),\u00a0id(j),\u00a0id(a),\u00a0id(b),\u00a0id(x),\u00a0id(y))\nid(\u00a0 ) returns\u00a0 the\u00a0 address\u00a0 stored\u00a0 in\u00a0 its\u00a0 argument.\u00a0 Since\u00a0 i and\u00a0 j are\u00a0\nreferring\u00a0 to\u00a0 same\u00a0 int,\u00a0 they\u00a0 contain\u00a0 same\u00a0 address.\u00a0 Since\u00a0 a and\u00a0 b are\u00a0\nreferring\u00a0to\u00a0same\u00a0string,\u00a0they contain\u00a0same\u00a0address.\u00a0However,\u00a0addresses\u00a0\nstored\u00a0in\u00a0x and\u00a0y are\u00a0different\u00a0as\u00a0two\u00a0objects\u00a0each\u00a0containing\u00a0[10]\u00a0are\u00a0\ncreated.\nBug\u00a09\nUsing\u00a0improper\u00a0case\u00a0in\u00a0logical\u00a0values.\nAll\u00a0keywords\u00a0and\u00a0operator\u00a0(like\u00a0and,\u00a0or,\u00a0not,\u00a0in,\u00a0is)\u00a0are\u00a0in\u00a0small-case,\u00a0but\u00a0\nlogical\u00a0values\u00a0are\u00a0True and\u00a0False (not\u00a0true\u00a0and\u00a0false).\nBug\u00a010\nImproper\u00a0order\u00a0of\u00a0function\u00a0calls.\nWhile\u00a0creat", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_588", "chunk_strategy": "fixed_size"}}, {"text": "gical\u00a0values.\nAll\u00a0keywords\u00a0and\u00a0operator\u00a0(like\u00a0and,\u00a0or,\u00a0not,\u00a0in,\u00a0is)\u00a0are\u00a0in\u00a0small-case,\u00a0but\u00a0\nlogical\u00a0values\u00a0are\u00a0True and\u00a0False (not\u00a0true\u00a0and\u00a0false).\nBug\u00a010\nImproper\u00a0order\u00a0of\u00a0function\u00a0calls.\nWhile\u00a0creating\u00a0complex\u00a0Python\u00a0statements\u00a0we\u00a0may\u00a0place function\u00a0calls\u00a0\nin\u00a0 wrong\u00a0 order producing\u00a0 unexpected\u00a0 results.\u00a0 For\u00a0 example,\u00a0 in\u00a0 the\u00a0\nfollowing\u00a0code\u00a0snippet\u00a0if\u00a0we\u00a0change\u00a0the\u00a0order\u00a0of\u00a0the\u00a0function\u00a0calls,\u00a0we\u00a0\nget\u00a0different\u00a0results.\ns\u00a0=\u00a0\"\u00a0 Hi\u00a0 \"\nprint(s.strip().center(21,\u00a0\"!\"))\u00a0\n#\u00a0prints\u00a0!!!!!!!!!!Hi!!!!!!!!!\nprint(s.center(21,\u00a0\"!\").strip( ))\u00a0\n#\u00a0prints\u00a0!!!!!!!!\u00a0 Hi\u00a0 !!!!!!!\nRemember\u00a0that\u00a0Python\u00a0always\u00a0executes\u00a0functions\u00a0from\u00a0left\u00a0to\u00a0right.\u00a0\nBug\u00a011\nImproperly\u00a0initializing\u00a0a\u00a0mutable\u00a0default\u00a0value\u00a0for\u00a0a\u00a0function\u00a0argument.\u00a0\nConsider\u00a0the\u00a0following\u00a0code\u00a0snippet:\nAppendix\u00a0C:\u00a0Chasing\u00a0the\u00a0Bugs\u00a0\n405\ndef\u00a0fun(lst\u00a0=\u00a0[\u00a0])\u00a0:\nlst.append('Hi')\nprint(lst)\nfun(\u00a0)\n#\u00a0prints\u00a0['Hi']\nfun(\u00a0)\n#\u00a0prints\u00a0['Hi',\u00a0'Hi']\nIt\u00a0 may\u00a0 appear\u00a0 that\u00a0 during\u00a0 each\u00a0 call\u00a0 to\u00a0 fun\u00a0 'Hi'\u00a0 would\u00a0 be\u00a0 printed.\u00a0\nHowever,\u00a0 this\u00a0 doesn't\u00a0 ha", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_589", "chunk_strategy": "fixed_size"}}, {"text": "(lst\u00a0=\u00a0[\u00a0])\u00a0:\nlst.append('Hi')\nprint(lst)\nfun(\u00a0)\n#\u00a0prints\u00a0['Hi']\nfun(\u00a0)\n#\u00a0prints\u00a0['Hi',\u00a0'Hi']\nIt\u00a0 may\u00a0 appear\u00a0 that\u00a0 during\u00a0 each\u00a0 call\u00a0 to\u00a0 fun\u00a0 'Hi'\u00a0 would\u00a0 be\u00a0 printed.\u00a0\nHowever,\u00a0 this\u00a0 doesn't\u00a0 happen\u00a0 since\u00a0 the\u00a0 default\u00a0 value\u00a0 for\u00a0 a\u00a0 function\u00a0\nargument\u00a0 is\u00a0 only\u00a0 evaluated\u00a0 once,\u00a0 at\u00a0 the\u00a0 time\u00a0 that\u00a0 the\u00a0 function\u00a0 is\u00a0\ndefined. Correct\u00a0way\u00a0to\u00a0write\u00a0this\u00a0code\u00a0would\u00a0be:\ndef fun(lst\u00a0=\u00a0None)\u00a0:\nif\u00a0lst\u00a0is\u00a0None\u00a0:\nlst\u00a0=\u00a0[\u00a0]\nlst.append('Hi')\nprint(lst)\nfun(\u00a0)\nfun(\u00a0)\nBug\u00a012\nCommon\u00a0exceptions.\nFollowing\u00a0is\u00a0a\u00a0list\u00a0of\u00a0common\u00a0exceptions\u00a0that\u00a0occur\u00a0at\u00a0runtime\u00a0and\u00a0the\u00a0\nreasons\u00a0that\u00a0cause\u00a0them:\nAssertionError - It\u00a0is\u00a0raised\u00a0when\u00a0the\u00a0assert\u00a0statement\u00a0fails.\nage\u00a0=\u00a0int(input('Enter\u00a0your\u00a0age:\u00a0'))\nassert\u00a0age\u00a0>=\u00a00,\u00a0'Negative\u00a0age'\nAttributeError - It\u00a0is\u00a0raised\u00a0when\u00a0we\u00a0try\u00a0to\u00a0use\u00a0an\u00a0attribute\u00a0that\u00a0doesn't\u00a0\nexist.\ns\u00a0=\u00a0'Hi'\ns.convert(\u00a0)#\u00a0str\u00a0doesn't\u00a0have\u00a0convert(\u00a0)\u00a0method\nEOFError - It\u00a0 is\u00a0 raised\u00a0 when\u00a0 the\u00a0 input()\u00a0 function\u00a0 hits\u00a0 the\u00a0 end-of-file\u00a0\ncondition.\nImportError - It\u00a0is\u00a0raised when\u00a0the\u00a0impor", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_590", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0\nexist.\ns\u00a0=\u00a0'Hi'\ns.convert(\u00a0)#\u00a0str\u00a0doesn't\u00a0have\u00a0convert(\u00a0)\u00a0method\nEOFError - It\u00a0 is\u00a0 raised\u00a0 when\u00a0 the\u00a0 input()\u00a0 function\u00a0 hits\u00a0 the\u00a0 end-of-file\u00a0\ncondition.\nImportError - It\u00a0is\u00a0raised when\u00a0the\u00a0imported\u00a0module\u00a0is\u00a0not\u00a0found.\n406\nLet\u00a0Us\u00a0Python\nIndexError - It\u00a0is\u00a0raised when\u00a0the\u00a0index\u00a0of\u00a0a\u00a0sequence\u00a0is\u00a0out\u00a0of\u00a0range.\nlst\u00a0=\u00a0[10,\u00a020,\u00a030]\nprint(lst[3])\nKeyError - It\u00a0is\u00a0raised when\u00a0a\u00a0key\u00a0is\u00a0not\u00a0found\u00a0in\u00a0a\u00a0dictionary.\nKeyboardInterrupt - It\u00a0is\u00a0raised when\u00a0the\u00a0user\u00a0hits\u00a0Ctrl+c.\nMemoryError - It\u00a0is\u00a0raised when\u00a0an\u00a0operation\u00a0runs\u00a0out\u00a0of\u00a0memory.\nNameError - It\u00a0is\u00a0raised when\u00a0a\u00a0variable\u00a0is\u00a0not\u00a0found\u00a0in\u00a0the\u00a0local\u00a0or\u00a0global\u00a0\nscope.\nRuntimeError - It\u00a0is\u00a0raised when\u00a0an\u00a0error\u00a0does\u00a0not\u00a0fall\u00a0under\u00a0any\u00a0other\u00a0\ncategory.\nStopIteration - It\u00a0is\u00a0raised by\u00a0the\u00a0next( ) function\u00a0to\u00a0indicate\u00a0that\u00a0there\u00a0is\u00a0\nno\u00a0further\u00a0item\u00a0to\u00a0be\u00a0returned\u00a0by\u00a0the\u00a0iterator.\nTypeError - It\u00a0 is\u00a0 raised when\u00a0 a\u00a0 function\u00a0or\u00a0 operation\u00a0 is\u00a0applied\u00a0 to\u00a0an\u00a0\nobject\u00a0of\u00a0an\u00a0incorrect\u00a0type.\nLet\u00a0Us\nPython\n407\nIndex\u00a0\nI\n\u201cRandom\u00a0access\u00a0begins\u00a0here...\u201d\n", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_591", "chunk_strategy": "fixed_size"}}, {"text": "m\u00a0to\u00a0be\u00a0returned\u00a0by\u00a0the\u00a0iterator.\nTypeError - It\u00a0 is\u00a0 raised when\u00a0 a\u00a0 function\u00a0or\u00a0 operation\u00a0 is\u00a0applied\u00a0 to\u00a0an\u00a0\nobject\u00a0of\u00a0an\u00a0incorrect\u00a0type.\nLet\u00a0Us\nPython\n407\nIndex\u00a0\nI\n\u201cRandom\u00a0access\u00a0begins\u00a0here...\u201d\n408\nLet\u00a0Us\u00a0Python\n**,\u00a020,\u00a0135,\u00a0136,\u00a0162\n*,\u00a092,\u00a098,\u00a0113\n@,\u00a0340\n_\u00a0_add_\u00a0_,\u00a0249\n__del__(\u00a0),\u00a0232\n_\u00a0_doc_\u00a0_,\u00a0334\n_\u00a0_eq_\u00a0_,\u00a0249\n_\u00a0_floordiv_\u00a0_,\u00a0249\n_\u00a0_ge_\u00a0_,\u00a0249\n_\u00a0_gt_\u00a0_,\u00a0249\n_\u00a0_iadd_\u00a0_,\u00a0249\n_\u00a0_idiv_\u00a0_,\u00a0249\n_\u00a0_ifloordiv_\u00a0_,\u00a0249\n_\u00a0_imod_\u00a0_,\u00a0249\n_\u00a0_imult_\u00a0_,\u00a0249\n__init_\u00a0_(\u00a0),\u00a0232\n_\u00a0_ipow_\u00a0_,\u00a0249\n_\u00a0_isub_\u00a0_,\u00a0249\n_\u00a0_iter_\u00a0_,\u00a0279\n_\u00a0_le_\u00a0_,\u00a0249\n_\u00a0_lt_\u00a0_,\u00a0249\n_\u00a0_main_\u00a0_,\u00a0206\n_\u00a0_mod_\u00a0_,\u00a0249\n_\u00a0_mult_\u00a0_,\u00a0249\n_\u00a0_name_\u00a0_,\u00a0206\n_\u00a0_ne_\u00a0_,\u00a0249\n_\u00a0_next_\u00a0_,\u00a0279\n_\u00a0_pow_\u00a0_,\u00a0249\n_\u00a0_sub_\u00a0_,\u00a0249\n_\u00a0_truediv_\u00a0_,\u00a0249\nA\nabs(\u00a0),\u00a023\nabspath(\u00a0),\u00a0327\nabstract\u00a0classes,\u00a0268\naccess\u00a0convention,\u00a0231\naccessing\u00a0dictionary\u00a0elements,\u00a0132\naccessing\u00a0list\u00a0elements,\u00a092\naccessing\u00a0set\u00a0elements,\u00a0123\naccessing\u00a0string\u00a0elements,\u00a040\naccessing\u00a0tuple\u00a0elements,\u00a0110\nacos(\u00a0),\u00a025\nadd(\u00a0),\u00a0123\nall(\u00a0),\u00a059\nany(\u00a0),\u00a059\nand,\u00a057\nappend(\u00a0),\u00a097\nprecedence\u00a0tabl", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_592", "chunk_strategy": "fixed_size"}}, {"text": "\naccessing\u00a0list\u00a0elements,\u00a092\naccessing\u00a0set\u00a0elements,\u00a0123\naccessing\u00a0string\u00a0elements,\u00a040\naccessing\u00a0tuple\u00a0elements,\u00a0110\nacos(\u00a0),\u00a025\nadd(\u00a0),\u00a0123\nall(\u00a0),\u00a059\nany(\u00a0),\u00a059\nand,\u00a057\nappend(\u00a0),\u00a097\nprecedence\u00a0table,\u00a0395\ndebugging\u00a0in\u00a0python,\u00a0397\nchasing\u00a0the\u00a0bugs,\u00a0401\narguments,\u00a0keyword,\u00a0160\narguments,\u00a0positional,\u00a0160\narguments,\u00a0variable\u00a0length,\u00a0160\narithmetic\u00a0operators,\u00a020\nasin(\u00a0),\u00a025\nassert,\u00a0339\nassertion,\u00a0339\nassignment,\u00a020\nassociativity,\u00a022\natan(\u00a0),\u00a025\nB\nbasic\u00a0dictionary\u00a0operations,\u00a0133\nbasic\u00a0list\u00a0operations,\u00a093\nbasic\u00a0set\u00a0operations,\u00a0123\nbasic\u00a0tuple\u00a0operations,\u00a0111\nbasic\u00a0types,\u00a019\nbin(\u00a0),\u00a024\nbitwise\u00a0operators,\u00a0338\nbreak,\u00a073\nbuilt-in\u00a0functions,\u00a023\nbuilt-in\u00a0functions,\u00a042\nbuilt-in\u00a0modules,\u00a024\nbytes\u00a0datatype,\u00a0345\nC\ncalling\u00a0methods,\u00a0247\ncapitalize(\u00a0),\u00a044\nceil(\u00a0),\u00a024\nchr(\u00a0),\u00a023\nclass\u00a0methods,\u00a0234\nclass\u00a0variables,\u00a0234\nclasses\u00a0and\u00a0objects,\u00a028\nclasses\u00a0and\u00a0objects\u00a0,\u00a0227\nclasses\u00a0and\u00a0objects\u00a0in\u00a0programming,\u00a0\n229\nclear(\u00a0),\u00a0125\nclose(\u00a0),\u00a0319\ncmath,\u00a024\ncode\u00a0point,\u00a0345\nIndex\u00a0\n409\ncommand-line\u00a0arguments,\u00a0335\ncomm", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_593", "chunk_strategy": "fixed_size"}}, {"text": "iables,\u00a0234\nclasses\u00a0and\u00a0objects,\u00a028\nclasses\u00a0and\u00a0objects\u00a0,\u00a0227\nclasses\u00a0and\u00a0objects\u00a0in\u00a0programming,\u00a0\n229\nclear(\u00a0),\u00a0125\nclose(\u00a0),\u00a0319\ncmath,\u00a024\ncode\u00a0point,\u00a0345\nIndex\u00a0\n409\ncommand-line\u00a0arguments,\u00a0335\ncomments\u00a0and\u00a0indentation,\u00a027\ncommunication\u00a0with\u00a0functions,\u00a0159\ncomplex,\u00a018\ncomprehensions,\u00a0145\nconcurrency\u00a0and\u00a0parallelism,\u00a0356\nconcurrency\u00a0and\u00a0parallelism\u00a0in\u00a0\nprogramming,\u00a0357\nconcurrency\u00a0and\u00a0parallelism,\u00a0355\nconcurrency\u00a0for\u00a0improving\u00a0\nperformance,\u00a0359\ncondition,\u00a0378\nconditional\u00a0expressions,\u00a058\nconsole\u00a0input,\u00a082\nconsole\u00a0input/output\u00a0,\u00a081\nconsole\u00a0output,\u00a083\ncontainer\u00a0types,\u00a026\ncontainership,\u00a0260\ncontinue,\u00a073\nconversions,\u00a023\ncopyfile(\u00a0),\u00a0327\ncos(\u00a0),\u00a025\ncosh(\u00a0),\u00a025\ncount(\u00a0),\u00a097\ncpu-bound\u00a0&\u00a0i/o-bound\u00a0prog,\u00a0358\ncreate\u00a0executable\u00a0file,\u00a0347\nD\ndecimal,\u00a019\ndecision\u00a0control\u00a0instruction,\u00a056\ndecorating\u00a0functions\u00a0with\u00a0\narguments,\u00a0342\ndecorators,\u00a0340\ndefault\u00a0values\u00a0for\u00a0arguments,\u00a0163\ndegrees(\u00a0),\u00a025\ndel(\u00a0),\u00a096\ndetermining\u00a0python\u00a0version,\u00a015\ndiamond\u00a0problem,\u00a0267\ndictionaries\u00a0,\u00a0131\ndictionary\u00a0comprehension,\u00a01", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_594", "chunk_strategy": "fixed_size"}}, {"text": "ions\u00a0with\u00a0\narguments,\u00a0342\ndecorators,\u00a0340\ndefault\u00a0values\u00a0for\u00a0arguments,\u00a0163\ndegrees(\u00a0),\u00a025\ndel(\u00a0),\u00a096\ndetermining\u00a0python\u00a0version,\u00a015\ndiamond\u00a0problem,\u00a0267\ndictionaries\u00a0,\u00a0131\ndictionary\u00a0comprehension,\u00a0148\ndictionary\u00a0methods,\u00a0135\ndictionary\u00a0varieties,\u00a0135\ndir(\u00a0),\u00a0234\ndiscard(\u00a0),\u00a0125\ndivmod(\u00a0),\u00a024\ndocstring,\u00a0334\ndocumentation\u00a0strings,\u00a0334\ndump(\u00a0),\u00a0323\ndumps(\u00a0),\u00a0324\nE\ne,\u00a024\nelif,\u00a056\nelse\u00a0block,\u00a0308\nelse\u00a0block\u00a0of\u00a0a\u00a0loop,\u00a073\nelse,\u00a056\nencoding,\u00a0325\nendswith(\u00a0),\u00a042\nevent,\u00a0377\nevent-driven\u00a0programming\u00a0model,\u00a06\neverything\u00a0is\u00a0an\u00a0object,\u00a0250\nexample\u00a0of\u00a0communication\u00a0between\u00a0\nthreads,\u00a0374\nexamples\u00a0of\u00a0sharing\u00a0resources,\u00a0374\nexcept,\u00a0302\nexception\u00a0handling\u00a0,\u00a0299\nexception\u00a0handling\u00a0tips,\u00a0309\nexceptions,\u00a0301\nexp(\u00a0),\u00a024\nexponentiation\u00a0operator,\u00a020\nF\nfabs(\u00a0),\u00a024\nfactorial(\u00a0),\u00a024\nfeatures\u00a0of\u00a0inheritance,\u00a0265\nfile\u00a0and\u00a0directory\u00a0operations,\u00a0326\nfile\u00a0i/o,\u00a0318\nfile\u00a0input/output,\u00a0317\nfile\u00a0opening\u00a0modes,\u00a0320\nfilter(\u00a0)\u00a0function,\u00a0196\nfinally\u00a0block,\u00a0309\nfind(\u00a0),\u00a042\nfloat,\u00a018\nfloor(\u00a0),\u00a024\nfor\u00a0loop,\u00a070\nformatted\u00a0print", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_595", "chunk_strategy": "fixed_size"}}, {"text": "le\u00a0and\u00a0directory\u00a0operations,\u00a0326\nfile\u00a0i/o,\u00a0318\nfile\u00a0input/output,\u00a0317\nfile\u00a0opening\u00a0modes,\u00a0320\nfilter(\u00a0)\u00a0function,\u00a0196\nfinally\u00a0block,\u00a0309\nfind(\u00a0),\u00a042\nfloat,\u00a018\nfloor(\u00a0),\u00a024\nfor\u00a0loop,\u00a070\nformatted\u00a0printing,\u00a083\nfstring,\u00a083\nfunctional\u00a0programming,\u00a0192\nfunctional\u00a0programming\u00a0model,\u00a05\nfunctions,\u00a0157\n410\nLet\u00a0Us\u00a0Python\nfunctions\u00a0as\u00a0first-class\u00a0values,\u00a0192\nfunctions,\u00a0158\nG\ngenerator\u00a0expressions,\u00a0283\ngenerators,\u00a0282\ngetcwd(\u00a0),\u00a0326\ngetopt,\u00a0336\nglobals(\u00a0)\u00a0and\u00a0locals(\u00a0),\u00a0219\nH\nhas\u00a0a\u00a0relationship,\u00a0260\nhex(\u00a0),\u00a024\nhigher\u00a0order\u00a0functions,\u00a0194\nhow\u00a0to\u00a0deal\u00a0with\u00a0exceptions?,\u00a0302\nhow\u00a0to\u00a0use\u00a0try\u00a0- except?,\u00a0303\nI\nI/O\u00a0system,\u00a0318\nid(\u00a0),\u00a028\nidentifier\u00a0naming\u00a0convention\u00a0,\u00a0246\nidentifiers\u00a0and\u00a0keywords,\u00a018\nif,\u00a056\nimitating\u00a0a\u00a0structure\u00a0,\u00a0252\nimporting\u00a0a\u00a0module,\u00a0207\nindentation,\u00a027\nindex,\u00a0407\nindex(\u00a0),\u00a097\ninheritance,\u00a0261\ninner\u00a0functions,\u00a0221\ninput(\u00a0),\u00a082\ninsert(\u00a0),\u00a097\nint,\u00a018\ninteger\u00a0and\u00a0float\u00a0ranges,\u00a019\ninteractive\u00a0mode,\u00a013\ninter-thread\u00a0communication,\u00a0321,\u00a0\nintricacies\u00a0of\u00a0classes\u00a0and\u00a0objects,\u00a0245\nintricacies\u00a0of\u00a0c", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_596", "chunk_strategy": "fixed_size"}}, {"text": "261\ninner\u00a0functions,\u00a0221\ninput(\u00a0),\u00a082\ninsert(\u00a0),\u00a097\nint,\u00a018\ninteger\u00a0and\u00a0float\u00a0ranges,\u00a019\ninteractive\u00a0mode,\u00a013\ninter-thread\u00a0communication,\u00a0321,\u00a0\nintricacies\u00a0of\u00a0classes\u00a0and\u00a0objects,\u00a0245\nintricacies\u00a0of\u00a0classes\u00a0and\u00a0objects,\u00a0\n199,\u00a0\nintroduction\u00a0to\u00a0python,\u00a01\nisalnum(\u00a0),\u00a042\nisalpha(\u00a0),\u00a042\nisdigit(\u00a0),\u00a042\nisfile(\u00a0),\u00a0327\nisinstance(\u00a0),\u00a028\nislower(\u00a0),\u00a042\nissubclass(\u00a0),\u00a0264\nisupper(\u00a0),\u00a042\nitems(\u00a0),\u00a0133\niterable,\u00a0278\niterators,\u00a0278\niteration\u00a0to\u00a0recursion,\u00a0182\niterators,\u00a0279\niterators\u00a0and\u00a0generators,\u00a0277\nJ\nJSON,\u00a0323\njoin(\u00a0),\u00a0327\nK\nkeys(\u00a0),\u00a0133\nkeyword\u00a0arguments,\u00a0160\nkeywords,\u00a018\nL\nlambda\u00a0functions,\u00a0193\nlaunching\u00a0threads,\u00a0361\nleft\u00a0shift,\u00a0338\nlen(\u00a0),\u00a093\nlibrary\u00a0functions,\u00a025\nlike\u00a0a\u00a0relationship,\u00a0260\nlist\u00a0comprehension,\u00a0146\nlist\u00a0methods,\u00a097\nlist\u00a0varieties,\u00a098\nlist,\u00a092\nlistdir(\u00a0),\u00a0348\nlists\u00a0,\u00a091\nload(\u00a0),\u00a0323\nlock\u00a0,\u00a0375\nlog(\u00a0),\u00a024\nlog10(\u00a0),\u00a024\nlogical\u00a0operators,\u00a057\nlooping\u00a0in\u00a0dictionaries,\u00a0133\nlooping\u00a0in\u00a0lists,\u00a093\nIndex\u00a0\n411\nlooping\u00a0in\u00a0sets,\u00a0123\nlooping\u00a0in\u00a0tuples,\u00a0111\nlower(\u00a0),\u00a043\nlstrip(\u00a0),\u00a043\nM\nmain\u00a0mo", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_597", "chunk_strategy": "fixed_size"}}, {"text": "3\nlock\u00a0,\u00a0375\nlog(\u00a0),\u00a024\nlog10(\u00a0),\u00a024\nlogical\u00a0operators,\u00a057\nlooping\u00a0in\u00a0dictionaries,\u00a0133\nlooping\u00a0in\u00a0lists,\u00a093\nIndex\u00a0\n411\nlooping\u00a0in\u00a0sets,\u00a0123\nlooping\u00a0in\u00a0tuples,\u00a0111\nlower(\u00a0),\u00a043\nlstrip(\u00a0),\u00a043\nM\nmain\u00a0module,\u00a0206\nmakedirs(\u00a0),\u00a0327\nmap(\u00a0)\u00a0function,\u00a0195\nmap,\u00a0filter,\u00a0reduce,\u00a0195\nmath\u00a0module,\u00a024\nmathematical\u00a0set\u00a0operations,\u00a0125\nmax(\u00a0),\u00a024\nmechanisms\u00a0for\u00a0inter-thread\u00a0\ncommunication,\u00a0377\nmechanisms\u00a0for\u00a0sharing\u00a0resources,\u00a0\n375\nmin(\u00a0),\u00a024\nmiscellany,\u00a0333\nmodf(\u00a0),\u00a024\nmodules\u00a0and\u00a0packages_,\u00a0205\nmoving\u00a0within\u00a0a\u00a0file, 321\nmulti-lining,\u00a027\nmultiple\u00a0modules,\u00a0206\nmultiple\u00a0objects,\u00a029\nN\nNameError,\u00a0302\nnamespace,\u00a0218\nnested\u00a0dictionary,\u00a0135\nnext(\u00a0),\u00a0280\nnone,\u00a0160\nnot,\u00a057\nnuances\u00a0of\u00a0conditions,\u00a057\nnuances\u00a0of\u00a0try\u00a0and\u00a0except,\u00a0304\nO\nObject\u00a0class,\u00a0265\nobject\u00a0creation,\u00a0230\nobject initialization,\u00a0232\nobject-oriented\u00a0prog\u00a0model,\u00a06\nobjects,\u00a0229\noct(\u00a0),\u00a024\nopen(\u00a0),\u00a0318\noperation\u00a0nuances,\u00a021\noperator\u00a0overloading,\u00a0248\noperator\u00a0precedence,\u00a022\nor,\u00a057\nord(\u00a0),\u00a044\nP\nPYTHONPATH,\u00a0208\nPython\u00a0basics,\u00a017\nPython\u00a0installation\u00a0unde", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_598", "chunk_strategy": "fixed_size"}}, {"text": "rog\u00a0model,\u00a06\nobjects,\u00a0229\noct(\u00a0),\u00a024\nopen(\u00a0),\u00a0318\noperation\u00a0nuances,\u00a021\noperator\u00a0overloading,\u00a0248\noperator\u00a0precedence,\u00a022\nor,\u00a057\nord(\u00a0),\u00a044\nP\nPYTHONPATH,\u00a0208\nPython\u00a0basics,\u00a017\nPython\u00a0installation\u00a0under\u00a0Linux,\u00a011\nPython installation\u00a0under\u00a0Windows,\u00a0\n10\nPython,\u00a0reasons\u00a0for\u00a0popularity,\u00a018\nPython\u00a0resources,\u00a02\nPython\u00a0specification,\u00a012\nPython\u00a0type\u00a0Jargon,\u00a010\nPython\u00a0types,\u00a026\npackages,\u00a0209\nparsing\u00a0of\u00a0command-line,\u00a0336\npass\u00a0statement,\u00a060\npassing\u00a0parameters\u00a0to\u00a0a\u00a0thread,\u00a0362\nperf_counter(\u00a0),\u00a0343\npi,\u00a024\npop(\u00a0),\u00a097\npositional\u00a0arguments,\u00a0160\npow(\u00a0),\u00a023\nprecedence\u00a0and\u00a0associativity,\u00a022\nprint(\u00a0),\u00a083,\u00a084\nproblem\u00a0as\u00a0similar\u00a0sub-problems,\u00a0\n177\nproblem\u00a0with\u00a0unknown\u00a0loops,\u00a0179\nprocedural\u00a0programming\u00a0model,\u00a05\nprogramming\u00a0paradigms,\u00a04\nprogramming\u00a0paradigms,\u00a0228\nclasses\u00a0and\u00a0objects,\u00a0228\ncomprehensions,\u00a0146\ndictionaries,\u00a0132\nfunction,\u00a0158\nlists,\u00a092\n412\nLet\u00a0Us\u00a0Python\nQ\nqueue\u00a0data\u00a0structure,\u00a099\nR\nread\u00a0/\u00a0write\u00a0operations,\u00a0319\nreasons\u00a0for\u00a0popularity,\u00a02\nreceiving\u00a0input,\u00a059\nrecursion,\u00a0175\nrecursion\u00a0limit,\u00a0182\nrecurs", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_599", "chunk_strategy": "fixed_size"}}, {"text": "naries,\u00a0132\nfunction,\u00a0158\nlists,\u00a092\n412\nLet\u00a0Us\u00a0Python\nQ\nqueue\u00a0data\u00a0structure,\u00a099\nR\nread\u00a0/\u00a0write\u00a0operations,\u00a0319\nreasons\u00a0for\u00a0popularity,\u00a02\nreceiving\u00a0input,\u00a059\nrecursion,\u00a0175\nrecursion\u00a0limit,\u00a0182\nrecursive\u00a0factorial\u00a0function,\u00a0178\nrecursive\u00a0function,\u00a0176\nreduce(\u00a0)\u00a0function,\u00a0196\nrepetition\u00a0control\u00a0instruction,\u00a070\nrepetitions,\u00a0176\nreplace(\u00a0),\u00a042\nreuse\u00a0mechanisms,\u00a0260\nrlock\u00a0,\u00a0376\nruntime\u00a0polymorphism,\u00a0269\nS\nsame\u00a0code,\u00a0different\u00a0interpretation,\u00a0\n209\nscope\u00a0and\u00a0legb rule,\u00a0222\nscript\u00a0mode,\u00a013\nsearch\u00a0sequence,\u00a0208\nseek(\u00a0),\u00a0321\nsemaphore,\u00a0377\nserialization\u00a0and\u00a0deserialization,\u00a0322\nserialization\u00a0of\u00a0user-defined\u00a0types,\u00a0\n325\nset\u00a0comprehension,\u00a0147\nset\u00a0methods,\u00a0124\nset\u00a0varieties,\u00a0126\nsets,\u00a0121\nsets,\u00a0122\nsorting\u00a0and\u00a0reversing,\u00a097\nstack\u00a0data\u00a0structure,\u00a099\nstring\u00a0comparisons,\u00a044\nstring\u00a0conversions,\u00a043\nstring\u00a0methods,\u00a042\nstring\u00a0properties,\u00a041\nstrings,\u00a040\nstrings\u00a0,\u00a039\nsymbol\u00a0table,\u00a0218\nsynchronization,\u00a0374\nsynchronization_,\u00a0373\nsyntax\u00a0errors,\u00a0300\nT\nthird-party\u00a0packages,\u00a0210\nthread properties,\u00a0361\nthreads,\u00a0", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_600", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0methods,\u00a042\nstring\u00a0properties,\u00a041\nstrings,\u00a040\nstrings\u00a0,\u00a039\nsymbol\u00a0table,\u00a0218\nsynchronization,\u00a0374\nsynchronization_,\u00a0373\nsyntax\u00a0errors,\u00a0300\nT\nthird-party\u00a0packages,\u00a0210\nthread properties,\u00a0361\nthreads,\u00a0356\ntuple\u00a0methods,\u00a0113\ntuple\u00a0varieties,\u00a0113\ntuples,\u00a0109\ntuples,\u00a0110\ntype(\u00a0),\u00a028\ntype\u00a0conversion,\u00a0252\ntypes\u00a0of\u00a0arguments,\u00a0160\ntypes\u00a0of\u00a0concurrencies,\u00a0360\ntypes\u00a0of\u00a0inheritance,\u00a0265\ntypes\u00a0of\u00a0recursion,\u00a0181\nU\nunicode,\u00a0345\nunpacking\u00a0arguments,\u00a0163\nunpacking\u00a0dictionary,\u00a0135,\u00a0136\nunpacking\u00a0list,\u00a098\nunpacking\u00a0tuple,\u00a0113\nupdating\u00a0set\u00a0operations,\u00a0126\nusage\u00a0of\u00a0for\u00a0loop,\u00a071\nusage\u00a0of\u00a0while\u00a0loop,\u00a070\nuser-defined\u00a0classes,\u00a0229\nuser-defined\u00a0exceptions,\u00a0305\nuser-defined\u00a0iterators,\u00a0281\nusing\u00a0built-in functions\u00a0on\u00a0\ndictionaries,\u00a0134\nusing\u00a0built-in\u00a0functions\u00a0on\u00a0lists,\u00a096\nusing\u00a0built-in\u00a0functions\u00a0on\u00a0sets,\u00a0124\nusing\u00a0built-in\u00a0functions\u00a0on\u00a0tuples,\u00a0\n112\nusing\u00a0lambda\u00a0with\u00a0map(\u00a0),\u00a0filter(\u00a0),\u00a0\nreduce(\u00a0),\u00a0197\nIndex\u00a0\n413\nV\nvariable\u00a0type\u00a0and\u00a0assignment,\u00a020\nvariations\u00a0of\u00a0import,\u00a0208\nvars(\u00a0)\u00a0and\u00a0dir(\u00a0)\u00a0functions,\u00a0234\nW\nwit", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_601", "chunk_strategy": "fixed_size"}}, {"text": "\u00a0built-in\u00a0functions\u00a0on\u00a0tuples,\u00a0\n112\nusing\u00a0lambda\u00a0with\u00a0map(\u00a0),\u00a0filter(\u00a0),\u00a0\nreduce(\u00a0),\u00a0197\nIndex\u00a0\n413\nV\nvariable\u00a0type\u00a0and\u00a0assignment,\u00a020\nvariations\u00a0of\u00a0import,\u00a0208\nvars(\u00a0)\u00a0and\u00a0dir(\u00a0)\u00a0functions,\u00a0234\nW\nwith\u00a0keyword,\u00a0321\nworking\u00a0with\u00a0python,\u00a013\nX\nxor,\u00a0338\nY\nyield,\u00a0282\nZ\nzip(\u00a0)\u00a0function\u00a0,\u00a0278\n", "strategy": "fixed_size", "metadata": {"chunk_id": "doc_602", "chunk_strategy": "fixed_size"}}]