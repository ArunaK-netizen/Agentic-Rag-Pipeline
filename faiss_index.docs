[{"text": "--- Page 1 ---\ni\n--- Page 2 ---\n--- Page 3 ---\niiiDedicated to \nNalinee & Prabhakar Kanetkar...\n--- Page 4 ---\nivAboutYashavantKanetkar\nThrough his books and OnlineCourses on C, C++, \nJava, Python, Data Structures, .NET, IoT, etc. \nYashavant Kanetkar has created, molded and \ngroomed lacs of IT careers in the last three \ndecades\ue001 Yasha\u01c0ant\ue002s books and Online Courses \nhave made a significant contribution in creating \ntop-notch IT manpower in India and abroad.\nHis books are globally recognized and millions of students / \nprofessionals have benefitted from them. Many of his books have been \ntranslated into Hindi, Gujarati, Japanese, Korean and Chinese \nlanguages. Many of his books are published in India, USA, Japan, \nSingapore, Korea and China.\nHe is a much sought after speaker in the IT field and has conducted \nseminars/workshops at TedEx, IITs, IIITs, NITs and global software \ncompanies. \nHehas been honored \u01c1ith the prestigio\u01b5s \ue003Disting\u01b5ished Al\u01b5mn\u01b5s", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_0", "chunk_strategy": "fixed_size"}}, {"text": "seminars/workshops at TedEx, IITs, IIITs, NITs and global software \ncompanies. \nHehas been honored \u01c1ith the prestigio\u01b5s \ue003Disting\u01b5ished Al\u01b5mn\u01b5s \nA\u01c1ard\ue004 b\u01c7 IIT Kanp\u01b5r for his entrepreneurial, professional and \nacademic excellence. This award was given to top 50 alumni of IIT \nKanpur who have made significant contribution towards their \nprofession and betterment of society in the last 50 years. \nIn recognition of his immense contribution to IT education in India, he \nhas been a\u01c1arded the \ue003Best \ue001NET Technical Contrib\u01b5tor\ue004 and \ue003Most \nVal\u01b5able Professional\ue004 a\u01c1ards b\u01c7 Microsoft for \u03f1 s\u01b5ccessi\u01c0e \u01c7ears\ue001 \nYashavant holds a BE from VJTI Mumbai and M.Tech. from IIT Kanpur. \nHis current affiliations include being a Director of KICIT Pvt. Ltd. He can \nbe reached at kanetkar@kicit.com or through http://www.kicit.com. (http://www.kicit\n--- Page 5 ---\nvAboutAdityaKanetkar\nAditya is currently working as a Cloud\nSoftware Engineer at Microsoft, Redmond, \nUSA. \nHe has worked at multiple software", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_1", "chunk_strategy": "fixed_size"}}, {"text": "--- Page 5 ---\nvAboutAdityaKanetkar\nAditya is currently working as a Cloud\nSoftware Engineer at Microsoft, Redmond, \nUSA. \nHe has worked at multiple software \ncompanies in the past, including Oracle, \nRedfin, Amazon and Arista Networks. He has \nbeen designing distributed systems software \nfor the last fouryears.\nAditya holds a Bachelor's degree in Computer Science and Engineering \nfrom IIT Guwahati and a Master's degree in Computer Science from \nGeorgia Tech, Atlanta. His current passion is anything remotely \nconnected to Python, Machine Learning, Distributed Systems, Cloud \nComputing and C#. When not writing software, he is most likely to be \nfound on aBadminton court or watching a football game.\nAditya can bereached through http://www.kicit.com. (http://www.kicit.com.)\n--- Page 6 ---\nviPrefacetoThirdEdition\nProgramming landscape has changedsignificantly over the last few \nyears. Python is making inroads into every field that has anything to do", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_2", "chunk_strategy": "fixed_size"}}, {"text": "--- Page 6 ---\nviPrefacetoThirdEdition\nProgramming landscape has changedsignificantly over the last few \nyears. Python is making inroads into every field that has anything to do \nwith programming. Naturally, Python programming is a skill that one has \nto acquire, soonerthe better. \nIf you have no programming background and you are learning Python as \nyour first programming language you will find the book very simple to \nunderstand. Primary credit of this goes to the Python language\u0376it is \nvery simple for the beginner, yet very powerful for the expert who can \ntap into itspower.\nIf youhavesome acquaintance with aprogramming language, you need \nto get offthe ground with Python quickly. To do that you need to \nunderstand the similarities/differences in a feature that youhave used \nin other language(s)and new features that Python offers. In both \nrespects this book should help youimmensely. Instead of explaining a \nfeature with verbose text, wehave mentioned the key points about it as", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_3", "chunk_strategy": "fixed_size"}}, {"text": "respects this book should help youimmensely. Instead of explaining a \nfeature with verbose text, wehave mentioned the key points about it as \n'KanNotes'and explained those points with the help of programs.\nThe most important characteristic of this bookis its simplicity\u0376be it the \ncode or the text. You will also notice that very few programming \nexamples in this book are code fragments. We have realized that a \nprogram that act\u01b5all\u01c7 compiles and r\u01b5ns\ue005 helps impro\u01c0e one\ue002s \nunderstanding of a subject a great deal more, than just code snippets.\nExercisesare exceptionally useful to complete the reader\ue002s \nunderstanding of a topic. So you will find them at the end of each \nchapter. Please do attempt them. They will really make you battle-\nready.If you want solutions to these Exercisesthen take a look at our\nbook 'Let Us Python Solutions'.\nThe immense success of first edition of 'Let Us Python' has enthused us \nto pour ourbest efforts creating this thirdedition. Admittedly, in the", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_4", "chunk_strategy": "fixed_size"}}, {"text": "book 'Let Us Python Solutions'.\nThe immense success of first edition of 'Let Us Python' has enthused us \nto pour ourbest efforts creating this thirdedition. Admittedly, in the \nfirst two editionsthere were a few key places where the topic change \nwas a bit jarring. To address this issue many chapters have been \nreorganized, split or combined. In addition onenew chapterand three \nnew appendices have been added in this edition. \nWehave tried to write a Python book that makes reading it as much fun \nas the language is. Enjoy the book and your journey into the Python \nworld!\n--- Page 7 ---\nviiBriefContents\n1 Introduction to Python _______________________________1\n2 Getting Started______________________________________9\n3 Python Basics______________________________________ 17\n4 Strings ____________________________________________ 39\n5 Decision Control Instruction___________________________55\n6 Repetition Control Instruction _________________________ 69", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_5", "chunk_strategy": "fixed_size"}}, {"text": "4 Strings ____________________________________________ 39\n5 Decision Control Instruction___________________________55\n6 Repetition Control Instruction _________________________ 69\n7 Console Input/Output________________________________81\n8 Lists ______________________________________________ 91\n9 Tuples_____________________________________________109\n10Sets_______________________________________________121\n11 Dictionaries________________________________________ 131\n12 Comprehensions ____________________________________ 145\n13Functions__________________________________________157\n14Recursion __________________________________________175\n15Functional Programming _____________________________ 191\n16 Modulesand Packages _______________________________ 205\n17 Namespaces _______________________________________ 217\n18 Classes and Objects _________________________________ 227\n19Intricacies of Classes and Objects ______________________ 245", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_6", "chunk_strategy": "fixed_size"}}, {"text": "17 Namespaces _______________________________________ 217\n18 Classes and Objects _________________________________ 227\n19Intricacies of Classes and Objects ______________________ 245\n20 Containership and Inheritance ________________________ 257\n21 Iterators and Generators ____________________________ 277\n22 Exception Handling _________________________________ 299\n23 File Input/Output __________________________________ 317\n24 Miscellany ________________________________________ 333\n25 Concurrency andParallelism__________________________ 355\n26 Synchronization ____________________________________ 373\n--- Page 8 ---\nviiiAppendix A -Precedence Table________________________ 395\nAppendix B -Debugging in Python______________________ 397\nAppendix C -Chasing the Bugs_________________________ 401\nIndex_____________________________________________ 407\n--- Page 9 ---\nixContents\n1 Introduction toPython_____________________________1\nWhat is Python? 2\nReasons for Popularity 2\nWhat sets Python apart? 3", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_7", "chunk_strategy": "fixed_size"}}, {"text": "--- Page 9 ---\nixContents\n1 Introduction toPython_____________________________1\nWhat is Python? 2\nReasons for Popularity 2\nWhat sets Python apart? 3\nWhat can be done using Python? 3\nWho uses Python today? 4\nProgramming Paradigms 4\nFunctional Programming Model 5\nProcedural Programming Model 5\nObject-oriented Programming Model 6\nEvent-drivenProgramming Model 6\nExercises 7\n2 Getting Started __________________________________ 9\nPython Specification 10\nPythonInstallation under Windows 10\nPythonInstallation under Linux 11\nPython Resources 12\nThird-party Packages 12\nMore Sophisticated Tools 13\nWorking with Python 13\nPythonProgramming Modes 14\nDetermining Python Version 15\nExercises 15\n3 Python Basics____________________________________ 17\nIdentifiers and Keywords 18\nPython Types 18\nBasic Types 19\nInteger and Float Ranges 19\nVariable Type and Assignment 20\nArithmetic Operators 20\nOperation Nuances 21\nPrecedenceand Associativity 22\nConversions 23\nBuilt-in Functions 23\nBuilt-in Modules 24", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_8", "chunk_strategy": "fixed_size"}}, {"text": "Integer and Float Ranges 19\nVariable Type and Assignment 20\nArithmetic Operators 20\nOperation Nuances 21\nPrecedenceand Associativity 22\nConversions 23\nBuilt-in Functions 23\nBuilt-in Modules 24\nContainer Types 26\n--- Page 10 ---\nxPython Type Jargon 26\nComments and Indentation 27\nMulti-lining 27\nClasses and Objects 28\nMultiple Objects 29\nPrograms 30\nExercises 37\n4 Strings__________________________________________ 39\nWhat are Strings? 40\nAccessing String Elements 40\nString Properties 41\nBuilt-in Functions 42\nString Methods 42\nString Conversions 43\nString Comparisons 44\nPrograms 45\nExercises 52\n5 Decision Control Instruction_________________________55\nDecision Control Instruction 56\nNuances of Conditions 57\nLogical Operators 57\nConditional Expressions 58\nall( )and any( ) 59\nReceiving Input 59\npassStatement 60\nPrograms 60\nExercises 65\n6 Repetition ControlInstruction_______________________69\nRepetition Control Instruction 70\nUsage of whileLoop 70\nUsage of forLoop 71\nbreakand continue 73", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_9", "chunk_strategy": "fixed_size"}}, {"text": "passStatement 60\nPrograms 60\nExercises 65\n6 Repetition ControlInstruction_______________________69\nRepetition Control Instruction 70\nUsage of whileLoop 70\nUsage of forLoop 71\nbreakand continue 73\nElse Block of a Loop 73\nPrograms 74\nExercises 77\n7 Console Input/Output_____________________________ 81\nConsole Input 82\n--- Page 11 ---\nxiConsole Output 83\nFormatted Printing 83\nPrograms 85\nExercises 88\n8 Lists ____________________________________________ 91\nWhat are Lists? 92\nAccessing List Elements 92\nLooping inLists 93\nBasic List Operations 93\nUsing Built-in Functions on Lists 96\nList Methods 97\nSorting and Reversing 97\nList Varieties 98\nStack Data Structure 99\nQueue Data Structure 99\nPrograms 99\nExercises 105\n9 Tuples __________________________________________ 109\nWhat are Tuples? 110\nAccessing Tuple Elements 110\nLooping in Tuples 111\nBasic Tuple Operations 111\nUsing Built-in Functions on Tuples 112\nTuple Methods 113\nTuple Varieties 113\nPrograms 114\nExercises 119", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_10", "chunk_strategy": "fixed_size"}}, {"text": "Accessing Tuple Elements 110\nLooping in Tuples 111\nBasic Tuple Operations 111\nUsing Built-in Functions on Tuples 112\nTuple Methods 113\nTuple Varieties 113\nPrograms 114\nExercises 119\n10 Sets____________________________________________ 121\nWhat are Sets? 122\nAccessing Set Elements 123\nLooping in Sets 123\nBasic Set Operations 123\nUsing Built-in Functions on Sets 124\nSet Methods 124\nMathematical Set Operations 125\nUpdating Set Operations 126\nSet Varieties 126\nPrograms 126\n--- Page 12 ---\nxiiExercises 129\n11 Dictionaries ______________________________________131\nWhat are Dictionaries? 132\nAccessing Dictionary Elements 132\nLooping in Dictionaries 133\nBasic Dictionary Operations 133\nUsing Built-in Functions on Dictionaries 134\nDictionary Methods 135\nDictionaryVarieties 135\nPrograms 136\nExercises 141\n12 Comprehensions__________________________________145\nWhat are Comprehensions? 146\nList Comprehension 146\nSet Comprehension 147\nDictionary Comprehension 148\nPrograms 148\nExercises 154", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_11", "chunk_strategy": "fixed_size"}}, {"text": "Exercises 141\n12 Comprehensions__________________________________145\nWhat are Comprehensions? 146\nList Comprehension 146\nSet Comprehension 147\nDictionary Comprehension 148\nPrograms 148\nExercises 154\n13 Functions ________________________________________157\nWhat are Functions? 158\nCommunication with Functions 159\nTypes of Arguments 160\nUnpacking Arguments 163\nPrograms 164\nExercises 173\n14 Recursion ________________________________________175\nRepetitions 176\nRecursive Function 176\nWhen to use Recursion 177\nProblem as Similar Sub-problems 177\nRecursive Factorial Function 178\nProblem with Unknown Loops 179\nTypes of Recursion 181\nRecursion Limit 182\nIteration toRecursion 182\nPrograms 182\nExercises 188\n--- Page 13 ---\nxiii15 Functional Programming___________________________ 191\nFunctional Programming 192\nFunctions as First-classValues 192\nLambda Functions 193\nHigher Order Functions 194\nMap, Filter, Reduce 195\nmap( )Function 195\nfilter( )Function 196\nreduce( )Function 196", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_12", "chunk_strategy": "fixed_size"}}, {"text": "Functional Programming 192\nFunctions as First-classValues 192\nLambda Functions 193\nHigher Order Functions 194\nMap, Filter, Reduce 195\nmap( )Function 195\nfilter( )Function 196\nreduce( )Function 196\nUsing Lambda with map( ), filter( ), reduce( ) 197\nWhere are they Useful? 198\nPrograms 199\nExercises 203\n16 Modules and Packages_____________________________205\nThe Main Module 206\nMultiple Modules 206\nImporting a Module 207\nVariations of import 208\nSearch Sequence 208\nSame Code, Different Interpretation 209\nPackages 209\nThird-party Packages 210\nPrograms 211\nExercises 215\n17 Namespaces_____________________________________ 217\nSymbol Table 218\nNamespace 218\nglobals( )and locals( ) 219\nWhere to use them? 220\nInner Functions 221\nScope and LEGB Rule 222\nPrograms 223\nExercises 225\n18 Classes and Objects________________________________227\nProgramming Paradigms 228\nWhat are Classes and Objects? 228\nClasses and Objects in Programming 229\n--- Page 14 ---\nxivUser-defined Classes 229", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_13", "chunk_strategy": "fixed_size"}}, {"text": "18 Classes and Objects________________________________227\nProgramming Paradigms 228\nWhat are Classes and Objects? 228\nClasses and Objects in Programming 229\n--- Page 14 ---\nxivUser-defined Classes 229\nAccess Convention 231\nObject Initialization 232\nClass Variables and Methods 234\nvars( )and dir( )Functions 234\nMore vars( )and dir( ) 235\nPrograms 236\nExercises 242\n19 Intricacies of Classes and Objects ____________________ 245\nIdentifier Naming Convention 246\nCalling Functions and Methods 247\nOperator Overloading 248\nWhich Operators to Overload 249\nEverything is an Object 250\nImitating a Structure 252\nType Conversion 252\nPrograms 253\nExercises 256\n20 Containership and Inheritance_______________________259\nReuse Mechanisms 260\nWhich to use When? 260\nContainership 260\nInheritance 261\nWhat is Accessible where? 263\nisinstance( )and issubclass( ) 264\nThe objectclass 265\nFeatures of Inheritance 265\nTypes of Inheritance 265\nDiamond Problem 267\nAbstract Classes 268\nRuntime Polymorphism 269", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_14", "chunk_strategy": "fixed_size"}}, {"text": "isinstance( )and issubclass( ) 264\nThe objectclass 265\nFeatures of Inheritance 265\nTypes of Inheritance 265\nDiamond Problem 267\nAbstract Classes 268\nRuntime Polymorphism 269\nPrograms 269\nExercises 274\n21 Iterators and Generators___________________________ 277\nIterables and Iterators 278\nzip( )Function 278\nIterators 279\nUser-defined Iterators 281\n--- Page 15 ---\nxvGenerators 282\nWhich to use When? 283\nGenerator Expressions 283\nPrograms 284\nExercises 297\n22 Exception Handling________________________________299\nWhat may go Wrong? 300\nSyntax Errors 300\nExceptions 301\nHow to deal with Exceptions? 302\nHow to use try-except? 303\nNuances of tryand except 304\nUser-defined Exceptions 305\nelseBlock 308\nfinally Block 309\nException Handling Tips 309\nPrograms 309\nExercises 314\n23 File Input/Output _________________________________ 317\nI/O System 318\nFile I/O 318\nRead / Write Operations 319\nFile Opening Modes 320\nwithKeyword 321\nMoving within a File 321\nSerialization and Deserialization 322", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_15", "chunk_strategy": "fixed_size"}}, {"text": "I/O System 318\nFile I/O 318\nRead / Write Operations 319\nFile Opening Modes 320\nwithKeyword 321\nMoving within a File 321\nSerialization and Deserialization 322\nSerialization of User-defined Types 325\nFile and Directory Operations 326\nPrograms 327\nExercises 330\n24 Miscellany _______________________________________333\nDocumentation Strings 334\nCommand-line Arguments 335\nParsing of Command-line 336\nBitwise Operators 338\nAssertion 339\nDecorators 340\nDecorating Functions with Arguments 342\n--- Page 16 ---\nxviUnicode 345\nbytesDatatype 345\nCreate Executable File 347\nPrograms 348\nExercises 353\n25 Concurrency and Parallelism________________________ 355\nConcurrency and Parallelism 356\nWhat are Threads? 356\nConcurrency and Parallelism in Programming 357\nCPU-bound and I/O-bound Programs 358\nWhich to use When? 358\nConcurrency for Improving Performance 359\nTypes of Concurrencies 360\nThread Properties 361\nLaunching Threads 361\nPassing Parameters to a Thread 362\nPrograms 363\nExercises 370", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_16", "chunk_strategy": "fixed_size"}}, {"text": "Which to use When? 358\nConcurrency for Improving Performance 359\nTypes of Concurrencies 360\nThread Properties 361\nLaunching Threads 361\nPassing Parameters to a Thread 362\nPrograms 363\nExercises 370\n26 Synchronization__________________________________ 373\nSynchronization 374\nExamples of Sharing Resources 374\nExample of Communication between Threads 374\nMechanisms for Sharing Resources 375\nLock 375\nRLock 376\nSemaphore 377\nMechanisms for Inter-thread Communication 377\nEvent 377\nCondition 378\nPrograms 379\nExercises 393\nAppendix A -Precedence Table_____________________ 395\nAppendix B -Debugging in Python___________________ 397\nAppendix C -Chasing the Bugs_______________________401\nIndex ___________________________________________ 407\n--- Page 17 ---\nLet UsPython\n1Introduction to\nPython\nxWhat is Python? xFunctional Programming Model\nxReasons for Popularity xProcedural Programming Model\nxWhat sets Python apart? xObject-oriented Programming Model", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_17", "chunk_strategy": "fixed_size"}}, {"text": "Let UsPython\n1Introduction to\nPython\nxWhat is Python? xFunctional Programming Model\nxReasons for Popularity xProcedural Programming Model\nxWhat sets Python apart? xObject-oriented Programming Model\nxWhere is PythonUsed? xEvent-driven Programming Model\nxWho uses Python today? xExercises\nxProgramming Paradigms1\n\u201cWet your feet... \u201d\n--- Page 18 ---\n2 Let Us Python\nWhat is Python?\nxPython is a high-level programming language created by Guido Van \nRossum-fondly known as Benevolent Dictator For Life.\nxPython was first released in 1991. Today Python interpreters are \navailable for many Operating Systems including Windows and Linux.\nxPython programmers are often called Pythonists or Pythonistas.\nReasons for Popularity\nxThe\u018ce a\u018ce \u0190e\u01c0e\u018cal \u018cea\u0190on\u0190 fo\u018c P\u01c7\u019ahon\ue001\u0190 pop\u01b5la\u018ci\u019a\u01c7\ue002 The\u0190e incl\u01b5de\ue003\n(a)Free:\n-Python is free to use and distributeand issupported by \ncommunity.\n-Python interpreter is available for every major platform.\n(b)Software quality:\n-Better than traditional and scripting languages.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_18", "chunk_strategy": "fixed_size"}}, {"text": "-Python is free to use and distributeand issupported by \ncommunity.\n-Python interpreter is available for every major platform.\n(b)Software quality:\n-Better than traditional and scripting languages.\n-Readable code, hence reusable and maintainable.\n-Support for advance reuse mechanisms.\n(c)Developer productivity:\n-Much better than statically typed languages.\n-Much smaller code.\n-Less to type, debug and maintain.\n-No lengthy compile and link steps.\n(d)Program portability:\n-Python programs run unchanged on most platforms.\n-Python runs onevery major platform currently in use.\n-Porting program to a new platform usually need only cut and \npaste. This is true even for GUI, DB access, Web programming, \nOS interfacing, Directory access, etc.\n(e)Support libraries:\n-Strong library supportfrom Text pattern matching to \nnetworking.\n-Vast collection of third party libraries.\n-Libraries for Web site construction, Numeric programming, \nGame development, Machine Learning etc.\n--- Page 19 ---", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_19", "chunk_strategy": "fixed_size"}}, {"text": "networking.\n-Vast collection of third party libraries.\n-Libraries for Web site construction, Numeric programming, \nGame development, Machine Learning etc.\n--- Page 19 ---\nChapter 1: Introduction to Python 3\n(f)Component integration:\n-Can invoke C, C++ libraries and Java components.\n-Can communicate with frameworks such as COM, .NET.\n-Can interact over networks with interfaces like SOAP, XML-RPC, \nCORBA.\n-With appropriate glue code,Python can subclass C++, Java, C#.\nclasses, thereby extending the reach of the program.\n-Popularly used for product customization and extension.\n(g)Enjoyment:\n-Ease of use.\n-Built-in toolset.\n-Programming becomes pleasure than work.\nWhat sets Python apart?\n(a)Powerful:\n-Dynamictyping.\n-No variabledeclaration.\n-Automatic allocation and Garbage Collection.\n-Supports classes, modules and exceptions.\n-Permits componentizationand reuse.\n-Powerful containers -Lists, Dictionaries, Tuples, etc.\n(b)Ready-made stuff:", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_20", "chunk_strategy": "fixed_size"}}, {"text": "-Supports classes, modules and exceptions.\n-Permits componentizationand reuse.\n-Powerful containers -Lists, Dictionaries, Tuples, etc.\n(b)Ready-made stuff:\n-Support for operationslike joining, slicing, sorting, mapping, etc.\n-Powerful library.\n-Large collection of third-party utilities.\n(c)Ease of use:\n-Type and run.\n-No compile and link steps.\n-Interactive programming experience.\n-Rapid turnaround.\n-Programsare simpler, smaller and more flexible.\nWhere is Pythonused?\nxPython is used for multiple purposes. These include:\n(a)System programming\n(b)Building GUI applications\n(c)Internet scripting\n--- Page 20 ---\n4 Let Us Python\n(d)Component integration\n(e)Database programming\n(f)Rapid prototyping\n(g)Numericand Scientific programming\n(h)Game programming\n(i)Roboticsprogramming\nWho uses Python today?\nxMany organizations use Python for varied purposes. These include:\n(a)Google -In web search system\n(b)YouTube-Video Sharing service\n(c)Bit-torrent -Peer to Peer file sharing system", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_21", "chunk_strategy": "fixed_size"}}, {"text": "xMany organizations use Python for varied purposes. These include:\n(a)Google -In web search system\n(b)YouTube-Video Sharing service\n(c)Bit-torrent -Peer to Peer file sharing system\n(d)Intel, HP, Seagate, IBM, Qualcomm-Hardware testing \n(e)Pixar, Industrial Light and Magic -Movie animation \n(f)JP Morgan, Chase, UBS-Financial market forecasting \n(g)NASA, FermiLab-Scientific programming \n(h)iRobot -Commercial robot vacuum cleaners \n(i)NSA -Cryptographic and Intelligence analysis \n(j)IronPort-Email Servers \nProgramming Paradigms\nxParadigm means organization principle. It is also known as model.\nxProgramming paradigm/model is a style of building the structure \nand elements ofcomputer programs.\nxThere exist many programming models like Functional, Procedural, \nObject-oriented, Event-driven, etc. \nxMany languages facilitate programming in one or more paradigms. \nFor example, Python supports Functional, Procedural, Object-\noriented and Event-driven programming models.\n--- Page 21 ---", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_22", "chunk_strategy": "fixed_size"}}, {"text": "xMany languages facilitate programming in one or more paradigms. \nFor example, Python supports Functional, Procedural, Object-\noriented and Event-driven programming models.\n--- Page 21 ---\nChapter 1: Introduction to Python 5\nxThere are situations when Functional programming is the obvious \nchoice, and other situations were Procedural programming is the \nbetter choice.\nxParadigms arenot meant to be mutually exclusive. Asingle program \nmay use multiple paradigms. \nFunctional Programming Model\nxFunctional programming decomposes a problem into a set of \nfunctions. These functions provide the main source of logic in the\nprogram.\nxFunctions take input parameters and produce outputs. Python \nprovides functional programming techniques like lambda, map, \nreduce and filter. These are discussed in Chapter 15.\nxIn this model computation is treated as evaluation ofmathematical \nfunctions. For example, to get factorial value of a number, or nth\nFibonacci number we can use the following functions:", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_23", "chunk_strategy": "fixed_size"}}, {"text": "xIn this model computation is treated as evaluation ofmathematical \nfunctions. For example, to get factorial value of a number, or nth\nFibonacci number we can use the following functions:\nfactorial(n) = 1 if n == 0\n= n * factorial(n -1) if n > 0\nfibo(n) = 0 if n = 0\n= 1 if n = 1\n= fibo(n -2) + fibo(n -1) if n > 1 \nxThe output value of a function depends only on itsarguments, so \ncalling a function with the same value for an argument always \nproduces the same result. As a result, it is a good fit for parallel \nexecution.\nxNo function can have side effects on other variables (state remains \nunaltered).\nxFunctional programming model is often called a'Declarative'\nprogrammingparadigm as programming is done with expressionsor \ndeclarationsinstead ofstatements. \nProcedural Programming Model\nxProcedural programming solves the problem by implementing one \nstatement(a procedure) at a time. Thus it contains explicit steps that \nare executed in a specific order.\n--- Page 22 ---\n6 Let Us Python", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_24", "chunk_strategy": "fixed_size"}}, {"text": "statement(a procedure) at a time. Thus it contains explicit steps that \nare executed in a specific order.\n--- Page 22 ---\n6 Let Us Python\nxIt also uses functions, but these are not mathematical functionslike \nthe ones used in functional programming. Functionalprogramming \nfocuses onexpressions, whereas Proceduralprogramming focuses \nonstatements.\nxThe statements don't have values and instead modify the state of \nsome conceptual machine.\nxSame language expression can result in different values at different \ntimes depending on the global state of the executing program. Also, \nthe functions may change a program's state.\nxProcedural programming model is often called 'Imperative'\nprogrammingas it changes state with an explicit sequence of \nstatements.\nObject-oriented Programming Model\nxThis model mimicsthe real world by creatinginside the computer a \nmini-world of objects.\nxIn a University system objects can be VC, Professors, Non-teaching", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_25", "chunk_strategy": "fixed_size"}}, {"text": "Object-oriented Programming Model\nxThis model mimicsthe real world by creatinginside the computer a \nmini-world of objects.\nxIn a University system objects can be VC, Professors, Non-teaching \nstaff, students, courses, semesters, examinations, etc.\nxEach object has a state (values) and behavior (interface/methods). \nObjects get state and behavior based on the class from which it \ncreated.\nxObjects interact with one another bysending messages to each \no\u019ahe\u018c\ue004 i\ue002e\ue002 b\u01c7 calling each o\u019ahe\u018c\ue001\u0190 in\u019ae\u018cface methods.\nEvent-driven Programming Model\nxThis model is popularly used for programming GUI applications \ncontaining elements like windows, check boxes, buttons, combo-\nboxes, scroll bars, menus, etc.\nxWhen we interact with these elements (like clicking a button, or \nmoving the scrollbar or selecting a menu item) events occur and \nthese elements emit messages. There are listener methods which \nare registered with these GUI elements which react to these events.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_26", "chunk_strategy": "fixed_size"}}, {"text": "moving the scrollbar or selecting a menu item) events occur and \nthese elements emit messages. There are listener methods which \nare registered with these GUI elements which react to these events. \nxSince there is no guaranteed sequence in which events may occur \n(based on how we interact with GUI elements), the listeners should \nbe able to handle them in asynchronous manner.\n____________________________________________________________________\n--- Page 23 ---\nChapter 1: Introduction to Python 7\n[A]Answer the following:\n(a)Mention 5 fields in which Python is popularly used.\n(b)Where is event-driven programming popularly used?\n(c)Why Python is called portable language?\n(d)What is the single most important feature of different programming \nmodels discussed in this chapter?\n(e)Which of the following is not a feature of Python?\n-Statictyping\n-Dynamic typing\n-Run-time error handling through error numbers\n-Library support for containers like Lists, Dictionaries, Tuples", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_27", "chunk_strategy": "fixed_size"}}, {"text": "(e)Which of the following is not a feature of Python?\n-Statictyping\n-Dynamic typing\n-Run-time error handling through error numbers\n-Library support for containers like Lists, Dictionaries, Tuples\n(f)Give an example application of each of the following programming \nmodels:\n-Functional model\n-Procedural model\n-Object-oriented model\n-Event-driven model\n[B]State whether the following statements are True or False:\n(a)Python is free to use and distribute.\n(b)Same Python program can work on different OS -microprocessor \ncombinations.\n(c)It is possible to use C++ or Java libraries in a Python program.\n(d)In Python type of the variable is decided based on its usage.\n(e)Python cannot be used for building GUI applications.\n(f)Python supports functional, procedural, object-oriented and event-\ndriven programming models.\n(g)GUI applications are based on event-driven programming model.\n--- Page 24 ---\n8 Let Us Python\n(h)Functional programming model consists of interaction of multiple \nobjects.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_28", "chunk_strategy": "fixed_size"}}, {"text": "(g)GUI applications are based on event-driven programming model.\n--- Page 24 ---\n8 Let Us Python\n(h)Functional programming model consists of interaction of multiple \nobjects.\n[C]Match the followingpairs:\na. Functional programming 1. GUI element based interaction\nb. Event-driven programming 2. Interaction of objects\nc. Procedural programming 3. Statements\nd. OOP 4. Maths-like functions\n[D]Fill in the blanks:\n(a)Functional programming paradigm is also known as ________ \nprogramming model.\n(b)Procedural programming paradigm is also known as ________ \nprogramming model.\n(c)Python was created by _________.\n(d)Python programmers are often called _________.\n--- Page 25 ---\nLet UsPython\n9Getting Started\nxPython Specification xMore Sophisticated Tools\nxPython Installation under Windows xWorking with Python\nxPython Installation under Linux xPython Programming Modes\nxPython Resources xDetermining Python Version\nxThird-party Packages xExercises2\n\u201cOn your mark, set, go... \u201d\n--- Page 26 ---", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_29", "chunk_strategy": "fixed_size"}}, {"text": "xPython Installation under Linux xPython Programming Modes\nxPython Resources xDetermining Python Version\nxThird-party Packages xExercises2\n\u201cOn your mark, set, go... \u201d\n--- Page 26 ---\n10 Let Us Python\nPython Specification\nxPythonis a specification for a language that can be implemented in \ndifferent ways. There are many implementations of this specification \nwritten in different languages.\nxDifferent popular Python implementationsare:\nCPython -is the reference implementation, written in C.\nPyPy -Written in a subset of Python language called RPython.\nJython -Written in Java.\nIronPython -Written in C#.\nxAll the implementations are compilers as well as interpreters. The \ncompiler converts the Python program into intermediate bytecode. \nThis bytecode is then interpreted by the interpreter.\nPythonInstallationunder Windows\nxPython has evolved over the years. At the time of writing of this \nedition the latest version for Windows and Linux environments was \nPython 3.8.2.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_30", "chunk_strategy": "fixed_size"}}, {"text": "PythonInstallationunder Windows\nxPython has evolved over the years. At the time of writing of this \nedition the latest version for Windows and Linux environments was \nPython 3.8.2. \nxPython is not shipped as part of Windows OS. So we need to install it \nseparately.For this we need to download the Python installer from \nwww.python.org/downloads/.  (http://www.python.org/downloads/. )\nxWhile downloading ensure that you choose the appropriate installer \nfrom the following, based on whether you wish to install it on a 32-\nbit machine or a 64-bit machine:\n64-bit machine: Download Windows x86-64 executable installer\n32-bit machine: Download Windows x86 executable installer\nxOnce you have chosen and downloaded an installer, execute it by \ndouble-clicking on the downloaded file. A dialog shown in Figure 2.1 \nwill appearon the screen.\nxIn this dialog check the check box 'Add Python 3.8 to PATH'to \nensure that the interpreter will be placed in your execution path.\n--- Page 27 ---", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_31", "chunk_strategy": "fixed_size"}}, {"text": "will appearon the screen.\nxIn this dialog check the check box 'Add Python 3.8 to PATH'to \nensure that the interpreter will be placed in your execution path.\n--- Page 27 ---\nChapter2: GettingStarted 11\nFigure 2.1\nxClick on 'Install Now' and the installation will happen in a few \nminutes. Python files will get installed in the directory: \nC:\\Users\\Kanetkar\\AppData\\Local\\Programs\\Python\\Python38-32\nxIn this path \u2018Kanetkar\u2019 will be substituted by your user name and \n\u2018Python\u03ef\u03f4-32\u2019 by version number of Python installation that you \nhave downloaded and installed.\nxIf you forget to check the check box, you can add the path \nmentioned above to PATH variable through Control Panel | System | \nEnvironment Variables | Edit. The PATH variable already contains \nmany semicolon separated values. Append the above path to \nexisting values.\nPythonInstallationunder Linux\nxMost Linux distributions already contain Python in them. However, \nthe installed Python version may not be the latest one. You can", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_32", "chunk_strategy": "fixed_size"}}, {"text": "existing values.\nPythonInstallationunder Linux\nxMost Linux distributions already contain Python in them. However, \nthe installed Python version may not be the latest one. You can \ncheck the version as shown below:\n$ python3 --version\nxIf you find that the version is not the latest one, then you can install \nit using the command:\n$ sudo apt-get install python3.8\n--- Page 28 ---\n12 Let Us Python\nPython Resources\nxPython source code, binaries and documentation is available at:\n-Python official website: www.python.org (http://www.python.org)\n-Documentation website: www.python.org/doc (http://www.python.org/doc)\nxProgram development in Python can be done in 3 ways:\n-Using built-in IDLE.\n-Using third-party IDEs.\n-Using online Python shells.\nxThird-party development tools and the links from where they can be \ndownloaded are given below:\n-NetBeans IDE for Python: \nhttps://download.netbeans.org/netbeans/6.5/python/ea/ (https://download.ne\n-PyCharm IDE for Python:", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_33", "chunk_strategy": "fixed_size"}}, {"text": "downloaded are given below:\n-NetBeans IDE for Python: \nhttps://download.netbeans.org/netbeans/6.5/python/ea/ (https://download.ne\n-PyCharm IDE for Python: \nhttps://www.jetbrains.com/pycharm (https://www.jetbrains.com/pycharm)\n-Visual Studio Code IDE: \nhttps://code.visualstudio.com/download (https://code.visualstudio.com/downlo\nxIf you do not wish to install any Python development tool on your \nmachine, then you can use any of the following online Python shells:\n-https://www.python.org/shell/  (https://www.python.org/shell/ )\n-https://ideone.com/  (https://ideone.com/ )\n-https://repl.it/languages/python3  (https://repl.it/languages/python3 )\nThird-party Packages\nxPythonistas in Python community create packages (libraries)and \nmakes it available for use for other programmers. They use PyPI\u2014\nPython Package Index (www.pypi.org)  (http://www.pypi.org) ) to distribute their packages. \nPyPI maintains the list of such third-party Python packages available.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_34", "chunk_strategy": "fixed_size"}}, {"text": "Python Package Index (www.pypi.org)  (http://www.pypi.org) ) to distribute their packages. \nPyPI maintains the list of such third-party Python packages available. \nxThere are third-party packages available for literally doing everything \nunder the sun.Some packages that arepopularly used for creating \nData Science applications include:\n-NumPy: Advanced mathematical operations library with support \nfor large multi-dimensional arrays and matrices.\n-SciPy:Scientific computing library for optimization, integration, \ninterpolation, signal processing, image processing, etc.\n-Pandas:Library for manipulating numerical tables and time \nseries.\n--- Page 29 ---\nChapter2: GettingStarted 13\n-MatPlotLib:2D and 3D Data visualization library.\n-OpenCV:Open source Computer vision library.\nxYou too can register at PyPI and upload your packages there. You \nshould follow the guidelines given at www.pypi.org (http://www.pypi.org) to create the \npackage, build it and upload it to the Python Package Index.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_35", "chunk_strategy": "fixed_size"}}, {"text": "should follow the guidelines given at www.pypi.org (http://www.pypi.org) to create the \npackage, build it and upload it to the Python Package Index.\nxpip is a commonly used tool for installing packages from PyPI.This \ntool gets installed when you install Python.\nMore Sophisticated Tools\nxMany tools have come into existence to help Python programmers \nbuild and document their Data Science and Artificial Intelligence \napplications. These include:\n-Jupyter Notebook -It is a very flexible browser-based tool that \nlets us to interactively work with Python (and many other \nlanguages). It lets us put our Python code, output of the code \nand any kind of visualization or plot etc. in the same document \ncalled Notebook.It is a great tool doing modular program \ndevelopment.\n-Google Colab -This tool provides a free Jupyter notebook \nenvironment to execute code on Google's cloud servers. As a \nresult, you can leverage the power of Google's hardware.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_36", "chunk_strategy": "fixed_size"}}, {"text": "development.\n-Google Colab -This tool provides a free Jupyter notebook \nenvironment to execute code on Google's cloud servers. As a \nresult, you can leverage the power of Google's hardware.\n-Spyder -This tool provides a Scientific PYthon Development \nEnviRonment with sophisticated testing and debugging features.\nxBoth Jupyter and Spyder are part of a very popular software \ndistribution called Anaconda. So once you download and install \nAnaconda, you get Jupyter and Spyder ready-made.\nWorking with Python\nxOnce Python is installed, program development can be done using \nthe built-in Python IntegratedDevelopment and Learning \nEnvironment (IDLE). \nxIDLE is a good development tool. It offers handy features like syntax \nhighlighting, context-sensitive help and debugging.\nxSyntax highlighting feature display keywords, functions, methods \nand strings in different colors making it easy to identify them.\n--- Page 30 ---\n14 Let Us Python", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_37", "chunk_strategy": "fixed_size"}}, {"text": "xSyntax highlighting feature display keywords, functions, methods \nand strings in different colors making it easy to identify them.\n--- Page 30 ---\n14 Let Us Python\nxContext-sensitive help can be obtained by pressing Ctrl Space \nwherever you need help as you type the program. This is immensely \nuseful since it is almost impossible to remember names of all \nfunctions and methods and their parameters.\nxDebugger lets you locate any logical errors that you may have \ncommitted in your program byallowing you trace the flow of \nexecution of the program. This tracing can be done a step at a time \nby setting up break points and by single stepping through the \nprogram. As you do so IDLE lets you watch the values of different \nvariables as they change during execution.\nPython Programming Modes\nxPython can be used in two modes:\n-Interactive mode -used for exploring Python syntax, seek help \nand debug short programs.\n-Script mode -used for writing full-fledged Python programs.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_38", "chunk_strategy": "fixed_size"}}, {"text": "xPython can be used in two modes:\n-Interactive mode -used for exploring Python syntax, seek help \nand debug short programs.\n-Script mode -used for writing full-fledged Python programs.\nxBoth modes are supported by IDLE (Python Integrated Development \nand Learning Environment).\nxTo use IDLE in Interactive mode:\n-Locate it in Windows by typing IDLE in Windows search bar and \nhit enter, or double click the IDLE icon. \n-It will open the Python shell window showing >>> Python shell \nprompt. \n-Execute the following Python code at this prompt.\n>>> print('Keep calm and bubble on')\n-It will display the message 'Keep calm and bubble on' followed \nby the >>> prompt.\nxTo use IDLE in Script mode:\n-Launch IDLE. In the IDLE shell window from the menu select File \n| New File. A new window will open. Type the following script in \nit:\nprint('Those who can\u0396t laugh at themselves\u2026')\nprint('leave the job to others.') \n--- Page 31 ---\nChapter2: GettingStarted 15", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_39", "chunk_strategy": "fixed_size"}}, {"text": "| New File. A new window will open. Type the following script in \nit:\nprint('Those who can\u0396t laugh at themselves\u2026')\nprint('leave the job to others.') \n--- Page 31 ---\nChapter2: GettingStarted 15\n-Using File | Save and save the script under the name 'Test.py'. \n-Execute the script from the Run menu or using F5.The two \nmessages will get printed. \nxInstead of IDLE if you decide to use NetBeans or Visual Studio Code \nfor program development then follow the steps given below:\n-Create a new Python project \u2018Test\u2019.\n-Type the script in Test.py.\n-Execute the script using F6 in NetBeans or Ctrl F5 in Visual Studio \nCode.\n-On execution it will print the two lines and then you areready to \ncreate another project and another script in it.\nDetermining Python Version \nxPython has evolved over the years. You can determine the version \ninstalled on your machine through a simple Python script:\nimport sys\nprint(sys.version)\n____________________________________________________________________", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_40", "chunk_strategy": "fixed_size"}}, {"text": "installed on your machine through a simple Python script:\nimport sys\nprint(sys.version)\n____________________________________________________________________\n[A]Answer the followingquestions:\n(a)What do the prompts C:\\>, $ and >>> signify?\n(b)In which two modescanIDLE be used?\n(c)What is the purpose of the two programming modes offered by \nIDLE?\n(d)How can third party libraries be used in a Python program?\n[B]Match the followingpairs:\na. pip 1. Advanced mathematical operations\nb. Jupyter 2. Scientific computing\nc. Spyder 3. Manipulate numerical tables\nd. PyPI 4. Visualization\n--- Page 32 ---\n16 Let Us Python\ne. NumPy 5. Computer vision\nf. SciPy 6. Package installation tool\ng. Pandas 7. Build and document applications\nh. MatPlotLib 8. Scientific library\ni. OpenCV 9. Python package index\n[C]State whether the following statements are True or False:\n(a)Python is a specificationthat can be implemented through \nlanguages like Python, C#, Java, etc.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_41", "chunk_strategy": "fixed_size"}}, {"text": "i. OpenCV 9. Python package index\n[C]State whether the following statements are True or False:\n(a)Python is a specificationthat can be implemented through \nlanguages like Python, C#, Java, etc.\n(b)CPython is implementation of Python specification, written in C.\n(c)Python program is first compiled into byte code, which is then \ninterpreted.\n(d)Most Linux distributions already contain Python.\n(e)Windows system doesn't contain Python and it needs to be \nseparately installed.\n(f)Python programs can be built using IDLE, NetBeans, PyCharm and \nVisual Studio Code.\n(g)Third-party Python packages are distributed using PyPI.\n--- Page 33 ---\nLet UsPython\n17Python Basics\nxIdentifiers and Keywords xBuilt-in Modules\nxPython Types xContainer Types\nxBasic Types xPython Type Jargon\nxInteger and Float Ranges xComments and Indentation\nxVariable Type and Assignment xMulti-lining\nxArithmetic Operators xClasses and Objects\nxOperation Nuances xMultiple Objects\nxPrecedenceand Associativity xPrograms", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_42", "chunk_strategy": "fixed_size"}}, {"text": "xVariable Type and Assignment xMulti-lining\nxArithmetic Operators xClasses and Objects\nxOperation Nuances xMultiple Objects\nxPrecedenceand Associativity xPrograms\nxConversions xExercises\nxBuilt-in Functions3\n\u201cWell begun is half done... \u201d\n--- Page 34 ---\n18 Let Us Python\nIdentifiers and Keywords\nxPython is a case sensitive language.\nxPython identifier is a name used to identify a variable, function,\nclass, module, or other object.\nxRules forcreating identifiers:\n-Startswith alphabet or an underscore.\n-Followed by zero or more letters, _ , and digits.\n-keyword cannot be used as identifier.\nxAll keywordsarein lowercase. \nxPython has 33 keywords shown in Figure 3.1.\nFalse continue from not\nNone def global or\nTrue del if pass\nand elif import raise\nas else in return\nassert except is try\nbreak finally lambda while\nclass for nonlocal with\nyield\nFigure3.1\nxYou can printa list of Python keywords through the statements:\nimport keyword # makes the module 'keyword' available", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_43", "chunk_strategy": "fixed_size"}}, {"text": "break finally lambda while\nclass for nonlocal with\nyield\nFigure3.1\nxYou can printa list of Python keywords through the statements:\nimport keyword # makes the module 'keyword' available\nprint(keyword.kwlist) # syntax modulename.object/function\nPython Types\nxPython supports 3 categories of data types:\nBasic types-int, float, complex,bool, string, bytes\nContainer types -list, tuple, set, dict\nUser-definedtypes-class \n--- Page 35 ---\nChapter3: PythonBasics 19\nxOut of these, basic types will be covered in this chapter in detail. \nContainer types will be covered briefly. A separate chapter is \ndedicated to each container type, where they are covered in great \ndetail. User-defined types will not be covered in this chapter. \nChapter 17 discusseshow to create and use them. \nBasic Types\nxExamples of different basic typesare given below:\n# int can be expressed in binary, decimal, octal, hexadecimal\n# binary starts with 0b/0B, octal with 0o/0O, hex with 0x/0X\n0b10111, 156, 0o432, 0x4A3", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_44", "chunk_strategy": "fixed_size"}}, {"text": "# int can be expressed in binary, decimal, octal, hexadecimal\n# binary starts with 0b/0B, octal with 0o/0O, hex with 0x/0X\n0b10111, 156, 0o432, 0x4A3 \n# float can be expressed in fractional or exponential form\n-314.1528, 3.141528e2, 3.141528E2\n# complex contains real and imaginary part\n3 + 2j, 1 + 4J \n# bool can take any of the two Boolean valuesboth starting in caps\nTrue, False\n# string is an immutable collection of Unicode charactersenclosed\n# within ' ', \" \" or \"\"\" \"\"\".\n'Razzmatazz', \"Razzmatazz\", \"\"\"Razzmatazz\"\"\"\n# bytes represent binary data\nb'\\xa1\\xe4\\x56' # represents 3 bytes with hex values a1a456\nxType of particular data can be checked using a function called type( )\nas shown below:\nprint(type(35)) # prints <class 'int'>\nprint(type(3.14)) # prints <class 'float'>\nInteger and Float Ranges\nxintcan be of any arbitrary size\na = 123\nb = 1234567890\nc = 123456789012345678901234567890\nPythonhas arbitrary precision integers. Hence you can create as big", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_45", "chunk_strategy": "fixed_size"}}, {"text": "Integer and Float Ranges\nxintcan be of any arbitrary size\na = 123\nb = 1234567890\nc = 123456789012345678901234567890\nPythonhas arbitrary precision integers. Hence you can create as big \nintegers as you want. Moreover,arithmetic operations canbe \nperformed on integers without worrying aboutoverflow/underflow.\n--- Page 36 ---\n20 Let Us Python\nxFloats are represented internally in binary as 64-bit double-precision \nvalues, as per theIEEE 754standard. As per this standard, the \nmaximum value a float can have is approximately 1.8 x 10308. A \nnumber greater than this is represented as inf(short for infinity).\nxMany floats cannot be represented 'exactly'in binary form. So the \ninternal representation is often an approximation of the actual \nvalue. \nxThe difference between the actual value and the represented value \nis very small and should not usually cause significant problems.\nVariable Type and Assignment\nxThere is no need to define type of a variable. During execution the", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_46", "chunk_strategy": "fixed_size"}}, {"text": "is very small and should not usually cause significant problems.\nVariable Type and Assignment\nxThere is no need to define type of a variable. During execution the \ntype of the variable is inferred from the context in which it is being \nused. Hence Python is called dynamically-typed language. \na = 25 # type of a is inferred as int\na = 31.4 # type of a isinferred as float\na = 'Hi' # type of a is inferred as str\nxType of a variable can be checked using the built-in function type( ).\na = 'Jamboree'\nprint(type(a))# type will be reported as str\nxSimple variable assignment:\na = 10 \npi = 3.14 \nname = 'Sanjay'\nxMultiple variable assignment:\na = 10 ; pi = 31.4 ; name = 'Sanjay' # use ; as statement separator\na, pi, name = 10, 3.14, 'Sanjay'\na = b = c = d = 5 \nArithmetic Operators\nxArithmetic operators: + -* / % // **\na = 4 /2 # performs true division and yields a float 2.0\na = 7 % 2 # % yields remainder 1\n--- Page 37 ---\nChapter3: PythonBasics 21", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_47", "chunk_strategy": "fixed_size"}}, {"text": "Arithmetic Operators\nxArithmetic operators: + -* / % // **\na = 4 /2 # performs true division and yields a float 2.0\na = 7 % 2 # % yields remainder 1\n--- Page 37 ---\nChapter3: PythonBasics 21\nb = 3 ** 4 # ** yields 3 raised to 4 (exponentiation)\nc = 4 // 3 # // yields quotient 1 after discarding fractional part\nxIn-place assignment operators offer a good shortcutfor arithmetic \noperations. These include += -= *= /= %= //= **=.\na **= 3 # same as a = a ** 3\nb %= 10 # same as b = b % 10 \nOperation Nuances\nxOn performing floor division a // b, result is the largest integer which \nis less than or equal to the quotient. //is called floor division \noperator.\nprint(10 // 3) # yields 3\nprint(-10 // 3) # yields -4\nprint(10 // -3) # yields -4\nprint(-10 // -3) # yields 3\nprint(3 // 10) # yields 0\nprint(3 // -10) # yields -1\nprint(-3 // 10) # yields -1\nprint(-3 // -10) # yields 0\nIn -10 // 3, multiple of 3 which will yield -10 is -3.333, whose floor \nvalue is -4.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_48", "chunk_strategy": "fixed_size"}}, {"text": "print(3 // 10) # yields 0\nprint(3 // -10) # yields -1\nprint(-3 // 10) # yields -1\nprint(-3 // -10) # yields 0\nIn -10 // 3, multiple of 3 which will yield -10 is -3.333, whose floor \nvalue is -4.\nIn 10 // -3, multiple of -3 which will yield 10 is -3.333, whose floor \nvalue is -4.\nIn -10 // -3, multiple of -3 which will yield -10 is 3.333, whose floor \nvalue is 3.\nxprint()is a function which is used for sending output to screen. Iy \ncan be used in many forms. They are discussed in Chapter 7.\nxOperation a % bis evaluated as a -(b * (a // b)). This can be best \nunderstood using the following examples:\nprint(10 % 3) # yields 1\nprint(-10 % 3) # yields 2\nprint(10 % -3) # yields -2\nprint(-10 % -3) # yields -1\nprint(3 % 10) # yields 3\nprint(3 % -10) # yields -7\n--- Page 38 ---\n22 Let Us Python\nprint(-3 % 10) # yields 7\nprint(-3 % -10) # yields -3\nSince a % bis evaluated as a-(b* (a// b)),\n-10 % 3 is evaluated as -10-(3* (-10// 3)), which yields 2", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_49", "chunk_strategy": "fixed_size"}}, {"text": "--- Page 38 ---\n22 Let Us Python\nprint(-3 % 10) # yields 7\nprint(-3 % -10) # yields -3\nSince a % bis evaluated as a-(b* (a// b)),\n-10 % 3 is evaluated as -10-(3* (-10// 3)), which yields 2\n10 % -3 is evaluated as 10-(-3* (10// -3)), which yields -2\n-10 % -3 is evaluated as -10-(-3* (-10// -3)), which yields -1\nxMathematical rule a / bx cis same as a x c / bholds, but not always.\n# following expressions give same results\na = 300 / 100 * 250\na = 300 * 250 / 100\n# However, these don't\nb = 1e210 / 1e200 * 1e250\nb = 1e210 * 1e250 / 1e200 # gives INF\nxSince True is 1 and False is 0, they can be added.\na = True + True # stores 2\nb = True + False # stores 1\nPrecedenceand Associativity\nxWhen multiple operators are used in an arithmetic expression, it is \nevaluated on the basis of precedence (priority) of the operators \nused.\nxOperators in decreasing order of their priority (PEMDAS):\n( ) # Parentheses\n** # Exponentiation\n*, /, //, % # Multiplication, Division\n+, - # Addition, Subtraction", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_50", "chunk_strategy": "fixed_size"}}, {"text": "used.\nxOperators in decreasing order of their priority (PEMDAS):\n( ) # Parentheses\n** # Exponentiation\n*, /, //, % # Multiplication, Division\n+, - # Addition, Subtraction\nxIf there is a tie between operators of same precedence, it is settled \nusing associativity of operators. \nxEach operator has either left to right associativity or right to left \nassociativity.\nxIn expression c = a * b / c, * is done before / since arithmetic \noperators have left to right associativity.\n--- Page 39 ---\nChapter3: PythonBasics 23\nxA complete list of Python operators, their priority and associativity is \ngiven in Appendix A.\nConversions\nxMixedmode operations:\n-Operationbetween intand floatwill yield float.\n-Operation between intand complexwill yield complex.\n-Operation between floatand complexwill yield complex.\nxWe can convert one numeric type to another using built-in functions \nint(), float(), complex()and bool().\nxType conversions:\nint(float/numeric string) # from float/numeric string to int", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_51", "chunk_strategy": "fixed_size"}}, {"text": "xWe can convert one numeric type to another using built-in functions \nint(), float(), complex()and bool().\nxType conversions:\nint(float/numeric string) # from float/numeric string to int\nint(numeric string, base) # from numeric string to int in base\nfloat(int/numeric string) # from int/numeric string to float\nfloat(int) # from int to float\ncomplex(int/float) # convert to complex with imaginary part 0\ncomplex(int/float, int/float) # convert to complex\nbool(int/float) # from int/float to True/False (1/0)\nstr(int/float/bool) # converts to string\nchr(int) # yields character corresponding to int\nxint( )removes the decimal portionfrom the quotient, so always \nrounds towards zero.\nint(3.33) # yields 3\nint(-3.33) # yields -3\nBuilt-in Functions\nxPython has many built-in functions that are always available in any \npart of the program. The print( )function that we have been using to \nsend output to screen is a built-in function.\nxHelp about any built-in function is available using help(function).", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_52", "chunk_strategy": "fixed_size"}}, {"text": "part of the program. The print( )function that we have been using to \nsend output to screen is a built-in function.\nxHelp about any built-in function is available using help(function).\nxBuilt-in functions that are commonly used with numbers are given \nbelow:\nabs(x) # returns absolute value of x\npow(x, y) # returns value of x raised to y\nmin(x1, x2,...) # returns smallest argument\n--- Page 40 ---\n24 Let Us Python\nmax(x1, x2,...) # returns largest argument\ndivmod(x, y) # returns a pair(x// y, x% y)\nround(x [,n]) # returns x rounded to n digits after .\nbin(x) # returns binary equivalentof x\noct(x) # returns octal equivalentof x\nhex(x) # returns hexadecimal equivalent of x\nxFollowing Python program shows how to use some of these built-in \nfunctions:\na = abs(-3) # assigns 3to a\nprint(min(10, 20, 30, 40)) # prints 10\nprint(hex(26)) # prints 1a\nBuilt-in Modules\nxApart from built-in functions, Python provides many built-in \nmodules. Each module contains many functions.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_53", "chunk_strategy": "fixed_size"}}, {"text": "print(min(10, 20, 30, 40)) # prints 10\nprint(hex(26)) # prints 1a\nBuilt-in Modules\nxApart from built-in functions, Python provides many built-in \nmodules. Each module contains many functions. \nxFor performing sophisticated mathematical operations we can use \nthe functions present in built-in modules math, cmath , random, \ndecimal.\nmath -many useful mathematics functions.\ncmath -functions for performing operations on complex numbers.\nrandom -functions related to random number generation.\ndecimal -functions for performing precise arithmetic operations.\nxMathematical functions in mathmodule:\npi, e # values of constants pi and e\nsqrt(x) # square root of x\nfactorial(x) # factorial of x\nfabs(x) # absolute value of float x\nlog(x) # natural log of x (log to the base e)\nlog10(x) # base-10 logarithm of x\nexp(x) # e raised to x\ntrunc(x) # truncate to integer\nceil(x) # smallest integer >= x\nfloor(x) # largest integer <= x\nmodf(x) # fractional and integer parts of x\n--- Page 41 ---", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_54", "chunk_strategy": "fixed_size"}}, {"text": "exp(x) # e raised to x\ntrunc(x) # truncate to integer\nceil(x) # smallest integer >= x\nfloor(x) # largest integer <= x\nmodf(x) # fractional and integer parts of x\n--- Page 41 ---\nChapter3: PythonBasics 25\nxround()built-in function can round to a specific number of decimal \nplaces, whereas mathmodule's library functions trunc(), ceil()and \nfloor()always round to zero decimal places.\nxTrigonometric functions in mathmodule:\ndegrees(x) # radians to degrees\nradians(x) # degrees to radians\nsin(x) # sine of x radians\ncos(x) # cosine of x radians\ntan(x) # tan of x radians\nsinh(x) # hyperbolic sine of x\ncosh(x) # hyperbolic cosine of x\ntanh(x) # hyperbolic tan of x\nacos(x) # cos inverse of x, in radians\nasin(x) # sine inverse of x, in radians\natan(x) # tan inverseof x, in radians\nhypot(x, y) # sqrt(x * x + y * y)\nxRandom number generation functions from randommodule:\nrandom( ) # random number between 0 and 1\nrandint(start, stop) # random number in the range", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_55", "chunk_strategy": "fixed_size"}}, {"text": "hypot(x, y) # sqrt(x * x + y * y)\nxRandom number generation functions from randommodule:\nrandom( ) # random number between 0 and 1\nrandint(start, stop) # random number in the range\nseed( ) # sets current time as seed forrandom number generation \nseed(x) # sets x as seed for random number generation logic\nxTo use functions present in a module, we need to import the module \nusing the importstatement.\nxFollowing Python program shows how to use some of the functions \nof mathmodule and randommodule:\nimport math\nimport random\nprint(math.factorial(5)) # prints 120\nprint(math.degrees(math.pi)) # prints 180.0\nprint(random.random( )) # prints 0.8960522546341796\nxThere are many built-in functions and many functions in each built-\nin module. It is easy to forget the names of the functions. We can \nget a quick list of them using the following program:\nimport math\nprint(dir(__builtins__)) # 2 underscores before and after builtins\n--- Page 42 ---\n26 Let Us Python\nprint(dir(math))\nContainer Types", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_56", "chunk_strategy": "fixed_size"}}, {"text": "get a quick list of them using the following program:\nimport math\nprint(dir(__builtins__)) # 2 underscores before and after builtins\n--- Page 42 ---\n26 Let Us Python\nprint(dir(math))\nContainer Types\nxContainer types typically refer to multiple values stored together. \nExamples of different basic types are given below:\n# list is a indexed collection of similar/dissimilar entities\n[\u03ed\u03ec, \u03ee\u03ec, \u03ef\u03ec, \u03ee\u03ec, \u03ef\u03ec, \u03f0\u03ec, \u03f1\u03ec, \u03ed\u03ec], ['She', 'sold', \u03ed\u03ec, 'shells'\u2019]\n# tuple is an immutable collection\n('Sanjay', 34, 4500.55), ('Let Us Python', 350, 195.00)\n# set is a collection of unique values\n{10, 20, 30, 40}, {'Sanjay', 34, 45000}\n# dict is a collection of key-value pairs, with unique keyenclosed in ' '\n{'ME101' : 'Strength of materials', 'EE101' : 'Electronics'}\nxValues in a list and tuple can be accessed using their position in the \nlist or tuple. Values in a set can be accessed using a forloop\n(discussed in Chapter 6). Values in a dictionary can be accessed using", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_57", "chunk_strategy": "fixed_size"}}, {"text": "list or tuple. Values in a set can be accessed using a forloop\n(discussed in Chapter 6). Values in a dictionary can be accessed using \na key. This is shown inthe following program:\nlst = [10, 20, 30, 20, 30, 40, 50, 10]\ntpl = ('Let Us Python', 350, 195.00)\ns = {10, 20, 30, 40}\ndct = {'ME101' : 'SOM', 'EE101' : 'Electronics'}\nprint(lst[0], tpl[2]) # prints 10 195.0\nprint(dct['ME101']) # prints SOM\nPython Type Jargon\nxOften following terms are used while describing Python types:\nCollection-a generic term for container types.\nIterable-means a collectionthat can be iterated over using a loop.\nOrderedcollection -elements are stored in the same order inwhich \nthey are inserted. Hence its elementscan be accessed using an \nindex, i.e. its position in the collection.\nUnorderedcollection -elements are not stored in the same orderin \nwhich they are inserted. So we cannot predict at which position a \nparticular element is present. So we cannot accessits elements using \na position based index.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_58", "chunk_strategy": "fixed_size"}}, {"text": "which they are inserted. So we cannot predict at which position a \nparticular element is present. So we cannot accessits elements using \na position based index.\n--- Page 43 ---\nChapter3: PythonBasics 27\nSequenceis the generic term for an ordered collection.\nImmutable-means unchangeablecollection.\nMutable-means changeable collection.\nxLet us now see which of these terms apply to types that we have \nseen so far.\nString -ordered collection, immutable, iterable.\nList -ordered collection, mutable, iterable.\nTuple -ordered collection, immutable, iterable.\nSet -unordered collection, mutable, iterable.\nDictionary -unordered collection, mutable, iterable.\nComments and Indentation\nxComments begin with #.\n# calculate gross salary \ngs = bs + da + hra + ca \nsi = p* n * r / 100 # calculate simple interest\nxMulti-line comments should be written in a pair of ''' or \"\"\".\n''' Additional program: Calculate bonus to be paid\nURL: https://www.ykanetkar.com (https://www.ykanetkar.com)", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_59", "chunk_strategy": "fixed_size"}}, {"text": "xMulti-line comments should be written in a pair of ''' or \"\"\".\n''' Additional program: Calculate bonus to be paid\nURL: https://www.ykanetkar.com (https://www.ykanetkar.com)\nAuthor: Yashavant, Date: 18 May2020 '''\nxIndentation matters! Don\u2019t use it casually. Following code will report \nanerror'Unexpected indent'.\na = 20 \nb =45 \nMulti-lining\nxIf statements are long they can be written as multi-lines with each \nline except the last ending with a \\.\ntotal = physics + chemistry + maths + \\\nenglish + Marathi + history + \\\ngeography + civics \nxMulti-line statements within [ ], { }, or( ) don't need \\.\n--- Page 44 ---\n28 Let Us Python\ndays = [ 'Monday', 'Tuesday', 'Wednesday', Thursday', \n'Friday', 'Saturday', 'Sunday' ] \nClasses and Objects\nxIn Python every type is a class. So int, float, complex , bool, str, list, \ntuple, set, dictare all classes. These are ready-made classes. Python \nalso permits us to create user-defined classes as we would see in \nChapter 18.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_60", "chunk_strategy": "fixed_size"}}, {"text": "tuple, set, dictare all classes. These are ready-made classes. Python \nalso permits us to create user-defined classes as we would see in \nChapter 18.\nxAn object is created from a class. A class describes two things \u2014the\nform an object created from it will take and the methods (functions) \nthat can be used to access and manipulate the object. \nxFrom one class multiple objects can be created.When an object is \ncreated from a class, it is said that an instance of the class is being \ncreated.\nxA class has a name, whereas objects are nameless. Since objects do \nnot have names, they are referred using their addresses in memory.\nxAll the above statements can be verified through the following \nprogram. Refer to Figure 3.1 to understand it better.\na = 30\nb = 'Good'\nprint(a, b) # prints 3 Good\nprint(type(a), type(b)) # prints <class 'int'> <class 'str'>\nprint(id(a), id(b)) # prints1356658640 33720000\nprint(isinstance(a, int), isinstance(b, str)) # prints True True\n337200001356658640", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_61", "chunk_strategy": "fixed_size"}}, {"text": "print(type(a), type(b)) # prints <class 'int'> <class 'str'>\nprint(id(a), id(b)) # prints1356658640 33720000\nprint(isinstance(a, int), isinstance(b, str)) # prints True True\n337200001356658640\n135665864030a intobject\n33720000 Goodb strobject\nFigure 3.1\n-In this program we have created twoobjects\u2014one from ready-\nmade class intand another from ready-made class str. \n--- Page 45 ---\nChapter3: PythonBasics 29\n-The object of type intcontains 30, whereas the object of type str\ncontains 'Good'. \n-Both the objects are nameless. Their addresses in memory are \n1356658640 and 33720000 whichare stored in aand b. \n-These addresses can be obtained using the built-in function id( ). \nWhen you execute the program you may get different addresses.\n-Since aand bcontain addresses they are said to refer to objects \npresent at these addresses. In simpler words they are pointers to \nobjects.\n-Type ofobjects to whichaand bare referring to can be obtained \nusing the built-in function type( ).", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_62", "chunk_strategy": "fixed_size"}}, {"text": "present at these addresses. In simpler words they are pointers to \nobjects.\n-Type ofobjects to whichaand bare referring to can be obtained \nusing the built-in function type( ).\n-Whether arefers to an instance of class intcan be checked using \nthe built-in function instanceof( ).\nMultiple Objects\nxConsider the following program:\na = 3\nb = 3\nprint(id(a), id(b)) # prints 1356658640 1356658640\nprint(a is b) # prints True\na = 30 # now a refers to a different object\nprint(id(a)) # prints 1356659072\n-Are we creating 2 intobjects? No. Since the value stored in int\nobject is same, i.e. 3, only 1 intobject is created. Both aand b\nare referring to the same intobject. That is why id(a)and id(b)\nreturn same addresses.\n-This can also be verified using the isoperator. It returns True \nsince aand bboth are referring to the same object.\n-When we attempt to store a new value in a, a new intobject is \ncreated as a different value, 30, is to be stored in it. anow starts", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_63", "chunk_strategy": "fixed_size"}}, {"text": "since aand bboth are referring to the same object.\n-When we attempt to store a new value in a, a new intobject is \ncreated as a different value, 30, is to be stored in it. anow starts \nreferring to this new intobject, whereas bcontinues to refer to \nintobject with value 3.\n-Instead of saying that ais referring to an intobject containing a \nvalue 3, it is often said that ais an intobject, or 3 is assigned to\n--- Page 46 ---\n30 Let Us Python\nintobjecta. Many programmers continue to believe that aand b\nare intvariables, which wenow know is not the case.\n____________________________________________________________________\nProblem 3.1\nDemonstrate use of integer types and operators that can be used on \nthem.\nProgram\n# use of integer types\nprint(3 / 4)\nprint(3 % 4)\nprint(3 // 4)\nprint(3 ** 4)\na = 10 ; b = 25 ; c = 15 ; d = 30 ; e = 2 ; f = 3 ; g = 5 \nw = a + b -c \nx = d ** e \ny = f % g \nprint(w, x, y)\nh = 99999999999999999\ni = 54321\nprint(h * i)\nOutput\n0.75\n3\n0\n81\n20 900 3", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_64", "chunk_strategy": "fixed_size"}}, {"text": "print(3 ** 4)\na = 10 ; b = 25 ; c = 15 ; d = 30 ; e = 2 ; f = 3 ; g = 5 \nw = a + b -c \nx = d ** e \ny = f % g \nprint(w, x, y)\nh = 99999999999999999\ni = 54321\nprint(h * i)\nOutput\n0.75\n3\n0\n81\n20 900 3\n5432099999999999945679\nTips\nx3 / 4 doesn't yield 0.\nxMultiple statements in a line should be separated using ;\n--- Page 47 ---\nChapter3: PythonBasics 31\nxprint(w, x, y)prints values separated by a space.\n____________________________________________________________________\nProblem 3.2\nDemonstrate use of float, complexand booltypes and operators that \ncan be used on them.\nProgram\n# use of float \ni = 3.5\nj = 1.2 \nprint(i % j)\n# use of complex\na = 1 + 2j \nb = 3 *(1 + 2j)\nc = a * b\nprint(a)\nprint(b)\nprint(c)\nprint(a.real)\nprint(a.imag)\nprint(a.conjugate( ))\nprint(a)\n# use of bool\nx = True\ny = 3 > 4 \nprint(x)\nprint(y)\nOutput\n1.1\n(1+2j)\n(3+6j)\n(-9+12j)\n1.0\n2.0\n(1-2j)\n--- Page 48 ---\n32 Let Us Python\n(1+2j)\nTrue\nFalse\nTips\nx% works on floats.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_65", "chunk_strategy": "fixed_size"}}, {"text": "print(a)\n# use of bool\nx = True\ny = 3 > 4 \nprint(x)\nprint(y)\nOutput\n1.1\n(1+2j)\n(3+6j)\n(-9+12j)\n1.0\n2.0\n(1-2j)\n--- Page 48 ---\n32 Let Us Python\n(1+2j)\nTrue\nFalse\nTips\nx% works on floats.\nxIt is possible to obtain realand imagpart from a complex number.\nxOn evaluation of a condition it replaced by Trueor False.\n____________________________________________________________________\nProblem 3.3\nDemonstrate how to convert from one number type to another.\nProgram\n# convert to int\nprint(int(3.14)) # from float to int \na = int('485') # from numeric string to int\nb = int('768') # from numeric string to int\nc = a + b \nprint(c)\nprint(int('1011', 2)) # convert from binary to decimal int \nprint(int('341', 8)) # convert from octal to decimal int \nprint(int('21', 16)) # convert from hex to decimal int \n# convert to float\nprint(float(35)) # from int to float\ni = float('4.85') # from numeric string to float\nj = float('7.68') # from numeric string to float\nk = i + j \nprint(k)\n# convert to complex", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_66", "chunk_strategy": "fixed_size"}}, {"text": "# convert to float\nprint(float(35)) # from int to float\ni = float('4.85') # from numeric string to float\nj = float('7.68') # from numeric string to float\nk = i + j \nprint(k)\n# convert to complex\nprint(complex(35)) # from int to float\nx = complex(4.85, 1.1)# from numeric string to float\ny = complex(7.68, 2.1)# from numeric string to float\nz = x + y \nprint(z)\n--- Page 49 ---\nChapter3: PythonBasics 33\n# convert to bool\nprint(bool(35))\nprint(bool(1.2))\nprint(int(True))\nprint(int(False))\nOutput\n3\n1253\n11\n225\n33\n35.0\n12.53\n(35+0j)\n(12.53+3.2j)\nTrue\nTrue\n1\n0\nTips\nxIt is possible to convert a binary numeric string, octal numeric string \nor hexadecimal numeric string to equivalent decimal integer. Same \ncannot be done for a float.\nxWhile converting to complex if only one argument is used, imaginary \npart is considered to be 0.\nxAny non-zero number (int or float) is treated as True. 0 is treated as \nFalse.\n____________________________________________________________________\nProblem 3.4", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_67", "chunk_strategy": "fixed_size"}}, {"text": "part is considered to be 0.\nxAny non-zero number (int or float) is treated as True. 0 is treated as \nFalse.\n____________________________________________________________________\nProblem 3.4\nWrite a program that makes use of built-in mathematical functions.\nProgram\n# built-in math functions\nprint(abs(-25))\n--- Page 50 ---\n34 Let Us Python\nprint(pow(2, 4))\nprint(min(10, 20, 30, 40, 50))\nprint(max(10, 20, 30, 40, 50))\nprint(divmod(17, 3))\nprint(bin(64), oct(64), hex(64))\nprint(round(2.567), round(2.5678, 2))\nOutput\n25\n16\n10\n50\n(5, 2)\n0b1000000 0o100 0x40\n3 2.57\nTips\nxdivmod(a, b)yields a pair (a// b, a % b).\nxbin( ), oct( ), hex( )return binary, octal and hexadecimal equivalents.\nxround(x)assumes that rounding-off has to be done with 0 places \nbeyond decimal point.\n___________________________________________________________________\nProblem 3.5\nWrite a program that makes use of functions in the math module.\nProgram\n# mathematical functions from math module\nimport math\nx = 1.5357", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_68", "chunk_strategy": "fixed_size"}}, {"text": "Problem 3.5\nWrite a program that makes use of functions in the math module.\nProgram\n# mathematical functions from math module\nimport math\nx = 1.5357\nprint ( math.pi, math.e)\nprint(math.sqrt( x))\nprint(math.factorial(6))\nprint(math.fabs(x))\nprint(math.log(x))\nprint(math.log10(x))\nprint(math.exp(x))\n--- Page 51 ---\nChapter3: PythonBasics 35\nprint(math.trunc(x))\nprint(math.floor(x))\nprint(math.ceil(x))\nprint(math.trunc(-x))\nprint(math.floor(-x))\nprint(math.ceil(-x))\nprint(math.modf(x))\nOutput\n3.141592653589793 2.718281828459045\n1.2392336341465238\n720\n1.5357\n0.42898630314951025\n0.1863063842699079\n4.644575595215059\n1\n1\n2\n-1\n-2\n-1\n(0.5357000000000001, 1.0)\nTips\nxfloor( )rounds down towards negative infinity, ceil( )rounds up \ntowards positive infinity, trunc( )rounds up or down towards 0.\nxtrunc( )is like floor( )for positive numbers.\nxtrunc( )is like ceil( )for negative numbers.\n____________________________________________________________________\nProblem 3.6", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_69", "chunk_strategy": "fixed_size"}}, {"text": "xtrunc( )is like floor( )for positive numbers.\nxtrunc( )is like ceil( )for negative numbers.\n____________________________________________________________________\nProblem 3.6\nWrite a program that generates float and integer random numbers.\nProgram\n# random number operations using random module\nimport random \n--- Page 52 ---\n36 Let Us Python\nimport datetime\nrandom.seed(datetime.time( ))\nprint(random.random( ))\nprint(random.random( ))\nprint(random.randint(10, 100))\nOutput\n0.23796462709189137\n0.5442292252959519\n57\nTips\nxIt is necessary to import randommodule. \nxIf we seed the random number generation logic with current time, \nwe get different random numbers on each execution of the \nprogram. \nxrandom.seed( )withno parameter also seeds the logic with current \ntime.\n____________________________________________________________________\nProblem 3.7\nHow will you identify which of the following is a string, list, tuple, set or \ndictionary?\n{10, 20, 30.5}\n[1, 2, 3.14, 'Nagpur']", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_70", "chunk_strategy": "fixed_size"}}, {"text": "Problem 3.7\nHow will you identify which of the following is a string, list, tuple, set or \ndictionary?\n{10, 20, 30.5}\n[1, 2, 3.14, 'Nagpur']\n{12: 'Simple', 43: 'Complicated', 13: 'Complex'}\n\"Check it out!\"\n3 + 2j\nProgram\n# determine type of data\nprint(type({10, 20, 30.5}))\nprint(type([1, 2, 3.14, 'Nagpur']))\nprint(type({12 : 'Simple', 43 : 'Complicated', 13 : 'Complex'}))\nprint(type(\"Check it out!\"))\nprint(type(3 + 2j))\n--- Page 53 ---\nChapter3: PythonBasics 37\nOutput\n<class 'set'>\n<class 'list'>\n<class 'dict'>\n<class 'str'>\n<class 'complex'>\nTips\nxtype( )is a built-in function which can determine type of any data\u2014\nbuilt-in, container or user-defined.\n____________________________________________________________________\n[A]Answer the followingquestions:\n(a)Write a program that swaps the values of variables aand b. You are \nnot allowed to use a third variable. You are not allowed to perform \narithmetic on aand b.\n(b)Write a program that makes use of trigonometric functions", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_71", "chunk_strategy": "fixed_size"}}, {"text": "not allowed to use a third variable. You are not allowed to perform \narithmetic on aand b.\n(b)Write a program that makes use of trigonometric functions \navailable in math module.\n(c)Write a program that generates 5 random numbers in the range 10 \nto 50. Use a seed value of 6. Make a provision to change this seed \nvalue every time you execute the program by associating it with \ntime of execution?\n(d)Use trunc( ), floor( )and ceil( )for numbers -2.8, -0.5, 0.2, 1.5 and \n2.9 to understand the difference between these functions clearly.\n(e)Assume a suitable value for temperature of a city in Fahrenheit \ndegrees. Write a program to convert this temperature into \nCentigrade degrees and print both temperatures.\n(f)Given three sides a, b, c of a triangle, write a program to obtain and \nprint the values of three angles rounded to the next integer. Use \nthe formulae: \na2= b2+ c2-2bccos A, b2= a2+ c2-2ac cos B, c2= a2+ b2-2ab cos C\n--- Page 54 ---\n38 Let Us Python", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_72", "chunk_strategy": "fixed_size"}}, {"text": "print the values of three angles rounded to the next integer. Use \nthe formulae: \na2= b2+ c2-2bccos A, b2= a2+ c2-2ac cos B, c2= a2+ b2-2ab cos C\n--- Page 54 ---\n38 Let Us Python\n[B]How will you perform the following operations:\n(a)Print imaginary part out of 2 + 3j.\n(b)Obtain conjugate of 4 + 2j.\n(c)Print decimal equivalent of binary '1100001110'.\n(d)Convert a float value 4.33 intoa numeric string.\n(e)Obtain integer quotient and remainder while dividing 29 with 5.\n(f)Obtain hexadecimal equivalent of decimal 34567.\n(g) Round-off 45.6782 to second decimal place.\n(h)Obtain 4 from 3.556.\n(i)Obtain 17 from 16.7844.\n(j)Obtain remainder on dividing 3.45 with 1.22.\n[C]Which of the following is invalid variable name and why?\nBASICSALARY _basic basic-hra #MEAN\ngroup. 422 popin 2020 over \ntimemindovermatterSINGLE hELLO queue.\nteam\u2019svictory Plot # 3 2015_DDay\n[D]Evaluate the following expressions:\n(a)2 ** 6 // 8 % 2\n(b)9 ** 2 // 5 -3\n(c)10 + 6 -2 % 3 + 7 -2\n(d)5 % 10 + 10 -23 * 4 // 3", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_73", "chunk_strategy": "fixed_size"}}, {"text": "timemindovermatterSINGLE hELLO queue.\nteam\u2019svictory Plot # 3 2015_DDay\n[D]Evaluate the following expressions:\n(a)2 ** 6 // 8 % 2\n(b)9 ** 2 // 5 -3\n(c)10 + 6 -2 % 3 + 7 -2\n(d)5 % 10 + 10 -23 * 4 // 3\n(e)5 + 5 // 5 -5 * 5 ** 5 % 5\n(f)7 % 7 + 7 // 7 -7 * 7\n[E]Evaluate the following expressions:\n(a)min(2, 6, 8, 5)\n(b)bin(46)\n(c)round(10.544336, 2)\n(d)math.hypot(6, 8)\n(e)math.modf(3.1415)\n[F]Match the followingpairs:\na. complex 1. \\\nb. Escape special character 2. Container type\nc. Tuple 3Basic type\nd.Natural logarithm 4. log( )\ne. Common logarithmlog10( ) 5. log10( )\n--- Page 55 ---\nLet UsPython\n39Strings\nxWhat are Strings? xString Conversions\nxAccessing String Elements xString Comparisons\nxString Properties xPrograms\nxBuilt-in Functions xExercises\nxString Methods4\n\u201cPuppeting on strings... \u201d\n--- Page 56 ---\n40 Let Us Python\nWhat are Strings?\nxPython string is a collection of Unicode characters.\nxPython strings can be enclosed in single, double or triple quotes.\n'BlindSpot'\n\"BlindSpot\"", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_74", "chunk_strategy": "fixed_size"}}, {"text": "--- Page 56 ---\n40 Let Us Python\nWhat are Strings?\nxPython string is a collection of Unicode characters.\nxPython strings can be enclosed in single, double or triple quotes.\n'BlindSpot'\n\"BlindSpot\"\n' ' 'BlindSpot' ' '\n\"\"\"Blindspot\"\"\"\nxIf there are characters like ' \" or \\within a string, they can be \nretained in two ways:\n(a)Escape them by preceding them witha \\\n(b)Prepend the string with a 'r' indicating that it is a raw string\nmsg = 'He said, \\'Let Us Python.\\''\nmsg = r'He said, 'Let Us Python.''\nxMultiline strings can be created in 3 ways:\n-All but the last line ends with \\\n-Enclosed within \"\"\"some msg \"\"\" or ' ' 'some msg' ' '\n-('one msg'\n'another msg')\nAccessing String Elements\nxString elements can be accessed using an index value, starting with \n0. Negative index value is allowed. The last character is considered \nto be at index -1. Positive and negative indices are show in Figure\n4.1.\n-5 -4 -3 -2 -1H e l l o0 1 2 3 4\nFigure 4.1\n--- Page 57 ---\nChapter4: Strings 41", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_75", "chunk_strategy": "fixed_size"}}, {"text": "to be at index -1. Positive and negative indices are show in Figure\n4.1.\n-5 -4 -3 -2 -1H e l l o0 1 2 3 4\nFigure 4.1\n--- Page 57 ---\nChapter4: Strings 41\nxExamples of positive and negative indexing:\nmsg = 'Hello'\na = msg[0] # yields H\nb = msg[4] # yields o\nc = msg[-0] # yields H, -0 is same as 0\nd = msg[-1] # yields o\ne= msg[-2] # yields l\nf = msg[-5] # yields H\nxA sub-string can be sliced out of a string.\ns[start : end] -extract from start to end -1.\ns[start :] -extract from start to end.\ns[: end] -extract from start to end -1.\ns[-start :] -extract from -start (included) to end.\ns[: -end] -extract from beginning to -end -1.\nxUsing too large an index reports an error, but using too large index \nwhile slicing is handled elegantly.\nmsg = 'Rafting'\nprint(msg[3:100]) # prints elements from 't' up to end of string\nprint(msg[100]) # error since 100thelement doesn't exist\nString Properties\nxPython strings are immutable \u2014they cannot be changed.\ns = 'Hello'", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_76", "chunk_strategy": "fixed_size"}}, {"text": "print(msg[100]) # error since 100thelement doesn't exist\nString Properties\nxPython strings are immutable \u2014they cannot be changed.\ns = 'Hello'\ns[0] = 'M' # rejected, attempt to mutate string\ns = 'Bye' # s is a variable, it can change\nxStrings can be concatenated using +.\nmsg3 = ms1 + msg2\nxStrings can be replicated during printing.\nprint('-', 50) # prints 50 dashes\nxWhether one string is part of another can be found out using in.\nprint('e' in 'Hello') # prints True\nprint('z' in 'Hello') # print False\n--- Page 58 ---\n42 Let Us Python\nprint('lo' in 'Hello') # prints True\nBuilt-in Functions\nxSome built-in functions can be used with a string: \nmsg = 'Surreal'\nprint(len(msg)) # prints 7 -length of string \nprint(min(msg)) # prints S -character with min value\nprint(max(msg)) # prints u -character with max value\nString Methods\nxWhen we create a stringanamelessobjectof type stris created.\nmsg = 'Surreal'\nprint(type(msg)) # prints <class 'str'>\nprint(id(msg)) # prints 33720000", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_77", "chunk_strategy": "fixed_size"}}, {"text": "String Methods\nxWhen we create a stringanamelessobjectof type stris created.\nmsg = 'Surreal'\nprint(type(msg)) # prints <class 'str'>\nprint(id(msg)) # prints 33720000\nAddress of the nameless strobject is stored in msg. which is \nreturned by the built-in id( )function.\nxAn object of type strcontains methods using which it can be \naccessed and modified. These methods can be called using asyntax \nsimilar to calling a function in a module as shown below:\nimport random\nnum = random.randint(1, 25) # syntax module.function( )\ns = 'Hello' \ns.upper( ) # syntax string.method( )\nxDifferent categories of string methodsare given below.\n# content test functions \nisalpha( ) -checks if all characters in string are alphabets.\nisdigit( ) -checks if all characters in string are digits.\nisalnum()-checks if all characters in string are alphabets or digits.\nislower() -checks if all characters in string are lowercase alphabets.\nisupper() -checks ifall characters in string are uppercase alphabets.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_78", "chunk_strategy": "fixed_size"}}, {"text": "islower() -checks if all characters in string are lowercase alphabets.\nisupper() -checks ifall characters in string are uppercase alphabets.\nstartswith()-checks if string starts with a value.\nendswith()-checks if string ends with a value.\n# search and replace\nfind( )-searches for a value, returns its position.\nreplace( )-replace onevalue with another.\n--- Page 59 ---\nChapter4: Strings 43\n# trims whitespace\nlstrip( ) -removes whitespace from the left of string including \\t.\nrstrip( )-removes whitespace from the right of string including \\t.\nstrip( ) -removes whitespace from left and right\n# split and partition\nsplit( )-split the string at a specified separator string.\npartition( ) -partitions string into 3 parts at first occurrence of \nspecified string.\n# join -different than concatenation. It joins string to each element \nof string1 except last. \njoin(string1) \nxFollowing program shows how to use the string methods:\nmsg = 'Hello'", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_79", "chunk_strategy": "fixed_size"}}, {"text": "specified string.\n# join -different than concatenation. It joins string to each element \nof string1 except last. \njoin(string1) \nxFollowing program shows how to use the string methods:\nmsg = 'Hello'\nprint(msg.replace('l', 'L')) # replaces l with L in Hello\nprint(\"-\".join(\"Hello\")) # prints H-e-l-l-o\nString Conversions\nxTwo types of string conversions are required frequently:\n-Converting the case of characters in string\n-Converting numbers to string and vice versa\nxCase conversionscan be done using strmethods:\nupper( ) -converts string to uppercase. \nlower( ) -converts string to uppercase.\ncapitalize()-converts first character of string to uppercase.\ntitle( ) -converts first character of each word to uppercase.\nswapcase()-swap cases in the string.\nmsg = 'Hello'\nprint(msg.upper( )) # prints HELLO\nprint('Hello'.upper( )) # prints HELLO\nxBuilt-in functions are used forstring to number conversionsand vice \nversa:\nstr( ) -converts an int, float or complex to string", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_80", "chunk_strategy": "fixed_size"}}, {"text": "print('Hello'.upper( )) # prints HELLO\nxBuilt-in functions are used forstring to number conversionsand vice \nversa:\nstr( ) -converts an int, float or complex to string\nint( ) -converts a numeric string to int\nfloat( ) -converts a numeric string to float\n--- Page 60 ---\n44 Let Us Python\ncomplex( ) -converts a numeric string to complex\nxThe built-in function chr( )returns a stringrepresenting its Unicode \nvalue (known as code point). ord( )does the reverse.\nxFollowing program shows how to use the conversion functions:\nage = 25\nprint('She is' + str(age) + ' years old')\ni = int(\"34\")\nf = float(\"3.14\")\nc = complex(\"3+2j\") # \"3 + 2j\" would be a malformed string\nprint(ord('A')) # prints 65 \nprint(chr(65)) # prints A\nString Comparison\nxTwo strings can be compared using operators ==, !=, <, >, <=, >=. This \nis shown in the following program:\ns1 = \"Bombay\" \ns2 = \"bombay\"\ns3 = \"Nagpur\"\ns4 = \"Bombaywala\"\ns5 = \"Bombay\"\nprint(s1 == s2) # displays False\nprint(s1 == s5) # displays True", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_81", "chunk_strategy": "fixed_size"}}, {"text": "is shown in the following program:\ns1 = \"Bombay\" \ns2 = \"bombay\"\ns3 = \"Nagpur\"\ns4 = \"Bombaywala\"\ns5 = \"Bombay\"\nprint(s1 == s2) # displays False\nprint(s1 == s5) # displays True\nprint(s1 != s3) # displays True\nprint(s1 > s5) # displays False\nprint(s1 < s2) # displays True\nprint(s1 <= s4) # displays True\nxString comparison is done in lexicographical order (alphabetical) \ncharacter by character. Capitals are considered to be less than their \nlowercase counterparts. Result of comparison operation is either \nTrue or False.\nxNote that there is only one strobjectcontaining\"Bombay\", so s1\nand s5both contain the same address.\n____________________________________________________________________\n--- Page 61 ---\nChapter4: Strings 45\nProblem 4.1\nDemonstrate how to create simple and multi-line strings and whether a \nstring can change after creation. Also show the usage of built-in \nfunctions len( ), min( )and max( )on a string.\nProgram\n# simple strings\nmsg1 = 'Hoopla' \nprint(msg1)", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_82", "chunk_strategy": "fixed_size"}}, {"text": "string can change after creation. Also show the usage of built-in \nfunctions len( ), min( )and max( )on a string.\nProgram\n# simple strings\nmsg1 = 'Hoopla' \nprint(msg1)\n# strings with special characters\nmsg2 = 'He said, \\'Let Us Python\\'.'\nfile1 = 'C:\\\\temp\\\\newfile'\nfile2 = r'C:\\temp\\newfile'# raw string -prepend r\nprint(msg2)\nprint(file1)\nprint(file2)\n# multiline strings\n# whitespace at beginning of second line becomes part of string\nmsg3 = 'What is this life if full of care...\\\nWe have no time to stand and stare'\n# enter at the end of first line becomes part of string\nmsg4 = \"\"\"What is this life if full of care...\nWe have no time to stand and stare\"\"\"\n# strings are concatenated properly.( ) necessary\nmsg5 = ('What is this life if full of care...'\n'We have no time to stand and stare')\nprint(msg3)\nprint(msg4)\nprint(msg5)\n# string replication during printing\nmsg6 = 'MacLearn!!'\nprint(msg1 * 3)\n# immutability of strings\n# Utopia cannot change, msg7 can\n--- Page 62 ---\n46 Let Us Python", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_83", "chunk_strategy": "fixed_size"}}, {"text": "print(msg3)\nprint(msg4)\nprint(msg5)\n# string replication during printing\nmsg6 = 'MacLearn!!'\nprint(msg1 * 3)\n# immutability of strings\n# Utopia cannot change, msg7 can\n--- Page 62 ---\n46 Let Us Python\nmsg7 = 'Utopia'\nmsg8 = 'Today!!!'\nmsg7 = msg7 + msg8 # concatenation using +\nprint(msg7)\n# use of built-in functions on strings\nprint(len('Hoopla'))\nprint(min('Hoopla'))\nprint(max('Hoopla'))\nOutput\nHoopla\nHe said, 'Let Us Python'.\nC:\\temp\\newfile\nC:\\temp\\newfile\nWhat is this life if full of care... We have no time to stand and stare\nWhat is this life if full of care...\nWe have no time to stand and stare\nWhat is this life if full of care...We have no time to stand and stare\nHooplaHooplaHoopla\nUtopiaToday!!!\n6\nH\np\nTips\nxSpecial characters can be retained in a string by either escaping \nthem or by marking the string as a raw string.\nxStrings cannot change, but the variables that store them can.\nxlen( )returns the number of characters present in string.min( )and", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_84", "chunk_strategy": "fixed_size"}}, {"text": "them or by marking the string as a raw string.\nxStrings cannot change, but the variables that store them can.\nxlen( )returns the number of characters present in string.min( )and \nmax( )return the character with minimum and maximum Unicode \nvalue from the string.\n____________________________________________________________________\nProblem 4.2\nFor a given string 'Bamboozled', write a program to obtain the following \noutput:\n--- Page 63 ---\nChapter4: Strings 47\nB a\ne d\ne d\nmboozled\nmboozled\nmboozled\nBamboo\nBamboo\nBamboo\nBamboo\ndelzoobmaB\nBamboozled\nBmoze\nBbzd\nBoe\nBamboozledHype!\nBambooMonger!\nUse multiple ways to get any of the above outputs.\nProgram\ns = 'Bamboozled'\n# extract B a\nprint(s[0], s[1])\nprint(s[-10], s[-9])\n# extract e d\nprint(s[8], s[9])\nprint(s[-2], s[-1])\n# extract mboozled\nprint(s[2:10])\nprint(s[2:])\nprint(s[-8:])\n# extract Bamboo\nprint(s[0:6])\nprint(s[:6])\nprint(s[-10:-4])\nprint(s[:-4])\n# reverse Bamboozled\n--- Page 64 ---\n48 Let Us Python\nprint([::-1])\nprint(s[0:10:1])", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_85", "chunk_strategy": "fixed_size"}}, {"text": "print(s[2:])\nprint(s[-8:])\n# extract Bamboo\nprint(s[0:6])\nprint(s[:6])\nprint(s[-10:-4])\nprint(s[:-4])\n# reverse Bamboozled\n--- Page 64 ---\n48 Let Us Python\nprint([::-1])\nprint(s[0:10:1])\nprint(s[0:10:2])\nprint(s[0:10:3])\nprint(s[0:10:4])\ns = s + 'Hype!' \nprint(s)\ns = s[:6] + 'Monger' + s[-1] \nprint(s)\nTips\nxSpecial characters can be retained in a string by either escaping \nthem or by marking the string as a raw string.\nxs[4:8]is same as s[4:8:1], where 1 is the default.\nxs[4:8:2] returnsa character, then move forward 2 positions, etc.\n____________________________________________________________________\nProblem 4.3\nFor thefollowing strings find out which are having only alphabets, which \nare numeric, which are alphanumeric, which are lowercase, which are \nuppercase. Also find out whether 'And Quiet Flows The Don' begins with \n'And' or ends with 'And' : \n'NitiAayog'\n'And QuietFlows The Don'\n'1234567890'\n'Make $1000 a day'\nProgram\ns1 = 'NitiAayog'\ns2 = 'And Quiet Flows The Don'", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_86", "chunk_strategy": "fixed_size"}}, {"text": "'And' or ends with 'And' : \n'NitiAayog'\n'And QuietFlows The Don'\n'1234567890'\n'Make $1000 a day'\nProgram\ns1 = 'NitiAayog'\ns2 = 'And Quiet Flows The Don'\ns3 = '1234567890'\ns4 = 'Make $1000 a day'\nprint('s1 = ', s1)\nprint('s2 = ', s2)\nprint('s3 = ', s3)\nprint('s4 = ', s4)\n--- Page 65 ---\nChapter4: Strings 49\n# Content test functions \nprint('check isalpha on s1, s2')\nprint(s1.isalpha( ))\nprint(s2.isalpha( ))\nprint('check isdigit on s3, s4')\nprint(s3.isdigit( ))\nprint(s4.isdigit( ))\nprint('check isalnum on s1, s2, s3, s4')\nprint(s1.isalnum( ))\nprint(s2.isalnum( ))\nprint(s3.isalnum( ))\nprint(s4.isalnum( ))\nprint('check islower on s1, s2')\nprint(s1.islower( ))\nprint(s2.islower( ))\nprint('check isupper on s1, s2')\nprint(s1.isupper( ))\nprint(s2.isupper( ))\nprint('check startswith and endswith on s2')\nprint(s2.startswith('And'))\nprint(s2.endswith('And'))\nOutput\ns1 = NitiAayog\ns2 = And Quiet Flows The Don\ns3 = 1234567890\ns4 = Make $1000 a day\ncheck isalpha on s1, s2\nTrue\nFalse", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_87", "chunk_strategy": "fixed_size"}}, {"text": "print(s2.startswith('And'))\nprint(s2.endswith('And'))\nOutput\ns1 = NitiAayog\ns2 = And Quiet Flows The Don\ns3 = 1234567890\ns4 = Make $1000 a day\ncheck isalpha on s1, s2\nTrue\nFalse\ncheck isdigit on s3, s4\nTrue\nFalse\ncheck isalnum on s1, s2, s3, s4\n--- Page 66 ---\n50 Let Us Python\nTrue\nFalse\nTrue\nFalse\ncheck islower on s1, s2\nFalse\nFalse\ncheck isupper on s1, s2\nFalse\nFalse\ncheck startswith and endswith on s2\nTrue\nFalse\n____________________________________________________________________\nProblem 4.4\nGiven the following string:\n'Bring It On'\n'Flanked by spaces on either side '\n'C:\\\\Users\\\\Kanetkar\\\\Documents'\nwrite a program to produce the following output using appropriate \nstring functions.\nBRING IT ON\nbring it on\nBring it on\nBring It On\nbRING iT oN\n6\n9\nBring Him On\nFlanked by spaces on either side \nFlanked by spaces on either side\n['C:', 'Users', 'Kanetkar', 'Documents']\n('C:', '\\\\', 'Users\\\\Kanetkar\\\\Documents')\nProgram\ns1= 'Bring It On'\n# Conversions \n--- Page 67 ---", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_88", "chunk_strategy": "fixed_size"}}, {"text": "Flanked by spaces on either side\n['C:', 'Users', 'Kanetkar', 'Documents']\n('C:', '\\\\', 'Users\\\\Kanetkar\\\\Documents')\nProgram\ns1= 'Bring It On'\n# Conversions \n--- Page 67 ---\nChapter4: Strings 51\nprint(s1.upper( ))\nprint(s1.lower( ))\nprint(s1.capitalize( ))\nprint(s1.title( ))\nprint(s1.swapcase( ))\n# search and replace\nprint(s1.find('I'))\nprint(s1.find('On'))\nprint(s1.replace('It', 'Him'))\n# trimming\ns2 = 'Flanked by spaces on either side '\nprint(s2.lstrip( ))\nprint(s2.rstrip( ))\n# splitting\ns3 = 'C:\\\\Users\\\\Kanetkar\\\\Documents'\nprint(s3.split('\\\\'))\nprint(s3.partition('\\\\'))\n____________________________________________________________________\nProblem 4.5\nFind all occurrences of 'T' in the string 'The Terrible Tiger Tore The \nTowel'.Replace all occurrences of 'T' with 't'.\nProgram\ns = 'The Terrible Tiger Tore The Towel'\npos = s.find('T', 0)\nprint(pos, s[pos])\npos = s.find('T', pos + 1)\nprint(pos, s[pos])\npos = s.find('T', pos + 1)\nprint(pos, s[pos])\npos = s.find('T', pos + 1)", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_89", "chunk_strategy": "fixed_size"}}, {"text": "s = 'The Terrible Tiger Tore The Towel'\npos = s.find('T', 0)\nprint(pos, s[pos])\npos = s.find('T', pos + 1)\nprint(pos, s[pos])\npos = s.find('T', pos + 1)\nprint(pos, s[pos])\npos = s.find('T', pos + 1)\nprint(pos, s[pos])\npos = s.find('T', pos + 1)\nprint(pos, s[pos])\npos= s.find('T', pos + 1)\nprint(pos, s[pos])\n--- Page 68 ---\n52 Let Us Python\npos = s.find('T', pos + 1)\nprint(pos)\nc = s.count('T')\ns = s.replace('T', 't', c)\nprint(s)\nOutput\n0 T\n4 T\n13 T\n19 T\n24 T\n28 T\n-1\nthe terrible tiger tore the towel\nTips\nxFirst call to search( )returns the position where first 'T' is found. To \nsearch subsequent 'T' search is started from pos + 1. \nxWhen 'T' is not found search( )returns -1.\nxcount( )returns the number of occurrences of 'T' in the string.\nxThird parameter in the call to replace( )indicates number of \nreplacements to be done.\n____________________________________________________________________\n[A]Answer the following questions:", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_90", "chunk_strategy": "fixed_size"}}, {"text": "xThird parameter in the call to replace( )indicates number of \nreplacements to be done.\n____________________________________________________________________\n[A]Answer the following questions:\n(a)Write a program that generates the following output from the string \n'Shenanigan'.\nS h\na n\nenanigan\nShenan\nShenan\nShenan\n--- Page 69 ---\nChapter4: Strings 53\nShenan\nShenanigan\nSeaia\nSnin\nSaa\nShenaniganType\nShenanWabbite\n(b)Write a program to convert the following string\n'Visit ykanetkar.com for online courses in programming'\ninto\n'Visit Ykanetkar.com For Online Courses In Programming'\n(c)Write a program to convert the following string\n'Light travels faster than sound. This is why some people appear \nbright until you hear them speak.'\ninto\n'LIGHTtravels faster than SOUND. This is why some people appear \nbright until you hear them speak.'\n(d)What will be the output of the following program?\ns = 'HumptyDumpty'\nprint('s = ', s)\nprint(s.isalpha( ))\nprint(s.isdigit( ))\nprint(s.isalnum( ))", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_91", "chunk_strategy": "fixed_size"}}, {"text": "bright until you hear them speak.'\n(d)What will be the output of the following program?\ns = 'HumptyDumpty'\nprint('s = ', s)\nprint(s.isalpha( ))\nprint(s.isdigit( ))\nprint(s.isalnum( ))\nprint(s.islower( ))\nprint(s.isupper( ))\nprint(s.startswith('Hump'))\nprint(s.endswith('Dump'))\n(e)What is the purpose of a raw string?\n(f)If we wish to work with an individual word in the following string, \nhow will you separate them out:\n'The difference between stupidity and genius is that genius has its \nlimits'\n(g)Mention two ways to store a string:He said, \"Let Us Python\".\n--- Page 70 ---\n54 Let Us Python\n(h)What will be the output of following code snippet?\nprint(id('Imaginary'))\nprint(type('Imaginary'))\n(i)What will be the output of the following code snippet? \ns3 = 'C:\\\\Users\\\\Kanetkar\\\\Documents'\nprint(s3.split('\\\\'))\nprint(s3.partition('\\\\'))\n(j)Strings in Python are iterable, sliceableand immutable. (True/False)\n(k)How will you extract ' TraPoete' from the string 'ThreadProperties'?", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_92", "chunk_strategy": "fixed_size"}}, {"text": "print(s3.split('\\\\'))\nprint(s3.partition('\\\\'))\n(j)Strings in Python are iterable, sliceableand immutable. (True/False)\n(k)How will you extract ' TraPoete' from the string 'ThreadProperties'?\n(l)How will you eliminate spaces on either sideof the string ' Flanked \nby spaces on either side '?\n(m)What will be the output of the following code snippet? \ns1 = s2 = s3 = \"Hello\"\nprint(id(s1), id(s2), id(s3))\n(n)What will get stored in ch in the following code snippet:\nmsg = 'Aeroplane'\nch = msg[-0]\n[B]Match the following pairs assuming msg = 'Keep yourself warm'\na. msg.partition(' ') 1. 18\nb. msg.split(' ') 2. kEEP YOURSELF WARM\nc. msg.startswith('Keep') 3. Keep yourself warm\nd. msg.endswith('Keep') 4. 3\ne. msg.swapcase( ) 5. True\nf. msg.capitalize( ) 6. False\ng. msg.count('e') 7. ['Keep', 'yourself', 'warm']\nh. len(msg) 8. ('Keep', ' ', 'yourself warm')\ni. msg[0] 9. Keep yourself w\nj. msg[-1] 10. keep yourself wa\nk. msg[1:1:1] 11. K\nl. msg[-1:3] 12. empty string\nm. msg[:-3] 13. m", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_93", "chunk_strategy": "fixed_size"}}, {"text": "h. len(msg) 8. ('Keep', ' ', 'yourself warm')\ni. msg[0] 9. Keep yourself w\nj. msg[-1] 10. keep yourself wa\nk. msg[1:1:1] 11. K\nl. msg[-1:3] 12. empty string\nm. msg[:-3] 13. m\nn. msg[-3:] 14. arm\no. msg[0:-2] 15. empty string\n--- Page 71 ---\nLet UsPython\n55Decision Control\nInstruction\nxDecision Control Instruction xReceiving Input\nxNuances of Conditions xpassStatement\nxLogical Operators xPrograms\nxConditional Expressions xExercises\nxall( )and any( )5\n\u201cIndecision cost > Wrong decision cost.. \u201d\n--- Page 72 ---\n56 Let Us Python\nxSo far statements in all our programs got executed sequentially or \none after the other.\nxSequence of execution of instructions in a program can be altered \nusing:\n(a)Decision control instruction\n(b)Repetition control instruction\nDecision Control Instruction\nxThree ways for taking decisions in a program:\nif condition:\nstatement1 \nstatement2if condition:\nstatement1 \nstatement2\nelse :\nstatement3\nstatement4if condition1 :\nstatement1 \nstatement2\nelif condition2 :", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_94", "chunk_strategy": "fixed_size"}}, {"text": "if condition:\nstatement1 \nstatement2if condition:\nstatement1 \nstatement2\nelse :\nstatement3\nstatement4if condition1 :\nstatement1 \nstatement2\nelif condition2 :\nstatement3\nelif condition3 :\nstatement4\nelse : \nstatement5\nxThe colon (:) after if, else, elif. It is compulsory.\nxStatements in ifblock, else, block, elifblock have to be indented. \nIndented statements are treated as a block of statements.\nxIndentation is used to group statements. Use either 4 spaces or a tab \nfor indentation. Don't mix tabs and spaces. They may appear ok on \nscreen, but would be reported as error.\nxIn the first form shown above elseand elifare optional.\nxIn the second form shown above, if condition is True all statements \nin ifblock get executed. If condition is False then statements in else\nblock get executed.\nxIn the third form shown above, if a condition fails, then condition in \nthe following elifblock is checked. The elseblock goes to work if all \nconditions fail.\n--- Page 73 ---", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_95", "chunk_strategy": "fixed_size"}}, {"text": "block get executed.\nxIn the third form shown above, if a condition fails, then condition in \nthe following elifblock is checked. The elseblock goes to work if all \nconditions fail.\n--- Page 73 ---\nChapter5: Decision Control Instruction 57\nxif-elsestatements can be nested. Nesting can be as deep as the \nprogram logic demands.\nNuances of Conditions\nxCondition is built using relation operators <, >, <=, >=, ==, !=.\n10 < 20 # yields True\n'Santosh' < 'Adi' # yields False, alphabetical order is checked\n'gang' < 'God' # yields False, lowercase is > uppercase\nxa = bis assignment,a == bis comparison.\nxRanges or multiple equalities can be checked more naturally.\nif a < b < c # checks whether b fallsbetween a and c\nif a == b == c # checks whether all three are equal\nif 10 != 20 != 10 # evaluates to True, even though 10 != 10 is False\nxAny non-zero number (positive, negative, integer, float) is treated as \nTrue, and 0 as False.\nprint(bool(3.14)) # prints True\nprint(bool(25)) # prints True", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_96", "chunk_strategy": "fixed_size"}}, {"text": "xAny non-zero number (positive, negative, integer, float) is treated as \nTrue, and 0 as False.\nprint(bool(3.14)) # prints True\nprint(bool(25)) # prints True\nprint(bool(0)) # prints False\nLogical Operators\nxMore complex decision making can be done using logical operators \nand, orand not.\nxConditions can be combined using andand oras shown below:\ncond1and cond2 -returns True if both are True, otherwise False\ncond1 or cond2 -returns True if one of them is True, otherwise False\nxStrictly speaking, we need not always combine only conditionswith \nand/or. We can use any valid expression in place of conditions. \nHence when used with expressions we may not get True/False.\nxandoperator evaluates ALL expressions. It returns last expression if \nall expressions evaluate to True. Otherwise it returns first value that \nevaluates to False.\na = 40 \nb = 30\nx = 75 and a >= 20 and b < 60 and 35 # assigns 35 to x \n--- Page 74 ---\n58 Let Us Python\ny = -30 and a >= 20 and b < 15 and 35 # assigns False to y", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_97", "chunk_strategy": "fixed_size"}}, {"text": "evaluates to False.\na = 40 \nb = 30\nx = 75 and a >= 20 and b < 60 and 35 # assigns 35 to x \n--- Page 74 ---\n58 Let Us Python\ny = -30 and a >= 20 and b < 15 and 35 # assigns False to y\nz = -30 and a >= 20 and 0 and 35 # assigns 0 to z\nxoroperator evaluates ALL expressions and returns the first value \nthat evaluates to True. Otherwise it returns last value that evaluates \nto False.\na = 40 \nb = 30\nx = 75 or a >= 20 or 60 # assigns 75 to x \ny = a >= 20 or 75 or 60 # assigns True to y\nz = a < 20 or 0 or 35 # assigns 35 to z\nxCondition \u2019s result can be negated usingnot.\na = 10\nb = 20\nnot (a <= b) # yields False. Same as a > b\nnot (a >= b) # yields True. Same as a < b\nxShortcut for toggling values between 1 and 0:\na = input('Enter 0 or 1')\na = not a # set a to 0 if it is 1, and set it to 1 if it is 0\nxa = not bdoes not change value of b.\nxIf an operator needs only 1 operand it is known as Unary operator. If \nit needs two, then it is a binary operator.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_98", "chunk_strategy": "fixed_size"}}, {"text": "xa = not bdoes not change value of b.\nxIf an operator needs only 1 operand it is known as Unary operator. If \nit needs two, then it is a binary operator.\nnot -needs only 1 operand, so unary operator\n+, -, <, >, and, or, etc. -need 2 operands, so binary operators\nConditional Expressions\nxPython supports one additional decision-making entity called a \nconditional expression.\n<expr1> if <conditional expression> else <expr2>\n<conditional expression> is evaluated first. If it is true, the \nexpression evaluates to<expr1>. If it is false, the expression \nevaluates to<expr2>.\nxExamples of condition expressions:\n--- Page 75 ---\nChapter5: Decision Control Instruction 59\nage = 15\nstatus= 'minor' if age < 18else 'adult' # sets minor\nsunny = False\nprint('Let's go to the', 'beach' if sunny else 'room')\nhumidity= 76.8\nsetting = 25 if humidity > 75 else 28 # sets 25\nxConditional expressions can be nested.\n# assigns Prim\nwt = 55\nmsg = 'Obese' if wt > 85 else 'Hefty' if wt > 60 else 'Prim'", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_99", "chunk_strategy": "fixed_size"}}, {"text": "humidity= 76.8\nsetting = 25 if humidity > 75 else 28 # sets 25\nxConditional expressions can be nested.\n# assigns Prim\nwt = 55\nmsg = 'Obese' if wt > 85 else 'Hefty' if wt > 60 else 'Prim'\nall( )and any( )\nxInstead of using the andand orlogical operators, we can use the \nbuilt-in functions all( )and any( )to get the same effect. Their usage \nis shown in the following program:\na, b, c = 10, 20, 30\nres = all((a > 5, b > 20, c > 15))\nprint(res) # prints False, as second condition is False\nres = any((a > 5, b > 20, c > 15))\nprint(res) # prints True since one of the condition is True\nxNote that all( )and any( )both receive a single parameter of the \ntype string, list, tuple, set or dictionary. We have passed a tuple of 3 \nconditions to them. If argument is a dictionary it is checked whether \nthe keys are true or not.\nxany( )function returns True if at least one element of its parameter \nis True. all( )function returns True if all elements of its parameter \nare True.\nReceiving Input", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_100", "chunk_strategy": "fixed_size"}}, {"text": "the keys are true or not.\nxany( )function returns True if at least one element of its parameter \nis True. all( )function returns True if all elements of its parameter \nare True.\nReceiving Input\nxThe way print( )function is used to output values on screen, input( ) \nbuilt-in function can be used to receive input values from keyboard.\nxinput( )function returns a string, i.e.if 23 is entered it returns '23'. \nSo if we wish to perform arithmetic on the number entered, we \nneed to convert the string into int or float asshown below.\n--- Page 76 ---\n60 Let Us Python\nn = input('Enter your name: ')\nage = int(input('Enter your age: '))\nsalary = float(input('Enter your salary: '))\nprint(name, age, salary)\npassStatement\nxpassstatement is intended to do nothing on execution. Hence it is \noften called a no-op instruction.\nxIf we wish that on execution of a statement nothing should happen, \nwe can achieve this using a passstatement.Its utility is shown in \nProblem 5.6.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_101", "chunk_strategy": "fixed_size"}}, {"text": "often called a no-op instruction.\nxIf we wish that on execution of a statement nothing should happen, \nwe can achieve this using a passstatement.Its utility is shown in \nProblem 5.6.\nxIt is often used as a placeholder for unimplemented code in anif, \nloop, function or class.This is not a good use of pass. Instead you \nshould use ... in its place. If you use passit might make one believe \nthat you actually do not intend to do anything in the \nif/loop/function/class.\n____________________________________________________________________\nProblem 5.1\nWhile purchasing certain items, a discount of 10% is offered if the \nquantity purchased is more than 1000. If quantity and price per item are \ninput through the keyboard, write a program to calculate the total \nexpenses.\nProgram\nqty = int(input('Enter value of quantity: ')) \nprice = float(input('Enter value of price: ')) \nif qty > 1000 : \ndis = 10 \nelse : \ndis = 0 \ntotexp = qty * price -qty * price * dis / 100", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_102", "chunk_strategy": "fixed_size"}}, {"text": "Program\nqty = int(input('Enter value of quantity: ')) \nprice = float(input('Enter value of price: ')) \nif qty > 1000 : \ndis = 10 \nelse : \ndis = 0 \ntotexp = qty * price -qty * price * dis / 100 \nprint('Total expenses = Rs. '+ str(totexp)) \n--- Page 77 ---\nChapter5: Decision Control Instruction 61\nOutput\nEnter value of quantity: 1200\nEnter value of price: 15.50\nTotal expenses = Rs. 16740.0\nTips\nxinput( ) returns a string, so it is necessary to convert it into int or \nfloat suitably.If we do not do the conversion, qty > 1000will throw \nan error as a string cannot be compared with an int.\nxstr( )should be used to convert totexpto string before doing \nconcatenation using +.\n____________________________________________________________________\nProblem 5.2\nIn a company an employee is paid as under:\nIf his basic salary is less than Rs. 1500, then HRA = 10% of basic salary \nand DA = 90% of basic salary. If his salary is either equal to or above Rs.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_103", "chunk_strategy": "fixed_size"}}, {"text": "In a company an employee is paid as under:\nIf his basic salary is less than Rs. 1500, then HRA = 10% of basic salary \nand DA = 90% of basic salary. If his salary is either equal to or above Rs. \n1500, then HRA = Rs. 500 and DA = 98% of basic salary. If the employee's \nsalary is input through the keyboard write a program to find his gross \nsalary.\nProgram\nbs = int(input('Enter value of bs: '))\nif bs > 1000 : \nhra = bs * 15 /100 \nda = bs * 95 / 100 \nca = bs * 10 / 100 \nelse: \nhra = bs * 10 / 100 \nda = bs * 90 / 100 \nca = bs * 5 / 100 \ngs = bs + da +hra + ca \nprint('Gross Salary = Rs. ' + str(gs)) \n--- Page 78 ---\n62 Let Us Python\nTips\nxifblock and elseblock can contain multiple statements in them, \nsuitably indented.\n____________________________________________________________________\nProblem 5.3\nPercentage marks obtained by a student are input through the \nkeyboard. The student gets a division as per the following rules:\nPercentage above or equal to 60 -First division", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_104", "chunk_strategy": "fixed_size"}}, {"text": "Problem 5.3\nPercentage marks obtained by a student are input through the \nkeyboard. The student gets a division as per the following rules:\nPercentage above or equal to 60 -First division\nPercentage between 50 and 59 -Second division\nPercentage between 40 and 49 -Third division\nPercentage less than 40 -Fail\nWrite a program to calculate the division obtained by the student.\nProgram\nper = int(input('Enter value of percentage: '))\nif per >= 60 : \nprint('First Division')\nelif per >= 50 : \nprint('Second Division')\nelif per >= 40 : \nprint('Third Division')\nelse : \nprint('Fail')\nOutput\nEnter value of percentage: 55\nSecond Division\n____________________________________________________________________\nProblem 5.4\nA company insures its drivers in the following cases:\n\ue001If the driver is married.\n\ue001If the driver is unmarried, male & above 30 years of age.\n\ue001If the driver is unmarried, female & above 25 years of age.\n--- Page 79 ---\nChapter5: Decision Control Instruction 63", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_105", "chunk_strategy": "fixed_size"}}, {"text": "\ue001If the driver is unmarried, male & above 30 years of age.\n\ue001If the driver is unmarried, female & above 25 years of age.\n--- Page 79 ---\nChapter5: Decision Control Instruction 63\nIn all other cases, the driver is not insured. If the marital status, sex and \nage of the driver are the inputs, write a program to determine whether \nthe driver should be insured or not.\nProgram\nms = input('Enter marital status: ')\ns = input('Enter sex: ') \nage = int(input('Enter age: ')) \nif ( ms == 'm' ) or ( ms == 'u' and s == 'm' and age > 30 ) \\\nor ( ms == 'u' and s == 'f' andage > 25 ) : \nprint('Insured')\nelse : \nprint('Not Insured')\nOutput\nEnter marital status: u\nEnter sex: m\nEnter age: 23\nNot Insured\n____________________________________________________________________\nProblem 5.5\nSuppose there are four flag variables w, x, y, z. Write a program to check \nin multiple ways whether one of them is true.\nProgram\n# Different ways to test multiple flags\nw, x, y, z = 0, 1, 0, 1", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_106", "chunk_strategy": "fixed_size"}}, {"text": "Suppose there are four flag variables w, x, y, z. Write a program to check \nin multiple ways whether one of them is true.\nProgram\n# Different ways to test multiple flags\nw, x, y, z = 0, 1, 0, 1\nif w == 1 or x == 1 or y == 1 or z == 1 :\nprint('True')\nif w or x or y or z :\nprint('True')\nif any((w, x, y, z)):\nprint('True')\n--- Page 80 ---\n64 Let Us Python\nif 1 in (w, x, y, z) :\nprint('True')\nOutput\nTrue\nTrue\nTrue\nTrue\nTips\nxany( )is a built-in function that returns True if at least one of the \nelement of its parameter is True.\nxWe have to pass astring, list, tuple, set or dictionary to any( ).\nxThere is another similar function called all( ), which returns True if all \nelements of its parameter are True. This function too should be \npassed a string, list, tuple, set ordictionary.\n____________________________________________________________________\nProblem 5.6\nGiven a number n we wish to do the following:\nIf n is positive -print n * n, set a flag to true", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_107", "chunk_strategy": "fixed_size"}}, {"text": "____________________________________________________________________\nProblem 5.6\nGiven a number n we wish to do the following:\nIf n is positive -print n * n, set a flag to true\nIf n is negative -print n * n * n, set a flag to true\nif n is 0 -do nothing\nIs the code given below correct for this logic?\nn = int(input('Enter a number: '))\nif n > 0 :\nflag = True\nprint(n * n)\nelif n < 0 :\nflag = True\nprint(n * n * n)\nAnswer\nxThis is misleading code. At a later date, anybody looking at this code \nmay feel that flag = Trueshould bewritten outside ifand else.\nxBetter code will be as follows:\n--- Page 81 ---\nChapter5: Decision Control Instruction 65\nn = int(input('Enter a number: '))\nif n > 0 :\nflag = True\nprint(n * n)\nelif n < 0 :\nflag = True\nprint(n * n * n)\nelse :\npass # does nothing on execution\n____________________________________________________________________\n[A]Answer the following questions:\n(a)Write conditional expressions for\n-If a < 10 b = 20, else b = 30", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_108", "chunk_strategy": "fixed_size"}}, {"text": "____________________________________________________________________\n[A]Answer the following questions:\n(a)Write conditional expressions for\n-If a < 10 b = 20, else b = 30\n-Print 'Morning' if time < 12, otherwise print 'Afternoon'\n-If marks >= 70, set remarks to True, otherwise False\n(b)Rewrite the following code snippet in 1 line:\nx = 3 \ny = 3.0 \nif x == y:\nprint('x and y are equal') \nelse:\nprint('x and y are not equal') \n(c)What happens when a passstatement is executed?\n[B]What willbe the output of the following programs:\n(a)i, j, k= 4, -1, 0\nw = i orj ork \nx = i and j and k \ny = i orj and k \nz = i and j ork \nprint(w, x, y, z) \n(b)a = 10\na = not not a\nprint(a) \n--- Page 82 ---\n66 Let Us Python\n(c)x, y, z= 20, 40, 45 \nif x > y and x > z :\nprint('biggest = ' + str(x))\nelify > x and y > z:\nprint('biggest = ' + str(y))\nelif z > x and z > y:\nprint('biggest = ' + str(z))\n(d)num = 30 \nk = 100 if num <= 10 else500\nprint(k)\n(e)a = 10\nb = 60\nif a and b > 20 :\nprint('Hello')\nelse :\nprint('Hi')", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_109", "chunk_strategy": "fixed_size"}}, {"text": "print('biggest = ' + str(y))\nelif z > x and z > y:\nprint('biggest = ' + str(z))\n(d)num = 30 \nk = 100 if num <= 10 else500\nprint(k)\n(e)a = 10\nb = 60\nif a and b > 20 :\nprint('Hello')\nelse :\nprint('Hi')\n(f)a = 10\nb = 60\nif a > 20 and b > 20 :\nprint('Hello')\nelse :\nprint('Hi')\n(g) a= 10\nif a = 30 or 40 or 60 :\nprint('Hello')\nelse :\nprint('Hi')\n(h)a = 10\nif a = 30 or a == 40 or a == 60 :\nprint('Hello')\nelse :\nprint('Hi')\n(i)a = 10\nif a in (30, 40, 50) :\nprint('Hello')\nelse :\nprint('Hi')\n--- Page 83 ---\nChapter5: Decision Control Instruction 67\n[C]Point out the errors, if any, in the following programs:\n(a)a = 12.25\nb = 12.52\nifa = b:\nprint('a and b are equal')\n(b)if ord('X')< ord('x')\nprint('Unicode value of X is smaller than that of x') \n(c)x = 10 \nif x >= 2 then\nprint('x')\n(d)x = 10;y = 15\nif x % 2 = y % 3\nprint('Carpathians\\n')\n(e)x, y= 30, 40\nif x == y:\nprint('x is equal to y')\nelseif x > y :\nprint('x is greater than y')\nelseif x < y :\nprint('x is less than y')", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_110", "chunk_strategy": "fixed_size"}}, {"text": "(d)x = 10;y = 15\nif x % 2 = y % 3\nprint('Carpathians\\n')\n(e)x, y= 30, 40\nif x == y:\nprint('x is equal to y')\nelseif x > y :\nprint('x is greater than y')\nelseif x < y :\nprint('x is less than y')\n[D]If a = 10, b = 12, c = 0, find the values of the following expressions:\na != 6 and b > 5 \na == 9 or b < 3\nnot ( a < 10)\nnot ( a > 5 and c ) \n5 and c != 8 or !c\n[E]Attempt the followingquestions:\n(a)Any integer is input through the keyboard. Write a program to find \nout whether it is an odd number or even number.\n(b)Any year is input through the keyboard. Write a program to \ndetermine whether the year is a leap year or not.\n(c)If ages of Ram, Shyam and Ajay are input through the keyboard, \nwrite a program to determine the youngest of the three.\n(d)Write a program to check whether a triangle is valid or not, when \nthe three angles of the triangle are entered through the keyboard. \n--- Page 84 ---\n68 Let Us Python\nA triangle is valid if the sum of all the three angles is equal to 180 \ndegrees.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_111", "chunk_strategy": "fixed_size"}}, {"text": "the three angles of the triangle are entered through the keyboard. \n--- Page 84 ---\n68 Let Us Python\nA triangle is valid if the sum of all the three angles is equal to 180 \ndegrees.\n(e)Write a program to find the absolute value of a number entered \nthrough the keyboard.\n(f)Given the length and breadth of a rectangle, write a program to find \nwhether the area of the rectangle is greater than its perimeter. For \nexample, the area of the rectangle with length = 5 and breadth = 4 \nis greater than its perimeter.\n(g) Given three points (x1, y1), (x2, y2)and (x3, y3), write a program to \ncheck if all the three points fall on one straight line.\n(h)Given the coordinates (x, y)of center of a circle and its radius, write \na program that will determine whether a point lies inside the circle, \non the circle or outside the circle. (Hint: Use sqrt()and pow( )\nfunctions)\n(i)Given a point (x, y), write a program to find out if it lies on the X-\naxis, Y-axis or on the origin.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_112", "chunk_strategy": "fixed_size"}}, {"text": "on the circle or outside the circle. (Hint: Use sqrt()and pow( )\nfunctions)\n(i)Given a point (x, y), write a program to find out if it lies on the X-\naxis, Y-axis or on the origin.\n(j)A year is entered through the keyboard, write a program to \ndetermine whether the year is leap or not. Use the logical operators \nandand or.\n(k)If the three sides of a triangle are entered through the keyboard, \nwrite a program to check whether the triangle is valid or not. The \ntriangle is valid if the sum of two sides is greater than the largest of \nthe three sides.\n(l)If the three sides of a triangle are entered through the keyboard, \nwrite a program to check whether the triangle is isosceles, \nequilateral, scalene or right angled triangle.\n--- Page 85 ---\nLet UsPython\n69RepetitionControl\nInstruction\nxRepetition Control Instruction xElse Block of a Loop\nxUsage of whileLoop xPrograms\nxUsage of forLoop xExercises\nxbreakand continue6\n\u201cMerry go round... \u201d\n--- Page 86 ---\n70 Let Us Python", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_113", "chunk_strategy": "fixed_size"}}, {"text": "Instruction\nxRepetition Control Instruction xElse Block of a Loop\nxUsage of whileLoop xPrograms\nxUsage of forLoop xExercises\nxbreakand continue6\n\u201cMerry go round... \u201d\n--- Page 86 ---\n70 Let Us Python\nRepetition Control Instruction\nxIthelps us a repeat a set of statements in a program. There are two \ntypes of repetition control instructions:\n(a)while \n(b)for \nUnlike many other languages there is no do-while loop in Python.\nxwhileis used to repeatedly execute instructions as long as condition \nis true. It has two forms:\nwhile condition :\nstatement1 \nstatement2while condition :\nstatement1 \nstatement2\nelse :\nstatement3\nstatement4\n-elseblock is optional. If present, it is executed when condition\nfails. \n-If the whileloop is terminated abruptly using a breakstatement \nthen the elseblock is not executed.\nxforis used to iterate over elements of a sequence such as string, \ntuple or list. It has two forms:\nfor var in list : \nstatement1 \nstatement2for var in list : \nstatement1 \nstatement2\nelse :", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_114", "chunk_strategy": "fixed_size"}}, {"text": "xforis used to iterate over elements of a sequence such as string, \ntuple or list. It has two forms:\nfor var in list : \nstatement1 \nstatement2for var in list : \nstatement1 \nstatement2\nelse :\nstatement3\nstatement4\n-During each iteration varis assigned the next value from the list.\n-In place of a list a string, tuple, set or dictionary can also be used.\n-elseblock is optional. If present, it is executed if loop is not \nterminated abruptly using break.\nUsage of w h i l eloop\nxA whileloop can be used in following three situations:\n-Repeat a set of statements till a condition remains True.\n--- Page 87 ---\nChapter6: Repetition Control Instruction 71\n-Repeat a set of statements a finite number of times.\n-Iterate through a string, list and tuple.\nxWhen we use whileloop to repeat a set of statements till a \ncondition remains True, it means that when we do not know before-\nhand how many times the statements are to be executed.\nnum = int(input('Enter a number: '))\nwhile num != 5 :", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_115", "chunk_strategy": "fixed_size"}}, {"text": "condition remains True, it means that when we do not know before-\nhand how many times the statements are to be executed.\nnum = int(input('Enter a number: '))\nwhile num != 5 :\nprint(num, num * num)\nnum = int(input('Enter a number: '))\nThe loop terminates when 5 is entered as input.\nxWe can use a whileloop to repeat a set of statements a finite \nnumber of times.\ncount = 0\nwhile count < 10 :\nprint(count, count * count, count * count * count)\ncount += 1\nxA whileloop can also be used to iterate through a string, a list or a \ntuple using an index value as shown in the following program:\ns = 'Mumbai'\nlst = ['desert', 'dessert', 'to', 'too','lose', 'loose'] \ntpl = (10, 20, 30, -20, -10)\ni = 0\nwhile i < len(lst) :\nprint(i, s[i], lst[i], tpl[i])\ni += 1\nSince items in a set or a dictionary cannot be accessed using an index \nvalue, it is better to use a forloop to access their elements.\nxOf the three usages of while loop shown above, the most popular is", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_116", "chunk_strategy": "fixed_size"}}, {"text": "value, it is better to use a forloop to access their elements.\nxOf the three usages of while loop shown above, the most popular is \nthe first usage \u2014repeat statements an unknown number of times. \nThe other two situations are usually handled using a forloop.\nUsage of f o rloop\nxA forloop can be used in following two situations:\n-Repeat a set of statements a finite number of times.\n-Iterate through a string, list, tuple, set or dictionary.\n--- Page 88 ---\n72 Let Us Python\nxTo repeat a set of statements a finite number of times abuilt-in \nfunctionrange( )is used.\nxrange( ) function generates a sequence of integers.\nrange(10) -generates numbers from 0 to 9.\nrange(10, 20) -generates numbers from 10 to 19.\nrange(10, 20, 2) -generates numbers from 10 to 19 in steps of 2.\nrange(20, 10, -3) -generates numbers from 20 to 9 in steps of -3.\nNote that range( )cannot generate a sequence of floats.\nxIn general, \nrange(start, stop, step) \nproduces a sequence of integers from start (inclusive) to stop", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_117", "chunk_strategy": "fixed_size"}}, {"text": "Note that range( )cannot generate a sequence of floats.\nxIn general, \nrange(start, stop, step) \nproduces a sequence of integers from start (inclusive) to stop \n(exclusive) by step.\nxThe list of numbers generated using range( )can be iterated through \nusing a forloop.\nfor i in range(1, 10, 2) :\nprint(i, i * i, i * i * i)\nxA forloop is very popularly used to iterate through a string, list, \ntuple, set or dictionary, as shown below. \nfor char in 'Leopard' :\nprint(char)\nfor animal in ['Cat', 'Dog', 'Tiger', 'Lion', 'Leopard'] :\nprint(animal)\nfor flower in ('Rose', 'Lily', 'Jasmine') :\nprint(flower)\nfor num in {10, 20, 30, -10, -25} :\nprint(num)\nfor key in {'A101' : 'Rajesh', 'A111' : 'Sunil', 'A112' : 'Rakesh'} :\nprint(key)\nIn the first forloop ineach iterationof the loop charis assigned the \nnext value from the string.\nSimilarly, in the second, third and fourth forloop, in each iterationof \nthe loop animal/flower/numis assigned the next value form the \nlist/tuple/set.\n--- Page 89 ---", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_118", "chunk_strategy": "fixed_size"}}, {"text": "next value from the string.\nSimilarly, in the second, third and fourth forloop, in each iterationof \nthe loop animal/flower/numis assigned the next value form the \nlist/tuple/set.\n--- Page 89 ---\nChapter6: Repetition Control Instruction 73\nNote that in the last for loop we are printing only the keys in the \ndictionary. Printing values, or printing both keys and values are \ncovered in Chapter 11.\nxIf while iterating through a collection using a forloop if we wish to \nalso get an index of the item we should use the built-in enumerate( )\nfunctionas shown below:\nlst = ['desert', 'dessert', 'to', 'too', 'lose', 'loose'] \nfor i, ele in enumerate(lst) :\nprint(i, ele)\nb r e a kand c o n t i n u e\nxbreakand continuestatements can be used with whileand for.\nxbreakstatement terminates the loop without executing the else\nblock.\nxcontinuestatement skips the rest of the statements in the block and \ncontinues with the next iteration of the loop.\nElse Block of a Loop", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_119", "chunk_strategy": "fixed_size"}}, {"text": "block.\nxcontinuestatement skips the rest of the statements in the block and \ncontinues with the next iteration of the loop.\nElse Block of a Loop\nxelseblock of a whileloop should be used in situations where you \nwish to execute some statements if the loop is terminated normally \nand not if it is terminated abruptly. \nxSuch a situation arises if we are to determinewhether a number is \nprime or not.\nnum = int(input('Enter an integer: '))\ni = 2\nwhile i <= num -1 :\nif num % i == 0 :\nprint(num, 'is not a prime number')\nbreak\ni += 1\nelse :\nprint(num, 'is a prime number')\nNote the indentation of else. elseis working for the whileand not \nfor if.\n--- Page 90 ---\n74 Let Us Python\nxIn the following example elseblock will not go to work as the list \ncontains 3, a non-multiple of 10, on encountering which we \nterminate the loop. \nfor ele in [10, 20, 30, 3, 40, 50] :\nif ele % 10 != 0 : \nprint(ele, 'is a not a multiple of 10')\nbreak\nelse : \nprint('all numbers in list are multiples of 10')", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_120", "chunk_strategy": "fixed_size"}}, {"text": "terminate the loop. \nfor ele in [10, 20, 30, 3, 40, 50] :\nif ele % 10 != 0 : \nprint(ele, 'is a not a multiple of 10')\nbreak\nelse : \nprint('all numbers in list are multiples of 10')\n____________________________________________________________________\nProblem 6.1\nWrite a program that receives 3 sets of values of p, n and r and \ncalculates simple interest for each.\nProgram\ni = 1\nwhile i <= 3 : \np = float(input('Enter value of p: '))\nn = int(input('Enter value of n: '))\nr = float(input('Enter value of r: '))\nsi = p * n * r / 100\nprint('Simple interest = Rs. ' + str (si))\ni = i + 1\nOutput\nEnter value of p: 1000\nEnter value of n: 3\nEnter value of r: 15.5\nSimple interest = Rs. 465.0\nEnter value of p: 2000\nEnter value of n: 5\nEnter value of r: 16.5\nSimple interest = Rs. 1650.0\nEnter value of p: 3000\n--- Page 91 ---\nChapter6: Repetition Control Instruction 75\nEnter value of n: 2\nEnter value of r: 10.45\nSimple interest = Rs. 626.9999999999999", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_121", "chunk_strategy": "fixed_size"}}, {"text": "Simple interest = Rs. 1650.0\nEnter value of p: 3000\n--- Page 91 ---\nChapter6: Repetition Control Instruction 75\nEnter value of n: 2\nEnter value of r: 10.45\nSimple interest = Rs. 626.9999999999999\n____________________________________________________________________\nProblem 6.2\nWrite a program that prints numbers from 1 to 10 using an infinite loop. \nAll numbers should get printed in the same line.\nProgram\ni = 1 \nwhile 1: \nprint(i, end=' ') \ni += 1 \nif i > 10 : \nbreak\nOutput\n1 2 3 4 5 6 7 8 9 10\nTips\nxwhile 1creates an infinite loop, as 1 is non-zero, hence true.\nReplacing 1 with any non-zero number will create an infinite loop.\nxAnother way of creating an infinite loop is while True.\nxend=' 'in print( )prints a space after printing iin each iteration. \nDefault value of endis newline ('\\n').\n____________________________________________________________________\nProblem 6.3\nWrite a program that prints all unique combinations of 1, 2 and 3.\nProgram\ni = 1 \nwhile i <= 3 : \nj = 1", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_122", "chunk_strategy": "fixed_size"}}, {"text": "____________________________________________________________________\nProblem 6.3\nWrite a program that prints all unique combinations of 1, 2 and 3.\nProgram\ni = 1 \nwhile i <= 3 : \nj = 1 \nwhile j <= 3 : \nk = 1\n--- Page 92 ---\n76 Let Us Python\nwhile k <= 3 : \nif i == j or j == k or k == i : \nk += 1 \ncontinue \nelse :\nprint(i, j, k)\nk += 1 \nj += 1\ni += 1 \nOutput\n1 2 3\n1 3 2\n2 1 3\n2 3 1\n3 1 2\n3 2 1\n____________________________________________________________________\nProblem 6.4\nWrite a program that obtains decimal value of a binary numeric string. \nFor example, decimal value of '1111' is 15.\nProgram\nb = '1111'\ni = 0 \nwhile b : \ni = i * 2 + (ord(b[0]) -ord('0')) \nb = b[1:]\nprint('Decimal value = '+ str(i)) \nOutput\nDecimal value = 15\nTips\nxord(1)is 49, whereas ord('0')is 0.\nxb = b[1:]strips the first character in b. \n____________________________________________________________________\n--- Page 93 ---\nChapter6: Repetition Control Instruction 77\nProblem 6.5", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_123", "chunk_strategy": "fixed_size"}}, {"text": "xb = b[1:]strips the first character in b. \n____________________________________________________________________\n--- Page 93 ---\nChapter6: Repetition Control Instruction 77\nProblem 6.5\nWrite a program that generates the following output using a forloop:\nA,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,\nz,y,x,w,v,u,t,s,r,q,p,o,n,m,l,k,j,i,h,g,f,e,d,c,b,a,\nProgram\nfor alpha in range(65,91) :\nprint(chr(alpha), end=',')\nprint()\nfor alpha in range(122,96, -1) :\nprint(chr(alpha), end=',')\nTips\nxUnicode values of alphabets A-Z are 65-90. Unicode values of \nalphabets a-z are 97-122.\nxEach output of print statement ends with a comma.\nxEmpty print( )statement positions the cursor at the beginning of the \nnext line.\n____________________________________________________________________\n[A]Answer the followingquestions:\n(a)When does the elseblock of a whileloop go to work?\n(b)Can range( )function be used to generate numbers from 0.1 to 1.0 \nin steps of 0.1?", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_124", "chunk_strategy": "fixed_size"}}, {"text": "[A]Answer the followingquestions:\n(a)When does the elseblock of a whileloop go to work?\n(b)Can range( )function be used to generate numbers from 0.1 to 1.0 \nin steps of 0.1?\n(c)Can a whileloop be nested within a forloop and vice versa?\n(d)Can a while/forloop be used in an if/elseand vice versa?\n(e)Can a do-while loop be used to repeat a set of statements?\n(f)How will you write an equivalent forloop for the following:\ncount = 1 \nwhilecount<=10:\nprint(count)\ncount = count + 1\n--- Page 94 ---\n78 Let Us Python\n(g) What will be the output of the following code snippet? \nfor index in range(20, 10, -3) :\nprint(index, end = ' ')\n(h)Why should breakand continuebe always used with an if\nembedded in a whileor forloop? \n[B]Point out the errors, if any, in the following programs:\n(a)j= 1 \nwhilej<= 10:\nprint(j)\nj++\n(b)while true :\nprint('Infinite loop') \n(c)lst = [10, 20, 30, 40, 50]\nfor count = 1 to 5:\nprint(lst[ i ])\n(d)i = 15\nnot while i < 10 :\nprint(i)\ni -= 1\n(e)# Print alphabets from A to Z", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_125", "chunk_strategy": "fixed_size"}}, {"text": "print(j)\nj++\n(b)while true :\nprint('Infinite loop') \n(c)lst = [10, 20, 30, 40, 50]\nfor count = 1 to 5:\nprint(lst[ i ])\n(d)i = 15\nnot while i < 10 :\nprint(i)\ni -= 1\n(e)# Print alphabets from A to Z\nfor alpha in range(65, 91) :\nprint(ord(alpha), end=' ')\n(f)for i in range(0.1, 1.0, 0.25) :\nprint(i)\n(g) i = 1\nwhile i <= 10 :\nj = 1\nwhile j <= 5 :\nprint(i, j )\nj += 1\nbreak\nprint(i, j)\ni += 1\n--- Page 95 ---\nChapter6: Repetition Control Instruction 79\n[C]Match the following for the values each range( )function will \ngenerate.\na. range(5) 1. 1, 2, 3, 4\nb. range(1, 10, 3) 2. 0, 1, 2, 3, 4\nc. range(10, 1, -2) 3. Nothing\nd. range(1, 5) 4. 10, 8, 6, 4, 2\ne. range(-2) 5. 1, 4, 7\n[D]Attempt the followingquestions:\n(a)Write a program to print first 25 odd numbers using range( ).\n(b)Rewrite the following program using for loop.\nlst = ['desert', 'dessert', 'to', 'too', 'lose', 'loose'] \ns = 'Mumbai'\ni = 0\nwhile i < len(lst) :\nif i > 3 :\nbreak\nelse :\nprint(i, lst[i], s[i])\ni += 1", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_126", "chunk_strategy": "fixed_size"}}, {"text": "lst = ['desert', 'dessert', 'to', 'too', 'lose', 'loose'] \ns = 'Mumbai'\ni = 0\nwhile i < len(lst) :\nif i > 3 :\nbreak\nelse :\nprint(i, lst[i], s[i])\ni += 1\n(c)Write a program to count the number of alphabets and number of \ndigits in the string 'Nagpur-440010' \n(d)A five-digit number is entered through the keyboard. Write a \nprogram to obtain the reversed number and to determine whether \nthe original and reversed numbers are equal or not.\n(e)Write a program to find the factorial value of any number entered \nthrough the keyboard.\n(f)Write a program to print out all Armstrong numbers between 1 and \n500. If sum of cubes of eachdigit of the number is equal to the \nnumber itself, then the number is called an Armstrong number. For \nexample, 153 = ( 1 * 1 * 1 ) + ( 5 * 5 * 5 ) + ( 3 * 3 * 3 ).\n(g) Write a program to print all prime numbers from 1 to 300. \n(h)Write a program to print the multiplication table of the number \nentered by the user. The table should get displayed in the following \nform:", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_127", "chunk_strategy": "fixed_size"}}, {"text": "(h)Write a program to print the multiplication table of the number \nentered by the user. The table should get displayed in the following \nform:\n29 * 1 = 29\n29 * 2 = 58\n--- Page 96 ---\n80 Let Us Python\n\u2026\n(i)When interest compounds qtimes per year at an annual rate of \nr % for nyears, the principal pcompounds to an amount aas per \nthe following formula:\na = p ( 1 + r / q ) nq\nWrite a program to read 10 sets of p, r, n& qand calculate the \ncorresponding as.\n(j)Write a program to generate all Pythagorean Triplets with side \nlength less than or equal to 30.\n(k)Population of a town today is 100000. The population has increased \nsteadily at the rate of 10 % per year for last 10 years. Write a \nprogram to determine the population at the end of each year in the \nlast decade.\n(l)Ramanujan number is the smallest number that can be expressed as \nsum of two cubes in two different ways. Write a program to print all \nsuch numbers up to a reasonable limit.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_128", "chunk_strategy": "fixed_size"}}, {"text": "last decade.\n(l)Ramanujan number is the smallest number that can be expressed as \nsum of two cubes in two different ways. Write a program to print all \nsuch numbers up to a reasonable limit.\n(m)Write a program to print 24 hours of day with suitable suffixes like \nAM, PM, Noon and Midnight.\n--- Page 97 ---\nLet UsPython\n81Console\nInput/Output\nxConsole Input xPrograms\nxConsole Output xExercises\nxFormatted Printing7\n\u201cInput from keyboard, output to screen... \u201d\n--- Page 98 ---\n82 Let Us Python\nxConsole Input/Output means input from keyboard and output to \nscreen.\nConsole Input\nxConsole input can be received using thebuilt-ininput( )function.\nxGeneral form of input( )function is\ns = input('prompt')\nprompt is a string that is displayed on the screen, soliciting a value.\ninput( )returns a string. If 123 is entered as input, '123' is returned.\nxinput( )can be used to receive, 1, or more values.\n# receive full name \nname = input('Enter full name') \n# separate first name, middle name and surname", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_129", "chunk_strategy": "fixed_size"}}, {"text": "xinput( )can be used to receive, 1, or more values.\n# receive full name \nname = input('Enter full name') \n# separate first name, middle name and surname\nfname, mname, sname = input('Enter full name: ').split( )\nsplit( )function will split the entered fullnamewith space as a \ndelimiter. The split values will then be assigned to fname, mname , \nlname.\nxIf we are to receive multiple intvalues, we can receive them as \nstrings and then convert them to ints.\nn1, n2, n3 = input('Enter three values: ').split( ) \nn1, n2, n3 = int(n1), int(n2), int(n3)\nprint(n1 + 10, n2 + 20, n3 + 30)\nxThe same thing can be done using in a more compact manner using \na feature called list comprehension. It applies int( )function to every \nelement of the list returned by the split( )function. \nn1, n2, n3 = [int(n) for n in input('Enter three values: ').split( )] \nprint(n1 +10, n2+20, n3+30)\nThe expression enclosed within [ ] is called list comprehension. It is \ndiscussed in detail in Chapter 12.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_130", "chunk_strategy": "fixed_size"}}, {"text": "print(n1 +10, n2+20, n3+30)\nThe expression enclosed within [ ] is called list comprehension. It is \ndiscussed in detail in Chapter 12.\nxinput( )can be used to receive arbitrary number of values.\n--- Page 99 ---\nChapter7: Console Input/Output 83\nnumbers = [int(x) for x in input('Enter values: ').split( )] \nfor n in numbers :\nprint(n + 10)\nxinput( )can be used to receive different types of values at a time.\ndata = input('Enter name, age, salary: ').split() \nname = data[0]\nage = int(data[1])\nsalary = float(data[2])\nConsole Output\nxBuilt-in function print( ) isused to send output to screen.\nxprint( ) function has this form:\nprint(objects, sep=' ', end='\\n', file=sys.stdout, flush=False)\nThis means that by default objects will be printed onscreen \n(sys.stdout), separated by space (sep = ' ') and last printed object will \nbe followed by a newline (end = '\\n'). flush= False indicates that \noutput stream will not be flushed.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_131", "chunk_strategy": "fixed_size"}}, {"text": "(sys.stdout), separated by space (sep = ' ') and last printed object will \nbe followed by a newline (end = '\\n'). flush= False indicates that \noutput stream will not be flushed.\nxPython has a facility to call functions and pass keyword-based values \nas arguments. So while calling print( ) we can pass specific values for \nsepand end. In this case, default values will not be used; instead the \nvalues that we pass will be used.\nprint(a, b, c, sep = ',', end = '!') # prints ',' after each value, ! at end\nprint(x, y, sep = '...', end = '#') # prints '...' after each value, # at end\nFormatted Printing\nxThere are 4 ways to control the formatting of output:\n(a)Using formatted string literals -easiest\n(b)Using the format( )method -older\n(c)C printf( )style -legacy\n(d)Using slicing and concatenation operation -difficult\nToday (a) is most dominantly used method followed by (b).\nxUsing formatted string literals (often called fstrings):\n--- Page 100 ---\n84 Let Us Python", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_132", "chunk_strategy": "fixed_size"}}, {"text": "Today (a) is most dominantly used method followed by (b).\nxUsing formatted string literals (often called fstrings):\n--- Page 100 ---\n84 Let Us Python\nr, l, b = 1.5678, 10.5, 12.66\nprint(f'radius = {r}')\nprint(f'length = {l} breadth = {b} radius = {r}')\nname = 'Sushant Ajay Raje'\nfor n in name.split( ) :\nprint(f'{n:10}') # print in 10 columns\nxUsing format( )method of string object:\nr, l, b = 1.5678, 10.5, 12.66\nname, age, salary = 'Rakshita', 30, 53000.55\n# print in order by position of variables using empty {}\nprint('radius = {} length = {} breadth ={}'.format(r, l, b))\nprint('name = {} age = {} salary = {}'.format(name, age, salary))\n# print in any desired order\nprint('radius = {2} length = {1} breadth ={0}'.format(r, l, b))\nprint('age={1} salary={2} name={0}'.format(name, age, salary))\n# print name in 15 columns, salary in 10 columns\nprint('name = {0:15} salary = {1:10}'.format(name, salary))\n# print radius in 10 columns, with 2 digits after decimal point", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_133", "chunk_strategy": "fixed_size"}}, {"text": "# print name in 15 columns, salary in 10 columns\nprint('name = {0:15} salary = {1:10}'.format(name, salary))\n# print radius in 10 columns, with 2 digits after decimal point\nprint('radius = {0:10.2f}'.format(r))\nOn execution, the above code snippet will produce the following \noutput:\nradius = 1.5678 length = 10.5 breadth =12.66\nname = Rakshita age = 30 salary = 53000.55\nradius = 12.66 length = 10.5 breadth =1.5678\nage=30 salary=53000.55 name=Rakshita\nname = Rakshita salary = 53000.55\nradius = 1.57\n____________________________________________________________________\n--- Page 101 ---\nChapter7: Console Input/Output 85\nProblem 7.1\nWrite a program to receive radius of a circle, and length and breadth of \na rectangle in one call to input( ). Calculate and print the circumference \nof circle and perimeter of rectangle.\nProgram\nr, l, b = input('Enter radius, length and breadth: ').split( ) \nradius = int(r)\nlength = int(l)\nbreadth = int(b)\ncircumference = 2 * 3.14 * radius", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_134", "chunk_strategy": "fixed_size"}}, {"text": "of circle and perimeter of rectangle.\nProgram\nr, l, b = input('Enter radius, length and breadth: ').split( ) \nradius = int(r)\nlength = int(l)\nbreadth = int(b)\ncircumference = 2 * 3.14 * radius \nperimeter = 2 * ( length + breadth ) \nprint(circumference)\nprint(perimeter)\nOutput\nEnter radius, length and breadth: 3 4 5\n18.84\n18\nTips\nxinput( ) returns a string, so it is necessary to convert it into int or \nfloat suitably, before performing arithmetic operations.\n____________________________________________________________________\nProblem 7.2\nWrite a program to receive 3 integers using one call to input( ). The \nthree integers signify starting value, ending value and step value for a \nrange. The program should use these values to print the number, its \nsquare and its cube, all properly right-aligned. Also output the same \nvalues left-aligned.\n--- Page 102 ---\n86 Let Us Python\nProgram\nstart, end, step = input('Enter start, end, step values: ').split( )\n# right aligned printing", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_135", "chunk_strategy": "fixed_size"}}, {"text": "values left-aligned.\n--- Page 102 ---\n86 Let Us Python\nProgram\nstart, end, step = input('Enter start, end, step values: ').split( )\n# right aligned printing\nfor n in range(int(start), int(end), int(step)) :\nprint(f'{n:>5}{n**2:>7}{n**3:>8}')\nprint( ) \n# left aligned printing\nfor n in range(int(start), int(end), int(step)) :\nprint('{0:<5}{1:<7}{2:<8}'.format(n, n ** 2, n ** 3))\nOutput\nEnter start, end, step values:1 10 2\n1 1 1\n3 9 27\n5 25 125\n7 49 343\n9 81 729\n1 1 1 \n3 9 27 \n5 25 125 \n7 49 343 \n9 81 729 \nTips\nx{n:>5}will print n right-justified within 5 columns. Use < to left-\njustify.\nx{0:<5} will left-justify 0thparameter in the list within 5 columns. Use \n> to right-justify.\n____________________________________________________________________\nProblem 7.3\nWrite a program to maintain names and cell numbers of 4 persons and \nthen print them systematically in a tabular form.\n--- Page 103 ---\nChapter7: Console Input/Output 87\nProgram\ncontacts={\n'Dilip': 9823077892, 'Shekhar': 6784512345,", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_136", "chunk_strategy": "fixed_size"}}, {"text": "then print them systematically in a tabular form.\n--- Page 103 ---\nChapter7: Console Input/Output 87\nProgram\ncontacts={\n'Dilip': 9823077892, 'Shekhar': 6784512345,\n'Vivek': 9823011245, 'Riddhi': 9766556779 \n}\nfor name, cellno in contacts.items( ) :\nprint(f'{name:15} : {cellno:10d}')\nOutput\nDilip : 9823077892\nShekhar : 6784512345\nVivek : 9823011245\nRiddhi : 9766556779\n____________________________________________________________________\nProblem 7.4\nSuppose there are 5 variables in a program \u2014max , min, mean , sdand \nvar, having some suitable values. Write a program to print these \nvariables properly aligned using multiple fstrings, but one call to print( ). \nProgram\nmin, max = 25, 75\nmean = 35\nsd = 0.56\nvar = 0.9\nprint(\nf'\\n{\"Max Value:\":<15}{max:>10}',\nf'\\n{\"Min Value:\":<15}{min:>10}',\nf'\\n{\"Mean:\":<15}{mean:>10}',\nf'\\n{\"Std Dev:\":<15}{sd:>10}',\nf'\\n{\"Variance:\":<15}{var:>10}' )\nOutput\nMax Value: 75 \nMin Value: 25 \nMean: 35 \n--- Page 104 ---\n88 Let Us Python\nStd Deviation:0.56", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_137", "chunk_strategy": "fixed_size"}}, {"text": "f'\\n{\"Mean:\":<15}{mean:>10}',\nf'\\n{\"Std Dev:\":<15}{sd:>10}',\nf'\\n{\"Variance:\":<15}{var:>10}' )\nOutput\nMax Value: 75 \nMin Value: 25 \nMean: 35 \n--- Page 104 ---\n88 Let Us Python\nStd Deviation:0.56 \nVariance: 0.9\n____________________________________________________________________\nProblem 7.5\nWrite a program that prints square root and cube root of numbers from \n1to 10, up to 3 decimal places. Ensure that the output is displayed in \nseparate lines, with number center-justified and square and cube roots, \nright-justified.\nProgram\nimport math\nwidth = 10\nprecision = 4\nfor n in range(1, 10) :\ns = math.sqrt(n)\nc = math.pow(n,1/3)\nprint(f'{n:^5}{s:{width}.{precision}}{c:{width}.{precision}}')\nOutput\n1 1.0 1.0\n2 1.414 1.26\n3 1.732 1.442\n4 2.0 1.587\n5 2.236 1.71\n6 2.449 1.817\n7 2.646 1.913\n8 2.828 2.0\n9 3.0 2.08\n____________________________________________________________________\n[A]Attempt the followingquestions:\n(a)How will you make the following code more compact?", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_138", "chunk_strategy": "fixed_size"}}, {"text": "7 2.646 1.913\n8 2.828 2.0\n9 3.0 2.08\n____________________________________________________________________\n[A]Attempt the followingquestions:\n(a)How will you make the following code more compact?\nprint('Enter ages of 3 persons')\nage1 = input( )\nage2 = input( )\n--- Page 105 ---\nChapter7: Console Input/Output 89\nage3 = input( )\n(b)How will you print \"Rendezvous\" in a line and retain the cursor in \nthe same line in which the output has been printed?\n(c)What will be the output of the following code snippet? \nl, b = 1.5678, 10.5\nprint('length = {l} breadth = {b}')\n(d)In the following statement what do > 5, > 7 and > 8 signify?\nprint(f'{n:>5}{n**2:>7}{n**3:>8}')\n(e)What will be the output of the following code segment?\nname = 'Sanjay'\ncellno = 9823017892\nprint(f'{name:15} : {cellno:10}')\n(f)How will youprint the output of the following code segmentusing \nfstring?\nx, y, z =10, 20, 40\nprint('{0:<5}{1:<7}{2:<8}'.format(x, y, z))\n(g)How will you receive arbitrary number of floats from keyboard?", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_139", "chunk_strategy": "fixed_size"}}, {"text": "fstring?\nx, y, z =10, 20, 40\nprint('{0:<5}{1:<7}{2:<8}'.format(x, y, z))\n(g)How will you receive arbitrary number of floats from keyboard?\n(h)What changes should be made in \nprint(f'{'\\nx = ':4}{x:>10}{'\\ny= ':4}{y:>10}')\nto produce the output given below:\nx = 14.99 \ny = 114.39 \n(i)How will you receive a boolean value as input?\n(j)How will you receive a complex number as input?\n(k)How will you display pricein 10 columns with 4places beyond \ndecimal points? Assume value of price to be 1.5567894.\n(l)Write a program to receive an arbitrary number of floats using one \ninput( )statement. Calculate the average of floats received.\n(m)Write a program to receive the followingusing one input( ) \nstatement. \n--- Page 106 ---\n90 Let Us Python\nName of the person\nYears of service\nDiwali bonus received\nCalculate and print the agreement deduction as per the following \nformula:\ndeduction = 2 * years of service + bonus * 5.5 / 100\n(n)Which import statement should be added to use the built-in", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_140", "chunk_strategy": "fixed_size"}}, {"text": "Calculate and print the agreement deduction as per the following \nformula:\ndeduction = 2 * years of service + bonus * 5.5 / 100\n(n)Which import statement should be added to use the built-in \nfunctions input( )and print( )?\n(o)Is the following statement correct?\nprint('Result = ' + 4 > 3)\n(p)Write a program to print the following values\na = 12.34, b = 234.39, c = 444.34, d = 1.23, e = 34.67\nasshown below:\na = 12.34 \nb = 234.39 \nc = 444.34 \nd = 1.23 \ne = 34.67\n[B]Match the followingpairs:\na. Default value of sep in print( ) 1. ' '\nb. Default value of end in print( ) 2. Using fstring\nc. Easiest way to print output 3. Right justify num in 5columns\nd. Return type of split( ) 4. Left justify num in 5 columns\ne. print('{num:>5}') 5. list\nf. print('{num:<5}') 6. \\n\n--- Page 107 ---\n91 Lists \n\u2022What are Lists? \u2022Sorting and Reversing \n\u2022Accessing List Elements \u2022List Varieties \n\u2022Looping in Lists \u2022Stack Data Structure \n\u2022Basic List Operations \u2022Queue Data structure", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_141", "chunk_strategy": "fixed_size"}}, {"text": "--- Page 107 ---\n91 Lists \n\u2022What are Lists? \u2022Sorting and Reversing \n\u2022Accessing List Elements \u2022List Varieties \n\u2022Looping in Lists \u2022Stack Data Structure \n\u2022Basic List Operations \u2022Queue Data structure \n\u2022Using Built-in Functions on Lists \u2022Programs \n\u2022List Methods \u2022Exercises 8 \n\u201cBringing order to chaos...\u201d \n--- Page 108 ---\n92 Let Us Python \nWhat are Lists? \n\u2022Container is an entity which contains multiple data items. It is also \nknown as a collection or a compound data type. \n\u2022Python has following container data types: \nLists Tuples \nSets Dictionaries \n\u2022A list can grow or shrink during execution of the program. Hence it is \nalso known as a dynamic array. Because of this nature of lists they \nare commonly used for handling variable length data. \n\u2022A list is defined by writing comma-separated elements within [ ]. \nnum = [10, 25, 30, 40, 100] \nnames = ['Sanjay', 'Anil', 'Radha', 'Suparna'] \n\u2022List can contain dissimilar types, though usually they are a collection \nof similar types. For example:", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_142", "chunk_strategy": "fixed_size"}}, {"text": "num = [10, 25, 30, 40, 100] \nnames = ['Sanjay', 'Anil', 'Radha', 'Suparna'] \n\u2022List can contain dissimilar types, though usually they are a collection \nof similar types. For example: \nanimal = ['Zebra', 155.55, 110] \n\u2022Items in a list can be repeated, i.e. a list may contain duplicate items. \nLike printing, * can be used to repeat an element multiple times. An \nempty list is also feasible. \nages = [25, 26, 25, 27, 26] # duplicates allowed \nnum = [10] * 5 # stores [10, 10, 10, 10, 10] \nlst = [ ] # empty list, valid \nAccessing List Elements \n\u2022Entire list can be printed by just using the name of the list. \nl = ['Able', 'was', 'I', 'ere', 'I', 'saw', 'elbA'] \nprint(l) \n\u2022Like strings, individual elements in a list can be accessed using \nindices. Hence they are also known as sequence types. The index \nvalue starts from 0. \n--- Page 109 ---\nChapter 8: Lists 93\nprint(animals[1], ages[3]) \n\u2022Like strings, lists can be sliced. \nprint(animals[1:3]) \nprint(ages[3:]) \nLooping in Lists", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_143", "chunk_strategy": "fixed_size"}}, {"text": "value starts from 0. \n--- Page 109 ---\nChapter 8: Lists 93\nprint(animals[1], ages[3]) \n\u2022Like strings, lists can be sliced. \nprint(animals[1:3]) \nprint(ages[3:]) \nLooping in Lists \n\u2022If we wish to process each item in the list, we should be able to \niterate through the list. This can done using a whileor forloop. \nanimals = ['Zebra', 'Tiger', 'Lion', 'Jackal', 'Kangaroo'] \n# using while loop \ni = 0 \nwhile i < len(animals) : \nprint(animals[ i ]) \ni += 1 \n# using more convenient for loop \nfor a in animals : \nprint(a) \n\u2022While iterating through a list using a forloop, if we wish to keep \ntrack of index of the element that ais referring to, we can do so \nusing the built-in enumerate( )function. \nanimals = ['Zebra', 'Tiger', 'Lion', 'Jackal', 'Kangaroo'] \nfor index, a in enumerate(animals) : \nprint(index, a) \nBasic List Operations \n\u2022Mutability - Unlike strings, lists are mutable (changeable). So lists \ncan be updated as shown below: \nanimals = ['Zebra', 'Tiger', 'Lion', 'Jackal', 'Kangaroo']", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_144", "chunk_strategy": "fixed_size"}}, {"text": "Basic List Operations \n\u2022Mutability - Unlike strings, lists are mutable (changeable). So lists \ncan be updated as shown below: \nanimals = ['Zebra', 'Tiger', 'Lion', 'Jackal', 'Kangaroo'] \nages = [25, 26, 25, 27, 26, 28, 25] \nanimals[2] ='Rhinoceros' \nages[5] = 31 \nages[2:5] = [24, 25, 32] # sets items 2 to 5 with values 24, 25, 32 \nages[2:5] = [ ] # delete items 2 to 4 \n--- Page 110 ---\n94 Let Us Python \n\u2022Concatenation - One list can be concatenated (appended) at the end \nof another as shown below: \nlst = [12, 15, 13, 23, 22, 16, 17] \nlst = lst + [33, 44, 55] \nprint(lst) # prints [12, 15, 13, 23, 22, 16, 17, 33, 44, 55] \n\u2022Merging - Two lists can be merged to create a new list. \ns = [10, 20, 30] \nt = [100, 200, 300] \nz = s + t \nprint(z) # prints [10, 20, 30, 100, 200, 300] \n\u2022Conversion - A string/tuple/set can be converted into a list using the \nlist( )conversion function. \nl = list('Africa') # converts the string to a list ['A', 'f', 'r', 'i', 'c', 'a']", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_145", "chunk_strategy": "fixed_size"}}, {"text": "\u2022Conversion - A string/tuple/set can be converted into a list using the \nlist( )conversion function. \nl = list('Africa') # converts the string to a list ['A', 'f', 'r', 'i', 'c', 'a'] \n\u2022Aliasing - On assigning one list to another, both refer to the same \nlist. Changing one changes the other. This assignment is often known \nas shallow copy or aliasing. \nlst1 = [10, 20, 30, 40, 50] \nlst2 = lst1 # doesn't copy list. lst2 refers to same list as lst1 \nprint(lst1) # prints [10, 20, 30, 40, 50] \nprint(lst2) # prints [10, 20, 30, 40, 50] \nlst1[0] = 100 \nprint(lst1[0], lst2[0]) # prints 100 100 \n\u2022Cloning - This involves copying contents of one list into another. \nAfter copying both refer to different lists, though both contain same \nvalues. Changing one list, doesn't change another. This operation is \noften known as deep copy. \nlst1 = [10, 20, 30, 40, 50] \nlst2 = [ ] # empty list \nlst2 = lst2 + lst1 # lst1, lst2 refer to different lists \nprint(lst1) # prints [10, 20, 30, 40, 50]", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_146", "chunk_strategy": "fixed_size"}}, {"text": "often known as deep copy. \nlst1 = [10, 20, 30, 40, 50] \nlst2 = [ ] # empty list \nlst2 = lst2 + lst1 # lst1, lst2 refer to different lists \nprint(lst1) # prints [10, 20, 30, 40, 50] \nprint(lst2) # prints [10, 20, 30, 40, 50] \nlst1[0] = 100 \nprint(lst1[0], lst2[0]) # prints 100, 10 \n--- Page 111 ---\nChapter 8: Lists 95\n\u2022Searching - An element can be searched in a list using the in \nmembership operator as shown below: \nlst = ['a', 'e', 'i', 'o', 'u'] \nres = 'a' in lst # return True since 'a' is present in list \nres = 'z' not in lst # return True since 'z' is absent in list \n\u2022Identity - Whether the two variables are referring to the same list \ncan be checked using the isidentity operator as shown below: \nlst1 = [10, 20, 30, 40, 50] \nlst2 = [10, 20, 30, 40, 50] \nlst3 = lst1 \nprint(lst1 is lst2) # prints False \nprint(lst1 is lst3) # prints True \nprint(lst1 is not lst2) # prints True \nNote the difference for basic types like intor str: \nnum1 = 10 \nnum2 = 10 \ns1 = 'Hi' \ns2 = 'Hi'", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_147", "chunk_strategy": "fixed_size"}}, {"text": "print(lst1 is lst3) # prints True \nprint(lst1 is not lst2) # prints True \nNote the difference for basic types like intor str: \nnum1 = 10 \nnum2 = 10 \ns1 = 'Hi' \ns2 = 'Hi' \nprint( num1 is num2) # prints True \nprint( s1 is s2) # prints True \n\u2022Comparison - It is possible to compare contents of two lists. \nComparison is done item by item till there is a mismatch. In \nfollowing code it would be decided that ais less than bwhen 3 and 5 \nare compared. \na = [1, 2, 3, 4] \nb = [1, 2, 5] \nprint(a < b) # prints True \n\u2022Emptiness - We can check if a list is empty using notoperator. \nlst = [ ] \nif not lst : \nprint('Empty list') \nAlternately, we can convert a list to a bool and check the result. \n--- Page 112 ---\n96 Let Us Python \nlst = [ ] \nprint(bool(lst)) # prints False \n\u2022Also note that the following values are considered to be False: \nNone \nNumber equivalent to zero: 0, 0.0, 0j \nEmpty string, list and tuple: ' ', \"\", [ ], ( ) \nEmpty set and dictionary: { } \nUsing Built-in Functions on Lists", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_148", "chunk_strategy": "fixed_size"}}, {"text": "None \nNumber equivalent to zero: 0, 0.0, 0j \nEmpty string, list and tuple: ' ', \"\", [ ], ( ) \nEmpty set and dictionary: { } \nUsing Built-in Functions on Lists \n\u2022Many built-in functions can be used with lists. \nlen(lst) # return number of items in the list \nmax(lst) # return maximum element in the list \nmin(lst) # return minimum element in the list \nsum(lst) # return sum of all elements in the list \nany(lst) # return True if any element of lst is True \nall(lst) # return True if all elements of lst are True \ndel( ) # deletes element or slice or entire list \nsorted(lst) # return sorted list, lst remains unchanged \nreversed(lst) # used for reversing lst \nExcept the last 3, other functions are self-explanatory. sorted( )and \nreversed( )are discussed in section after next. del( )function's usage \nis shown below: \nlst1 = [10, 20, 30, 40, 50] \nlst = del(lst[3]) # delete 3rd item in the list \ndel(lst[2:5]) # delete items 2 to 4 from the list \ndel(a[:]) # delete entire list", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_149", "chunk_strategy": "fixed_size"}}, {"text": "is shown below: \nlst1 = [10, 20, 30, 40, 50] \nlst = del(lst[3]) # delete 3rd item in the list \ndel(lst[2:5]) # delete items 2 to 4 from the list \ndel(a[:]) # delete entire list \nlst = [ ] # another way to delete an entire list \n\u2022If multiple variables are referring to same list, then deleting one \ndoesn't delete the others. \nlst1 = [10, 20, 30, 40, 50] \nlst3 = lst2 = lst1 # all refer to same list \nlst1 = [ ] # lst1 refers to empty list; lst2, lst3 to original list \nprint(lst2) # prints [10, 20, 30, 40, 50] \nprint(lst3) # prints [10, 20, 30, 40, 50] \n--- Page 113 ---\nChapter 8: Lists 97\n\u2022If multiple variables are referring to same list and we wish to delete \nall, we can do so as shown below: \nlst2[:] = [ ] # list is emptied by deleting all items \nprint(lst2) # prints [ ] \nprint(lst3) # prints [ ] \nList Methods \n\u2022Any list is an object of type list. Its methods can be accessed using \nthe syntax lst.method( ). Usage of some of the commonly used \nmethods is shown below:", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_150", "chunk_strategy": "fixed_size"}}, {"text": "print(lst3) # prints [ ] \nList Methods \n\u2022Any list is an object of type list. Its methods can be accessed using \nthe syntax lst.method( ). Usage of some of the commonly used \nmethods is shown below: \nlst = [12, 15, 13, 23, 22, 16, 17] # create list \nlst.append(22) # add new item at end \nlst.remove(13) # delete item 13 from list \nlst.remove(30) # reports valueError as 30 is absent in lst \nlst.pop( ) # removes last item in list \nlst.pop(3) # removes 3rd item in the list \nlst.insert(3,21) # insert 21 at 3rd position \nlst.count(23) # return no. of times 23 appears in lst \nidx = lst.index(22) # return index of item 22 \nidx = lst.index(50) # reports valueError as 50 is absent in lst \nSorting and Reversing \n\u2022Usage of list methods for reversing a list and for sorting is shown \nbelow: \nlst = [10, 2, 0, 50, 4] \nlst.reverse( ) \nprint(lst) # prints [4, 50, 0, 2, 10] \nlst.sort( ) \nprint(lst) # prints [0, 2, 4, 10, 50] \nlst.sort(reverse = True) # sort items in reverse order", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_151", "chunk_strategy": "fixed_size"}}, {"text": "below: \nlst = [10, 2, 0, 50, 4] \nlst.reverse( ) \nprint(lst) # prints [4, 50, 0, 2, 10] \nlst.sort( ) \nprint(lst) # prints [0, 2, 4, 10, 50] \nlst.sort(reverse = True) # sort items in reverse order \nprint(lst) # prints [50, 10, 4, 2, 0] \nNote that reverse( )and sort( )do not return a list. Both manipulate \nthe list in place. \n\u2022Usage of built-in functions for reversing a list and for sorting is \nshown below: \nlst = [10, 2, 0, 50, 4] \n--- Page 114 ---\n98 Let Us Python \nprint(sorted(lst)) # prints [0, 2, 4, 10, 50] \nprint(sorted(lst, reverse = True)) # prints [50, 10, 4, 2, 0] \nprint(list(reversed(lst))) # prints [4, 50, 0, 2, 10] \nNote that sorted( )function returns a new sorted list and keeps the \noriginal list unchanged. Also, reversed( )function returns a \nlist_reverseiteratorobject which has to converted into a list to get a \nreversed list. \n\u2022Reversal is also possible using a slicing operation as shown below: \nlst = [10, 2, 0, 50, 4] \nprint(lst[::-1]) # prints [0, 2, 4, 10, 50]", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_152", "chunk_strategy": "fixed_size"}}, {"text": "reversed list. \n\u2022Reversal is also possible using a slicing operation as shown below: \nlst = [10, 2, 0, 50, 4] \nprint(lst[::-1]) # prints [0, 2, 4, 10, 50] \nList Varieties \n\u2022It is possible to create a list of lists (nested lists). \na = [1, 3, 5, 7, 9] \nb = [2, 4, 6, 8, 10] \nc = [a, b] \nprint(c[0][0], c[1][2]) # 0th element of 0th list, 2nd ele. of 1st list \n\u2022A list may be embedded in another list. \nx = [1, 2, 3, 4] \ny = [10, 20, x, 30] \nprint(y) # outputs [10, 20, [1, 2, 3, 4], 30] \n\u2022It is possible to unpack a string or list within a list using the * \noperator. \ns = 'Hello' \nl = [*s] \nprint(l) # outputs ['H', 'e', 'l', 'l', 'o'] \nx = [1, 2, 3, 4] \ny = [10, 20, *x, 30] \nprint(y) # outputs [10, 20, 1, 2, 3, 4, 30] \n--- Page 115 ---\nChapter 8: Lists 99\nStack Data Structure \n\u2022A data structure refers to an arrangement of data in memory. \nPopular data structures are stack, queue, tree, graph and map. \n\u2022Stack is a last in first out (LIFO) list, i.e. last element that is added to", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_153", "chunk_strategy": "fixed_size"}}, {"text": "Popular data structures are stack, queue, tree, graph and map. \n\u2022Stack is a last in first out (LIFO) list, i.e. last element that is added to \nthe list is the first element that is removed from it. \n\u2022Adding an element to a stack is called push operation and removing \nan element from it is called pop operation. Both these operations \nare carried out at the rear end of the list. \n\u2022Push and pop operations can be carried out using the append( )and \npop( )methods of list object. This is demonstrated in Program 8.3. \nQueue Data Structure \n\u2022Queue is a first in first out (FIFO) list, i.e. first element that is added \nto the list is the first element that is removed from it. \n\u2022Lists are not efficient for implementation of queue data structure. \n\u2022With lists removal of items from beginning is not efficient, since it \ninvolves shifting of rest of the elements by 1 position after deletion. \n\u2022Hence for fast additions and deletions, dequeue class of collections\nmodule is preferred.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_154", "chunk_strategy": "fixed_size"}}, {"text": "involves shifting of rest of the elements by 1 position after deletion. \n\u2022Hence for fast additions and deletions, dequeue class of collections\nmodule is preferred. \n\u2022Deque stands for double ended queue. Addition and deletion in a \ndeque can take place at both ends. \n\u2022Usage of deque class to implement a queue data structure is \ndemonstrated in Program 8.4. \n____________________________________________________________________ \nProblem 8.1 \nPerform the following operations on a list of names. \n- Create a list of 5 names - 'Anil', 'Amol', 'Aditya', 'Avi', 'Alka' \n- Insert a name 'Anuj' before 'Aditya' \n- Append a name 'Zulu' \n- Delete 'Avi' from the list \n- Replace 'Anil' with 'AnilKumar' \n--- Page 116 ---\n100 Let Us Python \n- Sort all the names in the list \n- Print reversed sorted list \nProgram \n# Create a list of 5 names \nnames = ['Anil', 'Amol', 'Aditya', 'Avi', 'Alka'] \nprint(names) \n# insert a name 'Anuj' before 'Aditya' \nnames.insert(2,'Anuj') \nprint(names) \n# append a name 'Zulu'", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_155", "chunk_strategy": "fixed_size"}}, {"text": "# Create a list of 5 names \nnames = ['Anil', 'Amol', 'Aditya', 'Avi', 'Alka'] \nprint(names) \n# insert a name 'Anuj' before 'Aditya' \nnames.insert(2,'Anuj') \nprint(names) \n# append a name 'Zulu' \nnames.append('Zulu') \nprint(names) \n# delete 'Avi' from the list \nnames.remove('Avi') \nprint(names) \n# replace 'Anil' with 'AnilKumar' \ni=names.index('Anil') \nnames[i] = 'AnilKumar' \nprint(names) \n# sort all the names in the list \nnames.sort( ) \nprint(names) \n# print reversed sorted list \nnames.reverse( ) \nprint(names) \nOutput \n['Anil', 'Amol', 'Aditya', 'Avi', 'Alka'] \n['Anil', 'Amol', 'Anuj', 'Aditya', 'Avi', 'Alka'] \n['Anil', 'Amol', 'Anuj', 'Aditya', 'Avi', 'Alka', 'Zulu'] \n['Anil', 'Amol', 'Anuj', 'Aditya', 'Alka', 'Zulu'] \n['AnilKumar', 'Amol', 'Anuj', 'Aditya', 'Alka', 'Zulu'] \n['Aditya', 'Alka', 'Amol', 'AnilKumar', 'Anuj', 'Zulu'] \n--- Page 117 ---\nChapter 8: Lists 101\n['Zulu', 'Anuj', 'AnilKumar', 'Amol', 'Alka', 'Aditya']", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_156", "chunk_strategy": "fixed_size"}}, {"text": "['Aditya', 'Alka', 'Amol', 'AnilKumar', 'Anuj', 'Zulu'] \n--- Page 117 ---\nChapter 8: Lists 101\n['Zulu', 'Anuj', 'AnilKumar', 'Amol', 'Alka', 'Aditya'] \n____________________________________________________________________ \nProblem 8.2 \nPerform the following operations on a list of numbers. \n- Create a list of 5 odd numbers \n- Create a list of 5 even numbers \n- Combine the two lists \n- Add prime numbers 11, 17, 29 at the beginning of the combined list \n- Report how many elements are present in the list \n- Replace last 3 numbers in the list with 100, 200, 300 \n- Delete all the numbers in the list \n- Delete the list \nProgram \n# create a list of 5 odd numbers \na = [1, 3, 5, 7, 9] \nprint(a) \n# create a list of 5 even numbers \nb = [2, 4, 6, 8, 10] \nprint(b) \n# combine the two lists \na = a + b \nprint(a) \n# add prime numbers 11, 17, 29 at the beginning of the combined list \na = [11, 17, 29] + a \nprint(a) \n# report how many elements are present in the list \nnum = len(a) \nprint(num)", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_157", "chunk_strategy": "fixed_size"}}, {"text": "a = a + b \nprint(a) \n# add prime numbers 11, 17, 29 at the beginning of the combined list \na = [11, 17, 29] + a \nprint(a) \n# report how many elements are present in the list \nnum = len(a) \nprint(num) \n# replace last 3 numbers in the list with 100, 200, 300 \na[num-3:num] = [100, 200, 300] \nprint(a) \n# delete all the numbers in the list \na[:] = [ ] \n--- Page 118 ---\n102 Let Us Python \nprint(a) \n# delete the list \ndel a \nOutput \n[1, 3, 5, 7, 9] \n[2, 4, 6, 8, 10] \n[1, 3, 5, 7, 9, 2, 4, 6, 8, 10] \n[11, 17, 29, 1, 3, 5, 7, 9, 2, 4, 6, 8, 10] \n13 \n[11, 17, 29, 1, 3, 5, 7, 9, 2, 4, 100, 200, 300] \n[ ] \n____________________________________________________________________ \nProblem 8.3 \nWrite a program to implement a Stack data structure. Stack is a Last In \nFirst Out (LIFO) list in which addition and deletion takes place at the \nsame end. \nProgram \n# stack - LIFO list \ns = [ ] # empty stack \n# push elements on stack \ns.append(10) \ns.append(20) \ns.append(30) \ns.append(40) \ns.append(50) \nprint(s)", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_158", "chunk_strategy": "fixed_size"}}, {"text": "same end. \nProgram \n# stack - LIFO list \ns = [ ] # empty stack \n# push elements on stack \ns.append(10) \ns.append(20) \ns.append(30) \ns.append(40) \ns.append(50) \nprint(s) \n# pop elements from stack \nprint(s.pop( )) \nprint(s.pop( )) \nprint(s.pop( )) \nprint(s) \n--- Page 119 ---\nChapter 8: Lists 103\nOutput \n[10, 20, 30, 40, 50] \n50 \n40 \n30 \n[10, 20] \n____________________________________________________________________ \nProblem 8.4 \nWrite a program to implement a Queue data structure. Queue is a First \nIn First Out (FIFO) list, in which addition takes place at the rear end of \nthe queue and deletion takes place at the front end of the queue. \nProgram \nimport collections \nq = collections.deque( ) \nq.append('Suhana') \nq.append('Shabana') \nq.append('Shakila') \nq.append('Shakira') \nq.append('Sameera') \nprint(q) \nprint(q.popleft( )) \nprint(q.popleft( )) \nprint(q.popleft( )) \nprint(q) \nOutput \ndeque(['Suhana', 'Shabana', 'Shakila', 'Shakira', 'Sameera']) \nSuhana \nShabana \nShakila", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_159", "chunk_strategy": "fixed_size"}}, {"text": "q.append('Sameera') \nprint(q) \nprint(q.popleft( )) \nprint(q.popleft( )) \nprint(q.popleft( )) \nprint(q) \nOutput \ndeque(['Suhana', 'Shabana', 'Shakila', 'Shakira', 'Sameera']) \nSuhana \nShabana \nShakila \ndeque(['Shakira', 'Sameera']) \n____________________________________________________________________ \n--- Page 120 ---\n104 Let Us Python \nProblem 8.5 \nWrite a program to generate and store in a list 20 random numbers in \nthe range 10 to 100. From this list delete all those entries which have \nvalue between 20 and 50. Print the remaining list. \nProgram \nimport random \na = [ ] \ni = 1 \nwhile i <= 15 : \nnum = random.randint(10,100) \na.append(num) \ni += 1 \nprint(a) \nfor num in a : \nif num > 20 and num < 50 : \na.remove(num) \nprint(a) \nOutput \n[64, 10, 13, 25, 16, 39, 80, 100, 45, 33, 30, 22, 59, 73, 83] \n[64, 10, 13, 16, 80, 100, 33, 22, 59, 73, 83] \n____________________________________________________________________ \nProblem 8.6 \nWrite a program to add two 3 x 4 matrices. \nProgram", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_160", "chunk_strategy": "fixed_size"}}, {"text": "[64, 10, 13, 16, 80, 100, 33, 22, 59, 73, 83] \n____________________________________________________________________ \nProblem 8.6 \nWrite a program to add two 3 x 4 matrices. \nProgram \nmat1 = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]] \nmat2 = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]] \nmat3 = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]] \n# iterate through rows \n--- Page 121 ---\nChapter 8: Lists 105\nfor i in range(len(mat1)) : \n# iterate through columns \nfor j in range(len(mat1[0])) : \nmat3[i][j] = mat1[i][j] + mat2[i][j] \nprint(mat3) \nOutput \n[[2, 4, 6, 8], [10, 12, 14, 16], [18, 20, 22, 24]] \n____________________________________________________________________ \n[A]What will be the output of the following programs: \n(a)msg = list('www.kicit.com')  (http://www.kicit.com') )\nch = msg[-1] \nprint(ch) \n(b)msg = list('kanlabs.teachable.com') \ns = msg[4:6] \nprint(s) \n(c)msg = 'Online Courses - KanLabs' \ns = list(msg[:3]) \nprint(s) \n(d)msg = 'Rahate Colony' \ns = list(msg[-5:-2]) \nprint(s)", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_161", "chunk_strategy": "fixed_size"}}, {"text": "print(ch) \n(b)msg = list('kanlabs.teachable.com') \ns = msg[4:6] \nprint(s) \n(c)msg = 'Online Courses - KanLabs' \ns = list(msg[:3]) \nprint(s) \n(d)msg = 'Rahate Colony' \ns = list(msg[-5:-2]) \nprint(s) \n(e)s = list('KanLabs') \nt = s[::-1] \nprint(t) \n(f)num1 = [10, 20, 30, 40, 50] \nnum2 = num1 \nprint(id(num1)) \nprint(type(num2)) \nprint(isinstance(num1, list)) \nprint(num1 is num2) \n(g)num = [10, 20, 30, 40, 50] \n--- Page 122 ---\n106 Let Us Python \nnum[2:4] = [ ] \nprint(num) \n(h)num1 = [10, 20, 30, 40, 50] \nnum2 = [60, 70, 80] \nnum1.append(num2) \nprint(num1) \n(i)lst = [10, 25, 4, 12, 3, 8] \nsorted(lst) \nprint(lst) \n(j)a = [1, 2, 3, 4] \nb = [1, 2, 5] \nprint(a < b) \n[B]Attempt the following questions: \n(a)Which of the following is a valid List? \n['List'] {\"List\"} (\"List\") \"List\" \n(b)What will happen on execution of the following code snippet? \ns = list('Hello') \ns[1] = 'M' \n(c)The following code snippet deletes elements 30 and 40 from the \nlist: \nnum = [10, 20, 30, 40, 50] \ndel(num[2:4])", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_162", "chunk_strategy": "fixed_size"}}, {"text": "s = list('Hello') \ns[1] = 'M' \n(c)The following code snippet deletes elements 30 and 40 from the \nlist: \nnum = [10, 20, 30, 40, 50] \ndel(num[2:4]) \nIn which other way can the same effect be obtained? \n(d)Which of the following is an INCORRECT list? \na = [0, 1, 2, 3, [10, 20, 30]] \na = [10, 'Suraj', 34555.50] \na = [[10, 20, 30], [40, 50, 60]] \n(e)From the list given below \nnum1 = [10, 20, 30, 40, 50] \nHow will you create the list num2 containing: \n['A', 'B', 'C', 10, 20, 30, 40, 50, 'Y', 'Z'] \n--- Page 123 ---\nChapter 8: Lists 107\n(f)Given a list \nlst = [10, 25, 4, 12, 3, 8] \nHow will you sort it in descending order? \n(g)Given a list \nlst = [10, 25, 4, 12, 3, 8] \nHow will you check whether 30 is present in the list or not? \n(h)Given a list \nlst = [10, 25, 4, 12, 3, 8] \nHow will you insert 30 between 25 and 4? \n(i)Given a string \ns = 'Hello' \nHow will you obtain a list ['H', 'e', 'l', 'l', 'o'] from it? \n[C]Answer the following questions:", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_163", "chunk_strategy": "fixed_size"}}, {"text": "How will you insert 30 between 25 and 4? \n(i)Given a string \ns = 'Hello' \nHow will you obtain a list ['H', 'e', 'l', 'l', 'o'] from it? \n[C]Answer the following questions: \n(a)Write a program to create a list of 5 odd integers. Replace the third \nelement with a list of 4 even integers. Flatten, sort and print the list. \n(b)Suppose a list contains 20 integers generated randomly. Receive a \nnumber from the keyboard and report position of all occurrences of \nthis number in the list. \n(c)Suppose a list has 20 numbers. Write a program that removes all \nduplicates from this list. \n(d)Suppose a list contains positive and negative numbers. Write a \nprogram to create two lists\u2014one containing positive numbers and \nanother containing negative numbers. \n(e)Suppose a list contains 5 strings. Write a program to convert all \nthese strings to uppercase. \n(f)Write a program that converts list of temperatures in Fahrenheit \ndegrees to equivalent Celsius degrees.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_164", "chunk_strategy": "fixed_size"}}, {"text": "these strings to uppercase. \n(f)Write a program that converts list of temperatures in Fahrenheit \ndegrees to equivalent Celsius degrees. \n(g)Write a program to obtain a median value of a list of numbers, \nwithout disturbing the order of the numbers in the list. \n(h)A list contains only positive and negative integers. Write a program \nto obtain the number of negative numbers present in the list. \n--- Page 124 ---\n108 Let Us Python \n(i)Suppose a list contains several words. Write a program to create \nanother list that contains first character of each word present in the \nfirst list. \n(j)A list contains 10 numbers. Write a program to eliminate all \nduplicates from the list. \n(k)Write a program to find the mean, median and mode of a list of 10 \nnumbers. \n--- Page 125 ---\nLet UsPython\n109Tuples\nxWhat are Tuples? xTuple Methods\nxAccessing TupleElements xTupleVarieties\nxLooping in Tuples xPrograms\nxBasic TupleOperations xExercises\nxUsing Built-in Functions on Tuples9", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_165", "chunk_strategy": "fixed_size"}}, {"text": "Let UsPython\n109Tuples\nxWhat are Tuples? xTuple Methods\nxAccessing TupleElements xTupleVarieties\nxLooping in Tuples xPrograms\nxBasic TupleOperations xExercises\nxUsing Built-in Functions on Tuples9\n\u201cOrdered, heterogenous, immutable.... \u201d\n--- Page 126 ---\n110 Let Us Python\nWhat are Tuples?\nxThough a list can store dissimilar data, it is commonly used for \nstoring similar data.\nxThough a tuple can store similar data it is commonly used for storing \ndissimilar data. The tupledata is enclosed within ( )as shown below.\na = ( ) # empty tuple\nb = (10,) # tuple with one item. , after 10 is necessary\nc = ('Sanjay', 25, 34555.50) # tuple with dissimilar items\nd = (10, 20, 30, 40) # tuple with similar items\nWhile creating the tuple b,if we do not use the comma after 10, bis \ntreated to be of type int.\nxWhile initializing a tuple, we may drop ( ).\nc = 'Sanjay', 25, 34555.50 # tuple with multiple items\nprint(type(c)) # c is of the type tuple", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_166", "chunk_strategy": "fixed_size"}}, {"text": "treated to be of type int.\nxWhile initializing a tuple, we may drop ( ).\nc = 'Sanjay', 25, 34555.50 # tuple with multiple items\nprint(type(c)) # c is of the type tuple\nxItems in a tuple can be repeated, i.e. tuple may contain duplicate \nitems.However, unlike list, tuple elements cannot be repeated using \na *.\ntpl1 = (10,)* 5 # stores (10, 10, 10, 10, 10)\ntpl2 = (10) * 5 # stores (50)\nAccessing Tuple Elements\nxEntire tuple can be printed by just using the name of the tuple.\ntpl = ('Sanjay', 25, 34555.50) \nprint(tpl)\nxTuple is an ordered collection. So order of insertion of elements in a \ntuple is same as the order of access. So like a string and list, tuple \nitems too can be accessed using indices, starting with 0.\nmsg = ('Handle', 'Exceptions', 'Like', 'a','boss')\nprint(msg[1], msg[3])\n--- Page 127 ---\nChapter9: Tuples 111\nxLike strings and lists, tuples too can be sliced to yield smaller tuples.\nemp = ('Sanjay', 23, 23000, 1760, 2040)\nprint(emp[1:3]) # prints (23, 23000)", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_167", "chunk_strategy": "fixed_size"}}, {"text": "--- Page 127 ---\nChapter9: Tuples 111\nxLike strings and lists, tuples too can be sliced to yield smaller tuples.\nemp = ('Sanjay', 23, 23000, 1760, 2040)\nprint(emp[1:3]) # prints (23, 23000)\nprint(emp[3:]) # prints (1760, 2040)\nprint(emp[:3]) # prints ('Sanjay', 23, 23000)\nLooping in Tuples\nxIf we wish to process each item in a tuple, we should be able to \niterate through it. This can be doneusing awhile loop or forloop.\ntpl = (10, 20, 30, 40, 50)\ni = 0\nwhile i < len(tpl) :\nprint(tpl[i])\ni += 1\nfor n in tpl :\nprint(n)\nxWhile iterating through a tuple using a forloop, if we wish to keep \ntrack of index of the element that is being currently processed, we \ncan do so using thebuilt-inenumerate( )function.\ntpl = (10, 20, 30, 40, 50)\nfor index, n in enumerate(tpl) :\nprint(index, n)\nBasic Tuple Operations\nxMutability -Unlike a list, a tupleisimmutable, i.e. itcannot be \nmodified.\nmsg = ('Fall', 'In', 'Line') \nmsg[0] ='FALL' # error\nmsg[1:3] = ('Above', 'Mark') # error", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_168", "chunk_strategy": "fixed_size"}}, {"text": "Basic Tuple Operations\nxMutability -Unlike a list, a tupleisimmutable, i.e. itcannot be \nmodified.\nmsg = ('Fall', 'In', 'Line') \nmsg[0] ='FALL' # error\nmsg[1:3] = ('Above', 'Mark') # error\nxSince a tupleisimmutable operations like append, remove and \ninsert do not work with a tuple.\nxThough a tuple itself is immutable, it can contain mutable objects \nlike lists.\n--- Page 128 ---\n112 Let Us Python\n# mutable lists, immutable string \u2014all can belong to tuple\ns = ([1, 2, 3, 4], [4, 5], 'Ocelot')\nxIf a tuple contains a list, the list can be modified since list is a \nmutable object. \ns = ([1, 2, 3, 4], [10, 20], 'Oynx')\ns[1][1] = 45 # changes first item of first list, i.e. 20\nprint(s) # prints ([1, 2, 3, 4], [4, 45], 'Oynx')\n# one more way to change first item of first list\np = s[1]\np[1] = 100\nprint(s) # prints ([1, 2, 3, 4], [4, 100], 'Oynx')\nxThe other basic operations that are done on a tuple are very similar \nto the ones done on a list. These operations are discussed in Chapter", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_169", "chunk_strategy": "fixed_size"}}, {"text": "print(s) # prints ([1, 2, 3, 4], [4, 100], 'Oynx')\nxThe other basic operations that are done on a tuple are very similar \nto the ones done on a list. These operations are discussed in Chapter \n8. You may try the following operations on tuples as an exercise:\nConcatenation\nMerging\nConversion\nAliasing\nCloning\nSearching\nIdentity\nComparison\nEmptiness\nUsing Built-in Functions on Tuples\nxMany built-in functions can be used with tuples.\nt = (12, 15, 13, 23, 22, 16, 17) # create tuple\nlen(t) # return number of items in tuple t\nmax(t) # return maximum element in tuple t\nmin(t) # return minimum element in tuple t\nsum(t) # return sum of all elements in tuple t\nany(t) # return True if any element of tplis True\nall(t) # return True if all elements of tplare True\nsorted(t) # return sorted list(not sorted tuple)\nreversed(t) # used for reversing t\n--- Page 129 ---\nChapter9: Tuples 113\nTuple Methods\nxAny tuple is an object of type tuple. Its methods can be accessed", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_170", "chunk_strategy": "fixed_size"}}, {"text": "reversed(t) # used for reversing t\n--- Page 129 ---\nChapter9: Tuples 113\nTuple Methods\nxAny tuple is an object of type tuple. Its methods can be accessed \nusing the syntax tpl.method( ). Usage of two methods is shown \nbelow:\ntpl = (12, 15, 13, 23, 22)# create tuple\nprint(tpl.count(23)) # return no. of times 23 appears in lst\nprint(tpl.index(22)) # return index of item 22\nprint(tpl.index(50)) # reports valueError as 50 is absent in lst\nTuple Varieties\nxIt is possible to create a tuple of tuples.\na = (1, 3, 5, 7, 9)\nb = (2, 4, 6, 8, 10)\nc = (a, b)\nprint(c[0][0], c[1][2]) # 0thelement of 0thtuple, 2ndele of 1sttuple\nrecords = (\n('Priyanka', 24, 3455.50), ('Shailesh', 25, 4555.50), \n('Subhash', 25, 4505.50), ('Sugandh', 27, 4455.55) \n) \nprint(records[0][0], records[0][1], records[0][2])\nprint(records[1][0], records[1][1], records[1][2])\nfor n, a, s in records :\nprint(n,a,s)\nxA tuple may be embedded in another tuple.\nx = (1, 2, 3, 4)\ny = (10, 20, x, 30)", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_171", "chunk_strategy": "fixed_size"}}, {"text": "print(records[1][0], records[1][1], records[1][2])\nfor n, a, s in records :\nprint(n,a,s)\nxA tuple may be embedded in another tuple.\nx = (1, 2, 3, 4)\ny = (10, 20, x, 30) \nprint(y) # outputs (10, 20, (1, 2, 3, 4), 30)\nxIt is possible to unpack a tuple within a tuple using the *operator.\nx = (1, 2, 3, 4) \ny = (10, 20, *x, 30)\nprint(y) # outputs (10, 20, 1, 2, 3, 4, 30)\nxIt is possible to create a list of tuples, or a tuple of lists.\n--- Page 130 ---\n114 Let Us Python\nlst = [('Priyanka', 24, 3455.50), ('Shailesh', 25, 4555.50)]\ntpl = (['Priyanka', 24, 3455.50], ['Shailesh', 25, 4555.50])\nxIf we wish to sort a list of tuples or tuple of lists, it can be done as \nfollows:\nimport operator\n# each embedded tuple/list contains name, age, salary\nlst = [('Shailesh', 24, 3455.50), ('Priyanka', 25, 4555.50)]\ntpl = (['Shailesh', 24, 3455.50], ['Priyanka', 25, 4555.50])\nprint(sorted(lst))\nprint(sorted(tpl))\nprint(sorted(lst, key = operator.itemgetter(2)))", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_172", "chunk_strategy": "fixed_size"}}, {"text": "tpl = (['Shailesh', 24, 3455.50], ['Priyanka', 25, 4555.50])\nprint(sorted(lst))\nprint(sorted(tpl))\nprint(sorted(lst, key = operator.itemgetter(2)))\nprint(sorted(tpl, key = operator.itemgetter(2)))\nxBy default, sorted( )sorts by first item in list/tuple, i.e. name. \nxIf we wish to sort by salary, we need to usethe itemgetter()\nfunction of operator module.\nxThe key parameter of sorted( ) requires a key function (to be applied \nto objects to be sorted) rather than a single key value.\nxoperator.itemgetter(2)will give usa function that fetchessalary\nfrom a list/tuple.\nxIn general, operator.itemgetter(n)constructs a function that takes a \nlist/tupleas input, and fetches the n-th element out of it.\n____________________________________________________________________\nProblem 8.1\nPass a tuple to the divmod( )function and obtain the quotient and the \nremainder.\nProgram\nresult = divmod(17,3)\nprint(result)\nt = (17, 3)\nresult = divmod(*t)\n--- Page 131 ---\nChapter9: Tuples 115\nprint(result)\nOutput", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_173", "chunk_strategy": "fixed_size"}}, {"text": "remainder.\nProgram\nresult = divmod(17,3)\nprint(result)\nt = (17, 3)\nresult = divmod(*t)\n--- Page 131 ---\nChapter9: Tuples 115\nprint(result)\nOutput\n(5, 2)\n(5, 2)\nTips\nxIf we pass tto divmod( )an error is reported. We have to unpack the \ntuple into two distinct values and then pass them to divmod( ).\nxdivmod( )returns a tuple consisting of quotient and remainder.\n____________________________________________________________________\nProblem 8.2\nWrite a Python program to perform the following operations:\n-Pack first 10 multiples of 10 into a tuple\n-Unpack the tuple into 10 variables, each holding 1 value\n-Unpack the tuple such that first value gets stored in variable x, last \nvalue in y and all values in between into disposable variables _\n-Unpack the tuple such that first value gets stored in variable i, last \nvalue in j and all values in between into a single disposable variable _\nProgram\ntpl = (10, 20, 30, 40, 50, 60, 70, 8, 90, 100)\na, b, c, d, e, f, g, h, i, j = tpl\nprint(tpl)", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_174", "chunk_strategy": "fixed_size"}}, {"text": "value in j and all values in between into a single disposable variable _\nProgram\ntpl = (10, 20, 30, 40, 50, 60, 70, 8, 90, 100)\na, b, c, d, e, f, g, h, i, j = tpl\nprint(tpl)\nprint(a, b, c, d, e, f, g, h, i, j)\nx, _, _, _, _, _, _, _, _, y = tpl\nprint(x, y, _)\ni, *_, j = tpl\nprint(i, j, _)\nOutput\n(10, 20, 30, 40, 50, 60, 70, 8, 90, 100)\n10 20 30 40 50 60 70 8 90 100\n10 100 90\n10 100 [20, 30, 40, 50, 60, 70, 8, 90]\n--- Page 132 ---\n116 Let Us Python\nTips\nxDisposable variable _ is usally used when you do not wish to use the \nvariable further, and is being used only as a place-holder.\n____________________________________________________________________\nProblem 8.3\nA list contains names of boys and girls as its elements. Boys' names are \nstored as tuples. Write a Python program to find out number of boys \nand girls in the list.\nProgram\nlst = ['Shubha', 'Nisha', 'Sudha', ('Suresh',), ('Rajesh',), 'Radha']\nboys = 0\ngirls = 0\nfor ele in lst:\nif isinstance(ele, tuple):\nboys += 1\nelse :", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_175", "chunk_strategy": "fixed_size"}}, {"text": "and girls in the list.\nProgram\nlst = ['Shubha', 'Nisha', 'Sudha', ('Suresh',), ('Rajesh',), 'Radha']\nboys = 0\ngirls = 0\nfor ele in lst:\nif isinstance(ele, tuple):\nboys += 1\nelse :\ngirls += 1\nprint('Boys = ', boys, 'Girls = ', girls)\nOutput\nBoys = 2 Girls = 4\nTips\nxisinstance( )functions checks whether eleis an instance of tuple \ntype.\nxNote that since the tuples contain a single element, it is followed by \na comma.\n____________________________________________________________________\nProblem 8.4\nA list contains tuples containing roll number, names and age of student. \nWrite a Python program to gather all the names from this list into \nanother list.\n--- Page 133 ---\nChapter9: Tuples 117\nProgram\nlst = [('A101', 'Shubha', 23), ('A104', 'Nisha', 25), ('A111', 'Sudha', 24)]\nnlst= [ ]\nfor ele in lst:\nnlst= nlst+ [ele[1]]\nprint(nlst)\nOutput\n['Shubha', 'Nisha', 'Sudha']\nTips\nxnlstis an empty to begin with. During each iteration name is", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_176", "chunk_strategy": "fixed_size"}}, {"text": "nlst= [ ]\nfor ele in lst:\nnlst= nlst+ [ele[1]]\nprint(nlst)\nOutput\n['Shubha', 'Nisha', 'Sudha']\nTips\nxnlstis an empty to begin with. During each iteration name is \nextracted from the tuple using ele[1] and added to the current list of \nnames in nlst.\n____________________________________________________________________\nProblem 8.5\nGiven the following tuple\n('F', 'l', 'a', 'b', 'b', 'e', 'r', 'g', 'a', 's', 't', 'e', 'd')\nWrite a Python program to carry out the following operations:\n-Add an ! at the end of the tuple\n-Convert a tuple to a string\n-Extract ('b', 'b') from the tuple\n-Find out number of occurrencesof 'e' in the tuple\n-Check whether 'r' exists in the tuple\n-Convert the tuple to a list\n-Delete characters 'b, 'b', 'e', 'r' from the tuple\nProgram\ntpl = ('F', 'l', 'a', 'b', 'b', 'e', 'r', 'g', 'a', 's', 't', 'e', 'd')\n# addition of ! is not possible as tuple is an immutable\n# so to add ! we need to create a new tuple and then make tpl refer to it\ntpl = tpl + ('!',)\nprint(tpl)", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_177", "chunk_strategy": "fixed_size"}}, {"text": "# addition of ! is not possible as tuple is an immutable\n# so to add ! we need to create a new tuple and then make tpl refer to it\ntpl = tpl + ('!',)\nprint(tpl)\n--- Page 134 ---\n118 Let Us Python\n# convert tuple to string\ns = ''.join(tpl)\nprint(s)\n# extract ('b', 'b') from the tuple\nt = tpl[3:5]\nprint(t)\n# count number of 'e' in the tuple\ncount = tpl.count('e')\nprint('count = ', count)\n# check whether 'r' exists in the tuple\nprint('r' in tpl)\n# Convert the tuple to a list\nlst = list(tpl)\nprint(lst)\n# tuples are immutable, so we cannot remove elements from it\n# we need to split the tuple, eliminate the unwanted element and then \nmerge the tuples\ntpl = tpl[:3] + tpl[7:]\nprint(tpl)\nOutput\n('F', 'l', 'a', 'b', 'b', 'e', 'r', 'g', 'a', 's', 't', 'e', 'd', '!')\nFlabbergasted!\n('b', 'b')\ncount = 2\nTrue\n['F', 'l', 'a', 'b', 'b', 'e', 'r', 'g', 'a', 's', 't', 'e', 'd', '!']\n('F', 'l', 'a', 'g', 'a', 's', 't', 'e', 'd', '!')\n____________________________________________________________________", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_178", "chunk_strategy": "fixed_size"}}, {"text": "True\n['F', 'l', 'a', 'b', 'b', 'e', 'r', 'g', 'a', 's', 't', 'e', 'd', '!']\n('F', 'l', 'a', 'g', 'a', 's', 't', 'e', 'd', '!')\n____________________________________________________________________\n--- Page 135 ---\nChapter9: Tuples 119\n[A]Which of the following properties apply to string, list and tuple?\n-Iterable\n-Sliceable\n-Indexable\n-Immutable\n-Sequence\n-Can be empty\n-Sorted collection\n-Ordered collection\n-Unordered collection\n-Elements can be accessed using their position in the collection\n[B]Which of the following operations can be performed on string, list \nand tuple?\n-a = b + c\n-a += b\n-Appending a new element at the end\n-Deletion of an element at the 0th position\n-Modification of last element\n-In place reversal\n[C]Answer the followingquestions:\n(a)Is this a valid tuple?\ntpl = ('Square')\n(b)What will be the output of the following code snippet? \nnum1 = num2 = (10, 20, 30, 40, 50)\nprint(id(num1), type(num2))\nprint(isinstance(num1, tuple))\nprint(num1 is num2)\nprint(num1 is not num2)", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_179", "chunk_strategy": "fixed_size"}}, {"text": "(b)What will be the output of the following code snippet? \nnum1 = num2 = (10, 20, 30, 40, 50)\nprint(id(num1), type(num2))\nprint(isinstance(num1, tuple))\nprint(num1 is num2)\nprint(num1 is not num2)\nprint(20 in num1)\nprint(30 not in num2)\n(c)Suppose a date is represented as a tuple (d, m, y). Write a program \nto create two date tuples and find the number of days between the \ntwo dates.\n--- Page 136 ---\n120 Let Us Python\n(d)Create a list of tuples. Each tuple should contain an item and its \nprice in float. Write a program to sort the tuples in descending order \nby price. Hint: Use operator.itemgetter( ).\n(e)Store the data about shares held by a user as tuples containing the \nfollowing information about shares:\nShare name\nDate of purchase\nCost price\nNumber of shares\nSelling price\nWrite a program to determine:\n-Total cost of the portfolio.\n-Total amount gained or lost.\n-Percentage profit made or loss incurred.\n(f)Writea program to remove empty tuple from a list of tuples.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_180", "chunk_strategy": "fixed_size"}}, {"text": "Write a program to determine:\n-Total cost of the portfolio.\n-Total amount gained or lost.\n-Percentage profit made or loss incurred.\n(f)Writea program to remove empty tuple from a list of tuples.\n(g)Write a program to create following 3 lists:\n-a list of names\n-a list of roll numbers \n-a list of marks\nGenerate and print a list of tuples containing name, roll number and \nmarks from the 3 lists. From this list generate 3 tuples \u2014one \ncontaining all names, another containing all roll numbers and third \ncontaining all marks.\n[D]Match the followingpairs:\na. tpl1 = ('A',) 1. tuple of length 6\nb. tpl1 = ('A') 2. tuple of lists\nc. t = tpl[::-1] 3. Tuple\nd. ('A', 'B', 'C', 'D') 4. list of tuples\ne. [(1, 2), (2, 3), (4, 5)] 5. String\nf. tpl = tuple(range(2, 5)) 6. Sorts tuple\ng. ([1, 2], [3, 4], [5, 6]) 7. (2, 3, 4)\nh. t = tuple('Ajooba') 8. tuple of strings\ni. [*a, *b, *c] 9. Unpacking of tuples in a list\nj. (*a, *b, *c) 10. Unpacking of lists in a tuple\n--- Page 137 ---\nLet UsPython\n121Sets", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_181", "chunk_strategy": "fixed_size"}}, {"text": "h. t = tuple('Ajooba') 8. tuple of strings\ni. [*a, *b, *c] 9. Unpacking of tuples in a list\nj. (*a, *b, *c) 10. Unpacking of lists in a tuple\n--- Page 137 ---\nLet UsPython\n121Sets\nxWhat are Sets? xMathematical Set Operations\nxAccessing SetElements xUpdating Set Operations\nxLooping in Sets xSet Varieties\nxBasic SetOperations xPrograms\nxUsing Built-in Functions on Sets xExercises\nxSet Methods10\n\u201cChic and unique.... \u201d\n--- Page 138 ---\n122 Let Us Python\nWhat are Sets?\nxSets are like lists, with an exception that they do not contain \nduplicate entries.\na = set( ) # empty set, use ( ) instead of { }\nb = {20} # set with one item\nc = {'Sanjay', 25, 34555.50} # set with multiple items\nd = {10, 10, 10, 10} # only one 10 gets stored\nxWhile storing an element in a set, its hash value is computed using a \nhashing technique to determine where it should be stored in the set. \nxSince hash value of an element will always be same, no matter in", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_182", "chunk_strategy": "fixed_size"}}, {"text": "hashing technique to determine where it should be stored in the set. \nxSince hash value of an element will always be same, no matter in \nwhich order we insert the elements in a set, they get stored in the \nsame order.\ns = {12, 23, 45, 16, 52}\nt = {16, 52, 12, 23, 45}\nu = {52, 12, 16, 45, 23}\nprint(s) # prints {12, 45, 16, 52, 23}\nprint(t) # prints {12, 45, 16, 52, 23}\nprint(u) # prints {12, 45, 16, 52, 23}\nxIt is possible to create a set of strings and tuples, but not a set of \nlists.\ns1 = {'Morning', 'Evening'} # works\ns2 = {(12, 23), (15, 25), (17, 34)} # works\ns3 = {[12, 23], [15, 25], [17, 34]} # error\nSince strings and tuples are immutable, their hash value remains \nsame at all times. Hence a set of strings or tuples is permitted. \nHowever, a list may change, so its hash value may change, hence a \nset of lists is not permitted.\nxSets are commonly used for eliminating duplicate entries and \nmembership testing.\n--- Page 139 ---\nChapter10: Sets 123\nAccessing Set Elements", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_183", "chunk_strategy": "fixed_size"}}, {"text": "set of lists is not permitted.\nxSets are commonly used for eliminating duplicate entries and \nmembership testing.\n--- Page 139 ---\nChapter10: Sets 123\nAccessing Set Elements\nxEntire set can be printed by just using the name of the set.Set is an \nunordered collection. Hence order of insertion is not same as the \norder of access.\ns = {15, 25, 35, 45, 55} \nprint(s) # prints {35, 45, 15, 55, 25}\nxBeing an unordered collection, items in a set cannot be accessed \nusing indices.\nxSets cannot be sliced using [ ].\nLooping in Sets\nxLike strings, lists and tuples, sets too can be iterated over using a for\nloop.\ns = {12, 15, 13, 23, 22, 16, 17} \nfor ele in s :\nprint(ele)\nxNote that unlike a string, list or tuple, a whileloop should not be \nused to access the set elements. This is because we cannot access a \nset element using an index, as in s[i].\nxBuilt-in function enumerate( )can be used with a set. The \nenumeration is done on access order, not insertion order.\nBasic Set Operations", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_184", "chunk_strategy": "fixed_size"}}, {"text": "set element using an index, as in s[i].\nxBuilt-in function enumerate( )can be used with a set. The \nenumeration is done on access order, not insertion order.\nBasic Set Operations\nxSets like lists are mutable. Their contents can be changed.\ns = {'gate', 'fate', 'late'}\ns.add('rate') # adds one more element to set s\nxIf we want an immutable set, we should use a frozenset.\ns = frozenset({'gate', 'fate', 'late'})\ns.add('rate') # error\nxGiven below are the operations that work on lists and tuples. These \noperations are discussed in detail in Chapter 8. Try these operations \non sets too. \n--- Page 140 ---\n124 Let Us Python\nConcatenation -doesn't work\nMerging -doesn't work\nConversion -works\nAliasing -works\nCloning -works \nSearching -works\nIdentity -works\nComparison -works\nEmptiness -works\nxTwo sets cannot be concatenated using +.\nxTwo sets cannot be merged using the form z = s + t.\nxWhile converting a set using set( ), repetitions are eliminated.\nlst = [10, 20, 10, 30, 40, 50, 30]", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_185", "chunk_strategy": "fixed_size"}}, {"text": "xTwo sets cannot be concatenated using +.\nxTwo sets cannot be merged using the form z = s + t.\nxWhile converting a set using set( ), repetitions are eliminated.\nlst = [10, 20, 10, 30, 40, 50, 30]\ns = set(lst) # will create set containing 10, 20, 30, 40, 50\nUsing Built-in Functions on Sets\nxMany built-in functions can be used with sets.\ns = {10, 20, 30, 40, 50}\nlen(s) # return number of items in set s\nmax(s) # return maximum element in set s\nmin(s) # return minimum element in set s\nsorted(s) # return sorted list (not sorted set)\nsum(s) #return sum of all elements in set s\nany(t) # return True if any element of s is True\nall(t) # return True if all elements of s are True\nNote that reversed( )built-in function doesn't work on sets.\nSet Methods\nxAny set is an object of type set. Its methods can be accessed using \nthe syntax s.method( ). Usage of commonly used set methods is \nshown below:\ns = {12, 15, 13, 23, 22, 16, 17} \nt = {'A', 'B', 'C'}\nu = set ( ) # empty set", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_186", "chunk_strategy": "fixed_size"}}, {"text": "the syntax s.method( ). Usage of commonly used set methods is \nshown below:\ns = {12, 15, 13, 23, 22, 16, 17} \nt = {'A', 'B', 'C'}\nu = set ( ) # empty set\ns.add('Hello') # adds 'Hello' to s \ns.update(t) # adds elements of t to s\n--- Page 141 ---\nChapter10: Sets 125\nu = s.copy( ) # performs deep copy (cloning)\ns.remove(15) # deletes 15 from s\ns.remove(101) # would raise error, as 101 is not a member of s\ns.discard(12) # removes 12 from s\ns.discard(101) #won't raise an error, though 101 is notin s\ns.clear( ) # removes all elements\nxFollowing methods can be used on 2 sets to check the relationship \nbetween them:\ns = {12, 15, 13, 23, 22, 16, 17} \nt = {13, 15, 22}\nprint(s.issuperset(t))# prints True\nprint(s.issubset(t)) # prints False\nprint(s.isdisjoint(t)) # prints False\nSince all elements of tare present in s, sis a superset of tand tis \nsubset of s. If intersection of two sets is null, the sets are called \ndisjoint sets.\nMathematical Set Operations", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_187", "chunk_strategy": "fixed_size"}}, {"text": "Since all elements of tare present in s, sis a superset of tand tis \nsubset of s. If intersection of two sets is null, the sets are called \ndisjoint sets.\nMathematical Set Operations\nxFollowing union, intersection and difference operations can be \ncarried out on sets:\n# sets \nengineers = {'Vijay', 'Sanjay', 'Ajay', 'Sujay', 'Dinesh'}\nmanagers = {'Aditya', 'Sanjay'}\n# union -all people in both categories \nprint(engineers | managers)\n# intersection -who are engineersand managers \nprint(engineers & managers)\n# difference -engineers who are not managers \nprint(engineers -managers)\n# difference -managers who are not engineers \nprint(managers -engineers)\n# symmetric difference -managers who are not engineers\n# and engineers who are not managers\nprint(managers ^ engineers)\na = {1, 2, 3, 4, 5}\n--- Page 142 ---\n126 Let Us Python\nb = {2, 4, 5}\nprint(a >= b) # prints True as a is superset of b\nprint(a <= b) # prints False as a is not a subset of b\nUpdating Set Operations", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_188", "chunk_strategy": "fixed_size"}}, {"text": "a = {1, 2, 3, 4, 5}\n--- Page 142 ---\n126 Let Us Python\nb = {2, 4, 5}\nprint(a >= b) # prints True as a is superset of b\nprint(a <= b) # prints False as a is not a subset of b\nUpdating Set Operations\nxMathematical set operations can be extended to update an existing \nset.\na |= b # update a with the result of a | b\na &= b # update a with the result of a & b\na -= b # update a with the result of a -b\na ^= b # update a with the result of a ^ b\nSet Varieties\nxUnlike a list and tuple, aset cannot contain a set embedded in it.\ns = {'gate', 'fate', {10, 20, 30}, 'late'} # error, nested sets\nxIt is possible to unpack a set using the *operator.\nx = {1, 2, 3, 4} \nprint(*x) # outputs 1, 2, 3, 4\n____________________________________________________________________\nProblem 10.1\nWhat will be the output of the following program?\na = {10, 20, 30, 40, 50, 60, 70}\nb = {33, 44, 51, 10, 20,50, 30, 33}\nprint(a | b)\nprint(a & b)\nprint(a -b)\nprint(b -a)\nprint(a ^b)\nprint(a >= b)\nprint(a <= b)\n--- Page 143 ---", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_189", "chunk_strategy": "fixed_size"}}, {"text": "a = {10, 20, 30, 40, 50, 60, 70}\nb = {33, 44, 51, 10, 20,50, 30, 33}\nprint(a | b)\nprint(a & b)\nprint(a -b)\nprint(b -a)\nprint(a ^b)\nprint(a >= b)\nprint(a <= b)\n--- Page 143 ---\nChapter10: Sets 127\nOutput\n{33, 70, 40, 10, 44, 50, 51, 20, 60, 30}\n{10, 50, 20, 30}\n{40, 60, 70}\n{33, 51, 44}\n{33, 70, 40, 44, 51, 60}\nFalse\nFalse\n____________________________________________________________________\nProblem 10.2\nWhat will bethe output of the following program?\na = {1, 2, 3, 4, 5, 6, 7}\nb = {1, 2, 3, 4, 5, 6, 7}\nc = {1, 2, 3, 4, 5, 6, 7}\nd = {1, 2, 3, 4, 5, 6, 7}\ne = {3, 4, 1, 0, 2, 5, 8, 9}\na |= e\nprint(a)\nb &= e\nprint(b)\nc -= e\nprint(c)\nd ^= e\nprint(d)\nOutput\n{0, 1, 2, 3,4, 5, 6, 7, 8, 9}\n{1, 2, 3, 4, 5}\n{6, 7}\n{0, 6, 7, 8, 9}\n____________________________________________________________________\nProblem 10.3\nWrite a program to carry out the following operations on the given set \ns = {10, 2, -3, 4, 5, 88}\n-number of items in set s\n-maximum element in set s\n-minimum element in set s", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_190", "chunk_strategy": "fixed_size"}}, {"text": "Problem 10.3\nWrite a program to carry out the following operations on the given set \ns = {10, 2, -3, 4, 5, 88}\n-number of items in set s\n-maximum element in set s\n-minimum element in set s\n--- Page 144 ---\n128 Let Us Python\n-sumof all elements in set s\n-obtain a new sorted setfrom s, set s remainingunchanged\n-report whether 100 is an element of set s\n-report whether -3 is an element of set s\nProgram\ns = {10, 2, -3, 4, 5, 88}\nprint(len(s))\nprint(max(s))\nprint(min(s))\nprint(sum(s))\nt = sorted(s)\nprint(t)\nprint(100 in s)\nprint(-3 not in s)\nOutput\n6\n88\n-3\n106\n[-3, 2, 4, 5, 10, 88]\nFalse\nFalse\n____________________________________________________________________\nProblem 10.4\nWhat will be the output of the following program?\nProgram\nl = [10, 20, 30, 40, 50]\nt = ('Sundeep', 25, 79.58) \ns = 'set theory'\ns1 = set(l)\ns2 = set(t)\ns3 = set(s)\nprint(s1)\nprint(s2)\nprint(s3)\n--- Page 145 ---\nChapter10: Sets 129\nOutput\n{40, 10, 50, 20, 30}\n{25, 79.58, 'Sundeep'}\n{'h', 's', 't', 'y', ' ', 'r', 'e', 'o'}", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_191", "chunk_strategy": "fixed_size"}}, {"text": "s1 = set(l)\ns2 = set(t)\ns3 = set(s)\nprint(s1)\nprint(s2)\nprint(s3)\n--- Page 145 ---\nChapter10: Sets 129\nOutput\n{40, 10, 50, 20, 30}\n{25, 79.58, 'Sundeep'}\n{'h', 's', 't', 'y', ' ', 'r', 'e', 'o'}\n____________________________________________________________________\n[A]What will be the output of the following programs:\n(a)s = {1, 2, 3, 7, 6, 4}\ns.discard(10)\ns.remove(10)\nprint(s)\n(b)s1 = {10, 20, 30, 40, 50}\ns2= {10, 20, 30, 40, 50}\nprint(id(s1), id(s2))\n(c)s1 = {10, 20, 30, 40, 50}\ns2= {10, 20, 30, 40, 50}\ns3 = {*s1, *s2}\nprint(s3)\n(d)s = set('KanLabs')\nt = s[::-1]\nprint(t)\n(e)num = {10, 20, {30, 40}, 50}\nprint(num)\n(f)s = {'Tiger', 'Lion', 'Jackal'}\ndel(s)\nprint(s)\n(g) fruits = {'Kiwi', 'Jack Fruit', 'Lichi'}\nfruits.clear( )\nprint(fruits)\n(h)s= {10, 25, 4, 12, 3, 8}\nsorted(s)\nprint(s)\n(i)s = { }\nt = {1, 4, 5, 2, 3}\n--- Page 146 ---\n130 Let Us Python\nprint(type(s), type(t))\n[B]Answer the followingquestions:\n(a)A set contains names which begin either with A or with B. write a", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_192", "chunk_strategy": "fixed_size"}}, {"text": "(i)s = { }\nt = {1, 4, 5, 2, 3}\n--- Page 146 ---\n130 Let Us Python\nprint(type(s), type(t))\n[B]Answer the followingquestions:\n(a)A set contains names which begin either with A or with B. write a \nprogram to separate out the names into two sets, one containing \nnames beginning with A and another containing names beginning \nwith B.\n(b)Create an empty set. Write a program that adds five new names to \nthis set, modifies one existing name and deletes two names existing \nin it. \n(c)What is the difference between the two set functions \u2014discard( )\nand remove().\n(d)Write a program to create a set containing 10 randomly generated \nnumbers in the range 15 to 45. Count how many of these numbers \nare less than 30. Delete all numbers which are greater than 35.\n(e)What do the following set operators do?\n|, &, ^, ~\n(f)What do the following set operators do?\n|=, &=, ^=, -=\n(g)How will you remove all duplicate elements present in a string, a list \nand a tuple?", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_193", "chunk_strategy": "fixed_size"}}, {"text": "(e)What do the following set operators do?\n|, &, ^, ~\n(f)What do the following set operators do?\n|=, &=, ^=, -=\n(g)How will you remove all duplicate elements present in a string, a list \nand a tuple?\n(h)Which operator is used for determining whether a set is a subset of \nanother set?\n(i)What will be the output of the following program?\ns = {'Mango', 'Banana', 'Guava', 'Kiwi'}\ns.clear( )\nprint(s)\ndel(s)\nprint(s)\n(j)Which of the following is the correct way to create an empty set?\ns1 = set( )\ns2 = { }\nWhat are the types of s1and s2? How will you confirm the type?\n--- Page 147 ---\nLet UsPython\n131Dictionaries\nxWhat are Dictionaries? xDictionary Methods\nxAccessing DictionaryElements xDictionary Varieties\nxLooping in Dictionaries xPrograms\nxBasic DictionaryOperations xExercises\nxUsing Built-in Functions on \nDictionaries11\n\u201cVersatility, thy names is dictionary... \u201d\n--- Page 148 ---\n132 Let Us Python\nWhat are Dictionaries?\nxDictionary is a collection of key-value pairs.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_194", "chunk_strategy": "fixed_size"}}, {"text": "xUsing Built-in Functions on \nDictionaries11\n\u201cVersatility, thy names is dictionary... \u201d\n--- Page 148 ---\n132 Let Us Python\nWhat are Dictionaries?\nxDictionary is a collection of key-value pairs. \nxDictionaries are also known as maps or associative arrays.\nxA dictionary contains comma separated key : value pairs enclosed \nwithin { }.\nd1= { } # empty dictionary\nd2= {'A101' : 'Amol', 'A102' : 'Anil', 'B103' : 'Ravi'}\nHere, 'A101', 'A102', 'B103' are keys, whereas, 'Amol', 'Anil', 'Ravi' \nare values. \nxDifferent keys may have same values.\nd = {10 : 'A', 20 : 'A', 30 : 'Z'} # ok\nxKeys must be unique. If keys are same, but values are different, \nlatest key value pair gets stored.\nd = {10 : 'A', 20 : 'B', 10 : 'Z'} # will store {10 : 'Z', 20 : 'B'}\nxIf key value pairs are repeated, then only one pair gets stored.\nd = {10 : 'A', 20 : 'B', 10 : 'A'} # will store {10 : 'A', 20 : 'B'}\nAccessing Dictionary Elements\nxEntire dictionary can be printed by just using the name of the \ndictionary.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_195", "chunk_strategy": "fixed_size"}}, {"text": "d = {10 : 'A', 20 : 'B', 10 : 'A'} # will store {10 : 'A', 20 : 'B'}\nAccessing Dictionary Elements\nxEntire dictionary can be printed by just using the name of the \ndictionary. \nd = {'A101' : 'Amol', 'A102' : 'Anil', 'B103' : 'Ravi'}\nprint(d) \nxUnlike sets, dictionaries preserve insertion order.However, \nelements are not accessed using the position, but using the key.\nd= {'A101' : 'Dinesh', 'A102' : 'Shrikant', 'B103' : 'Sudhir'}\nprint(d['A102']) # prints value for key 'A102'\n--- Page 149 ---\nChapter11: Dictionaries 133\nThus, elements are not position indexed, but key indexed.\nxDictionariescannot be sliced using [ ].\nLooping in Dictionaries\nxLike strings, lists, tuples and sets, dictionaries too can be iterated \nover using a forloop. There arethree waysto do so:\ncourses = {'DAA' : 'CS', 'AOA' : 'ME', 'SVY' : 'CE' }\n# iterate over key-value pairs\nfor k, v in courses.items( ) :\nprint(k, v)\n# iterate over keys\nfor k in courses.keys( ) :\nprint(k)\n# iterate over keys -shorter way", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_196", "chunk_strategy": "fixed_size"}}, {"text": "# iterate over key-value pairs\nfor k, v in courses.items( ) :\nprint(k, v)\n# iterate over keys\nfor k in courses.keys( ) :\nprint(k)\n# iterate over keys -shorter way\nfor k in courses :\nprint(k)\n# iterate over values\nfor v in courses.values( ) :\nprint(v)\nxWhile iterating through a dictionary using a forloop, if we wish to \nkeep track of index of the key-value pairs that is being referred to, \nwe can do so using the built-in enumerate( )function.\ncourses = {'DAA' : 'CS', 'AOA' : 'ME', 'SVY' : 'CE' }\nfor i, (k, v) in enumerate(courses.items( )):\nprint(i,k)\nNote that ( ) around k,vare necessary.\nBasic Dictionary Operations\nxDictionaries are mutable. So we can perform add/delete/modify \noperations on a dictionary.\ncourses = {'CS101' : 'CPP', 'CS102' : 'DS', 'CS201' : 'OOP',\n'CS226' : 'DAA', 'CS601' : 'Crypt', 'CS442' : 'Web'} \n# add, modify, delete\ncourses['CS444'] = 'Web Services' # add new key-value pair\n--- Page 150 ---\n134 Let Us Python", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_197", "chunk_strategy": "fixed_size"}}, {"text": "'CS226' : 'DAA', 'CS601' : 'Crypt', 'CS442' : 'Web'} \n# add, modify, delete\ncourses['CS444'] = 'Web Services' # add new key-value pair\n--- Page 150 ---\n134 Let Us Python\ncourses['CS201'] = 'OOP Using java' # modify value for a key\ndel(courses['CS102']) # delete a key-valuepair\ndel(courses) # delete dictionary object\nxNote that any new addition will take place at the end of the existing \ndictionary, since dictionary preserves the insertion order.\nxDictionary keys cannot be changed in place. \nxGiven below are the operations that work on lists and tuples. These \noperations are discussed in detail in Chapter 8. Try these operations \non dictionaries as an exercise.\nConcatenation -doesn't work Merging -doesn't work\nConversion -works Aliasing -works\nCloning -works Searching -works\nIdentity -works Comparison -doesn't work\nEmptiness -works\nxTwo dictionariescannot be concatenated using +.\nxTwo dictionariescannot be merged using the form z = s + t.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_198", "chunk_strategy": "fixed_size"}}, {"text": "Cloning -works Searching -works\nIdentity -works Comparison -doesn't work\nEmptiness -works\nxTwo dictionariescannot be concatenated using +.\nxTwo dictionariescannot be merged using the form z = s + t.\nxTwo dictionary objects cannot be compared using <, >.\nUsing Built-in Functions on Dictionaries\nxMany built-in functions can be used with dictionaries.\nd = { 'CS101' : 'CPP', 'CS102' : 'DS', 'CS201' : 'OOP'}\nlen(d) # return number of key-value pairs\nmax(d) # return maximum key in dictionary d\nmin(d) #return minimum key in dictionary d\nsorted(d) # return sorted list of keys\nsum(d) # return sum of all keys if keys are numbers\nany(d) # return True if any keyof dictionary d is True\nall(d) # return True if all keysof dictionary dare True\nreversed(d) # can be used for reversing dict/keys/values\nxUse of reversed function to reverse a dictionary by keys is shown \nbelow:\ncourses = {'CS101' : 'CPP', 'CS102' : 'DS', 'CS201' : 'OOP'}\nfor k, v in reversed(courses.items( )) :\nprint(k, v)\n--- Page 151 ---", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_199", "chunk_strategy": "fixed_size"}}, {"text": "below:\ncourses = {'CS101' : 'CPP', 'CS102' : 'DS', 'CS201' : 'OOP'}\nfor k, v in reversed(courses.items( )) :\nprint(k, v)\n--- Page 151 ---\nChapter11: Dictionaries 135\nDictionary Methods\nxThere are many dictionary methods. Many of the operations \nperformed by them can also be performed using built-in functions. \nThe useful dictionary methods are shown below:\nc = {'CS101' : 'CPP', 'CS102' : 'DS', 'CS201' : 'OOP'}\nd = { 'ME126' : 'HPE', 'ME102' : 'TOM', 'ME234' : 'AEM'}\nprint(c.get('CS102', 'Absent')) # prints DS\nprint(c.get('EE102', 'Absent')) # prints Absent\nprint(c['EE102']) # raises keyerror\nc.update(d) # updates c with items in d\nprint(c.popitem( )) # removesand returns item in LIFO order\nprint(c.pop('CS102')# removes key and returns its value\nc.clear( ) # clears all dictionary entries\nNote that while updating a dictionary if keys are same, values are \noverwritten.\npopitem( )is useful in destructively iterate through a dictionary.\nDictionaryVarieties", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_200", "chunk_strategy": "fixed_size"}}, {"text": "Note that while updating a dictionary if keys are same, values are \noverwritten.\npopitem( )is useful in destructively iterate through a dictionary.\nDictionaryVarieties\nxKeys in a dictionary must be unique and immutable. Numbers, \nstrings or tuples can be used as keys. If tuple is used as a key it \nshould not contain any mutable element like list.\nd = { (1, 5) : 'ME126', (3, 2) :'ME102', (5, 4) :'ME234'}\nxDictionaries can be nested.\ncontacts = {\n'Anil': {'DOB' : '17/11/98', 'Favorite' : 'Igloo'},\n'Amol': {'DOB' : '14/10/99', 'Favorite' : 'Tundra'},\n'Ravi': {'DOB' : '19/11/97', 'Favorite' : 'Artic'}\n}\nxTwo dictionaries can be merged to create a third dictionary by \nunpacking the two dictionaries using **.If we use * only keys will be \nunpacked.\nanimals= {'Tiger' : 141, 'Lion' : 152, 'Leopard' : 110}\nbirds= {'Eagle' : 38, 'Crow': 3, 'Parrot' : 2}\n--- Page 152 ---\n136 Let Us Python\ncombined = {**animals, **birds}\nxA dictionary containing different keys but same values can be", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_201", "chunk_strategy": "fixed_size"}}, {"text": "birds= {'Eagle' : 38, 'Crow': 3, 'Parrot' : 2}\n--- Page 152 ---\n136 Let Us Python\ncombined = {**animals, **birds}\nxA dictionary containing different keys but same values can be \ncreated using a fromkeys( )function as shown below:\nlst = [12, 13, 14, 15, 16]\nd= dict.fromkeys(lst, 25) # keys -list items, all values set to 25\n____________________________________________________________________\nProblem 11.1\nCreate a dictionary called studentscontaining names and ages. Copy the \ndictionary into stud. Empty the studentsdictionary, as studcontinues to \nhold the data.\nProgram\nstudents = {'Anil': 23, 'Sanjay': 28, 'Ajay': 25}\nstud = students# shallow copy, stud starts referring to same dictionary\nstudents = { } # students now refers to an empty dictionary\nprint(stud)\nOutput\n{'Anil': 23, 'Sanjay': 28, 'Ajay': 25} \nTips\nxBy making a shallow copy, a new dictionary is not created. studjust \nstarts referring (pointing)to the same data to which studentswas \nreferring (pointing).", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_202", "chunk_strategy": "fixed_size"}}, {"text": "Tips\nxBy making a shallow copy, a new dictionary is not created. studjust \nstarts referring (pointing)to the same data to which studentswas \nreferring (pointing).\nxHad we used students.clear( )it would have cleared all the data, so \nstudentsand studboth would have referredto an empty dictionary.\n____________________________________________________________________\nProblem 11.2\nCreate a list of cricketers. Use this list to create a dictionary in which the \nlist values become keysof the dictionary. Set the values of all keys to 50 \nin the dictionary created.\n--- Page 153 ---\nChapter11: Dictionaries 137\nProgram\nlst = ['Sunil', 'Sachin', 'Rahul', 'Kapil', 'Sunil', 'Rahul']\nd= dict.fromkeys(lst, 50)\nprint(len(lst))\nprint(len(d))\nprint(d)\nOutput\n6\n4\n{'Sunil': 50, 'Sachin': 50, 'Rahul': 50, 'Kapil': 50}\nTips\nxThe list may contain duplicate items, whereas a dictionary always \ncontains unique keys. Hence when the dictionary is created from list, \nduplicates are eliminated, as seen in the output.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_203", "chunk_strategy": "fixed_size"}}, {"text": "Tips\nxThe list may contain duplicate items, whereas a dictionary always \ncontains unique keys. Hence when the dictionary is created from list, \nduplicates are eliminated, as seen in the output.\n____________________________________________________________________\nProblem 11.3\nWrite a program to sort a dictionary in ascending/descending order by \nkey and ascending/descending order by value.\nProgram\nimport operator\nd = {'Oil': 230, 'Clip' : 150, 'Stud': 175, 'Nut': 35}\nprint('Original dictionary : ',d)\n# sorting by key\nd1 = sorted(d.items())\nprint('Asc. order by key : ', d1)\nd2 = sorted(d.items(), reverse = True)\nprint('Des. order by key : ', d2)\n# sorting by value\nd1 = sorted(d.items(), key = operator.itemgetter(1))\nprint('Asc. order by value : ', d1)\nd2 = sorted(d.items(), key = operator.itemgetter(1), reverse = True)\n--- Page 154 ---\n138 Let Us Python\nprint('Des. order by value : ', d2)\nOutput\nOriginal dictionary : {'Oil': 230, 'Clip': 150, 'Stud': 175, 'Nut': 35}", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_204", "chunk_strategy": "fixed_size"}}, {"text": "--- Page 154 ---\n138 Let Us Python\nprint('Des. order by value : ', d2)\nOutput\nOriginal dictionary : {'Oil': 230, 'Clip': 150, 'Stud': 175, 'Nut': 35}\nAsc. order by key : [('Clip', 150), ('Nut', 35), ('Oil', 230), ('Stud', 175)]\nDes. order by key : [('Stud', 175), ('Oil', 230), ('Nut', 35), ('Clip', 150)]\nAsc. order by value : [('Nut', 35), ('Clip', 150), ('Stud', 175), ('Oil', 230)]\nDes. order by value : [('Oil', 230), ('Stud', 175), ('Clip', 150), ('Nut', 35)]\nTips\nxBy default items in a dictionary would be sorted as per the key.\nxTo sort by values we need to use operator.itemgetter(1).\nxThe key parameter of sorted( ) requires a key function (to be applied \nto be objects to be sorted) rather than a single key value.\nxoperator.itemgetter(1)givesa function that grabs the first item \nfrom a list-like object.\nxIn general, operator.itemgetter(n)constructs a callable that \nassumes an iterable object (e.g. list, tuple, set) as input, and fetches \nthe nthelement out of it.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_205", "chunk_strategy": "fixed_size"}}, {"text": "from a list-like object.\nxIn general, operator.itemgetter(n)constructs a callable that \nassumes an iterable object (e.g. list, tuple, set) as input, and fetches \nthe nthelement out of it.\n____________________________________________________________________\nProblem 11.4\nWrite a program to create three dictionaries and concatenate them to \ncreate fourth dictionary.\nProgram\nd1 = {'Mango' : 30, 'Guava': 20}\nd2 = {'Apple' : 70, 'Pineapple' : 50}\nd3 = {'Kiwi' : 90, 'Banana' : 35}\nd4 = { }\nfor d in (d1, d2, d3) : \nd4.update(d)\nprint(d4)\n# one more way\nd5 = { **d1, **d2, **d3}\n--- Page 155 ---\nChapter11: Dictionaries 139\nprint(d5)\n# will unpack only the keys into the list\nd6 = list({*d1, *d2, *d3})\nprint(d6)\nOutput\n{'Mango': 30, 'Guava': 20, 'Apple': 70, 'Pineapple': 50, 'Kiwi': 90, \n'Banana': 35}\n{'Mango': 30, 'Guava': 20, 'Apple': 70, 'Pineapple': 50, 'Kiwi': 90, \n'Banana': 35}\n[Apple', 'Guava', 'Kiwi','Mango', 'Banana', 'Pineapple']\nTips", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_206", "chunk_strategy": "fixed_size"}}, {"text": "'Banana': 35}\n{'Mango': 30, 'Guava': 20, 'Apple': 70, 'Pineapple': 50, 'Kiwi': 90, \n'Banana': 35}\n[Apple', 'Guava', 'Kiwi','Mango', 'Banana', 'Pineapple']\nTips\nxFrom the output it can be observed that the dictionaries are merged \nin the order listed in the expression.\nxNote that list of keys is constructed from a dictionary they are not \nstored in the order listed in the expression.\n____________________________________________________________________\nProblem 11.5\nWrite a program to check whether a dictionary is empty or not.\nProgram\nd1 = {'Anil': 45, 'Amol': 32}\nif bool(d1) :\nprint('Dictionary is not empty')\nd2 = {}\nif not bool(d2) :\nprint('Dictionary is empty')\nOutput\nDictionary is not empty\nDictionary is empty\n____________________________________________________________________\n--- Page 156 ---\n140 Let Us Python\nProblem 11.6\nSuppose there are two dictionaries called boysand girlscontaining \nnames as keys and ages as values. Write a program to merge the two", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_207", "chunk_strategy": "fixed_size"}}, {"text": "--- Page 156 ---\n140 Let Us Python\nProblem 11.6\nSuppose there are two dictionaries called boysand girlscontaining \nnames as keys and ages as values. Write a program to merge the two \ndictionaries into a third dictionary.\nProgram\nboys = {'Nilesh' : 41, 'Soumitra' : 42, 'Nadeem' : 47}\ngirls = {'Rasika' : 38, 'Rajashree': 43, 'Rasika' : 45}\ncombined = {**boys, **girls}\nprint(combined)\ncombined = {**girls, **boys}\nprint(combined)\nOutput\n{'Nilesh': 41, 'Soumitra': 42, 'Nadeem': 47, 'Rasika': 45, 'Rajashree': 43}\n{'Rasika': 45, 'Rajashree': 43, 'Nilesh': 41, 'Soumitra': 42, 'Nadeem': 47}\nTips\nxFrom the output it can be observed that the dictionaries are merged \nin the order listed in the expression.\nxAs the merging takes place, duplicates get overwritten from left to \nright. So Rasika : 38 got overwritten with Rasika : 45.\n____________________________________________________________________\nProblem 11.7\nFor the following dictionary, write a program to report the maximum \nand minimum salary.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_208", "chunk_strategy": "fixed_size"}}, {"text": "____________________________________________________________________\nProblem 11.7\nFor the following dictionary, write a program to report the maximum \nand minimum salary.\nProgram\nd = {\n'anuj' : {'salary' : 10000, 'age' : 20, 'height' : 6}, \n'aditya' : {'salary' : 6000, 'age' : 26, 'height' : 5.6},\n'rahul' : {'salary' : 7000, 'age' : 26, 'height' : 5.9}\n}\nlst = [ ]\nfor v in d.values( ):\n--- Page 157 ---\nChapter11: Dictionaries 141\nlst.append(v['salary'])\nprint(max(lst))\nprint(min(lst))\nOutput\n10000\n6000\n____________________________________________________________________\nProblem 11.8\nSuppose a dictionary contains roll numbers and names of students. \nWrite a program to receive the roll number, extract the name \ncorresponding to the roll number and display a message congratulating \nthe student by his name. If the roll number doesn't exist in the \ndictionary,the message should be 'Congratulations Student!'.\nProgram\nstudents = {554 : 'Ajay', 350: 'Ramesh', 395: 'Rakesh'}", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_209", "chunk_strategy": "fixed_size"}}, {"text": "the student by his name. If the roll number doesn't exist in the \ndictionary,the message should be 'Congratulations Student!'.\nProgram\nstudents = {554 : 'Ajay', 350: 'Ramesh', 395: 'Rakesh'}\nrollno = int(input('Enter roll number: '))\nname = students.get(rollno, 'Student')\nprint(f'Congratulations {name}!')\nrollno = int(input('Enter roll number: '))\nname = students.get(rollno, 'Student')\nprint(f'Congratulations {name}!')\nOutput\nEnter roll number: 350\nCongratulations Ramesh!\nEnter roll number: 450\nCongratulations Student!\n____________________________________________________________________\n[A]State whether the following statements are True or False:\n(a)Dictionary elements can be accessed using position-based index.\n--- Page 158 ---\n142 Let Us Python\n(b)Dictionaries are immutable.\n(c)Insertion order is preserved by a dictionary.\n(d)The very first key -value pair in a dictionary dcan be accessed using \nthe expression d[0].\n(e)courses.clear( )will delete the dictionary object called courses.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_210", "chunk_strategy": "fixed_size"}}, {"text": "(d)The very first key -value pair in a dictionary dcan be accessed using \nthe expression d[0].\n(e)courses.clear( )will delete the dictionary object called courses.\n(f)It is possible to nest dictionaries.\n(g)It is possible to hold multiple values against a key in a dictionary.\n[B]Attempt the followingquestions:\n(a)Write a program that reads a string from the keyboard and creates\ndictionary containing frequency of each character occurring in the \nstring. Also print these occurrences in the form of a histogram.\n(b)Create a dictionary containing names of students and marks \nobtained by them in three subjects. Write a program to replace the \nmarks in three subjects with the total in three subjects, and average \nmarks. Also report the topper of the class.\n(c)Given the following dictionary:\nportfolio = { \n'accounts' : ['SBI', 'IOB'],\n'shares' : ' [HDFC, 'ICICI', 'TM', 'TCS'],\n'ornaments' : ['10 gm gold', '1 kg silver']\n}\nWrite a program to perform the following operations:", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_211", "chunk_strategy": "fixed_size"}}, {"text": "portfolio = { \n'accounts' : ['SBI', 'IOB'],\n'shares' : ' [HDFC, 'ICICI', 'TM', 'TCS'],\n'ornaments' : ['10 gm gold', '1 kg silver']\n}\nWrite a program to perform the following operations:\n-Add a key to portfolio called 'MF' with values 'Relaince' and 'ABSL'.\n-Set the value of 'accounts' to a list containing 'Axis' and 'BOB'.\n-Sort the items in the list stored under the 'shares' key.\n-Delete the list stored under 'ornaments' key.\n(d)Create two dictionaries \u2014one containing grocery items and their \nprices and another containing grocery items and quantity purchased. \nBy using the values from these two dictionaries compute the total \nbill.\n(e)Which functions will you use to fetch all keys, all values and key \nvalue pairs from a given dictionary?\n--- Page 159 ---\nChapter11: Dictionaries 143\n(f)Create a dictionary of 10 user names and passwords. Receive the \nuser name and password from keyboard and search for them in the \ndictionary. Print appropriate message on the screen based on", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_212", "chunk_strategy": "fixed_size"}}, {"text": "(f)Create a dictionary of 10 user names and passwords. Receive the \nuser name and password from keyboard and search for them in the \ndictionary. Print appropriate message on the screen based on \nwhether a match is found or not.\n(g)Given the following dictionary\nmarks= {\n'Subu' : {'Maths' : 88, 'Eng' : 60, 'SSt' : 95},\n'Amol' : {'Maths' : 78, 'Eng' : 68, 'SSt' : 89},\n'Raka' : {'Maths' : 56, 'Eng' : 66, 'SSt' : 77}\n}\nWrite a program to perform the following operations: \n-Print marks obtained by Amol in English.\n-Set marks obtained by Raka in Maths to 77.\n-Sort the dictionary by name.\n(h)Create a dictionary which stores the following data:\nInterfaceIP Addressstatus\neth0 1.1.1.1 up\neth1 2.2.2.2 up\nwlan0 3.3.3.3 down\nwlan1 4.4.4.4 up\nWrite a program to perform the following operations:\n-Find the status of a given interface.\n-Find interface and IP of all interfaces which are up.\n-Find the total number of interfaces.\n-Add two new entries to the dictionary.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_213", "chunk_strategy": "fixed_size"}}, {"text": "-Find the status of a given interface.\n-Find interface and IP of all interfaces which are up.\n-Find the total number of interfaces.\n-Add two new entries to the dictionary.\n(i)Suppose a dictionary contains 5 key-value pairs of name and marks. \nWrite a program to print them from last pair to first pair. Keep \ndeleting every pair printed, such that the end of printing the \ndictionary falls empty.\n[C]Answerthe following questions:\n(a)What will be the output of the following code snippet? \nd = { 'Milk' : 1, 'Soap' : 2, 'Towel' : 3, 'Shampoo' : 4, 'Milk' : 7}\nprint(d[0], d[1], d[2])\n(b)Which of the following statements are CORRECT?\n--- Page 160 ---\n144 Let Us Python\ni. A dictionary will always contain unique keys.\nii. Each key in a dictionary may have multiple values.\niii. If same key is assigned a different value, latest value will prevail.\n(c)How will you create an empty list, empty tuple, empty set and \nempty dictionary?", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_214", "chunk_strategy": "fixed_size"}}, {"text": "iii. If same key is assigned a different value, latest value will prevail.\n(c)How will you create an empty list, empty tuple, empty set and \nempty dictionary?\n(d)How will you create a list, tuple, set and dictionary, each containing \none element?\n(e)Given the following dictionary:\nd= { 'd1': {'Fruitname' : 'Mango', 'Season': 'Summer'}, \n'd2': {'Fruitname': 'Orange', 'Season': 'Winter'}}\nHow will you access and print Mango and Winter?\n(f)In the following table check the box if a property is enjoyed by the \ndata types mentioned in columns?\nProperty str list tuple set dict\nObject\nCollection\nMutable\nOrdered\nIndexed by position\nIndexed by key\nIterable\nSlicingallowed\nNesting allowed\nHomogeneous elements\nHeterogeneous elements\n(g)What is the most common usage of the data types mentioned \nbelow?\nstr\nlist\ntuple\nset\ndict\n--- Page 161 ---\nLet UsPython\n145Comprehensions\nxWhat are Comprehensions? xDictionary Comprehension\nxList Comprehension xPrograms\nxSet Comprehension xExercises12", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_215", "chunk_strategy": "fixed_size"}}, {"text": "below?\nstr\nlist\ntuple\nset\ndict\n--- Page 161 ---\nLet UsPython\n145Comprehensions\nxWhat are Comprehensions? xDictionary Comprehension\nxList Comprehension xPrograms\nxSet Comprehension xExercises12\n\u201cAdd punch to your thought... \u201d\n--- Page 162 ---\n146 Let Us Python\nWhat are comprehensions?\nxComprehensions offer an easy and compact way of creating lists, \nsets and dictionaries. \nxA comprehension works by looping or iterating over items and \nassigning them to a container like list, set or dictionary. \nxThis container cannot be a tuple as tuple being immutable is unable \nto receive assignments. \nList Comprehension\nxList comprehension consistsof brackets containing an expression \nfollowed by aforclause, and zero or morefororifclauses.\nxSo general form of a list comprehension is\nlst = [expression for var in sequence [optional for and/or if]]\nxExamples of list comprehension:\n# generate 20 random numbers in the range 10 to 100\na = [random.randint(10, 100) for n in range(20)]", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_216", "chunk_strategy": "fixed_size"}}, {"text": "lst = [expression for var in sequence [optional for and/or if]]\nxExamples of list comprehension:\n# generate 20 random numbers in the range 10 to 100\na = [random.randint(10, 100) for n in range(20)]\n# generate square and cube of all numbers between 0 and 10\na = [( x, x**2, x**3) for x in range(10)]\n# convert a list of strings to a list of integers\na = [int(x) for x in ['10', '20', '30', '40'] \nxExamples of use of if in list comprehension:\n# generate a list of even numbers in the range 10 to 30\na = [n for n in range(10, 30) if n % 2 == 0]\n# from a list delete all numbers having a value between 20 and 50\na = [num for num in a if num < 20 or num > 50]\nxExample of use of if-else in list comprehension:\n# whenif-else both are used, place them before for\n# replace a vowel in a string with !\na = ['!' if alphabet in 'aeiou' else alphabet for alphabet in 'Technical' ]\n--- Page 163 ---\nChapter12: Comprehensions 147\nxExample of use of multiple fors and if in list comprehension:", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_217", "chunk_strategy": "fixed_size"}}, {"text": "a = ['!' if alphabet in 'aeiou' else alphabet for alphabet in 'Technical' ]\n--- Page 163 ---\nChapter12: Comprehensions 147\nxExample of use of multiple fors and if in list comprehension:\n# flatten a list of lists\narr = [[1,2,3,4], [5,6,7,8], [10, 11, 12, 13]]\nb = [n for ele in arr for n in ele] # one way\n# * can be used to unpack a list\nc = [*arr[0], *arr[1], *arr[2]] # one more way\nxNote the difference between nested forin a list comprehension and \na nested comprehension:\n# produces [4, 5, 6, 5, 6, 7, 6, 7, 8]. Uses nested for\nlst = [a + b for a in [1, 2, 3] for b in [3, 4, 5]]\n# produces [[4, 5, 6], [5, 6, 7], [6, 7, 8]]. Uses nested comprehension\nlst = [[a + b for a in [1, 2, 3]] for b in [3, 4, 5]]\nThink of first foras outerloop and second foras inner loop.\nxExample of use of multiple fors and if in list comprehension:\n# generate all unique combinations of 1, 2 and 3\na = [(i, j, k) for i in [1,2,3] for j in [1,2,3] for k in [1, 2, 3] if i != j \\\nand j !=k and k != i]", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_218", "chunk_strategy": "fixed_size"}}, {"text": "# generate all unique combinations of 1, 2 and 3\na = [(i, j, k) for i in [1,2,3] for j in [1,2,3] for k in [1, 2, 3] if i != j \\\nand j !=k and k != i]\nSet Comprehension\nxLike list comprehensions, set comprehensions offer an easy way of \ncreating sets. It consists of braces containing an expression followed \nby aforclause, and zero or morefororifclauses.\nxSo general form of a set comprehension is\ns = {expression for var in sequence [optional for and/or if]}\nxExamples of set comprehension:\n# generate a set containing square of all numbers between 0 and 10\na = {x**2 for x in range(10)}\n# from a set delete all numbers between 20 and 50\na = {num for num in a if num > 20 and num < 50}\n--- Page 164 ---\n148 Let Us Python\nDictionary Comprehension\nxGeneral form of a dictionary comprehension is as follows:\ndict_var = {key:value for (key,value) in dictonary.items()}\nxExamples of dictionary comprehension:\nd = {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n# obtain dictionary with each value cubed", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_219", "chunk_strategy": "fixed_size"}}, {"text": "dict_var = {key:value for (key,value) in dictonary.items()}\nxExamples of dictionary comprehension:\nd = {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n# obtain dictionary with each value cubed \nd1 = {k : v ** 3 for (k, v) in d.items( )}\nprint(d1) # prints {'a': 1, 'b': 8, 'c': 27, 'd': 64}\n# obtain dictionary with each value cubed if value > 3\nd2 = {k : v ** 3 for (k, v) in d.items( ) if v > 3}\nprint(d2) # prints {'d': 64}\n# Identify odd and even entries in the dictionary\nd3 = {k : ('Even' if v % 2 == 0 else 'Odd') for (k, v) in d.items( )}\nprint(d3) # prints {'a': 'Odd', 'b': 'Even', 'c': 'Odd', 'd': 'Even'}\n____________________________________________________________________\nProblem 12.1\nUsing list comprehension, write a program to generate a list of numbers\nin the range 2 to 50 that are divisible by 2 and 4.\nProgram\nlst = [num for num in range(2,51) if num % 2 == 0 and num % 4 == 0]\nprint(lst)\nOutput\n[4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48]", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_220", "chunk_strategy": "fixed_size"}}, {"text": "in the range 2 to 50 that are divisible by 2 and 4.\nProgram\nlst = [num for num in range(2,51) if num % 2 == 0 and num % 4 == 0]\nprint(lst)\nOutput\n[4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48]\n____________________________________________________________________\nProblem 12.2\nWrite a program to flatten the following list using list comprehension:\nmat= [[1, 2, 3, 4],[5, 6, 7, 8],[9, 10, 11, 12]]\n--- Page 165 ---\nChapter12: Comprehensions 149\nProgram\nmat = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]\na = [num for lst in mat for num in lst]\nprint(a)\nOutput\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n____________________________________________________________________\nProblem 12.3\nWrite a program to create a set containing some randomly generated \nnumbers in the range 15 to 45. Count how many of these numbers are \nless than 30. Delete all numbers which are less than 30.\nProgram\nimport random\nr = {int(15 + 30 * random.random( )) for num in range(10)}\nprint(r)", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_221", "chunk_strategy": "fixed_size"}}, {"text": "less than 30. Delete all numbers which are less than 30.\nProgram\nimport random\nr = {int(15 + 30 * random.random( )) for num in range(10)}\nprint(r)\ncount = len({num for num in r if num < 30})\nprint(count)\ns = {num for num in r if num < 30}\nr = r -s\nprint(r)\nOutput\n{32, 35, 36, 38, 41, 43, 21, 23, 25, 26}\n4\n{32, 35, 36, 38, 41, 43}\nTips\nxDeletion of elements cannot be done while iterating the set. Hence a \nseparate set scontaining elements below 30 is first created and then \nr = r -sisdone to delete set s elements from set r.\n____________________________________________________________________\n--- Page 166 ---\n150 Let Us Python\nProblem 12.4\nWrite a program using list comprehension to eliminate empty tuples \nfrom a list of tuples.\nProgram\nlst = [( ), ( ), (10), (10, 20), ('',), (10, 20, 30), (40, 50), ( ), (45)]\nlst = [tpl for tpl in lst if tpl]\nprint(lst)\nOutput\n[10, (10, 20), ('',), (10, 20, 30), (40, 50), 45]\nTips\nxif tplreturns Trueif the tuple is not empty.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_222", "chunk_strategy": "fixed_size"}}, {"text": "lst = [tpl for tpl in lst if tpl]\nprint(lst)\nOutput\n[10, (10, 20), ('',), (10, 20, 30), (40, 50), 45]\nTips\nxif tplreturns Trueif the tuple is not empty.\n____________________________________________________________________\nProblem 12.5\nGiven a string, split it on whitespace, capitalize each element of the \nresulting list and join them back into a string. Your implementation \nshould use a list comprehension.\nProgram\ns1= 'dreams may change, but friends are forever'\ns2= [''.join(w.capitalize() for w in s1.split())]\ns3 = s2[0]\nprint(s3)\nOutput\n'DreamsMayChange,ButFriendsAreForever'\nTips\nxTo rebuild the list from capitalized elements, start with an empty \nstring.\n____________________________________________________________________\n--- Page 167 ---\nChapter12: Comprehensions 151\nProblem 12.6\nFroma dictionary with string keys create a new dictionary with the \nvowels removed from the keys. \nProgram\nwords = { 'Tub' : 1, 'Toothbrush' : 2, 'Towel' : 3, 'Nailcutter' : 4}", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_223", "chunk_strategy": "fixed_size"}}, {"text": "Problem 12.6\nFroma dictionary with string keys create a new dictionary with the \nvowels removed from the keys. \nProgram\nwords = { 'Tub' : 1, 'Toothbrush' : 2, 'Towel' : 3, 'Nailcutter' : 4}\nd = {''.join(alpha for alpha in k if alpha not in 'aeiou'): v for (k, v) in \nwords.items()}\nprint(d)\nOutput\n{'Tb': 1, 'Tthbrsh': 2, 'Twl': 3, 'Nlcttr': 4}\nTips\nxWe have use a list comprehension nested inside a dictionary\ncomprehension.\nxThe list comprehension builds a new key starting with an empty \nstring, adding only those characters from the key which are not \nvowels. \nxThe list comprehension is fed with keys by the dictionary \ncomprehension.\n____________________________________________________________________\nProblem 12.7\nWrite a program to add two 3 x 4 matrices using\n(a)lists\n(b)list comprehension\nProgram\nmat1 = [[1, 2, 3, 4],[5, 6, 7, 8],[9, 10, 11, 12]]\nmat2 = [[1, 2, 3, 4],[5, 6, 7, 8],[9, 10, 11, 12]]\nmat3 = [[0,0,0,0], [0,0,0,0], [0,0,0,0]]\n# iterate through rows", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_224", "chunk_strategy": "fixed_size"}}, {"text": "(b)list comprehension\nProgram\nmat1 = [[1, 2, 3, 4],[5, 6, 7, 8],[9, 10, 11, 12]]\nmat2 = [[1, 2, 3, 4],[5, 6, 7, 8],[9, 10, 11, 12]]\nmat3 = [[0,0,0,0], [0,0,0,0], [0,0,0,0]]\n# iterate through rows\nfor i in range(len(mat1)) :\n--- Page 168 ---\n152 Let Us Python\n# iterate through columns\nfor j in range(len(mat1[0])) :\nmat3[i][j] = mat1[i][j] + mat2[i][j]\nprint(mat3)\nmat3 = [[mat1[i][j] + mat2[i][j] for j in range(len(mat1[0]))]\nfor i in range(len(mat1))]\nprint(mat3)\nOutput\n[[2, 4, 6, 8], [10, 12, 14, 16], [18, 20, 22, 24]]\n[[2, 4, 6, 8], [10, 12, 14, 16], [18, 20, 22, 24]]\nTips\nxNested listcomprehensionis evaluated in the context of the forthat \nfollows it.\n____________________________________________________________________\nProblem 12.8\nSuppose a dictionary contains following information for 5 employees:\nemp = { \n'A101' : {'name' : 'Ashish', 'age' : 30, 'salary' : 21000},\n'B102' : {'name' : 'Dinesh', 'age' : 25, 'salary' : 12200},", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_225", "chunk_strategy": "fixed_size"}}, {"text": "Suppose a dictionary contains following information for 5 employees:\nemp = { \n'A101' : {'name' : 'Ashish', 'age' : 30, 'salary' : 21000},\n'B102' : {'name' : 'Dinesh', 'age' : 25, 'salary' : 12200},\n'A103' : {'name' : 'Ramesh', 'age' : 28, 'salary' : 11000},\n'D104' : {'name' : 'Akheel', 'age' : 30, 'salary' : 18000},\n'A105' : {'name' : 'Akaash', 'age' : 32, 'salary' : 20000}\n}\nUsing dictionary comprehensions, write a program tocreate:\n-Dictionary of all those codes and values, where codes that start with \n'A'.\n-Dictionary of all codes and names.\n-Dictionary of all codes and ages.\n-Dictionary of all codes and ages, where age is more than 30.\n-Dictionary of all codes and names, where names start with 'A'.\n-Dictionary of all codes and salaries, where salary is in the range \n13000 to 20000.\n--- Page 169 ---\nChapter12: Comprehensions 153\nProgram\nemp = { \n'A101' : {'name' : 'Ashish', 'age' : 30, 'salary' : 21000},\n'B102' : {'name' : 'Dinesh', 'age' : 25, 'salary' : 12200},", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_226", "chunk_strategy": "fixed_size"}}, {"text": "13000 to 20000.\n--- Page 169 ---\nChapter12: Comprehensions 153\nProgram\nemp = { \n'A101' : {'name' : 'Ashish', 'age' : 30, 'salary' : 21000},\n'B102' : {'name' : 'Dinesh', 'age' : 25, 'salary' : 12200},\n'A103' : {'name' : 'Ramesh', 'age' : 28, 'salary' : 11000},\n'D104' : {'name' : 'Akheel', 'age' : 30, 'salary' : 18000},\n}\nd1 = {k : v for (k, v) in emp.items( ) if k.startswith('A')}\nd2 = {k : v['name'] for (k, v) in emp.items( )}\nd3 = {k : v['age'] for (k, v) in emp.items( )}\nd4 = {k : v['age'] for (k, v) in emp.items( ) if v['age'] > 30}\nd5 = {k : v['name'] for (k, v) in emp.items( ) if v['name'].startswith('A')}\nd6 = {k : v['salary'] for (k, v) in emp.items( ) if v['salary'] > 13000 and \nv['salary'] <= 20000}\nprint(d1)\nprint(d2)\nprint(d3)\nprint(d4)\nprint(d5)\nprint(d6)\nOutput\n{'A101': {'name': 'Ashish', 'age': 30, 'salary': 21000}, 'A103': {'name': \n'Ramesh', 'age': 28, 'salary': 11000}}\n{'A101': 'Ashish', 'B102': 'Dinesh', 'A103': 'Ramesh', 'D104': 'Akheel'}", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_227", "chunk_strategy": "fixed_size"}}, {"text": "Output\n{'A101': {'name': 'Ashish', 'age': 30, 'salary': 21000}, 'A103': {'name': \n'Ramesh', 'age': 28, 'salary': 11000}}\n{'A101': 'Ashish', 'B102': 'Dinesh', 'A103': 'Ramesh', 'D104': 'Akheel'}\n{'A101': 30, 'B102': 25, 'A103': 28, 'D104': 30}\n{}\n{'A101': 'Ashish', 'D104': 'Akheel'}\n{'D104': 18000}\nTips\nxNote that the data has been organized in nested directories.\nxTo access 'Ashish' we need to use the syntax emp['A101']['name']\nxTo access 32 we need to use the syntax emp['A105']['age']\n____________________________________________________________________\n--- Page 170 ---\n154 Let Us Python\n[A]State whether the following statements are True or False:\n(a)Tuple comprehension offers a fast and compact way to generate a \ntuple.\n(b)List comprehension and dictionary comprehension can be nested.\n(c)A list being used in a list comprehension cannot be modified when it \nis being iterated.\n(d)Sets being immutable cannot be used in comprehension.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_228", "chunk_strategy": "fixed_size"}}, {"text": "(c)A list being used in a list comprehension cannot be modified when it \nis being iterated.\n(d)Sets being immutable cannot be used in comprehension.\n(e)Comprehensions can be used create a list, set or a dictionary.\n[B]Answer the followingquestions:\n(a)Write a program that generates a list of integer coordinates for all \npoints in the first quadrant from (1, 1) to (5, 5). Use list \ncomprehension.\n(b)Using list comprehension, write a program to create a list by \nmultiplying each element in the list by 10.\n(c)Write a program to generate first 20 Fibonacci numbers using list \ncomprehension.\n(d)Write a program to generate two lists using list comprehension. One \nlist should contain first 20 odd numbers and another should contain \nfirst 20 even numbers.\n(e)Suppose a list contains positive and negative numbers. Write a \nprogram to create two lists \u2014one containing positive numbers and \nanother containing negative numbers.\n(f)Suppose a list contains 5 strings. Write a program to convert all", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_229", "chunk_strategy": "fixed_size"}}, {"text": "program to create two lists \u2014one containing positive numbers and \nanother containing negative numbers.\n(f)Suppose a list contains 5 strings. Write a program to convert all \nthese strings to uppercase.\n(g)Write a program that converts list of temperatures in Fahrenheit \ndegrees to equivalent Celsius degrees using list comprehension.\n(h)Write a program to generate a 2D matrix of size 4 x 5 containing \nrandom multiples of 4 in the range 40 to 160.\n--- Page 171 ---\nChapter12: Comprehensions 155\n(i)Write a program that converts wordspresent in a list into uppercase \nand stores them in a set.\n[C]Attempt the following questions:\n(a)Consider the following code snippet: \ns = set([int(n) for n in input('Enter values: ').split( )])\nprint(s)\nWhat will be the output of the above code snippetif input provided \nto it is1 2 3 4 5 6 7 2 4 5 0?\n(b)How will you convert the following code into a list comprehension?\na = [ ]\nfor n in range(10, 30) :\nif n % 2 == 0 :\na.append(n)", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_230", "chunk_strategy": "fixed_size"}}, {"text": "to it is1 2 3 4 5 6 7 2 4 5 0?\n(b)How will you convert the following code into a list comprehension?\na = [ ]\nfor n in range(10, 30) :\nif n % 2 == 0 :\na.append(n)\n(c)How will you convert the following code into a set comprehension?\na = set( )\nfor n in range(21, 40) :\nif n % 2 == 0 :\na.add(n)\nprint(a)\n(d)What will be the output of the following code snippet? \ns = [a + b for a in ['They ', 'We '] for b in ['are gone!', 'have come!']]\nprint(s)\n(e)From the sentence\nsent = 'Pack my box with five dozen liquor jugs'\nhow will you generate a set given below?\n{'liquor', 'jugs', 'with', 'five', 'dozen', 'Pack'}\n(f)Which of the following the correct form of dictionary \ncomprehension?\ni. dict_var = {key:value for (key, value) in dictonary.items( )}\nii. dict_var = {key:value for (key, value) in dictonary}\niii. dict_var = {key:value for (key, value) in dictonary.keys( )}\n(g) Using comprehension how will you convert\n--- Page 172 ---\n156 Let Us Python\n{'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\ninto", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_231", "chunk_strategy": "fixed_size"}}, {"text": "iii. dict_var = {key:value for (key, value) in dictonary.keys( )}\n(g) Using comprehension how will you convert\n--- Page 172 ---\n156 Let Us Python\n{'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\ninto\n{'A': 100, 'B': 200, 'C': 300, 'D': 400, 'E': 500}?\n(h)What will be the output of the following code snippet? \nlst = [2, 7, 8, 6, 5, 5, 4, 4, 8]\ns = {True if n % 2 == 0 else False for n in lst}\nprint(s)\n(i)How will you convert \nd = {'AMOL': 20, 'ANIL': 12, 'SUNIL':13, 'RAMESH': 10}\ninto\n{'Amol': 400, 'Anil': 144, 'Sunil': 169, 'Ramesh': 100}\n(j)How will youconvert words present in a list given below into \nuppercase and store them in a set?\nlst = ['Amol', 'Vijay', 'Vinay', 'Rahul', 'Sandeep']\n--- Page 173 ---\nLet UsPython\n157Functions\nxWhat are Functions? xUnpacking Arguments\nxCommunication with Functions xPrograms\nxTypes of Arguments xExercises13\n\u201cThink modular, think of functions... \u201d\n--- Page 174 ---\n158 Let Us Python\nWhat are Functions?", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_232", "chunk_strategy": "fixed_size"}}, {"text": "xCommunication with Functions xPrograms\nxTypes of Arguments xExercises13\n\u201cThink modular, think of functions... \u201d\n--- Page 174 ---\n158 Let Us Python\nWhat are Functions?\nxPython function is a block of code that performs a specific and well-\ndefined task. \nxTwo main advantages of function are:\n(a)They help us divide our program into multiple tasks. For each \ntask we can define a function. This makes the code modular.\n(b)Functions provide a reuse mechanism. The same function can be \ncalled any number of times.\nxThere are two types of Python functions:\n(a)Built-in functions -Ex. len( ), sorted( ), min( ), max( ), etc.\n(b)User-defined functions\nxGiven below is an example of user-defined function. Note that the \nbody of the function must be indented suitably.\n# function definition\ndef fun( ) :\nprint('My opinions may have changed')\nprint('But not the fact that I am right')\nxA function can be called any number of times.\nfun( ) # first call\nfun( ) # second call", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_233", "chunk_strategy": "fixed_size"}}, {"text": "def fun( ) :\nprint('My opinions may have changed')\nprint('But not the fact that I am right')\nxA function can be called any number of times.\nfun( ) # first call\nfun( ) # second call\nxWhen a function is called, control is transferred to the function, its \nstatements are executed and control is returned to place from \nwhere the call originated.\nxPython convention for function names:\n-Always use lowercase characters\n-Connect multiple words using _\nExample: cal_si( ), split_data( ), etc.\nxA function can be redefined. While calling the function its latest \ndefinition will be called.\n--- Page 175 ---\nChapter13: Functions 159\nxFunction definitions can be nested. When we do so, the inner \nfunction is able to access the variables of outer function.The outer \nfunction has to be called forthe inner function to execute.\ndef fun1( ) :\nprint('Reached fun1')\ndef fun2( ) : # nested definition\nprint('Inner avatar')\nprint('Outer avatar')\nfun2( )\nfun1( ) # ok\nfun2( ) # cannot call inner function from here", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_234", "chunk_strategy": "fixed_size"}}, {"text": "def fun1( ) :\nprint('Reached fun1')\ndef fun2( ) : # nested definition\nprint('Inner avatar')\nprint('Outer avatar')\nfun2( )\nfun1( ) # ok\nfun2( ) # cannot call inner function from here\nprint(type(fun1)) # nested call\nxSuppose we wish to develop a function myrandom( )to generate \nrandom numbers. While executing this function we wish to check \nwhether a number is a prime number or not. We can do so by \ndefining a function isprime( ). But we do not want want isprime( )to \nbe callable from outside myrandom( ). In a way we wish to protect \nit. In such a case we can define isprime( ) as an inner function.\nxAnother use of inner functions is in creating decorators. This usage is \ndiscussed in Chapter 24.\nCommunication with Functions\nxCommunication with functions is done using parameters/arguments \npassed to it and the value(s) returned from it.\nxThe way to pass values to a function and return value from it is \nshown below:\ndef cal_sum(x, y, z) :\nreturn x + y + z", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_235", "chunk_strategy": "fixed_size"}}, {"text": "passed to it and the value(s) returned from it.\nxThe way to pass values to a function and return value from it is \nshown below:\ndef cal_sum(x, y, z) :\nreturn x + y + z \n# pass 10, 20, 30 to cal_sum( ), collect value returned by it\ns1 = cal_sum(10, 20, 30) \n# pass a, b, c to cal_sum( ), collect value returned by it\na, b, c = 1, 2, 3\ns2 = cal_sum(a, b, c)\n--- Page 176 ---\n160 Let Us Python\nxreturnstatement returns control and value from a function. return\nwithout an expression returns None.\nxTo return multiple values from a function we can put them into a \nlist/tuple/set/dictionary and then return it.\nxSuppose we pass arguments a, b, cto a function and collect them in \nx, y, z. Changing x, y, zin the function body, does not change a, b, c. \nThus a function is always called by value.\nxA function can return different types through different return \nstatements.\nxA function that reaches end of execution without a returnstatement \nwill always return None.\nTypes of Arguments", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_236", "chunk_strategy": "fixed_size"}}, {"text": "xA function can return different types through different return \nstatements.\nxA function that reaches end of execution without a returnstatement \nwill always return None.\nTypes of Arguments\nxArguments in a Python function can be of 4 types:\n(a)Positional arguments \n(b)Keyword arguments\n(c)Variable-length positional arguments\n(d)Variable-length keyword arguments\nPositional and keyword arguments are often called 'required' \narguments, whereas, variable-length arguments are called 'optional' \narguments.\nxPositional arguments must be passed in correct positional order. For \nexample, if a function expects an int, float and string to be passed to \nit, then while calling this function the arguments must be passed in \nthe same order.\ndeffun(i,j,k):\nprint(i+j)\nprint(k.upper())\nfun(10, 3.14, 'Rigmarole') # correct call\nfun('Rigmarole', 3.14, 10) # error, incorrect order\nWhile passing positional arguments, number of arguments passed\nmust match with number of arguments received.\n--- Page 177 ---", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_237", "chunk_strategy": "fixed_size"}}, {"text": "fun('Rigmarole', 3.14, 10) # error, incorrect order\nWhile passing positional arguments, number of arguments passed\nmust match with number of arguments received.\n--- Page 177 ---\nChapter13: Functions 161\nxKeyword arguments can be passed out of order. Python interpreter \nuses keywords (variable names) to match the values passed with the \narguments used in the function definition. \ndef print_it(i, a, str) :\nprint(i, a, str)\nprint_it(a = 3.14, i = 10, str = 'Sicilian') # keyword, ok\nprint_it(str = 'Sicilian', a = 3.14, i = 10) # keyword, ok\nprint_it(str = 'Sicilian', i = 10, a = 3.14) # keyword, ok\nprint_it(s = 'Sicilian', j = 10, a = 3.14) # error,keyword name\nAn error is reported in the last call since the variable names in the \ncall and the definition do not match.\nxIn a call we can use positional as well as keyword arguments. If we \ndo so, the positional arguments must precede keyword arguments.\ndef print_it(i, a, str) :\nprint(i, a, str)\nprint_it(10, a = 3.14, str = 'Ngp') # ok", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_238", "chunk_strategy": "fixed_size"}}, {"text": "do so, the positional arguments must precede keyword arguments.\ndef print_it(i, a, str) :\nprint(i, a, str)\nprint_it(10, a = 3.14, str = 'Ngp') # ok\nprint_it(10, str = 'Ngp', a = 3.14) # ok\nprint_it(str = 'Ngp', 10, a = 3.14) # error, positional after keyword\nprint_it(str = 'Ngp', a = 3.14, 10)# error, positional after keyword\nxSometimes number of positional arguments to be passed to a \nfunction is not certain. In such cases, variable-length positional \narguments can be received using *args.\ndef print_it(*args) :\nprint( )\nfor var in args :\nprint(var, end = ' ')\nprint_it(10) # 1 arg, ok\nprint_it(10, 3.14) # 2 args, ok\nprint_it(10, 3.14,'Sicilian') # 3 args, ok\nprint_it(10, 3.14, 'Sicilian', 'Punekar') # 4 args, ok\n--- Page 178 ---\n162 Let Us Python\nargsused in definition of print_it( )is a tuple. * indicates that it will \nhold all the arguments passed to print_it( ). The tuple can be \niterated through using a forloop.\nxSometimes number of keyword arguments to be passed to a", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_239", "chunk_strategy": "fixed_size"}}, {"text": "hold all the arguments passed to print_it( ). The tuple can be \niterated through using a forloop.\nxSometimes number of keyword arguments to be passed to a \nfunction is not certain. In such cases, variable-length keyword \narguments can be received using **kwargs.\ndef print_it(**kwargs) :\nprint( )\nfor name, value in kwargs.items( ) :\nprint(name, value, end = ' ')\nprint_it(a = 10) # keyword, ok\nprint_it(a = 10, b = 3.14) # keyword, ok\nprint_it(a = 10, b = 3.14, s = 'Sicilian') # keyword, ok\ndct = {'Student' : 'Ajay', 'Age' : 23}\nprint_it(**dct) # ok\nkwargsused in definition of print_it( )is a dictionary containing \nvariable names as keys and their values as values. **indicates that it \nwill hold all the arguments passed to print_it( ). \nxWe can use any other names in place of argsand kwargs. We cannot \nuse more than one argsand more than one kwargswhile defining a \nfunction.\nxIf a function is to receive required as well as optional arguments \nthen they must occur in following order:", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_240", "chunk_strategy": "fixed_size"}}, {"text": "use more than one argsand more than one kwargswhile defining a \nfunction.\nxIf a function is to receive required as well as optional arguments \nthen they must occur in following order:\n-positional arguments\n-variable-length positional arguments\n-keyword arguments\n-variable-length keyword arguments\ndefprint_it(i,j,*args,x,y,**kwargs):\nprint()\nprint(i,j,end='')\nforvarinargs :\nprint(var,end='')\nprint(x,y,end='')\nforname,value inkwargs.items():\nprint(name,value, end='')\n--- Page 179 ---\nChapter13: Functions 163\n# nothing goes to args, kwargs\nprint_it(10,20,x=30,y=40)\n# 100, 200 go to args, nothing goes to kwargs\nprint_it(10,20,100,200,x=30,y=40)\n# 100, 200 go to args, nothing goes to kwargs\nprint_it(10,20,100,200,y=40,x=30)\n# 100, 200 go to args. 'a':5, 'b' :6, 'c' :7 go to kwargs\nprint_it(10,20,100,200,x=30,y=40,a=5,b=6,c=7)\n#error, 30 40 go to args, nothing left for required arguments x, y \nprint_it(10,20,30,40)\nxWhile defining a function default value can be given to arguments.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_241", "chunk_strategy": "fixed_size"}}, {"text": "#error, 30 40 go to args, nothing left for required arguments x, y \nprint_it(10,20,30,40)\nxWhile defining a function default value can be given to arguments. \nDefault value will be used if we do not pass the value for that \nargument during the call. \ndef fun(a, b = 100, c = 3.14):\nreturn a + b + c\nw = fun(10) #passes 10 to a, b is taken as 100, c as 3.14\nx = fun(20, 50) # passes 20, 50 to a, b. c is taken as 3.14\ny = fun(30, 60, 6.28) # passes 30, 60, 6.28 to a, b, c\nz = fun(1, c = 3, b = 5)# passes 1 to a, 5 to b, 3 to c\nxNote that while defining a function default arguments must follow \nnon-default arguments.\nUnpacking Arguments\nxSuppose a function is expecting positional arguments and the \narguments to be passed are in a list, tupleor set. In such a case we \nneed to unpack the list/tuple/setusing * operator before passing it \nto the function.\ndef print_it(a, b, c, d, e) :\nprint(a, b, c, d, e)\nlst = [10, 20, 30, 40, 50]\ntpl = ('A', 'B', 'C', 'D', 'E')\ns = {1, 2, 3, 4, 5}", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_242", "chunk_strategy": "fixed_size"}}, {"text": "to the function.\ndef print_it(a, b, c, d, e) :\nprint(a, b, c, d, e)\nlst = [10, 20, 30, 40, 50]\ntpl = ('A', 'B', 'C', 'D', 'E')\ns = {1, 2, 3, 4, 5}\nprint_it(*lst)\n--- Page 180 ---\n164 Let Us Python\nprint_it(*tpl)\nprint_it(*s)\nxSuppose a function is expecting keyword arguments and the \narguments to be passed are in a dictionary. In such a case we need \nto unpack the dictionary using ** operator before passing it to the \nfunction.\ndef print_it(name = 'Sanjay', marks = 75) :\nprint(name, marks)\nd = {'name' : 'Anil', 'marks' : 50}\nprint_it(*d) \nprint_it(**d)\nThe first call to print_it( )passes keys to it, whereas, the second call \npasses values.\n____________________________________________________________________\nProblem 13.1\nWrite a program to receive three integers from keyboard and get their \nsum and product calculated through a user-defined function \ncal_sum_prod( ).\nProgram\ndef cal_sum_prod(x, y, z) :\nss = x + y + z \npp = x * y * z\nreturn ss, pp # or return(ss, pp)", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_243", "chunk_strategy": "fixed_size"}}, {"text": "sum and product calculated through a user-defined function \ncal_sum_prod( ).\nProgram\ndef cal_sum_prod(x, y, z) :\nss = x + y + z \npp = x * y * z\nreturn ss, pp # or return(ss, pp)\na = int(input('Enter a: '))\nb = int(input('Enter b: '))\nc = int(input('Enter c: ')) \ns, p = cal_sum_prod(a, b, c) \nprint(s, p)\n--- Page 181 ---\nChapter13: Functions 165\nOutput\nEnter a: 10\nEnter b: 20\nEnter c: 30\n60 6000\nTips\nxMultiple values can be returned from a function as atuple.\n____________________________________________________________________\nProblem 13.2\nPangram is a sentence that uses every letter of the alphabet. Write a \nprogram that checks whether a given string is pangram or not, through a \nuser-defined function ispangram( ).\nProgram\ndef ispangram(s) :\nalphaset = set('abcdefghijklmnopqrstuvwxyz')\nreturn alphaset <= set(s.lower())\nprint(ispangram('The quick brown fox jumps over the lazy dog'))\nprint(ispangram('Crazy Fredrick bought many very exquisite opal \njewels'))\nOutput\nTrue\nTrue\nTips", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_244", "chunk_strategy": "fixed_size"}}, {"text": "return alphaset <= set(s.lower())\nprint(ispangram('The quick brown fox jumps over the lazy dog'))\nprint(ispangram('Crazy Fredrick bought many very exquisite opal \njewels'))\nOutput\nTrue\nTrue\nTips\nxset( )converts the string into a set of characters present in the \nstring.\nx<= checks whether alphasetis a subset of the given string.\n____________________________________________________________________\nProblem 13.3\nWrite a Python program that accepts a hyphen-separated sequence of \nwords as input and callsa function convert( )which converts it into a \n--- Page 182 ---\n166 Let Us Python\nhyphen-separated sequence after sorting them alphabetically.For \nexample, if the input string is \n'here-come-the-dots-followed-by-dashes'\nthen, the converted string should be \n'by-come-dashes-dots-followed-here-the'\nProgram\ndef convert(s1) :\nitems=[sfor sin s1.split('-')]\nitems.sort()\ns2 = '-'.join(items)\nreturn s2 \ns = 'here-come-the-dots-followed-by-dashes'\nt = convert(s)\nprint(t)\nOutput", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_245", "chunk_strategy": "fixed_size"}}, {"text": "Program\ndef convert(s1) :\nitems=[sfor sin s1.split('-')]\nitems.sort()\ns2 = '-'.join(items)\nreturn s2 \ns = 'here-come-the-dots-followed-by-dashes'\nt = convert(s)\nprint(t)\nOutput\nby-come-dashes-dots-followed-here-the\nTips\nxWe have used list comprehension to create a list of words present in \nthe string s1.\nxThe join( )method returns a string concatenated with the elements \nof an iterable.In our case the iterable is the list called items.\n____________________________________________________________________\nProblem 13.4\nWrite a Python function to create and return a list containing tuples of \nthe form (x, x2, x3) for all x between 1 and 20 (both included).\nProgram\ndef generate_list():\nlst = list( ) # or lst = [ ]\nfor i in range(1,11):\nlst.append((i, i ** 2, i ** 3))\n--- Page 183 ---\nChapter13: Functions 167\nreturn lst\nl = generate_list( )\nprint(l)\nOutput\n[(1, 1, 1), (2, 4, 8), (3, 9, 27), (4, 16, 64), (5, 25, 125), (6, 36, 216), \n(7, 49, 343), (8, 64, 512), (9, 81, 729), (10, 100, 1000)]", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_246", "chunk_strategy": "fixed_size"}}, {"text": "return lst\nl = generate_list( )\nprint(l)\nOutput\n[(1, 1, 1), (2, 4, 8), (3, 9, 27), (4, 16, 64), (5, 25, 125), (6, 36, 216), \n(7, 49, 343), (8, 64, 512), (9, 81, 729), (10, 100, 1000)]\nTips\nxrange(1, 11)produces a list of numbers from 1 to 10.\nxappend( )adds a new tuple to the list in each iteration.\n____________________________________________________________________\nProblem 13.5\nA palindrome is a word or phrase which reads the same in both \ndirections.Given below are some palindromic strings:\ndeed\nlevel\nMalayalam\nRats live on no evil star\nMurder for a jar of red rum\nWrite a program that defines a function ispalindrome( )which checks \nwhether a given string is a palindrome or not. Ignore spaces and case \nmismatch while checking for palindrome. \nProgram\ndef ispalindrome(s):\nt = s.lower( )\nleft = 0\nright = len(t) -1\nwhile right >= left :\nif t[left] == ' ' :\nleft += 1\nif t[right] == ' ' :\nright -= 1\n--- Page 184 ---\n168 Let Us Python\nif t[left] != t[right]:\nreturn False\nleft += 1", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_247", "chunk_strategy": "fixed_size"}}, {"text": "left = 0\nright = len(t) -1\nwhile right >= left :\nif t[left] == ' ' :\nleft += 1\nif t[right] == ' ' :\nright -= 1\n--- Page 184 ---\n168 Let Us Python\nif t[left] != t[right]:\nreturn False\nleft += 1\nright -= 1\nreturn True\nprint(ispalindrome('Malayalam'))\nprint(ispalindrome('Rats live on no evil star'))\nprint(ispalindrome('Murder for a jar of red rum'))\nOutput\nTrue\nTrue\nTrue\nTips\nxSince strings are immutable the string converted to lowercase has to \nbe collected in another string t.\n____________________________________________________________________\nProblem 13.6\nWrite a program that defines a function convert( )that receives a string \ncontaining a sequence of whitespace separated wordsand returns a \nstring after removing all duplicate words and sorting them \nalphanumerically.\nFor example, if the string passed to convert( )is \ns = 'Sakhi was a singer because her mother was a singer, and Sakhi\\'s \nmother was a singer because her father was a singer'\nthen, the output should be:", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_248", "chunk_strategy": "fixed_size"}}, {"text": "s = 'Sakhi was a singer because her mother was a singer, and Sakhi\\'s \nmother was a singer because her father was a singer'\nthen, the output should be:\nSakhi Sakhi's a and because father her mother singer singer, was\nProgram\ndef convert(s) :\nwords = [word for word in s.split('')]\nreturn ''.join(sorted(list(set(words))))\n--- Page 185 ---\nChapter13: Functions 169\ns = 'I felt happy because I saw the others were happy and because I \nknew I should feel happy, but I wasn\\'t really happy'\nt = convert(s)\nprint(t)\ns = 'Sakhi was a singer because her mother was a singer, and Sakhi\\'s \nmother was a singer because her father was a singer'\nt = convert(s)\nprint(t)\nOutput\nI and because but feel felt happy happy, knew others really saw should \nthe wasn't were\nSakhi Sakhi's a and because father her mother singer singer, was\nTips\nxset( )removesduplicate data automatically.\nxlist( )converts the set into a list.\nxsorted( )sorts the list dataand returns sorted list.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_249", "chunk_strategy": "fixed_size"}}, {"text": "Tips\nxset( )removesduplicate data automatically.\nxlist( )converts the set into a list.\nxsorted( )sorts the list dataand returns sorted list.\nxSorted data list is converted to a string usinga strmethodjoin( ), \nappending a space at the end of each word, except the last.\n____________________________________________________________________\nProblem 13.7\nWrite a program that defines a function count_alphabets_digits( )that \naccepts a string and calculates the number of alphabetsand digits in it. It \nshould return these values as a dictionary. Call this function for some \nsample strings.\nProgram\ndef count_alphabets_digits(s) :\nd={'Digits': 0, 'Alphabets': 0}\nfor ch in s:\nif ch.isalpha():\nd['Alphabets'] += 1\nelif ch.isdigit():\nd['Digits'] += 1\n--- Page 186 ---\n170 Let Us Python\nelse:\npass\nreturn(d)\nd = count_alphabets_digits('James Bond 007') \nprint(d)\nd = count_alphabets_digits('Kholi Number 420') \nprint(d)\nOutput\n{'Digits': 3, 'Alphabets': 9}\n{'Digits': 3, 'Alphabets': 11}\nTips", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_250", "chunk_strategy": "fixed_size"}}, {"text": "pass\nreturn(d)\nd = count_alphabets_digits('James Bond 007') \nprint(d)\nd = count_alphabets_digits('Kholi Number 420') \nprint(d)\nOutput\n{'Digits': 3, 'Alphabets': 9}\n{'Digits': 3, 'Alphabets': 11}\nTips\nxpassdoesn't do anything on execution.\n____________________________________________________________________\nProblem 13.8\nWrite a program that defines a function called frequency( )which \ncomputes the frequency of words present in a string passed to it. The \nfrequencies should be returned in sorted order by words in the string.\nProgram\ndef frequency(s) :\nfreq = { }\nfor word in s.split( ) :\nfreq[word] = freq.get(word, 0) + 1\nreturn freq\nsentence = 'It is true for all that that that that \\\nthat that that refers to is not the same that \\\nthat that that refers to'\nd = frequency(sentence)\nwords = sorted(d)\nfor w in words:\nprint ('%s:%d'% (w, d[w]))\n--- Page 187 ---\nChapter13: Functions 171\nOutput\nIt:1\nall:1\nfor:1\nis:2\nnot:1\nrefers:2\nsame:1\nthat:11\nthe:1\nto:2\ntrue:1\nTips", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_251", "chunk_strategy": "fixed_size"}}, {"text": "words = sorted(d)\nfor w in words:\nprint ('%s:%d'% (w, d[w]))\n--- Page 187 ---\nChapter13: Functions 171\nOutput\nIt:1\nall:1\nfor:1\nis:2\nnot:1\nrefers:2\nsame:1\nthat:11\nthe:1\nto:2\ntrue:1\nTips\nxWe did not use freq[word] = freq[word] + 1because we have not \ninitialized all word counts for each unique word to 0 to begin with.\nxWhen we use freq.get(word, 0), get( )searches the word. If it is not \nfound, the second parameter, i.e. 0 will be returned. Thus, for first \ncall for each unique word, the word count is properly initialized to 0.\nxsorted( )returns a sorted list of key values in the dictionary.\nxw,d[w]yields the word and its frequency count stored in the \ndictionary d.\n____________________________________________________________________\nProblem 13.9\nWrite a program that defines two functions called create_sent1()and \ncreate_sent2( ). Both receive following 3 lists:\nsubjects = ['He', 'She']\nverbs = ['loves', 'hates']\nobjects = ['TV Serials','Netflix']", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_252", "chunk_strategy": "fixed_size"}}, {"text": "create_sent2( ). Both receive following 3 lists:\nsubjects = ['He', 'She']\nverbs = ['loves', 'hates']\nobjects = ['TV Serials','Netflix']\nBoth functions should form sentences by picking elements from these \nlists and return them. Use forloops in create_sent1( )and list \ncomprehension in create_sent2( ).\n--- Page 188 ---\n172 Let Us Python\nProgram\ndef create_sent1(sub, ver, obj):\nlst = [ ]\nfor i in range(len(sub)):\nfor j in range(len(ver)):\nfor k in range(len(obj)):\nsent = sub[i] + ' ' + ver[j] + ' ' + obj[k]\nlst.append(sent)\nreturn lst\ndef create_sent2(sub, ver, obj):\nreturn [(s + ''+ v + ' '+ o) for s in sub for v in ver for o in obj]\nsubjects = ['He', 'She']\nverbs = ['loves', 'hates']\nobjects = ['TV Serials','Netflix']\nlst1 = create_sent1( subjects, verbs, objects)\nfor l in lst1 :\nprint(l)\nprint( )\nlst2 = create_sent2( subjects, verbs, objects)\nfor l in lst2 :\nprint(l)\nOutput\nHe loves TV Serials\nHe loves Netflix\nHe hates TV Serials\nHe hates Netflix\nShe loves TV Serials\nShe loves Netflix", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_253", "chunk_strategy": "fixed_size"}}, {"text": "print( )\nlst2 = create_sent2( subjects, verbs, objects)\nfor l in lst2 :\nprint(l)\nOutput\nHe loves TV Serials\nHe loves Netflix\nHe hates TV Serials\nHe hates Netflix\nShe loves TV Serials\nShe loves Netflix\nShe hates TV Serials\nShe hates Netflix\nHe loves TV Serials\nHe loves Netflix\nHe hates TV Serials\n--- Page 189 ---\nChapter13: Functions 173\nHe hates Netflix\nShe loves TV Serials\nShe loves Netflix\nShe hates TV Serials\nShe hates Netflix\n____________________________________________________________________\n[A]Answer the followingquestions:\n(a)Write a program that defines a function count_lower_upper( )that \naccepts a string and calculates the number of uppercase and \nlowercase alphabetsin it. It should return these values as a \ndictionary. Call this function for some sample strings.\n(b)Write a program that defines a function compute( )that calculates \nthe value of n + nn + nnn + nnnn, where n is digit received by the \nfunction. Test the function for digits 4 and 7.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_254", "chunk_strategy": "fixed_size"}}, {"text": "(b)Write a program that defines a function compute( )that calculates \nthe value of n + nn + nnn + nnnn, where n is digit received by the \nfunction. Test the function for digits 4 and 7.\n(c)Write a program that defines a function create_array( )to create \nand return a 3D array whose dimensions are passed to the function. \nAlso initialize each element of this array to a value passed to the \nfunction.\n(d)Write a program that defines a function create_list( )to create and \nreturn a list which is an intersection of two lists passed to it.\n(e)Write a program that defines a function sanitize_list( )to remove all \nduplicate entries from the list that it receives.\n(f)Which of the calls to print_it( )in the following program will report \nerrors.\ndef print_it(i, a, s, *args) :\nprint( )\nprint(i, a, s, end = ' ')\nfor var in args :\nprint(var, end = ' ')\nprint_it(10, 3.14)\nprint_it(20, s = 'Hi', a = 6.28)\nprint_it(a = 6.28, s = 'Hello', i = 30)\nprint_it(40, 2.35, 'Nag', 'Mum', 10)\n--- Page 190 ---", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_255", "chunk_strategy": "fixed_size"}}, {"text": "for var in args :\nprint(var, end = ' ')\nprint_it(10, 3.14)\nprint_it(20, s = 'Hi', a = 6.28)\nprint_it(a = 6.28, s = 'Hello', i = 30)\nprint_it(40, 2.35, 'Nag', 'Mum', 10)\n--- Page 190 ---\n174 Let Us Python\n(g)Which of the calls to fun( )in the following program will report \nerrors.\ndef fun(a, *args, s = '!') :\nprint(a, s)\nfor i in args :\nprint(i, s)\nfun(10)\nfun(10, 20)\nfun(10, 20, 30)\nfun(10, 20, 30, 40, s = '+')\n[B]Attempt the following questions:\n(a)What is being passed to function fun( )in the following code?\nint a = 20\nlst = [10, 20, 30, 40, 50]\nfun(a, lst)\n(b)Which of the following are valid returnstatements?\nreturn (a, b, c)\nreturn a + b + c \nreturna, b, c\n(c)What will be the output of the following program?\ndef fun( ) :\nprint('First avatar')\nfun( )\ndef fun( ) :\nprint('New avatar')\nfun( )\n(d)How will you define a function containing three returnstatements, \neach returning a different type of value?\n(e)Can function definitions be nested? If yes, why would you want to \ndo so?", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_256", "chunk_strategy": "fixed_size"}}, {"text": "fun( )\n(d)How will you define a function containing three returnstatements, \neach returning a different type of value?\n(e)Can function definitions be nested? If yes, why would you want to \ndo so?\n(f)How will you call print_it( )to print elements oftpl?\ndef print_it(a, b, c, d, e) :\nprint(a, b, c, d, e)\ntpl = ('A', 'B', 'C', 'D', 'E')\n--- Page 191 ---\nLet UsPython\n175Recursion\nxRepetitions xTypes of Recursion\nxRecursiveFunction xRecursion Limit\nxWhen to use Recursion xIteration to Recursion\nxProblem as Similar Sub-problems xPrograms\nxRecursive Factorial Function xExercises\nxProblem with Unknown Loops14\n\u201cTo iterate is human, to recurse divine... \u201d\n--- Page 192 ---\n176 Let Us Python\nRepetitions\nxThere are two ways to repeat a set of statements in a function:\n-By using whileor forloop\n-By calling the function from within itself\nxThe first method is known as iteration, whereas the second is known \nas recursion.\nxThe functions that use iteration are called iterative functions and", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_257", "chunk_strategy": "fixed_size"}}, {"text": "-By calling the function from within itself\nxThe first method is known as iteration, whereas the second is known \nas recursion.\nxThe functions that use iteration are called iterative functions and \nthose that use recursion are called recursive functions.\nRecursive Function\nxA Python function can be called from within its body. When we do so \nit is called a recursive function.\ndef fun( ) :\n# some statements\nfun( ) # recursive call\nxRecursive call keeps calling the function again and again, leadingto \nan infinite loop. \nxAprovision must be made to get outside this infinite recursive loop. \nThis is done by making the recursive call either in if block or in else \nblockas shown below:\ndef fun( ) : def fun( ) :\nif condition : if condition :\n# some statements fun( )\nelse else\nfun( ) # recursive call # some statements\nxThe case when a recursive call is made is called the recursive case, \nwhereas the other case is called the base case.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_258", "chunk_strategy": "fixed_size"}}, {"text": "# some statements fun( )\nelse else\nfun( ) # recursive call # some statements\nxThe case when a recursive call is made is called the recursive case, \nwhereas the other case is called the base case. \nxIf recursive call is made in if block (recursive case), else block should \ncontain the base caselogic. If recursive call is made in else block\n(recursive case), if block should contain the base caselogic.\n--- Page 193 ---\nChapter14: Recursion 177\nWhen to use Recursion\nxRecursion is useful in 2scenarios:\n-When a problem can be solved by breaking it down into similar \nsub-problems.\n-When a problem requires an unknown number of loops.\nxExamples of problem as similar sub-problems:\n-Finding factorial value of a number\n-Finding sum of digits of an integer\n-Finding binary equivalent of a number\nxExamples of unknown number of nested loops:\n-Finding all combinationsof 1 to n, where n is received as input\n-Traversing a binary tree data structure\n-Traversing a graph data structure", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_259", "chunk_strategy": "fixed_size"}}, {"text": "xExamples of unknown number of nested loops:\n-Finding all combinationsof 1 to n, where n is received as input\n-Traversing a binary tree data structure\n-Traversing a graph data structure\nxIn this book we would cover both sets of problems that can be \nsolved using recursion.\nProblem as Similar Sub-problems\nxIn problem that can be solved by breaking it down into similar sub-\nproblems thecomputation of a function is described in terms of the \nfunction itself.\nxFor example, suppose we wish to calculate factorial value of n. Then\nn! = n * (n -1) * (n -2) * (n -3) * ... * 2 * 1\nWe can write this as:\nn! = 1 if n = 0\n= n * (n -1)! if n > 0 \nxIn terms of function this can be written as:\nfactorial(n) = 1 if n = 0 (base case)\n= n * factorial(n -1) if n > 0 (recursive case)\nxIf we are to obtain sum of digits of an integer n,then the recursive \nfunction can be written as \nsumdig(n) = 0 if n = 0(base case)\n= n % 10 + sumdig(n / 10) if n > 0(recursive case)\n--- Page 194 ---\n178 Let Us Python", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_260", "chunk_strategy": "fixed_size"}}, {"text": "function can be written as \nsumdig(n) = 0 if n = 0(base case)\n= n % 10 + sumdig(n / 10) if n > 0(recursive case)\n--- Page 194 ---\n178 Let Us Python\nxFollowing tips will help you understand recursive functions better:\n-A fresh set of variables are born during each function call\u2014\nnormal call as well as recursive call.\n-Variables created in a function die when control returns from a \nfunction.\n-Recursive function may or may not have a return statement.\n-Typically, during execution of a recursive function many \nrecursive calls happen, so several sets of variables get created. \nThis increases the space requirement of the function.\n-Recursive functions are inherently slow since passing value(s) \nand control to a function and returning value(s) and control will \nslow down the execution of the function.\n-Recursivecalls terminate when the base case condition is \nsatisfied.\nRecursive Factorial Function\nxA simple program that calculates factorial of a given number using a", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_261", "chunk_strategy": "fixed_size"}}, {"text": "-Recursivecalls terminate when the base case condition is \nsatisfied.\nRecursive Factorial Function\nxA simple program that calculates factorial of a given number using a \nrecursive function is given below, followed by a brief explanation of \nits working. \ndef refact(n):\nif n == 0 : \nreturn 1 \nelse :\np = n * refact(n -1)\nreturn p\nnum = int(input('Enter any number: '))\nfact = refact(num)\nprint('Factorial value = ', fact)\nxSuppose 2 is supplied as input, we should get the output as 2, since \n2! evaluates to 2. \nxIt becomes easier to follow the working of a recursive function if we \nmake copies of the function on paper and then perform a dry run of \nthe program to follow the control flow. In reality multiple copies of \nfunction are not created in memory.\n--- Page 195 ---\nChapter14: Recursion 179\nxTrace the control flow of the recursive factorial function in Figure \n14.1. Assume that we are trying to find factorial value of 2. The solid", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_262", "chunk_strategy": "fixed_size"}}, {"text": "--- Page 195 ---\nChapter14: Recursion 179\nxTrace the control flow of the recursive factorial function in Figure \n14.1. Assume that we are trying to find factorial value of 2. The solid \narrows indicate the call to the function, whereas dashed arrows \nindicate return from the function.\nxNote that return 1goes to work only during the last call. All other \ncalls return via return p.\ndefrefact(n):\nifn==0:\nreturn1\nelse:\np=n*refact(n-1)\nreturnpfact=refact(2)\ndefrefact(n):\nifn==0:\nreturn1\nelse:\np=n*refact(n-1)\nreturnpdefrefact(n):\nifn==0:\nreturn1\nelse:\np=n*refact(n-1)\nreturnp1 02\n1\n12\nStart\nhere\nFigure 14.1\nProblem with Unknown Loops\nxIf we are to define a function which generates and returns a list of \nlists containing all possible combinations of numbers 1, 2 and 3 we \ncan do so through following program:\ndef generate(n) :\nlol = [[ ] for i in range(n ** n)]\npos = 0\nfor i in range(1, n + 1) : \nfor j in range(1, n + 1) :\nfor k in range(1, n + 1) :\nt = [i, j, k]\nlol[pos] = t\npos += 1", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_263", "chunk_strategy": "fixed_size"}}, {"text": "def generate(n) :\nlol = [[ ] for i in range(n ** n)]\npos = 0\nfor i in range(1, n + 1) : \nfor j in range(1, n + 1) :\nfor k in range(1, n + 1) :\nt = [i, j, k]\nlol[pos] = t\npos += 1\nreturn lol\n--- Page 196 ---\n180 Let Us Python\nl = generate(3)\nprint(l)\nSince we can generate 27 combinations out of 1, 2, 3 ([1, 1, 1], [1, 1, \n2], ... [3, 3, 3]), list of lists lolis set up with 27 empty lists. Then \nthrough 3 forloops we have generated each sub-list and inserted it \nin lol.\nxIf we are to generate all possible combinations of 1, 2, 3, 4 then we \nwill have to introduce one more forloop. If generate( )is to remain \ngeneric we cannot dynamically add this loop.\nxWe can make generate( )function create the desired combinations \nby using recursion in place of loops as shown in the following \nprogram:\ndef generate(n) :\nt = [ ]\nlol = [[] for i in range(n ** n)]\nhelper(n, t, lol)\nreturn(lol)\ndef helper(n, t, lol) :\nglobal j\nif len(t) == n :\nlol[ j ] = lol[ j ] + t\nj +=1\nreturn", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_264", "chunk_strategy": "fixed_size"}}, {"text": "program:\ndef generate(n) :\nt = [ ]\nlol = [[] for i in range(n ** n)]\nhelper(n, t, lol)\nreturn(lol)\ndef helper(n, t, lol) :\nglobal j\nif len(t) == n :\nlol[ j ] = lol[ j ] + t\nj +=1\nreturn \nfor i in range(1, n + 1) :\nt.append(i)\nhelper(n, t, lol);\nt.pop( )\nj = 0\nl = generate(3)\nprint(l)\nIn addition to generate( )we have definedthe helper( )function \nsince we wish to build each sub-list incrementally and generate( )\nreceives only n.\n--- Page 197 ---\nChapter14: Recursion 181\nAfter generating a sub-list like [1, 1, 1],listmethod pop( )has been \ncalled to remove the last 1 from this sub-list and create the next sub-\nlist [1, 1, 2].\nTypes of Recursion\nxTwo types of recursions can exist:\n(a)Head recursion\n(b)Tail recursion\nxHead recursion -In this type of recursion the recursive call is made \nbefore other processing in the function.\ndef headprint(n) :\nif n == 0 : \nreturn\nelse : \nheadprint(n -1)\nprint(n)\nheadprint(10)\nHere firstly the recursive calls happen and then the printing takes", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_265", "chunk_strategy": "fixed_size"}}, {"text": "before other processing in the function.\ndef headprint(n) :\nif n == 0 : \nreturn\nelse : \nheadprint(n -1)\nprint(n)\nheadprint(10)\nHere firstly the recursive calls happen and then the printing takes \nplace. Hence last value of n, i.e. 1gets printed first. So numbers get \nprinted in the order 1 to 10.\nxTail recursion -In this type of recursion processing is done before \nthe recursive call. The tail recursion issimilar to a loop\u2014the function \nexecutes all the statements before making the recursive call.\ndef tailprint(n) :\nif n == 11: \nreturn\nelse : \nprint(n)\ntailprint(n +1)\ntailprint(1)\nHerefirstly printing takes place and then the recursive call is made. \nHence first value of n, i.e. 1gets printed firstand then the recursive \ncall is done. So once again numbers get printed in the order 1 to 10.\n--- Page 198 ---\n182 Let Us Python\nRecursion Limit\nxIn head recursion we don't get the result of our calculation until we\nhave returned from every recursive call.So the state (local variables)", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_266", "chunk_strategy": "fixed_size"}}, {"text": "--- Page 198 ---\n182 Let Us Python\nRecursion Limit\nxIn head recursion we don't get the result of our calculation until we\nhave returned from every recursive call.So the state (local variables) \nhas to be saved before making the next recursive call. This results in \nconsumption of more memory.Too many recursive calls may result \ninto an error. \nxDefault recursion limit in Python is usually set to a small value \n(approximately, 10**4). So if we provide a large input to the \nrecursive function, a RecursionErrorwill be raised. \nxThe setrecursionlimit()function in sysmodule permits us to set the \nrecursion limit. Once set to 10^6 large inputs can be handled \nwithout any errors.\nIteration to Recursion\nxGiven below are the steps that should be followed if we are to \nconvert an iterative function to a recursive function:\n-Use the local variables in the iterative function as parameters of \nthe recursive function.\n-Identify the main loop in the iterative function. This loop", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_267", "chunk_strategy": "fixed_size"}}, {"text": "-Use the local variables in the iterative function as parameters of \nthe recursive function.\n-Identify the main loop in the iterative function. This loop \ntypically modifies one or more variables and returns some final \nvalue(s).\n-Write the condition in the loop as the base case and thebody of \nthe loop as the recursive case.\n-Run to check whether recursive function achieves thedesired \nresult.\n-Remove any unnecessary variables and improve the structureof \nthe recursive function.\n____________________________________________________________________\nProblem 14.1\nIf a positive integer is entered through the keyboard, write a recursive \nfunction to obtain the prime factors of the number.\n--- Page 199 ---\nChapter14: Recursion 183\nProgram\ndef factorize(n, i) :\nif i <= n :\nif n % i == 0 :\nprint( i, end =', ' ) \nn = n // i \nelse :\ni += 1\nfactorize(n, i)\nnum = int(input('Enter a number: '))\nprint('Prime factors are:')\nfactorize(num, 2)\nOutput\nEnter a number: 50\nPrime factors are:\n2, 5, 5,", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_268", "chunk_strategy": "fixed_size"}}, {"text": "n = n // i \nelse :\ni += 1\nfactorize(n, i)\nnum = int(input('Enter a number: '))\nprint('Prime factors are:')\nfactorize(num, 2)\nOutput\nEnter a number: 50\nPrime factors are:\n2, 5, 5, \nEnter a number: 24\nPrime factors are:\n2, 2, 2, 3,\nTips\nxIn factorize( )we keep checking, starting with 2, whether iis a factor \nof n(means, can idivide nexactly). If so, we print that factor, reduce \nnand again call factorize( )recursively. If not, we increment iand \ncall factorize( )to check whether the new iis a factor ofn.\n____________________________________________________________________\nProblem 14.2\nA positive integer is entered through the keyboard, write a recursive \nfunction to calculate sum of digits of the 5-digit number.\nProgram\ndef rsum(num) : \nif num != 0 :\ndigit = num % 10 \n--- Page 200 ---\n184 Let Us Python\nnum = int(num / 10)\nsum = digit + rsum(num)\nelse :\nreturn 0\nreturn sum\nn = int(input('Enter number: '))\nrs = rsum(n)\nprint('Sum of digits = ', rs)\nOutput\nEnter number:\n345", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_269", "chunk_strategy": "fixed_size"}}, {"text": "184 Let Us Python\nnum = int(num / 10)\nsum = digit + rsum(num)\nelse :\nreturn 0\nreturn sum\nn = int(input('Enter number: '))\nrs = rsum(n)\nprint('Sum of digits = ', rs)\nOutput\nEnter number:\n345\nSum of digits = 12\nTips\nxIn the rsum( ) function,we extract the last digit, reduce the number \nand call rsum( ) with reduced value of num. Thus if the number \nentered is 3256, the call becomessum= 6 + rsum(325). \nxDuring each call additions are kept pending, for example the \naddition to 6 is kept pending as the program calls rsum(325)to \nobtain sum of digits of 325. \nxThe recursive calls end when nfalls to 0, whereupon the function \nreturns a 0, because sum of digits of 0 is 0. The 0 is returned to the \nprevious pending call, i.e. sum= 3 + rsum (0). Now sum= 3 + 0is \ncompleted and the control reaches return s. Now the value of sum, \ni.e. 3 is returned to the previous call made during the pending \naddition 2 + rsum (3). This way all pending calls are completed and", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_270", "chunk_strategy": "fixed_size"}}, {"text": "completed and the control reaches return s. Now the value of sum, \ni.e. 3 is returned to the previous call made during the pending \naddition 2 + rsum (3). This way all pending calls are completed and \nfinally the sum of 3256 is returned.\nxIn short, return0goes to work only once (during the last call to \nrsum()), whereas, for all previous calls return sumgoes to work.\n____________________________________________________________________\nProblem 14.3\nPaper of size A0 has dimensions 1189 mm x 841 mm. Each subsequent \nsize A(n) is defined as A(n-1) cut in half,parallel to its shorter sides. \nWrite a program to calculate and print paper sizes A0, A1, A2, \u2026 A\u03f4\nusing recursion.\n--- Page 201 ---\nChapter14: Recursion 185\nProgram\ndef papersizes(i, n, l, b) :\nif n != 0 :\nprint(f'A{i}: L = {int(l)} B = {int(b)}')\nnewb = l / 2\nnewl = b\nn -= 1\ni += 1\npapersizes(i, n, newl, newb)\npapersizes(0, 7, 1189, 841)\nOutput\nA0: L = 1189 B = 841\nA1: L = 841 B = 594\nA2: L = 594 B = 420\nA3: L = 420 B = 297", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_271", "chunk_strategy": "fixed_size"}}, {"text": "newb = l / 2\nnewl = b\nn -= 1\ni += 1\npapersizes(i, n, newl, newb)\npapersizes(0, 7, 1189, 841)\nOutput\nA0: L = 1189 B = 841\nA1: L = 841 B = 594\nA2: L = 594 B = 420\nA3: L = 420 B = 297\nA4: L = 297 B = 210\nA5: L = 210 B = 148\nA6:L = 148 B = 105\nTips\nA1A2\nA3A4\nA5A6A7\nA0:L=1189B=841\nA1:L=841B=594\nA2:L=594B=420\nA3:L=420B=297\nA4:L=297B=210\nA5:L=210B=148\nA6:L=148B=105\nFigure 14.2\n--- Page 202 ---\n186 Let Us Python\nxFigure 14.2 shows different paper sizes are obtained. In function \npapersizes( ), iis used to obtain the digit in A0, A1, A2, etc., whereas \nnis used to keep track of number of times the function should be \ncalled. The moment nfalls to 0, the recursive calls are stopped. \nAlternately, we could have dropped n and stopped recursive calls \nwhen ireaches 7.\n____________________________________________________________________\nProblem 14.4\nWrite a recursive function to obtain first 15 numbers of a Fibonacci \nsequence. In a Fibonacci sequence the sum of two successive terms", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_272", "chunk_strategy": "fixed_size"}}, {"text": "Problem 14.4\nWrite a recursive function to obtain first 15 numbers of a Fibonacci \nsequence. In a Fibonacci sequence the sum of two successive terms \ngives the third term. First few terms of the Fibonacci sequence:\n1 1 2 \u03ef \u03f1 \u03f4 1\u03ef 21 \u03ef\u03f0 \u03f1\u03f1 \u03f4\u03f5\u2026.\nProgram\ndef fibo(old, current, terms) :\nif terms >= 1 :\nnew = old + current\nprint( f'{new}', end = '\\t')\nterms = terms -1 \nfibo(current, new, terms) \nold = 1\ncurrent = 1 \nprint(f'{old}', end = '\\t')\nprint(f'{current}', end = '\\t')\nfibo(old, current, 13)\nOutput\n1 1 2 3 5 8 13 21 34 55\n89 144 233 377 610\nTips\nxThis program generates the Fibonacci sequence of numbers using \nrecursion. termsis used to keep track of when to stop recursive \ncalls. Since the first two terms are printed before calling fibo( ), we \nhave generated only 13terms through the recursive calls.\n____________________________________________________________________\n--- Page 203 ---\nChapter14: Recursion 187\nProblem 14.5", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_273", "chunk_strategy": "fixed_size"}}, {"text": "have generated only 13terms through the recursive calls.\n____________________________________________________________________\n--- Page 203 ---\nChapter14: Recursion 187\nProblem 14.5\nA positive integer is entered through the keyboard; write a function to \nfind the binary equivalent of this number using recursion.\nProgram\nimport sys\ndef dec_to_binary(n) :\nr = n % 2 \nn = int(n / 2)\nif n != 0 :\ndec_to_binary(n)\nprint(r, end = '')\nsys.setrecursionlimit(10 ** 6)\nnum = int(input('Enter the number: '))\nprint('The binary equivalent is:')\ndec_to_binary(num)\nOutput\nEnter the number: 32\nThe binary equivalent is:\n100000\nEnter the number: 45\nThe binary equivalent is:\n101101\nTips\nxTo obtain binary equivalent of a number, we have to keep dividing \nthe dividend till it doesn\u2019t become 0. Finally, the remainders \nobtained during each successivedivision must be written in reverse \norder to get the binary equivalent. \nxSince the remainders are to be written in the reverse order, we start", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_274", "chunk_strategy": "fixed_size"}}, {"text": "obtained during each successivedivision must be written in reverse \norder to get the binary equivalent. \nxSince the remainders are to be written in the reverse order, we start \nprinting only when nfallsto 0, otherwise we make a call to \ndec_to_binary( )with a reduced dividend value.\n____________________________________________________________________\n--- Page 204 ---\n188 Let Us Python\nProblem 14.6\nWrite a recursive function to obtain the running sum of first 25 natural \nnumbers.\nProgram\ndef runningSum(n) :\nif n == 0 :\nreturn0\nelse :\ns = n + runningSum(n -1)\nreturn(s)\nmax = int(input('Enter the positive largest number for running sum: '))\nif max > 0 :\nsum = runningSum(max)\nprint(f'Running Sum: {sum}')\nelse :\nprint('Entered number is negative')\nOutput\nEnter the positive largest number for running sum: 25\nRunning Sum: 325\nTips\nxWe calculate the running sum as we calculate the factorial value, \nstarting from nand then go on reducing it moving towards 0. We \nstop on reaching 0.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_275", "chunk_strategy": "fixed_size"}}, {"text": "Running Sum: 325\nTips\nxWe calculate the running sum as we calculate the factorial value, \nstarting from nand then go on reducing it moving towards 0. We \nstop on reaching 0.\n____________________________________________________________________\n[A]State whether the following statements are True or False:\n(a)A recursive function that calls another execution instance of the \nsame function.\n(b)If a recursive function uses three variables a, band c, then the same \nset of variables are used during each recursive call.\n--- Page 205 ---\nChapter14: Recursion 189\n(c)Multiple copies of the recursive function are created in memory.\n(d)A recursive function must contain at least 1 returnstatement.\n(e)Every iteration done using a whileor forloop can be replaced with \nrecursion.\n(f)Logics expressible in the form of themselves are good candidates for \nwriting recursive functions.\n(g)Tail recursion is similar to a loop.\n(h)Infinite recursioncan occur if the base case is not properly defined.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_276", "chunk_strategy": "fixed_size"}}, {"text": "writing recursive functions.\n(g)Tail recursion is similar to a loop.\n(h)Infinite recursioncan occur if the base case is not properly defined.\n(i)A recursive functionis easy to write, understandand maintain as \ncompared to a one that uses a loop.\n[B]Answer the following questions:\n(a)Following program calculates sum of first 5 natural numbers using \ntail recursionand head recursion.\n(b)There are three pegs labeled A, B and C. Four disks are placed on peg \nA. The bottom-most disk is largest, and disks go on decreasing in size \nwith the topmost disk being smallest. The objective of the game is to \nmove the disks from peg A to peg C, using peg B as an auxiliary peg. \nThe rules of the game are as follows:\n-Only one disk may be moved at a time, and it must be the top \ndisk on one of the pegs.\n-A larger disk should never be placed on the top of a smaller disk.\nWrite a program to print out the sequence in which the disks should", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_277", "chunk_strategy": "fixed_size"}}, {"text": "disk on one of the pegs.\n-A larger disk should never be placed on the top of a smaller disk.\nWrite a program to print out the sequence in which the disks should \nbe moved such that all disks on peg A are finally transferred to peg \nC.\n(c)A string is entered through the keyboard. Write a recursive function \nthat counts the number of vowels in this string.\n(d)A string is entered through the keyboard. Write a recursive function \nremoves any tabs present in this string.\n(e)A string is entered through the keyboard. Write a recursive function \nthat checks whether the string is a palindrome or not. \n(f)Two numbers are received through the keyboard into variables a\nand b. Write a recursive function that calculate the value of ab.\n--- Page 206 ---\n190 Let Us Python\n(g)Write a recursive function that reverses the list of numbers that it \nreceives.\n(h)A list contains some negative and some positive numbers. Write a \nrecursive function that sanitizes the list by replacing all negative", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_278", "chunk_strategy": "fixed_size"}}, {"text": "receives.\n(h)A list contains some negative and some positive numbers. Write a \nrecursive function that sanitizes the list by replacing all negative \nnumbers with 0.\n(i)Write a recursive function to obtain average of all numbers present \nin a given list.\n(j)Write a recursive function to obtain length of a givenstring.\n(k)Write a recursive function that receives a number as input and \nreturns the square of the number. Use the mathematical identity \n(n-1)2= n2-2n + 1.\n[C]What will be the output of the followingprograms?\n(a)def fun(x, y) :\nif x == 0 :\nreturn y\nelse :\nreturn fun(x -1, x * y)\nprint(fun(4, 2))\n(b)def fun(num) :\nif num > 100 :\nreturn num -10\nreturn fun(fun(num + 11))\nprint(fun(75))\n(c)def fun(num) :\nif num == 0 :\nprint(\"False\")\nif num== 1 :\nprint(\"True\")\nif num % 2 == 0 :\nfun(num / 2)\nfun(256)\n--- Page 207 ---\nLet UsPython\n191Functional\nProgramming\nxFunctional Programming xfilter( )Function\nxFunctions as First-class Values xreduce( )Function", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_279", "chunk_strategy": "fixed_size"}}, {"text": "if num % 2 == 0 :\nfun(num / 2)\nfun(256)\n--- Page 207 ---\nLet UsPython\n191Functional\nProgramming\nxFunctional Programming xfilter( )Function\nxFunctions as First-class Values xreduce( )Function\nxLambda Functions xUsing Lambda with map( ), \nfilter( ), reduce( )\nxHigher Order Functions xWhere are they Useful?\nxMap, Filter, Reduce xPrograms\nxmap( )Function xExercises15\n\u201cMap it, reduce it, filter it...... \u201d\n--- Page 208 ---\n192 Let Us Python\nFunctional Programming\nxIn functional programming a problem is treated as evaluation of one \nor more functions. \nxHence a given problem is decomposed into a set of functions. These \nfunctions provide the main source of logic in theprogram.\nFunctions as First ClassValues\nxPython facilitates functional programming by treating functions as \n'first-class' data values. This means that:\n-Functions can be assigned to variables and then called using \nthese variables.\n-Functions can be passed as arguments to function and returned \nfrom function.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_280", "chunk_strategy": "fixed_size"}}, {"text": "-Functions can be assigned to variables and then called using \nthese variables.\n-Functions can be passed as arguments to function and returned \nfrom function.\n-Functions can be built at execution time, the way lists, tuples, \netc. can be. \nxExample of assigning a function to a variable and calling the function \nusing the variable:\ndef func( ) :\nprint('Hello')\ndef sum(x, y) :\nprint(x + y)\nf = func # assignment of function to a variable\nf( ) # call to func( )\ng = sum # assignment of function to a variable\ng(10, 20) # call to sum( )\nxExample of passing a function asargument to a function:\ndef sum(x, y, f) :\nprint(x + y)\nf( ) # calls func( )\ndef func( ) :\nprint('Hello')\n--- Page 209 ---\nChapter15: Functional Programming 193\nf = func # assignment of function to a variable\nsum(10, 20, f) # pass function as argument to a function\nxExample of building function at execution time is discussed in the \nnext section on lambda functions.\nLambda Functions", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_281", "chunk_strategy": "fixed_size"}}, {"text": "sum(10, 20, f) # pass function as argument to a function\nxExample of building function at execution time is discussed in the \nnext section on lambda functions.\nLambda Functions\nxNormal functions have names. They are defined using the def\nkeyword. \nxLambda functions do not have names. They are defined using the \nlambdakeyword and are built at execution time. \nxLambda functions are commonly used for short functions that are \nconvenient to define at the point where they are called.\nxLambda functions are also called anonymous functions or inline \nfunctions.\nxA lambdafunction can take any number of arguments but can return \nonly one value. Its syntax is:\nlambda arguments : expression\n: separates the parameters to be passed to the lambda function and \nthe function body. The result of running the function body is\nreturnedimplicitly.\nxA few examples of lambda functions\n# function that receives an argument and returns its cube\nlambda n :n *n * n", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_282", "chunk_strategy": "fixed_size"}}, {"text": "the function body. The result of running the function body is\nreturnedimplicitly.\nxA few examples of lambda functions\n# function that receives an argument and returns its cube\nlambda n :n *n * n\n# function that receives 3 arguments and returns average of them\nlambda x, y, z : (x + y + z) / 3\n# function that receives a string, strips any whitespace and returns \n# the uppercase version of the string\nlambda s : s.trim( ).upper( )\nxLambda functions are often used as an argument to other functions. \nFor example, the above lambdas can be passed to print( )function \nto print the value that they return.\nprint((lambda n : n * n * n)(3)) # prints 27\nprint((lambda x, y, z : (x + y + z) / 3)(10, 20, 30)) # prints 20.0\n--- Page 210 ---\n194 Let Us Python\nprint((lambda s : s.lstrip( ).rstrip( ).upper( ))(' Ngp ')) # prints NGP\nxThe lambda can also be assigned to a variable and then invoked.\np = lambda n : n * n * n\nq = lambda x, y, z : (x + y + z) / 3\nr = lambda s : s.lstrip( ).rstrip( ).upper( )", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_283", "chunk_strategy": "fixed_size"}}, {"text": "xThe lambda can also be assigned to a variable and then invoked.\np = lambda n : n * n * n\nq = lambda x, y, z : (x + y + z) / 3\nr = lambda s : s.lstrip( ).rstrip( ).upper( )\nprint(p(3)) # calls first lambda function\nprint(q(10, 20, 30)) # calls second lambda function\nprint(r(' Nagpur ')) # calls third lambda function\nxContainer types can also be passed to a lambda function. For \nexample, a lambda function that calculates average of numbers in a \nlist can be passed to print( )function: \nlst1 = [1, 2, 3, 4, 5]\nlst2 = [10, 20, 30, 40,50]\nprint((lambda l : sum(l) / len(l)) (lst1))\nprint((lambda l : sum(l) / len(l)) (lst2))\nHere instead of assigning a lambda function to a variable and then \npassing the variable to print( ), we have passed the lambda function \nitself to print( ).\nHigher Order Functions\nxA higher order function is a function that can receive other functions \nas arguments or return them. \nxFor example, we can pass a lambda function tothe built-insorted( )", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_284", "chunk_strategy": "fixed_size"}}, {"text": "Higher Order Functions\nxA higher order function is a function that can receive other functions \nas arguments or return them. \nxFor example, we can pass a lambda function tothe built-insorted( )\nfunction to sort a dictionary by values.\nd = {'Oil' : 230, 'Clip' : 150, 'Stud' : 175, 'Nut' : 35}\n# lambda takes a dictionary item and returns a value\nd1 = sorted(d.items( ), key = lambda kv : kv[1]) \nprint(d1) # prints [('Nut', 35), ('Clip', 150), ('Stud', 175), ('Oil', 230)]\nThe sorted( )function uses a parameter key. It specifies a function of \none argument that is used to extract a comparison for each element \nin the first argument of sorted( ). The default value of key is None,\nindicating that the elements in first argument are to be compared \ndirectly.\n--- Page 211 ---\nChapter15: Functional Programming 195\nxTo facilitate functional programming Python provides 3 higher order \nfunctions \u2014map( ), filter( )and reduce( ). Before we see how to use", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_285", "chunk_strategy": "fixed_size"}}, {"text": "--- Page 211 ---\nChapter15: Functional Programming 195\nxTo facilitate functional programming Python provides 3 higher order \nfunctions \u2014map( ), filter( )and reduce( ). Before we see how to use \nthese functions, we need to understand the map, filter and reduce \noperations.\nMap, Filter, Reduce\nxA map operation applies a function to each element in the sequence \nlike list, tuple, etc. and returns a new sequence containing the \nresults. For example: \n-Finding square root of all numbers in the list and returning a list \nof these roots.\n-Converting all characters in the list to uppercase and returning \nthe uppercase characters' list.\nxA filter operation applies a function to all the elements of a \nsequence. A sequence of those elements for which the function \nreturns True is returned. For example: \n-Checking whether each element in a list is analphabet and \nreturning a list of alphabets.\n-Checking whether each element in a list is odd and returning a \nlist of odd numbers.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_286", "chunk_strategy": "fixed_size"}}, {"text": "-Checking whether each element in a list is analphabet and \nreturning a list of alphabets.\n-Checking whether each element in a list is odd and returning a \nlist of odd numbers.\nxA reduce operation performs a rolling computation to sequential \npairs of values in a sequence and returns the result.For example:\n-Obtaining product of a list of integersand returning the product.\n-Concatenating all strings in a list and returning the final string.\nxUsually, map, filter, reduce operations mentioned above would need \na forloop and/orifstatement to control the flowwhile iterating \nover elements of sequence types like strings, lists, tuples.\nxIf we use Pythonfunctions map( ), filter( ), reduce( )we do not need \na forloop orifstatement to control the flow. This lets the \nprogrammer focus on the actual computation rather than on the \ndetails of loops, branches, and control flow.\nmap( )Function\nxUse of map( )function:\nimport math\ndef fun(n) :\n--- Page 212 ---\n196 Let Us Python\nreturn n * n", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_287", "chunk_strategy": "fixed_size"}}, {"text": "details of loops, branches, and control flow.\nmap( )Function\nxUse of map( )function:\nimport math\ndef fun(n) :\n--- Page 212 ---\n196 Let Us Python\nreturn n * n\nlst= [5, 10, 15, 20, 25]\nm1= map(math.radians, lst)\nm2= map(math.factorial, lst)\nm3= map(fun, lst)\nprint(list(m1)) # prints list of radians of all values in lst\nprint(list(m2)) # prints list of factorial of all values in lst\nprint(list(m3)) # prints list of squares of all values in lst\nxGeneralform of map( ) functionis\nmap(function_to_apply, list_of_inputs)\nmap( ) returns a map object which can be converted to a list using \nlist( )function.\nfilter( )Function\nxUse of filter( )function:\ndef fun(n) :\nif n % 5 == 0 :\nreturn True\nelse :\nreturn False\nlst1 = ['A', 'X', 'Y', '3', 'M', '4', 'D']\nf1= filter(str.isalpha, lst1)\nprint(list(f1)) # prints ['A', 'X', 'Y', 'M', 'D']\nlst2= [5, 10, 18, 27, 25]\nf2= filter(fun, lst2)\nprint(list(f2)) # prints [5,10,25]\nxGeneral formof filter( )function is:\nfilter(function_to_apply, list_of_inputs)", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_288", "chunk_strategy": "fixed_size"}}, {"text": "lst2= [5, 10, 18, 27, 25]\nf2= filter(fun, lst2)\nprint(list(f2)) # prints [5,10,25]\nxGeneral formof filter( )function is:\nfilter(function_to_apply, list_of_inputs)\nfilter( )returns a filterobject which can be converted to a list using \nlist( )function.\nreduce( )Function\nxUse of reduce( )function:\nfrom functools import reduce\n--- Page 213 ---\nChapter15: Functional Programming 197\ndef getsum(x, y) :\nreturn x + y\ndef getprod(x, y) :\nreturn x * y\nlst= [1, 2, 3, 4, 5]\ns = reduce(getsum, lst)\np = reduce(getprod, lst)\nprint(s) # prints 15\nprint(p) # prints 120\nHere the result of addition of previous two elements is added to the \nnext element, till the end of the list. In our program this translates \ninto operations like ((((1 + 2) + 3) + 4) + 5) and ((((1 * 2) * 3) * 4) * 5).\nxGeneral form of reduce( )function is:\nreduce(function_to_apply, list_of_inputs)\nThe reduce( )function operation performs a rolling computation to \nsequential pairs of values in a sequence and returns the result.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_289", "chunk_strategy": "fixed_size"}}, {"text": "reduce(function_to_apply, list_of_inputs)\nThe reduce( )function operation performs a rolling computation to \nsequential pairs of values in a sequence and returns the result.\nxYou can observe that map( ), filter( )and reduce( )abstract away \ncontrol flow code.\nUsing Lambda with map( ), filter( ), reduce( )\nxWe can use map( ), filter( )and reduce( )with lambda functions to \nsimplify the implementation of functions that operate over \nsequence types like, strings, listsand tuples.\nxSince map( ), filter( )and reduce( )expect a function to be passed to \nthem, we can also passlambda functions to them, as shown below.\n# using lambda with map( )\nlst1 = [5, 10, 15, 20, 25]\nm= map(lambda n : n * n, lst1)\nprint(list(m)) # prints [25, 100, 225, 400, 625]\n# using lambda with filter( )\nlst2= [5, 10, 18, 27, 25]\nf= filter(lambda n : n % 5 == 0, lst2)\nprint(list(f)) # prints [5, 10, 25]\n# using lambda with reduce( )\n--- Page 214 ---\n198 Let Us Python\nfrom functools import reduce\nlst3= [1, 2, 3, 4, 5]", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_290", "chunk_strategy": "fixed_size"}}, {"text": "f= filter(lambda n : n % 5 == 0, lst2)\nprint(list(f)) # prints [5, 10, 25]\n# using lambda with reduce( )\n--- Page 214 ---\n198 Let Us Python\nfrom functools import reduce\nlst3= [1, 2, 3, 4, 5]\ns = reduce(lambda x, y : x + y, lst3)\np = reduce(lambda x, y : x * y, lst3)\nprint(s, p) # prints 15 120\nxIf required map( ), filter( )and reduce( )can be used together.\ndef fun(n) :\nreturn n > 1000\nlst = [10, 20, 30, 40, 50]\nl = filter(fun, map(lambda x : x * x, lst))\nprint(list(l))\nxHere map( )and filter( )are used together. map( )obtains a list of \nsquare of all elements in a list. filter( )then filters out only those \nsquares which are bigger than 1000. \nWhere are they Useful?\nxRelational databases use the map/filter/reduce paradigm. A typical \nSQL query to obtain the maximum salary that a skilled worker gets \nfrom an Employees table will be:\nSELECTmax(salary) FROMEmployees WHEREgrade = 'Skilled'\nThe same query can be written in terms of map( ), filter( )and \nreduce( )as:", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_291", "chunk_strategy": "fixed_size"}}, {"text": "from an Employees table will be:\nSELECTmax(salary) FROMEmployees WHEREgrade = 'Skilled'\nThe same query can be written in terms of map( ), filter( )and \nreduce( )as:\nreduce(max, map(get_salary, filter(lambda x : x.grade() == \n'Skilled', employees)))\nHere employeesis asequence, i.e. a list of lists, where each list has \nthe data for one employee\ngrade = 'Skilled' is afilter\nget_salaryis amapwhich returns the salary field from the list\nand maxis areduce\nIn SQL terminology map, filterand reduce are called project, select\nand aggregate respectively.\n--- Page 215 ---\nChapter15: Functional Programming 199\nxIf we can manage our program using map, filter, and reduce, and \nlambda functions then we can run each operation in separate \nthreads and/or different processors and still get the same results. \nMultithreading is discussed in detail in Chapter 25.\n____________________________________________________________________\nProblem 15.1", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_292", "chunk_strategy": "fixed_size"}}, {"text": "Multithreading is discussed in detail in Chapter 25.\n____________________________________________________________________\nProblem 15.1\nDefine three functions fun( ), disp( )and msg( ), store them in a list and \ncall them one by one in a loop.\nProgram\ndef fun( ) :\nprint('In fun')\ndef disp( ) :\nprint('In disp')\ndef msg( ) :\nprint('In msg')\nlst = [fun, disp, msg]\nfor f in lst :\nf( )\nOutput\nIn fun\nIn disp\nIn msg\n____________________________________________________________________\nProblem 15.2\nSuppose there are two lists, one containing numbers from 1to 6, and \nother containing umbers from 6 to 1. Write a program to obtain a list \nthat contains elements obtained by adding corresponding elements of \nthe two lists.\n--- Page 216 ---\n200 Let Us Python\nProgram\nlst1 = [1, 2, 3, 4, 5, 6]\nlst2 = [6, 5, 4, 3, 2, 1]\nresult = map(lambda n1, n2: n1+ n2, lst1, lst2)\nprint(list(result))\nOutput\n[7, 7, 7, 7, 7, 7]\nTips\nxlambda function receives two numbers and returns their sum.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_293", "chunk_strategy": "fixed_size"}}, {"text": "lst2 = [6, 5, 4, 3, 2, 1]\nresult = map(lambda n1, n2: n1+ n2, lst1, lst2)\nprint(list(result))\nOutput\n[7, 7, 7, 7, 7, 7]\nTips\nxlambda function receives two numbers and returns their sum.\nxmap( )function applies lambda function to each pair of elements \nfrom lst1and lst2.\nxThe map( )function returns a map object which is then converted \ninto a list using list( )before printing.\n____________________________________________________________________\nProblem 15.3\nWrite a program to create a new list by obtaining square of all numbers \nin a list.\nProgram\nlst1 = [5,7, 9, -3, 4, 2, 6] \nlst2 = list(map(lambda n : n ** 2, lst1)) \nprint(lst2)\nOutput\n[25, 49, 81, 9, 16, 4, 36]\nTips\nxlambda function receives a number and returns its square.\nxmap( )function applies lambda function to each element from lst1.\n--- Page 217 ---\nChapter15: Functional Programming 201\nxThe map( )function returns a map object which is then converted \ninto a list using list( )before printing.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_294", "chunk_strategy": "fixed_size"}}, {"text": "--- Page 217 ---\nChapter15: Functional Programming 201\nxThe map( )function returns a map object which is then converted \ninto a list using list( )before printing.\n____________________________________________________________________\nProblem 15.4\nThough map( )function is available ready-made in Python, can you \ndefine one yourself and test it?\nProgram\ndef my_map(fun, seq) :\nresult = []\nfor ele in seq :\nresult.append(fun(ele))\nreturn result\nlst1 = [5, 7, 9, -3, 4, 2, 6] \nlst2 = list(my_map(lambda n : n ** 2, lst1)) \nprint(lst2) \nOutput\n[25, 49, 81, 9, 16, 4, 36]\nTips\nxlambda function receives a number and returns its square.\nxmy_map( )function applies lambda function to each element from \nlst1.\nxThe my_map( )function returns a map object which is then \nconverted into a list using list( )before printing.\n____________________________________________________________________\nProblem 15.5\nFollowing data shows names, ages and marks of students in a class:\nAnil, 21, 80\nSohail, 20, 90", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_295", "chunk_strategy": "fixed_size"}}, {"text": "____________________________________________________________________\nProblem 15.5\nFollowing data shows names, ages and marks of students in a class:\nAnil, 21, 80\nSohail, 20, 90\nSunil, 20, 91\nShobha, 18, 93\nAnil, 19, 85\n--- Page 218 ---\n202 Let Us Python\nWrite a program to sort this data on multiple keys in the order name, \nage and marks.\nProgram\nimport operator\nlst = [('Anil', 21, 80), ('Sohail', 20, 90), ('Sunil', 20, 91), \n('Shobha', 18, 93), ('Anil', 19, 85), ('Shobha', 20, 92)]\nprint(sorted(lst, key = operator.itemgetter(0, 1, 2)))\nprint(sorted(lst, key = lambda tpl : (tpl[0], tpl[1], tpl[2])))\nOutput\n[('Anil', 19, 85), ('Anil', 21, 80), ('Shobha', 18, 93), ('Shobha', 20, 92), \n('Sohail', 20, 90), ('Sunil', 20, 91)]\n[('Anil', 19, 85), ('Anil', 21, 80), ('Shobha', 18, 93), ('Shobha', 20, 92), \n('Sohail', 20, 90), ('Sunil', 20, 91)]\nTips\nxSince there are multiple data items about a student, they have been \nput into a tuple.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_296", "chunk_strategy": "fixed_size"}}, {"text": "('Sohail', 20, 90), ('Sunil', 20, 91)]\nTips\nxSince there are multiple data items about a student, they have been \nput into a tuple.\nxSince there are multiple students, all tuples have been put in a list.\nxTwo sorting methods have been used. In the first method \nitemgetter( )specifies the sorting order. In the second method a \nlambda has been used to specify the sorting order.\n____________________________________________________________________\nProblem 15.6\nSuppose a dictionary contain key-value pairs, where key is an alphabet \nand value is a number. Write a program that obtains the maximum and \nminimum values from the dictionary.\nProgram\nd = {'x':500, 'y':5874, 'z': 560}\nkey_max = max(d.keys( ), key = (lambda k: d[k]))\nkey_min = min(d.keys( ), key = (lambda k: d[k]))\n--- Page 219 ---\nChapter15: Functional Programming 203\nprint('Maximum Value: ', d[key_max])\nprint('Minimum Value: ', d[key_min])\nOutput\nMaximum Value: 5874 \nMinimum Value: 500", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_297", "chunk_strategy": "fixed_size"}}, {"text": "--- Page 219 ---\nChapter15: Functional Programming 203\nprint('Maximum Value: ', d[key_max])\nprint('Minimum Value: ', d[key_min])\nOutput\nMaximum Value: 5874 \nMinimum Value: 500\n____________________________________________________________________\n[A]State whether the following statements are True or False:\n(a)lambda function cannot be used with reduce( )function.\n(b)lambda, map( ), filter( ), reduce( )can be combined in one single \nexpression.\n(c)Though functions can be assigned to variables, they cannot be called \nusing these variables.\n(d)Functions can be passed as arguments to function and returned \nfrom function.\n(e)Functions can be built at execution time, the way lists, tuples, etc. \ncan be. \n(f)Lambda functions are always nameless.\n[B]Using lambda, map( ), filter( )and reduce( )or a combination \nthereof to perform the following tasks:\n(a)Suppose a dictionary contains type of pet (cat, dog, etc.), name of \npet and age of pet. Write a program that obtains the sum of all dog's \nages.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_298", "chunk_strategy": "fixed_size"}}, {"text": "thereof to perform the following tasks:\n(a)Suppose a dictionary contains type of pet (cat, dog, etc.), name of \npet and age of pet. Write a program that obtains the sum of all dog's \nages.\n(b)Consider the following list:\nlst = [1.25, 3.22, 4.68, 10.95, 32.55, 12.54]\nThe numbers in the list represent radii of circles. Write a program to \nobtain a list of areas of these circles rounded off to two decimal \nplaces.\n(c)Consider the following lists:\nnums = [10, 20, 30, 40, 50, 60, 70, 80]\n--- Page 220 ---\n204 Let Us Python\nstrs = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']\nWrite a program to obtain a list of tuples, where each tuple contains \na number from one list and a string from another, in the same order \nin which they appear in the original lists.\n(d)Suppose a dictionary contains names of students and marks \nobtained by them in an examination. Write a program to obtain a list \nof students who obtained more than 40 marks in the examination.\n(e)Consider the following list:", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_299", "chunk_strategy": "fixed_size"}}, {"text": "obtained by them in an examination. Write a program to obtain a list \nof students who obtained more than 40 marks in the examination.\n(e)Consider the following list:\nlst = ['Malayalam', 'Drawing', 'madamIamadam', '1234321']\nWrite a program to print those strings which are palindromes.\n(f)A list contains names of employees. Write a program to filter out \nthose names whose length is more than 8 characters.\n(g)A dictionary contains following information about 5 employees:\nFirst name\nLast name\nAge\nGrade (Skilled, Semi-skilled, Highly-skilled)\nWrite a program to obtain a list of employees (first name + last \nname) who are Highly-skilled.\n(h)Consider the following list:\nlst = ['Benevolent', 'Dictator', 'For', 'Life']\nWrite a program to obtain a string 'Benevolent Dictator For Life'.\n(i)Consider the following list of students in a class. \nlst = ['Rahul', 'Priya', 'Chaaya', 'Narendra', 'Prashant']\nWrite a program to obtain a list in which all the namesare converted \nto uppercase.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_300", "chunk_strategy": "fixed_size"}}, {"text": "(i)Consider the following list of students in a class. \nlst = ['Rahul', 'Priya', 'Chaaya', 'Narendra', 'Prashant']\nWrite a program to obtain a list in which all the namesare converted \nto uppercase.\n--- Page 221 ---\nLet UsPython\n205Modules and\nPackages\nxThe Main Module xSame Code, Different Interpretation\nxMultiple Modules xPackages\nxImporting a Module xThird-party Packages \nxVariations of import xPrograms\nxSearch Sequence xExercises16\n\u201cOrganize, and you will be better off... \u201d\n--- Page 222 ---\n206 Let Us Python\nThe Main Module\nxA module is a .py file containing definitions and statements. So all \n.py files that we created so far for our programs are modules.\nxWhen we execute a program its module name is __main__. This \nname is available in the variable __name__.\ndef display( ) :\nprint('You cannot make History if you use Incognito Mode')\ndef show( ) :\nprint('Pizza is a pie chart of how much pizza is left')\nprint(__name__)\ndisplay( )\nshow( )\n\u2018", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_301", "chunk_strategy": "fixed_size"}}, {"text": "def display( ) :\nprint('You cannot make History if you use Incognito Mode')\ndef show( ) :\nprint('Pizza is a pie chart of how much pizza is left')\nprint(__name__)\ndisplay( )\nshow( )\n\u2018\nOn execution of this program, we get the following output:\n__main__\nYou cannot make History if you use Incognito Mode\nPizza is a pie chart of how much pizza is left\nMultiple Modules\nxThere are two reasons why we may want to create a program that \ncontains multiple modules:\n(a)It makes sense to split a big program into multiple .py files, \nwhere each .py file acts as a module.\nBenefit -Ease of development and maintenance.\n(b)Wemay need a set of handy functions in several programs. In \nsuch a case instead of copying these functions in different \nprogram files, we may keep them in one file and use them in \ndifferent programs.\nBenefit -Reuse of existing code.\n--- Page 223 ---\nChapter16: Modules and Packages 207\nImporting a Module\nxTo use the definitionsand statements in a module in another", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_302", "chunk_strategy": "fixed_size"}}, {"text": "different programs.\nBenefit -Reuse of existing code.\n--- Page 223 ---\nChapter16: Modules and Packages 207\nImporting a Module\nxTo use the definitionsand statements in a module in another \nmodule, we need to 'import' it into this module.\n# functions.py\ndef display( ) :\nprint('Earlier rich owned cars, while poor had horses')\ndef show( ) :\nprint('Now everyone has car, while only rich own horses')\n# usefunctions.py\nimport functions\nfunctions.display( )\nfunctions.show( )\nWhen we execute 'usefunctions.py', it runs as a module with name \n__main__. \nimport functionsmakes the definitions in 'functions.py' available in \n'usefunctions.py'.\nxA module can import multiple modules.\nimport math\nimport random\nimport functions # use function.py of previous program\na = 100\nb = 200\nprint(__name__)\nprint(math.sin(0.5))\nprinr(math.cos(0.5))\nprint(random.random( ))\nprint(random.randint(30, 45))\nfunctions.display( )\nfunctions.show( )\nHere __name__contains __main__indicating that we are executing", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_303", "chunk_strategy": "fixed_size"}}, {"text": "print(math.sin(0.5))\nprinr(math.cos(0.5))\nprint(random.random( ))\nprint(random.randint(30, 45))\nfunctions.display( )\nfunctions.show( )\nHere __name__contains __main__indicating that we are executing \nthe main module. randomand mathare standard modules. \nfunctionsis a user-defined module.\n--- Page 224 ---\n208 Let Us Python\nVariations of i m p o r t\nxThe importstatement can be used in multiple forms. \nimport math\nimport random\nis same as \nimport math, random\nxIf we wish, we can import specific names from a module.\nfrom math import sin, cos, tan\nfrom functions import display # imports only display function\nfrom functions import * # imports all functions\nxWe can rename a module while importing it. We can then use the \nnew name in place of the original module name.\nimport functions as fun\nfun.display( )\nor even\nfrom functions import display as disp\ndisp( )\nSearch Sequence\nxIf we import a module called 'myfuncs', following search sequence \nwill be followed:", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_304", "chunk_strategy": "fixed_size"}}, {"text": "import functions as fun\nfun.display( )\nor even\nfrom functions import display as disp\ndisp( )\nSearch Sequence\nxIf we import a module called 'myfuncs', following search sequence \nwill be followed:\n-Interpreter will first search for a built-in module called 'myfuncs'.\n-If such a module is not found, then it will search for it in \ndirectory list given by the variable sys.path .\nxThe list in the sys.path variable contains directory from where the \nscript has been executed, followed by a list of directories as specified \nin PYTHONPATHenvironment variable.\nxWe can print the list of directories in sys.path using:\n--- Page 225 ---\nChapter16: Modules and Packages 209\nimport sys\nfor p in sys.path :\nprint(p)\nSame Code, Different Interpretation\nxSuppose we have a module called functionsin 'functions.py'. If this \nmodule has functions display( )and main( ). We want to use this \nprogram sometime as an independent script, and at other times as a \nmodule from which we can use display( )function.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_305", "chunk_strategy": "fixed_size"}}, {"text": "module has functions display( )and main( ). We want to use this \nprogram sometime as an independent script, and at other times as a \nmodule from which we can use display( )function.\nxTo achieve this, we need to write the code in this fashion:\n# functions.py\ndef display( ) :\nprint('Wright Brothers are responsible for 9/11 too')\ndef main( ) :\nprint('If you beat your own record, you win as well as lose')\nprint('Internet connects people at a long distance')\nprint('Internet disconnects people at a short distance')\ndisplay( )\nif __name__ == '__main__' :\nmain( )\nIf we run it as an independent program, ifwill be satisfied. As a \nresult, main( )will be called. The name of this function need not be \nmain( ).\nIf we import this module in another program, ifwill fail, so main( ) \nwill not be called. However, the program can call display( )\nindependently.\nPackages\nxThe way drives, folders, subfolders help us organize files in an OS, \npackages help us organize sub-packages and modules.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_306", "chunk_strategy": "fixed_size"}}, {"text": "independently.\nPackages\nxThe way drives, folders, subfolders help us organize files in an OS, \npackages help us organize sub-packages and modules.\nxA particular directory is treated as a package if it contains a file \nnamed __init__.py in it. The directory may contain other sub-\npackages and modules in it. __init__.py file may be empty or it may \ncontain some initialization code for the package.\n--- Page 226 ---\n210 Let Us Python\nxSuppose there is a package called pkgcontaining a module called \nmod.py. If the module contains functions f1( )and f2( )then the \ndirectory structure would be as follows:\nDirectory -pkg\nContents of pkg directory -mod.py and __init__.py\nContents of mod.py -f1( ) and f2( )\nxProgram to use f1( )and f2( )would be as follows:\n# mod.py\ndef f1( ) :\nprint('Inside function f1')\ndef f2( ) :\nprint('Inside function f2')\n# client.py\nimport pkg.mod\npkg.mod.f1( )\npkg.mod.f2( )\nThird-party Packages\nxPythonistas in Python community create software and make it", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_307", "chunk_strategy": "fixed_size"}}, {"text": "def f2( ) :\nprint('Inside function f2')\n# client.py\nimport pkg.mod\npkg.mod.f1( )\npkg.mod.f2( )\nThird-party Packages\nxPythonistas in Python community create software and make it \navailable for other programmersto use. They use PyPI \u2014Python \nPackage Index (www.pypi.org)  (http://www.pypi.org) ) to distribute their software. PyPI \nmaintains the list of such third-party Python packages available. \nxThere are third-party packages available for literally doing everything\nunder the sun.\nxYou too can register at PyPI and upload your packages there. You \nshould follow the guidelines given at www.pypi.org (http://www.pypi.org) to create the \npackage, build it and upload it to the Python Package Index.\nxTo use a package available at PyPI we need to first download it and \nthen install it. The installation is done usinga package manager \nutility called pip. pip itself is installed when Python is installed.\nxFollowing command shows how to use pip to install a package", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_308", "chunk_strategy": "fixed_size"}}, {"text": "then install it. The installation is done usinga package manager \nutility called pip. pip itself is installed when Python is installed.\nxFollowing command shows how to use pip to install a package\npykrigethat has been downloaded from PyPI.\nc:\\>pip install pykrige\n____________________________________________________________________\n--- Page 227 ---\nChapter16: Modules and Packages 211\nProblem 16.1\nWrite a Python program that is organized as follows:\nPackages:\nmessages.funny\nmessages.curt\nModules:\nmodf1.py, modf2.py, modf3.py in packagemessages.funny\nmodc1.py, modc2.py, modc3.py in package messages.curt\nFunctions:\nfunf1( ) in module modf1\nfunf2( ) in module modf2\nfunf3( ) in module modf3\nfunc1( ) in module modc1\nfunc2( ) in module modc2\nfunc3( ) in module modc3\nUse all the functions ina program client.py.\nProgram\nDirectory structure will be as follows:\nmessages\n__init__.py\nfunny\n__init__.py\nmodf1.py\nmodf2.py\nmodf3.py\ncurt\n__init__.py\nmodc1.py\nmodc2.py\nmodc3.py\nclient.py", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_309", "chunk_strategy": "fixed_size"}}, {"text": "Program\nDirectory structure will be as follows:\nmessages\n__init__.py\nfunny\n__init__.py\nmodf1.py\nmodf2.py\nmodf3.py\ncurt\n__init__.py\nmodc1.py\nmodc2.py\nmodc3.py\nclient.py\nOf these, messages, funnyand curtare directories, rest are files. All \n__init__.pyfiles are empty.\n--- Page 228 ---\n212 Let Us Python\n# modf1.py\ndef funf1( ) :\nprint('The ability to speak several languages is an asset...')\nprint('ability to keep your mouth shut in any language is priceless')\n# modf2.py\ndef funf2( ) :\nprint('If you cut off your left arm...')\nprint('then your right arm would be left')\n# modf3.py\ndef funf3( ) :\nprint('Alcohol is a solution!')\n# modc1.py\ndef func1( ) :\nprint('Light travels faster than sound...')\nprint('People look intelligent, till they open their mouth')\n# modc2.py\ndef func2( ) :\nprint('There is no physical evidence to say that today is Tuesday...')\nprint('We have to trust someone who kept the count since first day')\n# modc3.py\ndef func3( ) :", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_310", "chunk_strategy": "fixed_size"}}, {"text": "# modc2.py\ndef func2( ) :\nprint('There is no physical evidence to say that today is Tuesday...')\nprint('We have to trust someone who kept the count since first day')\n# modc3.py\ndef func3( ) :\nprint('We spend five days a week pretending to be someone else...')\nprint('in order to spend two days being who we are')\n# client.py\nimport messages.funny.modf1\nimport messages.funny.modf2\nimport messages.funny.modf3\nimport messages.curt.modc1\nimport messages.curt.modc2\nimport messages.curt.modc3\nmessages.funny.modf1.funf1( )\n--- Page 229 ---\nChapter16: Modules and Packages 213\nmessages.funny.modf2.funf2( )\nmessages.funny.modf3.funf3( )\nmessages.curt.modc1.func1( )\nmessages.curt.modc2.func2( )\nmessages.curt.modc3.func3( )\nTips\nxDirectory structure is very important.For a directory to qualify as a \npackage, it has to contain a file __init__.py .\n____________________________________________________________________\nProblem 16.2\nRewrite the import statements in Program 16.1, such that using", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_311", "chunk_strategy": "fixed_size"}}, {"text": "package, it has to contain a file __init__.py .\n____________________________________________________________________\nProblem 16.2\nRewrite the import statements in Program 16.1, such that using \nfunctions in different modules becomes convenient.\nProgram\nfrom messages.funny.modf1 import funf1\nfrom messages.funny.modf2 import funf2\nfrom messages.funny.modf3 import funf3\nfrom messages.curt.modc1 import func1\nfrom messages.curt.modc2 import func2\nfrom messages.curt.modc3 import func3\nfunf1( )\nfunf2( )\nfunf3( )\nfunc1( )\nfunc2( )\nfunc3( )\nTips\nxBenefit -Calls to functions does not need the dotted syntax.\nxLimitation -Only the specified function gets imported. \n____________________________________________________________________\n--- Page 230 ---\n214 Let Us Python\nProblem 16.3\nCan we rewrite the following imports using * notation?\nfrom messages.curt.modc1 import func1\nfrom messages.curt.modc2 import func2\nfrom messages.curt.modc3 import func3\nfrom messages.funny.modf1 import funf1", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_312", "chunk_strategy": "fixed_size"}}, {"text": "from messages.curt.modc1 import func1\nfrom messages.curt.modc2 import func2\nfrom messages.curt.modc3 import func3\nfrom messages.funny.modf1 import funf1\nfrom messages.funny.modf2 importfunf2\nfrom messages.funny.modf3 import funf3\nProgram\nWe may use the following import statements:\n# client.py\nfrom messages.curt.modc1 import *\nfrom messages.curt.modc2 import *\nfrom messages.curt.modc3 import *\nfrom messages.funny.modf1 import *\nfrom messages.funny.modf2 import *\nfrom messages.funny.modf3 import *\nfunf1( )\nfunf2( )\nfunf3( )\nfunc1( )\nfunc2( )\nfunc3( )\nTips\nxLimitation -Since there is only one function in each module, using * \nis not so useful. \nxAlso, * is not so popular as it does not indicate which function/class \nare we importing.\n____________________________________________________________________\n--- Page 231 ---\nChapter16: Modules and Packages 215\n[A]Answer the followingquestions:\n(a)Suppose there are three modules m1.py, m2.py, m3.py, containing", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_313", "chunk_strategy": "fixed_size"}}, {"text": "--- Page 231 ---\nChapter16: Modules and Packages 215\n[A]Answer the followingquestions:\n(a)Suppose there are three modules m1.py, m2.py, m3.py, containing \nfunctions f1( ), f2( )and f3( )respectively. How will you use those \nfunctions in your program?\n(b)Write a program containing functions fun1( ), fun2( ), fun3( ) and \nsome statements. Add suitable code to the program such that you \ncan use it as a module or a normal program.\n(c)Suppose a module mod.pycontains functions f1( ), f2( )and f3( ).\nWrite 4 forms of import statements to use these functions in your \nprogram.\n[B]Attempt the followingquestions:\n(a)What is the difference between a module and a package?\n(b)What is the purpose behind creating multiple packages and \nmodules?\n(c)By default, to which module do the statements in a program belong? \nHow do we access the name of this module?\n(d)In the following statement what do a, b, c, xrepresent?\nimport a.b.c.x\n(e)If module mcontains a function fun( ), what is wrong with the", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_314", "chunk_strategy": "fixed_size"}}, {"text": "How do we access the name of this module?\n(d)In the following statement what do a, b, c, xrepresent?\nimport a.b.c.x\n(e)If module mcontains a function fun( ), what is wrong with the \nfollowing statements?\nimport m\nfun( )\n(f)What are the contents of PYTHONPATHvariable? How can we \naccess its contents programmatically? \n(g)What does the content of sys.path signify? What does the order of \ncontents of sys.path signify?\n(h)Where a list of third-party packages is maintained?\n(i)Which tool is commonly used for installing third-party packages?\n(j)Do the following import statements serve the same purpose?\n--- Page 232 ---\n216 Let Us Python\n# version 1\nimport a, b, c, d\n# version 2\nimport a\nimport b\nimport c\nimport d\n# version 3\nfrom a import *\nfrom b import *\nfrom c import *\nfrom d import *\n[C]Statewhether the following statements are True or False:\n(a)A function can belong to a module and the module can belong to a \npackage.\n(b)A package can contain one or more modules in it.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_315", "chunk_strategy": "fixed_size"}}, {"text": "[C]Statewhether the following statements are True or False:\n(a)A function can belong to a module and the module can belong to a \npackage.\n(b)A package can contain one or more modules in it.\n(c)Nested packages are allowed.\n(d)Contents of sys.path variable cannot be modified.\n(e)In the statement import a.b.c, ccannot be a function.\n(f)It is a good idea to use * to import all the functions/classes defined \nin a module.\n--- Page 233 ---\nLet UsPython\n217Namespaces\nxSymbol Table xInner Functions\nxNamespace xScope and LEGB Rule\nxglobals( )and locals( ) xPrograms\nxWhere to use them? xExercises17\n\u201cScope it out... \u201d\n--- Page 234 ---\n218 Let Us Python\nSymbol Table\nxVariable names, function names and class names are in general \ncalled identifiers.\nxWhile interpreting our program Python interpreter creates a symbol \ntableconsisting identifiersand relevant information about each \nidentifier.\nxThe relevant information includes the type of the identifier, its scope \nlevel and its location in memory.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_316", "chunk_strategy": "fixed_size"}}, {"text": "tableconsisting identifiersand relevant information about each \nidentifier.\nxThe relevant information includes the type of the identifier, its scope \nlevel and its location in memory.\nxThis information is used by the interpreter to decide whether the \noperations performed on the identifiers in our program should be \npermitted or not.\nxFor example, suppose we have an identifier whose type has been \nmarked as tuple in the symbol table. Later in theprogram if we try to \nmodify its contents, interpreter will report an error as a tuple is \nimmutable.\nNamespace\nxAs the name suggests, a namespace is a space that holds names \n(identifiers).\nxProgrammatically, a namespace is a dictionary of identifiers (keys) \nand their corresponding objects (values).\nxAn identifier used in a function or a method belongs to the local\nnamespace.\nxAn identifier used outside a function or a method belongs to the \nglobalnamespace.\nxIf a local and a global identifier have the same name,the local", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_317", "chunk_strategy": "fixed_size"}}, {"text": "namespace.\nxAn identifier used outside a function or a method belongs to the \nglobalnamespace.\nxIf a local and a global identifier have the same name,the local \nidentifier shadows out the global identifier.\nxPython assumes that an identifier that is assigned a value in a \nfunction/method is a local identifier.\nxIf we wish to assign a value to a global identifier within a \nfunction/method, we should explicitly declare the variable as global \nusing the globalkeyword.\n--- Page 235 ---\nChapter17: Namespaces 219\ndef fun( ) :\n# name conflict. local a shadows out global a\na = 45\n# name conflict, use global b\nglobal b \nb = 6.28\n# uses local a, global b and s\n# no need to define s as global, since it is not being changed\nprint(a, b, s)\n# global identifiers\na = 20\nb = 3.14 \ns = 'Aabra Ka Daabra'\nfun( )\nprint(a, b, s) # b has changed, a and s are unchanged\nglobals( )and locals( )\nxDictionary of identifiers in global and local namespaces can be", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_318", "chunk_strategy": "fixed_size"}}, {"text": "a = 20\nb = 3.14 \ns = 'Aabra Ka Daabra'\nfun( )\nprint(a, b, s) # b has changed, a and s are unchanged\nglobals( )and locals( )\nxDictionary of identifiers in global and local namespaces can be \nobtained using built-in functions globals( )and locals( ). \nxIf locals( )is called from within a function/method, it returns a \ndictionary of identifiers that are accessible from that \nfunction/method.\nxIf globals( )is called from within a function/method, it returns a \ndictionary of global identifiers that can be accessed from that \nfunction/method.\nxFollowing program illustrates usage of globals( )and locals( ):\ndef fun( ) :\na = 45\nglobal b \nb = 6.28\nprint(locals( ))\nprint(globals( ))\na = 20\nb = 3.14 \ns = 'Aabra Ka Daabra'\n--- Page 236 ---\n220 Let Us Python\nprint(locals())\nprint(globals())\nfun( ) \nOn execution of this program, we get the following output:\n{'a': 20, 'b': 6.28, 's': 'Aabra Ka Daabra'}\n{'a': 20, 'b': 6.28, 's': 'Aabra Ka Daabra'}\n{'a': 45}\n{'a': 20, 'b': 6.28, 's':'Aabra Ka Daabra'}", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_319", "chunk_strategy": "fixed_size"}}, {"text": "{'a': 20, 'b': 6.28, 's': 'Aabra Ka Daabra'}\n{'a': 20, 'b': 6.28, 's': 'Aabra Ka Daabra'}\n{'a': 45}\n{'a': 20, 'b': 6.28, 's':'Aabra Ka Daabra'}\nThe first, second and last line above shows abridged output. At \nglobal scope locals( )and globals( )return the same dictionary of \nglobal namespace. \nInside fun( )locals( )returns the local namespace, whereas globals( )\nreturns global namespace as seen from the output above.\nWhere to use them?\nxApart from finding out what all is available in the local and global \nnamespace, globals( )and locals( )can be used to access variables \nusing strings. This is shown in the following program:\na = 20\nb = 3.14 \ns = 'Aabra Ka Daabra'\nlst = ['a', 'b', 's']\nfor var in lst :\nprint(globals( )[var])\nOn execution it produces the following output:\n20\n3.14\nAabra Ka Daabra\nglobals( )[var]gives the current value of varin global namespace.\nxUsing the same technique we can call different functions through \nthe same variable as shown below:\ndef fun1( ) :", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_320", "chunk_strategy": "fixed_size"}}, {"text": "Aabra Ka Daabra\nglobals( )[var]gives the current value of varin global namespace.\nxUsing the same technique we can call different functions through \nthe same variable as shown below:\ndef fun1( ) :\nprint('Inside fun1')\n--- Page 237 ---\nChapter17: Namespaces 221\ndef fun2( ) :\nprint('Inside fun2')\ndef fun3( ) :\nprint('Inside fun3')\nlst = ['fun1', 'fun2', 'fun3']\nfor var in lst :\nglobals()[var]( )\nOn execution it produces the following output:\nInside fun1\nInside fun2\nInside fun3\nInner Functions\nxAn inner function is simply a function that is defined inside another \nfunction.Following program shows how to do this:\n# outer function \ndef display( ) : \na = 500\nprint ('Saving is the best thing...')\n# inner function\ndef show( ) : \nprint ('Especially when your parents have done it for you!')\nprint(a)\nshow( )\ndisplay( ) \nOn executing this program, we get the following output:\nSaving is the best thing...\nEspecially when your parents have done it for you!\n500", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_321", "chunk_strategy": "fixed_size"}}, {"text": "print(a)\nshow( )\ndisplay( ) \nOn executing this program, we get the following output:\nSaving is the best thing...\nEspecially when your parents have done it for you!\n500\nxshow( )being the inner function defined inside display( ), it can be \ncalled only from within display( ). In that sense, show( ) has been \nencapsulated inside display( ). \n--- Page 238 ---\n222 Let Us Python\nxThe inner function has access to variables of the enclosing function, \nbut it cannot change the value of the variable. Had we done a = 600 \nin show( ), a new local awould have been created and set, and not \nthe one belonging to display( ).\nScope and LEGB Rule\nxScope of an identifier indicates where it is available for use.\nxScope can be Local (L), Enclosing (E), Global (G), Built-in (B). Scope \nbecomes more and more liberal from Local to Built-in. This can be \nbest understood though the program given below.\ndeffun1():\ny = 20\nprint(x, y)\nprint(len(str(x)))\ndeffun2( ):\nz=30\nprint(x,y, z)\nprint(len(str(x)))\nfun2()\nx=10", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_322", "chunk_strategy": "fixed_size"}}, {"text": "best understood though the program given below.\ndeffun1():\ny = 20\nprint(x, y)\nprint(len(str(x)))\ndeffun2( ):\nz=30\nprint(x,y, z)\nprint(len(str(x)))\nfun2()\nx=10\nprint(len(str(x)))\nfun1()\nOutput of the program is given below:\n2\n10 20\n2\n10 20 30\n2\nxlen, str, printcan be used anywhere in the program without \nimporting any module. So they have a built-in scope. \nxVariable xis created outside all functions, so it has a global scope. It \nis available to fun1( )as well as fun2( ).\nxfun2( )is nested inside fun1( ). So identifier ycreated in fun1( )is \navailable to fun2( ). When we attempt to print yin fun2( ), it is not \n--- Page 239 ---\nChapter17: Namespaces 223\nfound in fun2( ), hence the search is continued in the enclosing \nfunction fun1( ). Here it is found hence its value 20 gets printed. This \nis an example of enclosing scope.\nxIdentifier zis local to fun2( ). So it is available only to statements \nwithin fun2( ). Thus it has a local scope.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_323", "chunk_strategy": "fixed_size"}}, {"text": "is an example of enclosing scope.\nxIdentifier zis local to fun2( ). So it is available only to statements \nwithin fun2( ). Thus it has a local scope.\n____________________________________________________________________\nProblem 17.1\nWrite a program that nests function fun2( )inside function fun1( ). \nCreate two variables by the name ain each function. Prove that they are \ntwo different variables.\nProgram\ndef fun1( ) :\na = 45\nprint(a)\nprint(id(a))\ndef fun2( ) :\na = 90\nprint(a) \nprint(id(a))\nfun2( )\nfun1( )\nOutput\n45\n11067296\n90\n11068736\n--- Page 240 ---\n224 Let Us Python\nTips\nxFunction id( )gives the address stored in a variable. Since the \naddresses in the output are different, it means that the two a's are \nreferring to two different values\n____________________________________________________________________\nProblem 17.2\nWrite a program that proves that the dictionary returned by globals( )\ncan be used to manipulate values of variables in it.\nProgram\na = 10\nb = 20\nc = 30", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_324", "chunk_strategy": "fixed_size"}}, {"text": "Problem 17.2\nWrite a program that proves that the dictionary returned by globals( )\ncan be used to manipulate values of variables in it.\nProgram\na = 10\nb = 20\nc = 30\nglobals( )['a'] = 25\nglobals( )['b'] = 50\nglobals( )['c'] = 75\nprint(a, b, c)\nOutput\n25 50 75\nTips\nxglobals( )returns a dictionary of identifiers and their values. From \nthis dictionary specific identifier can be accessed by using the \nidentifier as the key.\nxFrom the output it is evident that we are able to manipulate \nvariables a, b, c.\n____________________________________________________________________\nProblem 17.3\nWrite a program that proves that if the dictionary returned by locals( )is\nmanipulated, the values of original variables don't change.\n--- Page 241 ---\nChapter17: Namespaces 225\nProgram\ndef fun( ) :\na = 10\nb = 20\nc = 30\nlocals( )['a'] = 25\nlocals( )['b'] = 50\nlocals( )['c'] = 75\nprint(a, b, c)\nfun( )\nOutput\n1020 30\nTips\nxlocals( )returns a 'copy' of dictionary of identifiers that can be", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_325", "chunk_strategy": "fixed_size"}}, {"text": "a = 10\nb = 20\nc = 30\nlocals( )['a'] = 25\nlocals( )['b'] = 50\nlocals( )['c'] = 75\nprint(a, b, c)\nfun( )\nOutput\n1020 30\nTips\nxlocals( )returns a 'copy' of dictionary of identifiers that can be \naccessed from fun( )and their values. Fromthis dictionary specific \nidentifier can be accessed by using the identifier as the key.\nxFrom the output it is evident that though we do not get any error,\nthe manipulation of variables a, b, cdoes not become effectiveas \nwe are manipulating the copy.\n____________________________________________________________________\n[A]State whether the following statements are True or False:\n(a)Symbol table consists of information about each identifier used in \nour program.\n(b)An identifier with global scope can be used anywhere in the \nprogram.\n(c)It is possible to define a function within another function.\n(d)If a function is nested inside another function then variables \ndefined in outer function are available to inner function.\n--- Page 242 ---\n226 Let Us Python", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_326", "chunk_strategy": "fixed_size"}}, {"text": "(d)If a function is nested inside another function then variables \ndefined in outer function are available to inner function.\n--- Page 242 ---\n226 Let Us Python\n(e)If a nested function creates a variable with same nameas the one in \nthe outer function, then the two variables are treated as same \nvariable.\n(f)An inner function can be called from outside the outer function.\n(g) If a function creates a variable by the same name as the one that \nexists in global scope, then the function's variable will shadow out \nthe global variable.\n(h)Variables defined at global scope are available to all the functions \ndefined in the program.\n[B]Answer the followingquestions:\n(a)What is the difference between the functionlocals( )&globals( )?\n(b)Would the output of the following print statements be same or \ndifferent?\na = 20\nb = 40\nprint(globals( ))\nprint(locals( ))\n(c)Which different scopes can an identifier have?\n(d)Which is the most liberal scope that an identifier can have?\n--- Page 243 ---", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_327", "chunk_strategy": "fixed_size"}}, {"text": "different?\na = 20\nb = 40\nprint(globals( ))\nprint(locals( ))\n(c)Which different scopes can an identifier have?\n(d)Which is the most liberal scope that an identifier can have?\n--- Page 243 ---\nLet UsPython\n227Classes and \nObjects\nxProgramming Paradigms xClass Variables & Methods\nxWhat are Classes and Objects? xvars( )and dir( )Functions\nxClasses and Objects in Programming xMore vars( )and dir( )\nxUser-defined Classes xPrograms\nxAccess Convention xExercises\nxObject Initialization18\n\u201cWorld is OO, you too should be... \u201d\n--- Page 244 ---\n228 Let Us Python\nProgramming Paradigms\nxParadigm means the principle according to which a program is \norganized to carry out a given task.\nxPython supports three programming paradigms \u2014Structured\nprogramming, Functional Programming and Object-oriented \nprogramming(OOP). We had a brief introduction to these paradigms \nin Chapter 1.\nWhat are Classes and Objects?\nxWorld is object oriented. It is full of objects like Sparrow, Rose, \nGuitar, Keyboard, etc.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_328", "chunk_strategy": "fixed_size"}}, {"text": "in Chapter 1.\nWhat are Classes and Objects?\nxWorld is object oriented. It is full of objects like Sparrow, Rose, \nGuitar, Keyboard, etc.\nxEach object is a specific instance of a class. For example, Sparrow is a \nspecific instance of a Bird class or Rose is a specific instance of a \nFlower class.\nxMore examples of classes and objects in real life:\nBird is a class. Sparrow, Crow, Eagle are objects of Bird class.\nPlayer is a class. Sachin, Rahul, Kapil are objects of Player class.\nFlower is a class. Rose, Lily, Gerbera are objects of Flower class.\nInstrument is a class. Sitar, Flute are objects of Instrument class.\nxA class describes two things \u2014the form an object created from it will \ntake and functionality it will have. For example, a Bird class may \nspecify the form in terms of weight, color, number of feathers, etc. \nand functionality in terms of flying, hopping, chirping, eating, etc.\nxThe form is often termed asproperties and the functionality is often", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_329", "chunk_strategy": "fixed_size"}}, {"text": "and functionality in terms of flying, hopping, chirping, eating, etc.\nxThe form is often termed asproperties and the functionality is often \ntermed as methods.A class lets us bundle data and functionality \ntogether.\nxWhen objects like Sparrow or Eagle are created from the Bird class \nthe properties will have values. The methods can either access or \nmanipulate these values. For example, the property weight will have \nvalue 250 grams for a Sparrow object, but 10 Kg for an Eagle object. \nxThus class is generic in nature, whereas an object is specific in \nnature. \n--- Page 245 ---\nChapter18: Classesand Objects 229\nxMultiple objects can be created from a class. The process of creation \nof an object from a class is called instantiation. \nClasses and Objects in Programming\nxIn Python every type is a class. So int, float, complex , bool, str, list, \ntuple, set, dictare all classes. \nxA class has a name, whereas objects are nameless. Since objects do", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_330", "chunk_strategy": "fixed_size"}}, {"text": "xIn Python every type is a class. So int, float, complex , bool, str, list, \ntuple, set, dictare all classes. \nxA class has a name, whereas objects are nameless. Since objects do \nnot have names, they are referred using their addresses in memory.\nxWhen we use a simple statement num = 10, a nameless object of \ntype intis created in memory and its address is stored in num. Thus \nnumrefers to or points to the nameless object containing value 10.\nxHowever, instead of saying that numrefers to a nameless intobject, \noften for sake of convenience, it is said that numis an intobject.\nxMore programmatic examples of classes and objects:\na = 3.14 # a is an object of float class\ns = 'Sudesh' # s is an object of str class\nlst = [10, 20, 30] # lst is an object of list class\ntpl = ('a', 'b', 'c') # tpl is an object of tuple class\nxDifferent objects of a particular type may contain different data, but \nsame methods. Consider the code snippet given below. \ns1 = 'Rupesh' # s1 is object of type str", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_331", "chunk_strategy": "fixed_size"}}, {"text": "xDifferent objects of a particular type may contain different data, but \nsame methods. Consider the code snippet given below. \ns1 = 'Rupesh' # s1 is object of type str\ns2 = 'Geeta' # s2 is object of type str\nHere s1and s2both are strobjects containing different data, but \nsame methods like upper( ), lower( ), capitalize( ), etc.\nxThe specific data in an object is often called instancedataor\npropertiesof the object orstateof the object or attributesof the \nobject. Methods in an object are called instance methods.\nUser-defined Classes\nxIn addition to providing ready-made classeslike int, str, list, tuple, \netc., Python permits us to define our own classes and create objects \nfrom them.\n--- Page 246 ---\n230 Let Us Python\nxTheclasses that we define are called user-defined data types. Rules \nfor defining and using auser-defined class and astandard classare \nsame.\nxLet us define a user-defined class Employee.\nclass Employee :\ndef set_data(self, n, a, s) :\nself.name = n \nself.age = a", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_332", "chunk_strategy": "fixed_size"}}, {"text": "for defining and using auser-defined class and astandard classare \nsame.\nxLet us define a user-defined class Employee.\nclass Employee :\ndef set_data(self, n, a, s) :\nself.name = n \nself.age = a \nself.salary = s\ndef display_data(self) :\nprint(self.name, self.age, self.salary)\ne1 = Employee( )\ne1.set_data('Ramesh', 23, 25000)\ne1.display_data( )\ne2 = Employee( )\ne2.set_data('Suresh', 25, 30000)\ne2.display_data( )\nxThe Employeeclass contains two methods set_data( )and \ndisplay_data( )which are used to set and display data present in \nobjects created from Employee class.\nxTwo nameless objects get created through the statements:\ne1 = Employee( )\ne2 = Employee( )\nAddresses of the nameless objects are stored in e1and e2.\nxIn principle both the nameless objects should contain instance data \nname, age, salaryand instance methods set_data( ) and \ndisplay_data( ).\nxIn practice each object has its own instance data name, ageand \nsalary , whereas the methods set_data( )and display_data( )are", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_333", "chunk_strategy": "fixed_size"}}, {"text": "name, age, salaryand instance methods set_data( ) and \ndisplay_data( ).\nxIn practice each object has its own instance data name, ageand \nsalary , whereas the methods set_data( )and display_data( )are \nshared amongst objects. \nxInstance data is not shared since instance data values would be \ndifferent from one object to another (Refer Figure 18.1).\n--- Page 247 ---\nChapter18: Classesand Objects 231\n3372000034020680\n34020680Ramesh\n23\n25000e1nameless object\n33720000Suresh\n25\n30000e2nameless objectset_data( )\ndisplay_data( )Shared copy of\ninstance methods\nFigure 18.1\nxThe syntax to call an object's methodis object.method( ),as in \ne1.display_data( ). \nxWhenever we call an instance method using an object, address of \nthe object gets passed to the method implicitly. This address is \ncollected by the instance method in a variable called self. \nxThus,whene1.set_data('Ramesh', 23, 25000)calls the instance \nmethod set_data( ), first parameter passed to itis the address of", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_334", "chunk_strategy": "fixed_size"}}, {"text": "collected by the instance method in a variable called self. \nxThus,whene1.set_data('Ramesh', 23, 25000)calls the instance \nmethod set_data( ), first parameter passed to itis the address of \nobject, followed by values 'Ramesh', 23, 25000.\nxWithin set_data( )selfcontains the address of first object. Likewise, \nwhen set_data( )is called using e2, selfcontains address of the \nsecond object.\nxUsing address of the objectpresent in selfwe indicate which object's \ninstance data we wish to work with. To do this we prepend the \ninstance data with self. , asin self.name, self.age andself.salary.\nxselfis like thispointer of C++ or thisreference of Java. In place of \nselfany other variable name can be used.\nAccess Convention\nxWe have accessed instance methods set_data( ) and display_data( ) \nfrom outside the class. Even instance data name, age and salary are \naccessible from outside the class. Thus, following statements would \nwork:\ne3 = Employee( )\n--- Page 248 ---\n232 Let Us Python", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_335", "chunk_strategy": "fixed_size"}}, {"text": "from outside the class. Even instance data name, age and salary are \naccessible from outside the class. Thus, following statements would \nwork:\ne3 = Employee( )\n--- Page 248 ---\n232 Let Us Python\ne3.name = 'Rakesh'\ne3.age = 25\nxHowever, it is a good idea to keep data in a class inaccessible from \noutside the class and access it only through member functions of the \nclass.\nxThere is no mechanism or keyword available in Python to enforce \nthis. Hence a convention is used to start the instance data identifiers \nwith two leading underscores(often called dunderscore, short for \ndouble underscore). Example: __name, __ageand __salary .\nObject Initialization\nxThere are two ways to initializean object:\nMethod 1 : Using methods like get_data( )/ set_data( ).\nMethod 2 : Using special method __init__( )\nxget_data( ) can receive data from keyboard into instance data \nvariables.set_data( )can set up instance data with a values that it \nreceives.The benefitof this method is that the data remains", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_336", "chunk_strategy": "fixed_size"}}, {"text": "xget_data( ) can receive data from keyboard into instance data \nvariables.set_data( )can set up instance data with a values that it \nreceives.The benefitof this method is that the data remains \nprotected from manipulation from outside the class.\nxThe benefit of initializing an object using the special method \n__init__( )is that it guaranteesinitialization, since __init__( ) is \nalways calledwhen an object is created.\nxFollowing program illustrates both these methods:\nclass Employee :\ndef set_data(self, n, a, s) :\nself.__name = n \nself.__age = a \nself.__salary = s\ndef display_data(self) :\nprint(self.__name, self.__age, self.__salary)\ndef __init__(self, n = ' ', a = 0, s = 0.0) :\nself.__name = n \nself.__age = a \nself.__salary = s\ndef __del__(self) :\n--- Page 249 ---\nChapter18: Classesand Objects 233\nprint('Deleting object' + str(self))\ne1= Employee( )\ne1.set_data('Suresh', 25, 30000)\ne1.display_data( )\ne2 = Employee('Ramesh', 23, 25000)\ne2.display_data( )\ne1 = None\ne2 = None", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_337", "chunk_strategy": "fixed_size"}}, {"text": "print('Deleting object' + str(self))\ne1= Employee( )\ne1.set_data('Suresh', 25, 30000)\ne1.display_data( )\ne2 = Employee('Ramesh', 23, 25000)\ne2.display_data( )\ne1 = None\ne2 = None\nOn execution of this program, we get the following output:\nRamesh 23 25000\nSuresh 25 30000\nDeleting object<__main__.Employee object at 0x013F6810>\nDeleting object<__main__.Employee object at0x013F65B0>\nxThe statements\ne1 = Employee( )\ne2 = Employee('Ramesh', 23, 25000)\ncreate two objects which are referred by e1and e2.In both cases \n__init__( )is called.\nxWheneveran object is created, space is allocated for it in memory \nand __init__( )is called. So address of object is passed to __init__( ).\nx__init__( )'s parameters can take default values. In our program they \nget used while creating object e2.\nx__init__( )doesn't return any value. \nxIf we do not define __init__( ), then Python inserts a default \n__init__( )method in our class.\nx__init__( )is called only once during entire lifetime of an object.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_338", "chunk_strategy": "fixed_size"}}, {"text": "xIf we do not define __init__( ), then Python inserts a default \n__init__( )method in our class.\nx__init__( )is called only once during entire lifetime of an object.\nxA class may have __init__( )as well as set_data( ).\n__init__( ) \u2013To initialize object.\nset_data( ) \u2013To modify an already initialized object.\nx__del__( ) method gets called automatically when an object goes \nout of scope. Cleanup activity, if any, should be done in __del__( ).\n--- Page 250 ---\n234 Let Us Python\nx__init__( )method is similar to constructor function of C++ / Java.\nx__del__( )is similar to destructor function of C++.\nClass Variables and Methods\nxIf we wish to share a variable amongst all objects of a class, we must \ndeclare the variable as a class variableor class attribute.\nxTo declare a class variable, we have to create a variable without \nprepending it with self.\nxClass variables do not become part of objects of a class. \nxClass variables are accessed using the syntax classname.varname.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_339", "chunk_strategy": "fixed_size"}}, {"text": "prepending it with self.\nxClass variables do not become part of objects of a class. \nxClass variables are accessed using the syntax classname.varname. \nxContrasted with instance methods, class methods do not receive a \nselfargument.\nxClass methods can be accessed using the syntax \nclassname.methodname( ).\nxClass variables can be used to count how many objects have been \ncreated from a class.\nxClass variables and methods are like static members in C++ / Java.\nvars( )and dir( )Functions\nxThere are two useful built-infunctions vars( )and dir( ). Of these, \nvars( ) returns a dictionary of attributes and their values, whereas \ndir( )returns a list of attributes. \nxGiven below is the sample usage of these functions:\nimport math # standard module\nimport functions # some user-defined module\na= 125\ns = 'Spooked'\nprint(vars( )) # prints dict of attributesin current module \n# including a and s\nprint(vars(math)) # prints dict of attributesin math module", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_340", "chunk_strategy": "fixed_size"}}, {"text": "a= 125\ns = 'Spooked'\nprint(vars( )) # prints dict of attributesin current module \n# including a and s\nprint(vars(math)) # prints dict of attributesin math module\nprint(vars(functions))# prints dict of attributes in functions module\nprint(dir( )) # prints list of attributes in current module \n# including a and s\n--- Page 251 ---\nChapter18: Classesand Objects 235\nprint(dir(math)) # prints list of attributes in math module\nprint(dir(functions))# prints list of attributes in functions module\nMorevars( )and dir( ) \nxBoth the built-in functions can be used with a class as well as an \nobject as shown in the following program.\nclass Fruit :\ncount = 0 \ndef __init__(self, name = ' ', size = 0, color = ' ') :\nself.__name = name\nself.__size = size \nself.__color = color \nFruit.count += 1\ndef display( ) :\nprint(Fruit.count)\nf1 = Fruit('Banana', 5, 'Yellow')\nprint(vars(Fruit))\nprint(dir(Fruit))\nprint(vars(f1))\nprint(dir(f1))\nOn execution of this program, we get the following output:", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_341", "chunk_strategy": "fixed_size"}}, {"text": "def display( ) :\nprint(Fruit.count)\nf1 = Fruit('Banana', 5, 'Yellow')\nprint(vars(Fruit))\nprint(dir(Fruit))\nprint(vars(f1))\nprint(dir(f1))\nOn execution of this program, we get the following output:\n{... ... ... , 'count': 0, '__init__': <function Fruit.__init__>, \n'display': <function Fruit.display at 0x7f290a00f598>, ... ... ... }\n[ ... ... ... '__init__', 'count', 'display']\n{'_name': 'Banana', '_size': 5, '_color': 'Yellow'}\n[... ... ... '__init__', '_color', '_name', '_size', 'count', 'display']\nxWhen used with class, vars( )returns a dictionary of the class's \nattributes and their values. On the other hand the dir( )function \nmerely returns a list of its attributes.\nxWhen used with object, vars( )returns a dictionary of the object's \nattributes and their values. In addition, it also returns the object's \nclass's attributes, and recursively the attributes of its class's base \nclasses.\n--- Page 252 ---\n236 Let Us Python", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_342", "chunk_strategy": "fixed_size"}}, {"text": "attributes and their values. In addition, it also returns the object's \nclass's attributes, and recursively the attributes of its class's base \nclasses.\n--- Page 252 ---\n236 Let Us Python\nxWhen used with object, dir( )returns a list of the object's attributes, \nobject's class's attributes,and recursively the attributes of its class's \nbase classes.\n____________________________________________________________________\nProblem 18.1\nWrite a class called Numberwhich maintains an integer. It should have \nfollowing methods in it to perform various operations on the integer:\nset_number(self, n) # sets n into int\nget_number(self) # return current value of int\nprint_number(self) # prints the int\nisnegative(self) # checks whether int is negative\nisdivisibleby(self, n) # checks whether int is divisible by n\nabsolute_value(self) # returns absolute value of int\nProgram\nclass Number :\ndef set_number(self, n) :\nself.__num = n \ndef get_number(self) :\nreturn self.__num\ndef print_number(self) :", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_343", "chunk_strategy": "fixed_size"}}, {"text": "absolute_value(self) # returns absolute value of int\nProgram\nclass Number :\ndef set_number(self, n) :\nself.__num = n \ndef get_number(self) :\nreturn self.__num\ndef print_number(self) :\nprint(self.__num)\ndef isnegative(self) :\nif self.__num < 0 : \nreturn True \nelse :\nreturn False ;\ndef isdivisibleby(self, n) :\nif n == 0 : \nreturn False\nif self.__num % n == 0 : \nreturn True\nelse :\nreturn False \n--- Page 253 ---\nChapter18: Classesand Objects 237\ndef absolute_value(self) :\nif self.__num >= 0 : \nreturn self.__num \nelse :\nreturn -1 * self.__num \nx = Number( )\nx.set_number(-1234) \nx.print_number( ) ;\nif x.isdivisibleby(5) == True : \nprint(\"5 divides \", x.get_number( ))\nelse :\nprint(\"5 does not divide \", x.get_number( ))\nprint(\"Absolute Value of \", x.get_number( ), \" is \", x.absolute_value( ))\nOutput\n-1234\n5 does not divide -1234\nAbsolute Value of -1234 is 1234\n____________________________________________________________________\nProblem 18.2", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_344", "chunk_strategy": "fixed_size"}}, {"text": "Output\n-1234\n5 does not divide -1234\nAbsolute Value of -1234 is 1234\n____________________________________________________________________\nProblem 18.2\nWrite a program to create a class called Fruitwith attributes sizeand \ncolor. Create multiple objects of this class. Report how many objects \nhave been created from the class.\nProgram\nclass Fruit :\ncount = 0 \ndef __init__(self, name = ' ', size = 0, color = ' ') :\nself.__name = name\nself.__size = size \nself.__color = color \nFruit.count += 1\ndef display( ) :\nprint(Fruit.count)\nf1 = Fruit('Banana', 5, 'Yellow')\nf2 = Fruit('Orange', 4, 'Orange')\n--- Page 254 ---\n238 Let Us Python\nf3 = Fruit('Apple', 3, 'Red')\nFruit.display( )\nprint(Fruit.count)\nOutput\n3\n3\nTips\nxcountis a class attribute, not an object attribute. So it is shared \namongst all Fruitobjects.\nxIt can be initialized as count = 0, but must be accessed using \nFruit.count.\n____________________________________________________________________\nProblem 18.3", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_345", "chunk_strategy": "fixed_size"}}, {"text": "amongst all Fruitobjects.\nxIt can be initialized as count = 0, but must be accessed using \nFruit.count.\n____________________________________________________________________\nProblem 18.3\nWrite a program that determines whether two objects are of same type, \nwhether their attributes are same and whether they are pointing to \nsame object.\nProgram\nclass Complex :\ndef __init__(self, r = 0.0, i = 0.0) :\nself.__real = r\nself.__imag = i \ndef __eq__(self, other) :\nif self.__real == other.__real and self.__imag == other.__imag :\nreturn True\nelse :\nreturn False\nc1 = Complex(1.1, 0.2)\nc2 = Complex(2.1, 0.4)\nc3 = c1\nif c1 == c2 :\nprint('Attributes of c1 and c2 are same')\nelse :\n--- Page 255 ---\nChapter18: Classesand Objects 239\nprint('Attributes of c1 and c2 are different')\nif type(c1) == type(c3) :\nprint('c1 and c3 are of same type')\nelse :\nprint('c1 and c3 are of different type' )\nif c1 is c3 :\nprint('c1 and c3 are pointing to same object')\nelse :", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_346", "chunk_strategy": "fixed_size"}}, {"text": "if type(c1) == type(c3) :\nprint('c1 and c3 are of same type')\nelse :\nprint('c1 and c3 are of different type' )\nif c1 is c3 :\nprint('c1 and c3 are pointing to same object')\nelse :\nprint('c1 and c3 are pointing to different objects' )\nOutput\nAttributes of c1 and c2 are different\nc1 and c3 are of same type\nc1 and c3 are pointing to same object\nTips\nxTo compare attributes of two Complexobjects we have overloaded \nthe ==operator, by defining the function __eq__( ). Operator \noverloading is explained in detail in Chapter 19.\nxtype( ) is used to obtain the type of an object. Types can be \ncompared using the ==operator.\nxiskeyword is used to check whether c1and c3are pointing to the \nsame object.\n____________________________________________________________________\nProblem 18.4\nWrite a program to get a list of built-in functions.\nProgram\nimport builtins\nprint(dir(builtins))\nprint( )\nprint(vars(builtins))\n--- Page 256 ---\n240 Let Us Python\nOutput", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_347", "chunk_strategy": "fixed_size"}}, {"text": "Problem 18.4\nWrite a program to get a list of built-in functions.\nProgram\nimport builtins\nprint(dir(builtins))\nprint( )\nprint(vars(builtins))\n--- Page 256 ---\n240 Let Us Python\nOutput\n['ArithmeticError', 'AssertionError', 'AttributeError', ...\n'__debug__', '__doc__', '__import__', '__loader__', '__name__', ... \n'abs', 'all', 'any', 'ascii', 'bin', 'bool', 'bytearray', 'bytes', 'callable', 'chr', ... \n'sum', 'super', 'tuple', 'type', 'vars', 'zip']\n{'__name__': 'builtins', '__package__': '', '__loader__': <class \n'_frozen_importlib.BuiltinImporter'>, 'abs': <built-in function abs>, \n'all': <built-in function all>, 'any': <built-in function any>, ... 'False': False}\nTips\nxIn the output above only partial items of dictionary and list is being \ndisplayed. The actual output is much more exhaustive.\n____________________________________________________________________\nProblem 18.5\nSuppose we have defined two functions msg1( )and msg2( )in main", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_348", "chunk_strategy": "fixed_size"}}, {"text": "displayed. The actual output is much more exhaustive.\n____________________________________________________________________\nProblem 18.5\nSuppose we have defined two functions msg1( )and msg2( )in main \nmodule. What will be the output of vars( )and dir( )on the current \nmodule? How will you obtain the list of names which are present in both \noutputs, those which are unique to either list?\nProgram\ndef msg1( ) :\nprint('Wright Brothers are responsible for 9/11 too')\ndef msg2( ) :\nprint('Cells divide to multiply')\nd = vars( )\nl = dir( )\nprint(sorted(d.keys()))\nprint(l)\nprint(d.keys( ) -l)\nprint(l -d.keys( ))\n--- Page 257 ---\nChapter18: Classesand Objects 241\nOutput\n['__annotations__', '__builtins__', '__cached__', '__doc__', '__file__', \n'__loader__', '__name__', '__package__', '__spec__', 'd','l', 'msg1', \n'msg2']\n['__annotations__', '__builtins__', '__cached__', '__doc__', '__file__', \n'__loader__', '__name__', '__package__', '__spec__', 'd', 'msg1', 'msg2']\n{'l'}\nset( )\nTips", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_349", "chunk_strategy": "fixed_size"}}, {"text": "'msg2']\n['__annotations__', '__builtins__', '__cached__', '__doc__', '__file__', \n'__loader__', '__name__', '__package__', '__spec__', 'd', 'msg1', 'msg2']\n{'l'}\nset( )\nTips\nxset( )shown in the output means an empty set. It means there is \nnothing in lthat is not present in d.\n____________________________________________________________________\nProblem 18.6\nIs there any difference in the values returned by the functions dir( )and \nvars(..).keys( )? If yes, write a program to obtain that difference?\nProgram\ns = set(dir(list)).difference(vars(list).keys( ))\nprint(s)\nOutput\n{'__class__', '__setattr__', '__format__', '__init_subclass__', \n'__subclasshook__', '__delattr__', '__dir__', '__reduce__', \n'__reduce_ex__', '__str__'}\nTips\nxdir(list) will return a list of attributes of listtype.\nxvars(list).keys( ) returns a list of keys from the dictionary returned \nby vars( )for the listtype.\nxdifferernce( ) returns the difference between the two lists.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_350", "chunk_strategy": "fixed_size"}}, {"text": "xvars(list).keys( ) returns a list of keys from the dictionary returned \nby vars( )for the listtype.\nxdifferernce( ) returns the difference between the two lists.\n____________________________________________________________________\n--- Page 258 ---\n242 Let Us Python\n[A]State whether the following statements are True or False:\n(a)Class attributes and object attributes are same.\n(b)A class data member is useful when all objects of the same class \nmust share a common item of information.\n(c)If a class has a data member and three objects are created from this \nclass, then each object would have its own data member.\n(d)A class can have class data as well as class methods.\n(e)Usually data in a class is kept private and the data is accessed / \nmanipulated through object methods of the class.\n(f)Member functions of an object have to be called explicitly, whereas, \nthe __init__( )method gets called automatically.\n(g) A constructor gets called whenever an object gets instantiated.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_351", "chunk_strategy": "fixed_size"}}, {"text": "(f)Member functions of an object have to be called explicitly, whereas, \nthe __init__( )method gets called automatically.\n(g) A constructor gets called whenever an object gets instantiated.\n(h)The __init__( )method never returns a value.\n(i)When an object goes out of scope, its __del__( )method gets called \nautomatically.\n(j)The selfvariable always contains the address of the object using \nwhich the method/data is being accessed.\n(k)The selfvariable can be used even outside the class.\n(l)The __init__( )method gets called only once during the lifetime of \nan object.\n(m)By default, instance data and methods in a class are public.\n(n)In a class twoconstructors can coexist \u2014a 0-argument constructor \nand a 2-argument constructor.\n[B]Answer the followingquestions:\n(a)Whichmethods in a class act as constructor?\n--- Page 259 ---\nChapter18: Classesand Objects 243\n(b)How many object are created in the following code snippet?\na = 10\nb = a\nc = b", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_352", "chunk_strategy": "fixed_size"}}, {"text": "(a)Whichmethods in a class act as constructor?\n--- Page 259 ---\nChapter18: Classesand Objects 243\n(b)How many object are created in the following code snippet?\na = 10\nb = a\nc = b\n(c)What is the difference between variables, ageand __age?\n(d)What is the difference between the function vars( )and dir( )?\n(e)In the following code snippetwhat is the difference between \ndisplay( )and show( )?\nclass Message :\ndef display(self, msg) :\npass\ndef show(msg) :\npass\n(f)In the following code snippet what is the difference between \ndisplay( )and show( )? \nm = Message( )\nm.display('Hi and Bye' )\nMessage.show('Hi and Bye' )\n(g) How many parameters are being passed to display( )in the \nfollowing code snippet: \nm = Sample( )\nm.display(10, 20, 30)\n[C]Attempt the following questions:\n(a)Write a program to create a class that represents Complex numbers \ncontaining real and imaginary parts and then use it to perform \ncomplex number addition, subtraction, multiplication and division.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_353", "chunk_strategy": "fixed_size"}}, {"text": "(a)Write a program to create a class that represents Complex numbers \ncontaining real and imaginary parts and then use it to perform \ncomplex number addition, subtraction, multiplication and division.\n(b)Write a program that implements a Matrixclass and performs \naddition, multiplication, and transpose operations on 3 x 3 matrices.\n(c)Write a program to create a class that can calculate the surface area \nand volume of a solid. The class should also have a provision to \naccept the data relevant to the solid.\n--- Page 260 ---\n244 Let Us Python\n(d)Write a program to create a class that can calculate the perimeter / \ncircumference and area of a regular shape. The class should also \nhave a provision to accept the data relevant to the shape.\n(e)Write a program that creates and uses a Timeclass to perform \nvarious time arithmetic operations.\n(f)Write a program to implement a linked list data structure by creating \na linked list class. Each node in the linked list should contain name of", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_354", "chunk_strategy": "fixed_size"}}, {"text": "various time arithmetic operations.\n(f)Write a program to implement a linked list data structure by creating \na linked list class. Each node in the linked list should contain name of \nthe car, its price and a link to the next node. \n[D]Match the following pairs:\na. dir( ) 1. Nested packages\nb. vars( ) 2. Identifiers, their type & scope\nc. Variables in a function 3. Returns dictionary\nd. import a.b.c 4. Local namespace\ne. Symbol table 5. Returns list\nf. Variables outside all functions6. Global namespace\n--- Page 261 ---\nLet UsPython\n245Intricacies of \nClasses & Objects\nxIdentifier Naming Convention xImitating a Structure\nxCalling Functions and Methods xType Conversion\nxOperator Overloading xPrograms\nxWhich Operators to Overload? xExercises\nxEverything is an Object19\n\u201cIt's the detail that matters... \u201d\n--- Page 262 ---\n246 Let Us Python\nIdentifier Naming Convention\nxWe have created identifiers for many things \u0376normal variables,", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_355", "chunk_strategy": "fixed_size"}}, {"text": "xEverything is an Object19\n\u201cIt's the detail that matters... \u201d\n--- Page 262 ---\n246 Let Us Python\nIdentifier Naming Convention\nxWe have created identifiers for many things \u0376normal variables, \nfunctions, classes, instance data, instance methods, class data and \nclass methods. \nxIt is a good idea to follow the following convention whilecreating \nidentifiers:\n(a)All variables and functions not belonging to a class -Start with a \nlowercase alphabet.\nExample: real, imag, name, age, salary, printit( ), display( )\n(b)Variableswhich are to be used and discarded -Use _.\nEx: for _ in [10, 20, 30, 40] : print(_)\n(c)Class names -Start with an uppercasealphabet.\nExample:Employee, Fruit, Bird, Complex, Tool, Machine\n(d)Private identifiers, i.e. identifiers which we want should be \naccessed only from within the class in which they are declared -\nStart withtwoleading underscores.\nExample: __name, __age, __get_errors( )\n(e)Protected identifiers, i.e. identifiers which we want should be", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_356", "chunk_strategy": "fixed_size"}}, {"text": "Start withtwoleading underscores.\nExample: __name, __age, __get_errors( )\n(e)Protected identifiers, i.e. identifiers which we want should be \naccessed only from within the class in which they are declared \nor from the classes that are derived from the class using a \nconcept called inheritance (discussed in Chapter 20) -Start with \none leading underscore.\nExample:_address, _maintain_height( )\n(f)Publicidentifiers, i.e. identifiers which we want should be \naccessed only from within the class or from outside it -Start \nwitha lowercase alphabet.\nExample:neighbour, displayheight( )\n(g) Language-defined special names -Start and end with two __.\nExample:__init__( ), __del__( ), __add__( ), __sub__( )\nD\u017d\u0176\ue001\u019a call \u019ahe\u0190e \u0175e\u019ah\u017dd\u0190\ue002 The\u01c7 a\u018ce \u019ahe \u0175e\u019ah\u017dd\u0190 \u019aha\u019a P\u01c7\u019ah\u017d\u0176 \ncalls.\n--- Page 263 ---\nChapter19: Intricacies of Classesand Objects 247\n(h)Unlike C++and Java, Python does not have keywords private, \nprotectedor public to mark the attributes. So if above", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_357", "chunk_strategy": "fixed_size"}}, {"text": "calls.\n--- Page 263 ---\nChapter19: Intricacies of Classesand Objects 247\n(h)Unlike C++and Java, Python does not have keywords private, \nprotectedor public to mark the attributes. So if above \nconventions are followed diligently, the identifier name itself \ncan convey how you wish it to be accessed. \nCalling Functions and Methods\nxConsider the program given below. It contains a global function \nprintit()which does not belong to any class,an instance method \ncalled display( )and a class method called show( ). \ndef printit( ) : # global function\nprint('Opener')\nclass Message :\ndef display(self, msg) : # instance method\nprintit( )\nprint(msg)\ndef show( ) : # class method\nprintit( )\nprint('Hello')\n# display( ) # this call will result in an error\nprintit( ) # call global function\nm = Message( )\nm.display('Good Morning') # call instance method\nMessage.show( ) # call class method\nOn execution of this program, we get the following output:\nOpener\nOpener\nGood Morning\nOpener\nHello", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_358", "chunk_strategy": "fixed_size"}}, {"text": "m = Message( )\nm.display('Good Morning') # call instance method\nMessage.show( ) # call class method\nOn execution of this program, we get the following output:\nOpener\nOpener\nGood Morning\nOpener\nHello\nxClass method show( )does not receive self, whereas instance \nmethoddisplay( )does.\nxA global function printit( )can call a class method show( )and \ninstance method display( ).\n--- Page 264 ---\n248 Let Us Python\nxA class method and instance method can call a global function \nprintit( ).\nxA class method show( )cannot call an instance method display( )\nsince show( )d\u017de\u0190\u0176\ue001\u019a \u018cecei\u01c0e a selfargument. In absence of this \nargument display( )will not know which object is it supposed to \nwork with.\nxA class method and instance method can also be called from a \nmethod of another class. The syntax for doing so remains same:\nm2 = Message( )\nm2.display('Good Afternoon')\nMessage.show('Hi')\nOperator Overloading\nxSince Complexis a user-defined class, Python doesn't know how to", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_359", "chunk_strategy": "fixed_size"}}, {"text": "m2 = Message( )\nm2.display('Good Afternoon')\nMessage.show('Hi')\nOperator Overloading\nxSince Complexis a user-defined class, Python doesn't know how to \nadd objects of this class. We can teach it how to do it, by overloading \nthe + operator as shown below.\nclass Complex:\ndef __init__(self, r = 0.0, i = 0.0) :\nself.__real = r\nself.__imag = i \ndef __add__(self, other) :\nz = Complex( )\nz.__real = self.__real + other.__real \nz.__imag = self.__imag + other.__imag\nreturn z\ndef __sub__(self, other) :\nz = Complex( )\nz.__real = self.__real -other.__real \nz.__imag = self.__imag -other.__imag\nreturn z\ndef display(self) :\nprint(self.__real, self.__imag)\nc1 = Complex(1.1, 0.2)\nc2 = Complex(1.1, 0.2)\nc3 = c1 + c2\nc3.display( )\n--- Page 265 ---\nChapter19: Intricacies of Classesand Objects 249\nc4 =c1 -c2\nc4.display( )\nxTo overload the + operator we need to define __add__( )function \nwithin the Complexclass.\nxLikewise, to overload the -operator we need to define __sub__( )", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_360", "chunk_strategy": "fixed_size"}}, {"text": "c4 =c1 -c2\nc4.display( )\nxTo overload the + operator we need to define __add__( )function \nwithin the Complexclass.\nxLikewise, to overload the -operator we need to define __sub__( )\nfunction for carrying out subtraction of two Complex objects.\nxIn the expression c3 = c1 + c2, c1becomes available in self, whereas, \nc2is collected in other.\nWhich Operators to Overload?\nxGiven below is the list of operators that we can overload and their \nfunction equivalents that we need to define.\n# Arithmetic operators\n+ __add__(self, other)\n- __sub__(self, other)\n* __mul__(self, other)\n/ __truediv__(self, other)\n% __mod__(self, other)\n** __pow__(self, other)\n// __floordiv__(self, other)\n# Comparison operators\n< __lt__(self, other)\n> __gt__(self, other)\n<= __le__(self, other)\n>= __ge__(self, other)\n== __eq__(self, other)\n!= __ne__(self, other)\n# Compound Assignment operators\n= __isub__(self, other)\n+= __iadd__(self, other)\n*= __imul__(self, other)\n/= __idiv__(self, other)\n//= __ifloordiv__(self, other)", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_361", "chunk_strategy": "fixed_size"}}, {"text": "!= __ne__(self, other)\n# Compound Assignment operators\n= __isub__(self, other)\n+= __iadd__(self, other)\n*= __imul__(self, other)\n/= __idiv__(self, other)\n//= __ifloordiv__(self, other)\n%= __imod__(self, other)\n**= __ipow__(self, other)\n--- Page 266 ---\n250 Let Us Python\nxUnlike many other languages like C++, Java, etc., Python does not \nsupport function overloading. It means function names in a program, \nor method names within a class shouldbe unique. If we define two \nf\u01b5\u0176c\u019ai\u017d\u0176\u0190 \u017d\u018c \u0175e\u019ah\u017dd\u0190 b\u01c7 \u0190a\u0175e \u0176a\u0175e \u01c1e \u01c1\u017d\u0176\ue001\u019a ge\u019a a\u0176 e\u018c\u018c\u017d\u018c \u0175e\u0190\u0190age\ue003 \nbut the latest version would prevail.\nEverything is an Object\nxIn python every entity is an object. This includes int, float, bool, \ncomplex, string, list, tuple, set,dictionary, function, class, method \nand module.\nxWhen we say x = 20, a nameless object of type intis created \ncontaining a value 20 and address (location in memory) of the object \nis stored in x. xis called a reference to the intobject.\nxSame object can have multiple references. \ni = 20", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_362", "chunk_strategy": "fixed_size"}}, {"text": "containing a value 20 and address (location in memory) of the object \nis stored in x. xis called a reference to the intobject.\nxSame object can have multiple references. \ni = 20\nj = i # another reference for same int object referred to by i\nk = i # yet another reference for same object\nk = 30 \nprint (k) # will print 30, as k now points to a new int object\nprint (i, j) # will print 20 20 as i, j continue to refer to old object\nxIn the following code snippet xand yare referring to same object. \nCha\u0176gi\u0176g \u017d\u0176e d\u017de\u0190\u0176\ue001\u019a cha\u0176ge \u019ahe \u017d\u019ahe\u018c\ue002 Sa\u0175e beha\u01c0i\u017d\u018c i\u0190 \u0190h\u017d\u01c1\u0176 f\u017d\u018c \nfloat, complex, booland str types.\nx = 20\ny = 20 # x and y point to sameobject\nx = 30 # x now points to a new object\nxIn the following code snippet xand yare referring to different \nobjects. Same behavior is shown for list, tuple, set, dictionary, etc.\nx = Sample(10, 20)\ny = Sample(10, 20)\nxSome objects are mutable, someare not. Also, all objects have some \nattributes and methods.\n--- Page 267 ---", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_363", "chunk_strategy": "fixed_size"}}, {"text": "x = Sample(10, 20)\ny = Sample(10, 20)\nxSome objects are mutable, someare not. Also, all objects have some \nattributes and methods.\n--- Page 267 ---\nChapter19: Intricacies of Classesand Objects 251\nxThe type( )function returns type of the object, whereas id( )\nfunction returns location of the object in memory.\nimport math\nclass Message :\ndef display(self, msg):\nprint(msg)\ndef fun( ) :\nprint('Everything is an object')\ni = 45\na = 3.14\nc = 3 + 2j\ncity = 'Nagpur'\nlst = [10, 20, 30]\ntup = (10, 20, 30, 40)\ns = {'a', 'e', 'i', 'o', 'u'}\nd = {'Ajay' : 30, 'Vijay' : 35, 'Sujay' : 36}\nprint(type(i), id(i))\nprint(type(a), id(a))\nprint(type(c), id(c))\nprint(type(city), id(city))\nprint(type(lst), id(lst))\nprint(type(tup), id(tup))\nprint(type(s), id(s))\nprint(type(d), id(d))\nprint(type(fun), id(fun))\nprint(type(Message), id(Message))\nprint(type(math), id(math))\nOn execution of this program we get the following output:\n<class 'int'> 495245808\n<class 'float'> 25154336\n<class 'complex'> 25083752", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_364", "chunk_strategy": "fixed_size"}}, {"text": "print(type(Message), id(Message))\nprint(type(math), id(math))\nOn execution of this program we get the following output:\n<class 'int'> 495245808\n<class 'float'> 25154336\n<class 'complex'> 25083752\n<class 'str'> 25343392\n<class 'list'> 25360544\n<class 'tuple'> 25317808\n<class 'set'> 20645208\n<class 'dict'> 4969744\n--- Page 268 ---\n252 Let Us Python\n<class 'function'> 3224536\n<class 'type'> 25347040\n<class 'module'> 25352448\nImitating a Structure\nxIn C if we wish to keep dissimilar but related data together we create \na structure to do so.\nxIn Python too, we can do this by creating a class that is merely a \ncollection of attributes (and not methods). \nxMoreover, unlike C++ and Java, Python permits us to add/delete/ \nmodify these attributes to a class/object dynamically.\nxIn the following program we have added 4 attributes, modified two \nattributes and deleted one attribute, all on the fly, i.e. after creation \nof Bird object.\nclass Bird :\npass\nb = Bird( )\n# create attributes dynamically", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_365", "chunk_strategy": "fixed_size"}}, {"text": "attributes and deleted one attribute, all on the fly, i.e. after creation \nof Bird object.\nclass Bird :\npass\nb = Bird( )\n# create attributes dynamically\nb.name = 'Sparrow'\nb.weight = 500\nb.color = 'light brown'\nb.animaltype = 'Vertebrate'\n# modify attributesdynamically\nb.weight = 450\nb.color = 'brown'\n# delete attributesdynamically\ndel b.animaltype\nType Conversion\nxThere are two types of conversions that we may wish to perform. \nThese are:\n(a)Conversion between different built-in types\n(b)Conversion between different built-in types and container types\n(c)Conversion between built-in and user-defined types\n--- Page 269 ---\nChapter19: Intricacies of Classesand Objects 253\nxWe are already aware of first two types of conversions,some \nexamples of which are given below:\na= float(25) # built-in to built-inconversion\nb = tuple([10, 20, 30]) # container to container conversion\nc = list('Hello') # built-in to container conversion\nd= str([10, 20, 30]) # container to built-inconversion", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_366", "chunk_strategy": "fixed_size"}}, {"text": "b = tuple([10, 20, 30]) # container to container conversion\nc = list('Hello') # built-in to container conversion\nd= str([10, 20, 30]) # container to built-inconversion\nxConversion between built-in and user-defined types:\nFollowing program illustrates how a user-defined Stringtype can be \nconvertedto built-in type int. __int__( )has been overloaded to \ncarry out conversion from strto int.\nclass String :\ndef __init__(self, s = '') :\nself.__str = s \ndef display(self) :\nprint(self.__str)\ndef __int__(self) :\nreturn int( self.__str )\ns1 =String(123) # conversion from int to String\ns1.display( )\ni = int(s1) # conversion from string to int\nprint(i)\n____________________________________________________________________\nProblem 19.1\nWrite a Python program that displays the attributes of integer, float and \nfunction objects. Also show how these attributes can be used.\nProgram\ndef fun( ):\nprint('Everything is an object')\nprint(dir(55))\nprint(dir(-5.67))\n--- Page 270 ---\n254 Let Us Python", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_367", "chunk_strategy": "fixed_size"}}, {"text": "function objects. Also show how these attributes can be used.\nProgram\ndef fun( ):\nprint('Everything is an object')\nprint(dir(55))\nprint(dir(-5.67))\n--- Page 270 ---\n254 Let Us Python\nprint(dir(fun))\nprint((5).__add__(6))\nprint((-5.67).__abs__())\nd = globals()\nd['fun'].__call__() # calls fun( )\nOutput\n['__abs__', '__add__', '__and__', '__bool__', '__ceil__', ...]\n['__abs__', '__add__', '__bool__', '__class__', '__delattr__', ...]\n['__annotations__', '__call__', '__class__', '__closure__', ... ]\n11\n5.67\nEverything is an object\nTips\nxOutput shows incomplete list of attributes of int, floatand function\nobjects. \nxFrom this list we have used the attributes __add__( )to add two \nintegers, __abs__( )to get absolute value of float and __call__( )to \ncall the function fun( ).\nxglobals( )return a dictionary representing the current global symbol \ntable. From this dictionary we have picked the object representing \nthe funfunction and used it to call __call__( ). This results into call to \nfun( ).", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_368", "chunk_strategy": "fixed_size"}}, {"text": "table. From this dictionary we have picked the object representing \nthe funfunction and used it to call __call__( ). This results into call to \nfun( ).\n____________________________________________________________________\nProblem 19.2\nCreate a class Datethat has a list containing day, month and year\nattributes. Define an overloaded ==operator to compare two Date\nobjects.\nProgram\nclassDate:\ndef__init__(self,d,m,y):\nself.__day, self.__mth, self.__yr=d, m, y\ndef__eq__(self,other):\n--- Page 271 ---\nChapter19: Intricacies of Classesand Objects 255\nifself.__day==other.__dayand self.__mth==other.__mthand\nself.__yr==other.__yr:\nreturnTrue\nelse:\nreturnFalse\nd1=Date(17,11,98)\nd2=Date(17,11,98)\nd3=Date(19,10,92)\nprint(id(d1))\nprint(id(d2))\nprint(d1 ==d3)\nOutput\n44586224\n44586256\nFalse\nTips\nxids of the two objects referred by d1and d2are different. This \nmeans that they are referring to two different objects.\nxTo overload the == operator in the Dateclass, we need to define the \nfunction __eq__( ).", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_369", "chunk_strategy": "fixed_size"}}, {"text": "means that they are referring to two different objects.\nxTo overload the == operator in the Dateclass, we need to define the \nfunction __eq__( ).\n____________________________________________________________________\nProblem 19.3\nCreate a class Weatherthat has a list containing weather parameters. \nDefine an overloaded inoperator that checks whether an item is present \nin the list. \nProgram\nclass Weather :\ndef __init__(self) :\nself.__params = [ 'Temp', 'Rel Hum', 'Cloud Cover', 'Wind Vel']\ndef __contains__(self, p) :\nreturn True if p in self.__params else False\nw = Weather( )\n--- Page 272 ---\n256 Let Us Python\nif 'Rel Hum' in w :\nprint('Valid weather parameter')\nelse :\nprint('Invalid weather parameter')\nOutput\nValid weather parameter\nTips\nxTo overload the inoperator we need to define the function \n__contains__( ).\n____________________________________________________________________\n[A]State whether the following statements are True or False:", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_370", "chunk_strategy": "fixed_size"}}, {"text": "__contains__( ).\n____________________________________________________________________\n[A]State whether the following statements are True or False:\n(a)A global function can call a class method as well as an instance \nmethod.\n(b)In Python a function,class,method and module are treated as \nobjects.\n(c)Given an object, it is possible to determine its type and address.\n(d)It is possible to delete attributes of an object during execution of \nthe program.\n(e)Arithmetic operators, Comparison operatorsand Compound \nassignment operatorscan be overloaded in Python.\n(f)The + operator has been overloaded in the classes str, listand int.\n[B]Answer the followingquestions:\n(a)Which functions should be defined to overload the +, -, / and // \noperators?\n(b)How many objects are created by lst = [10, 10, 10, 30]?\n--- Page 273 ---\nChapter19: Intricacies of Classesand Objects 257\n(c)How will you define a structure Employeecontaining the attributes \nName, Age, Salary, Address, Hobbies dynamically?", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_371", "chunk_strategy": "fixed_size"}}, {"text": "--- Page 273 ---\nChapter19: Intricacies of Classesand Objects 257\n(c)How will you define a structure Employeecontaining the attributes \nName, Age, Salary, Address, Hobbies dynamically?\n(d)To overload the + operator, which method should be defined in the \ncorresponding class?\n(e)To overload the % operator, which method should be defined in the \ncorresponding class?\n(f)To overloadthe //= operator, which method should be defined in \nthe corresponding class?\n(g) If a class contains instance methods __ge__( )and __ne__( ), what \ndo they signify?\n(h)What conclusion can be drawn ifthe following statements work?\na = (10, 20) + (30, 40)\nb = 'Good' + 'Morning'\nc = [10, 20, 30] + [40, 50, 60]\n(i)What will be the output of the following code snippet?\na = (10, 20) -(30, 40)\nb = 'Good' -'Morning'\nc = [10, 20, 30] -[40, 50, 60]\n(j)Will the following statement work? What is your conclusion if it \nworks?\nprint ( 'Hello' * 7)\n(k)Which out of +, -and * have been overloaded in strclass?", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_372", "chunk_strategy": "fixed_size"}}, {"text": "c = [10, 20, 30] -[40, 50, 60]\n(j)Will the following statement work? What is your conclusion if it \nworks?\nprint ( 'Hello' * 7)\n(k)Which out of +, -and * have been overloaded in strclass?\n(l)When would the method __truediv__( )defined in the Sample class \nshown below would get called?\nclass Sample :\ndef __truediv__(self, other) :\npass\n(m)If != operators has been overloaded in a class then the expression\nc1 <= c2would get converted into which function call?\n--- Page 274 ---\n258 Let Us Python\n(n)How will you define the overloaded * operator for the following \ncode snippet?\nc1 = Complex(1.1, 0.2)\nc2 = Complex(1.1, 0.2)\nc3 = c1 *c2\n(o)Implement a Stringclass containing the following functions:\n\ue001 Overloaded += operator function to perform string \nconcatenation.\n\ue001 Method toLower( )to convert upper case letters to lower case.\n\ue001 Method toUpper( )to convert lower case letters to upper case.\n[C]Match the following pairs:\na. Can't use as identifier name1. class name", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_373", "chunk_strategy": "fixed_size"}}, {"text": "\ue001 Method toUpper( )to convert lower case letters to upper case.\n[C]Match the following pairs:\na. Can't use as identifier name1. class name\nb. basic_salary 2. class variable\nc. CellPhone 3. keyword\nd. count 4. local variable in a function\ne. self 5. private variable\nf. _fuel_used 6. strongly private identifier\ng. __draw( ) 7. method that Python calls\nh. __iter__( ) 8. meaningful only in instance func.\n--- Page 275 ---\nLet UsPython\n259Containership\nandInheritance\nxReuse Mechanisms xFeatures of Inheritance\nxWhich to use When? xTypes of Inheritance\nxContainership xDiamond Problem\nxInheritance xAbstract Classes\nxWhat is Accessible where? xRuntime Polymorphism\nxisinstance( )and issubclass( ) xPrograms\nxThe objectclass xExercises20\n\u201cReuse, and you will benefit... \u201d\n--- Page 276 ---\n260 Let Us Python\nReuse Mechanisms\nxInstead of reinventing the same code that is already available, it \nmakes sense in reusing existing code.\nxPython permits two code reuse mechanisms:", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_374", "chunk_strategy": "fixed_size"}}, {"text": "260 Let Us Python\nReuse Mechanisms\nxInstead of reinventing the same code that is already available, it \nmakes sense in reusing existing code.\nxPython permits two code reuse mechanisms:\n(a)Containership (also called composition)\n(b)Inheritance\nxIn both mechanisms we can reuse existing classes and create new \nenhanced classes based on them. \nxWe can reuse existing classes even if their source code is not \navailable. \nWhich to use When?\nxContainershipshould be used when the two classes have a \u2018hasa\u2019 \nrelationship. For example, a College has Professors. So College \nclass's object can contain one or more Professorclass\u2019s object(s\u037f.\nxInheritance should be used when the two classes have a \u2018like a\u2019\nrelationship. Forexample, a Button is like a Window. So Buttonclass \ncan inherit features of an existing class called Window.\nContainership\nxA container can contain one or more contained objects apart from \nother data, thereby reusing contained objects.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_375", "chunk_strategy": "fixed_size"}}, {"text": "can inherit features of an existing class called Window.\nContainership\nxA container can contain one or more contained objects apart from \nother data, thereby reusing contained objects.\nxIn the following program a Departmentobject is contained in an \nEmployeeobject.\nclass Department :\ndef set_department(self) :\nself.__id = input('Enter department id: ')\nself.__name = input('Enter department name: ')\ndef display_department(self) :\nprint('Department ID is: ', self.__id)\nprint('Department Name is: ', self.__name)\nclass Employee :\n--- Page 277 ---\nChapter20: Containership and Inheritance 261\ndef set_employee(self) :\nself.__eid = input('Enter employee id: ')\nself.__ename = input('Enter employee name: ')\nself.__dobj = Department( )\nself.__dobj.set_department( )\ndef display_employee(self) :\nprint('Employee ID : ', self.__eid)\nprint('Employee Name : ', self.__ename)\nself.__dobj.display_department( )\nobj = Employee( )\nobj.set_employee( )\nobj.display_employee( )", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_376", "chunk_strategy": "fixed_size"}}, {"text": "def display_employee(self) :\nprint('Employee ID : ', self.__eid)\nprint('Employee Name : ', self.__ename)\nself.__dobj.display_department( )\nobj = Employee( )\nobj.set_employee( )\nobj.display_employee( )\nGiven below is the sample interaction with this program:\nEnter employee id: 101\nEnter employee name: Ramesh\nEnter department id: ME\nEnter department name: Mechanical Engineering\nEmployee ID : 101\nEmployee Name : Ramesh\nDepartment ID is: ME\nDepartment Name is: Mechanical Engineering\nInheritance\nxIn Inheritance a new class called derivedclass can be created to \ninherit features of an existing class called baseclass.\nxBase class is also called superclass or parentclass.\nxDerivedclass is also called subclass or childclass.\nxIn the following program Indexis the base class and NewIndexis the \nderived class. Note the definition of NewIndexclass. The mention of \nIndexwithin parentheses indicates that NewIndexis being inherited \nfrom Indexclass.\n# base class\nclass Index :\ndef __init__(self) :", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_377", "chunk_strategy": "fixed_size"}}, {"text": "derived class. Note the definition of NewIndexclass. The mention of \nIndexwithin parentheses indicates that NewIndexis being inherited \nfrom Indexclass.\n# base class\nclass Index :\ndef __init__(self) :\nself._count = 0 \n--- Page 278 ---\n262 Let Us Python\ndef display(self) :\nprint('count = ' + str(self._count))\ndef incr(self) :\nself._count += 1\n# derived class\nclass NewIndex(Index) :\ndef __init__(self) :\nsuper( ).__init__( )\ndef decr(self) :\nself._count -= 1\ni = NewIndex( )\ni.incr( )\ni.incr( )\ni.incr( )\ni.display( ) \ni.decr( )\ni.display( ) \ni.decr( )\ni.display( )\nOn execution of this program we get the following output:\ncount = 3\ncount = 2\ncount = 1\nxConstruction of an object should always proceed from base towards \nderived.\nxSo when we create the derived class object, base class __init__( )\nfollowed by derived class __init__( )should get called. The syntax \nused for calling base class constructor is super( ).__init__( ).\nxDerived class object contains all base class data. So _count is", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_378", "chunk_strategy": "fixed_size"}}, {"text": "followed by derived class __init__( )should get called. The syntax \nused for calling base class constructor is super( ).__init__( ).\nxDerived class object contains all base class data. So _count is \navailable in derived class.\nxWhen incr( ) is called using derived class object, first it is searched in \nderived class. Since it is not found here, the search is continued in \nthe base class.\n--- Page 279 ---\nChapter20: Containership and Inheritance 263\nWhat is Accessible where?\nxDerived class members can access base class members, vice versa is \nnot true.\nxThere are no keywords in Python to control access of base class \nmembers from derived class or from outside the class hierarchy. \nxInstead a convention that suggests the desired access is used while \ncreating variable names or method names. This convention is shown \nbelow:\nvar -access it from anywhere in the program\n_var -access it only from within the classor its subclass\n__var -access it only within the class", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_379", "chunk_strategy": "fixed_size"}}, {"text": "below:\nvar -access it from anywhere in the program\n_var -access it only from within the classor its subclass\n__var -access it only within the class\nxUsing _varin the class inheritance hierarchy or using __varwithin \nthe class is only a convention. If we violate it we won\u2019t get errors, \nbut it would be a bad practice to follow.\nxFollowing program shows the usage of the 3 types of variables.\nclass Base :\ndef __init__(self) :\nself.i = 10\nself._a = 3.14\nself.__s = 'Hello'\ndef display(self) :\nprint (self.i, self._a, self.__s)\nclass Derived(Base) :\ndef __init__(self) :\nsuper( ).__init__( )\nself.i = 100\nself._a = 31.44\nself.__s = 'Good Morning'\nself.j = 20\nself._b = 6.28\nself.__ss = 'Hi'\ndef display(self) :\nsuper( ).display( )\nprint (self.i, self._a, self.__s)\nprint (self.j, self._b, self.__ss)\n--- Page 280 ---\n264 Let Us Python\nbobj = Base( )\nbobj.display( )\nprint(bobj.i)\nprint(bobj._a)\nprint(bobj.__s) # causes error\ndobj = Derived( )\ndobj.display( )\nprint(dobj.i)\nprint(dobj._a)", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_380", "chunk_strategy": "fixed_size"}}, {"text": "--- Page 280 ---\n264 Let Us Python\nbobj = Base( )\nbobj.display( )\nprint(bobj.i)\nprint(bobj._a)\nprint(bobj.__s) # causes error\ndobj = Derived( )\ndobj.display( )\nprint(dobj.i)\nprint(dobj._a)\nprint(dobj.__s) # causes error\nIf we comment out the statements that would cause error, we will \nget the following output:\n10 3.14 Hello\n10\n3.14\n100 31.44 Hello\n100 31.44 Good Morning\n20 6.28 Hi\n100\n31.44\nxWhy we get error while accessing __ssvariable? Well,all __var type \nof variables get name mangled,i.e. in Base class __sbecomes \n_Base__s. Likewise, in Derivedclass __sbecomes _Derived__sand \n__ssbecomes _Derived__ss. \nxWhen in Derivedclass\u2019s Display( )method we attempt to use __s, it \nis not the data member of Base class, but a new data member of \nDerivedclass that is being used.\nisinstance( )and issubclass( )\nxisinstance( )and issubclass( )are built-infunctions.\nxisinstance(o, c)is used to check whether an object ois an instance of \na class c.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_381", "chunk_strategy": "fixed_size"}}, {"text": "Derivedclass that is being used.\nisinstance( )and issubclass( )\nxisinstance( )and issubclass( )are built-infunctions.\nxisinstance(o, c)is used to check whether an object ois an instance of \na class c.\nxissubclass(d, b) is used to check whether class dhas been derived \nfrom class b.\n--- Page 281 ---\nChapter20: Containership and Inheritance 265\nThe objectclass\nxAll classes in Python are derived from a ready-made base class called \nobject. So methods of this class are available in all classes.\nxYou can get a list of these methods using:\nprint(dir(object))\nprint(dir(Index)) # Index is derived from Object\nprint(dir(NewIndex)) # NewIndex is derived from Index\nFeatures of Inheritance\nxInheritance facilitates three things:\n(a)Inheritance of existing feature: To implement this just establish \ninheritance relationship.\n(b)Suppressing an existing feature: To implement this hide base \nclass implementation by defining same methodin derived class.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_382", "chunk_strategy": "fixed_size"}}, {"text": "inheritance relationship.\n(b)Suppressing an existing feature: To implement this hide base \nclass implementation by defining same methodin derived class.\n(c)Extending an existing feature: To implement this call base class \nmethodfrom derived class by using one of the following two \nforms:\nsuper( ).base_class_method( )\nBaseclassname.base_class_method(self) \nTypes of Inheritance\nxThere are 3 types of inheritance: \n(a)Simple Inheritance -Ex. class NewIndex derived from class Index\n(b)Multi-level Inheritance -Ex. class HODis derived from class \nProfessorwhich is derived from class Person.\n(c)MultipleInheritance -Ex. class HardwareSalesderived from two \nbase classes \u2014Productand Sales .\nxIn multiple inheritance a class is derived from 2 or more than 2 base \nclasses. This is shown in the following program:\nclass Product :\ndef __init__(self) :\nself.__title = input ('Enter title: ')\n--- Page 282 ---\n266 Let Us Python\nself.__price = input ('Enter price: ')\ndef display_data(self) :", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_383", "chunk_strategy": "fixed_size"}}, {"text": "class Product :\ndef __init__(self) :\nself.__title = input ('Enter title: ')\n--- Page 282 ---\n266 Let Us Python\nself.__price = input ('Enter price: ')\ndef display_data(self) :\nprint(self.__title, self.__price)\nclass Sales :\ndef __init__(self) :\nself.__sales_figures = [int(x) for x in \ninput('Enter sales fig: ').split( )] \ndef display_data(self) :\nprint(self.__sales_figures)\nclass HardwareItem(Product, Sales) :\ndef __init__(self) :\nProduct.__init__(self)\nSales.__init__(self)\nself.__category = input ('Enter category: ')\nself.__oem = input ('Enter oem: ')\ndef display_data(self) :\nProduct.display_data(self)\nSales.display_data(self)\nprint(self.__category, self.__oem)\nhw1 = HardwareItem( )\nhw1.display_data( )\nhw2 = HardwareItem( )\nhw2.display_data( )\nGiven below is the sample interaction with this program:\nEnter title: Bolt\nEnter price: 12\nEnter sales fig: 120 300 433\nEnter category: C\nEnter oem: Axis Mfg\nBolt 12\n[120, 300, 433]\nC Axis Mfg\nEnter title: Nut\n--- Page 283 ---", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_384", "chunk_strategy": "fixed_size"}}, {"text": "Enter title: Bolt\nEnter price: 12\nEnter sales fig: 120 300 433\nEnter category: C\nEnter oem: Axis Mfg\nBolt 12\n[120, 300, 433]\nC Axis Mfg\nEnter title: Nut\n--- Page 283 ---\nChapter20: Containership and Inheritance 267\nEnter price: 8\nEnter sales fig: 1000 2000 1800\nEnter category: C\nEnter oem: Simplex Pvt Ltd\nNut 8\n[1000, 2000, 1800]\nC Simplex Pvt Ltd\nxNote the syntax for calling __init__( )of base classes in the \nconstructor of derived class:\nProduct.__init__(self)\nSales.__init__(self)\nHere we cannot use here the syntax super.__init__( ).\nxAlso note how the input for sales figures has been received using list \ncomprehension.\nDiamond Problem\nxSuppose two classes Derived1and Derived2are derived from a base \nclass called Base using simple inheritance. Also, a new class Deris \nderived from Derived1and Derived2using multiple inheritance. This \nis known as diamond relationship.\nxIf we now construct an object of Derit will have one copy of", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_385", "chunk_strategy": "fixed_size"}}, {"text": "derived from Derived1and Derived2using multiple inheritance. This \nis known as diamond relationship.\nxIf we now construct an object of Derit will have one copy of \nmembers from the path Base -> Derived1and another copy from \nthe path Base --> Derived2. This will result in ambiguity. \nxTo eliminate the ambiguity, Python linearizes the search order in \nsuch a way that the left to right order while creatingDeris honored. \nIn our case it is Derived1, Derived2. So we would get a copy of \nmembers from the path Base --> Derived1.Following program \nshows this implementation:\nclass Base :\ndef display(self) :\nprint('In Base')\nclass Derived1(Base) :\ndef display(self) :\nprint('In Derived1')\nclass Derived2(Base) :\n--- Page 284 ---\n268 Let Us Python\ndef display(self) :\nprint('In Derived2')\nclass Der(Derived1, Derived2) :\ndef display(self) :\nsuper().display( )\nDerived1.display(self)\nDerived2.display(self)\nprint(Der.__mro__)\nd1 = Der( )\nd1.display( )", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_386", "chunk_strategy": "fixed_size"}}, {"text": "print('In Derived2')\nclass Der(Derived1, Derived2) :\ndef display(self) :\nsuper().display( )\nDerived1.display(self)\nDerived2.display(self)\nprint(Der.__mro__)\nd1 = Der( )\nd1.display( )\nOn executing the program we get the following output:\nIn Derived2\nIn Derived1\nIn Derived2\n(<class '__main__.Der'>, <class '__main__.Derived1'>, <class \n'__main__.Derived2'>, <class '__main__.Base'>, <class 'object'>)\nx__mro__gives the method resolution order. \nAbstract Classes\nxSuppose we have a Shapeclass and from it we have derived Circle\nand Rectangleclasses. Each contains a method called draw( ). \nHowever, drawing a shape doesn\u2019t make too much sense, hence we \ndo not want draw( ) of Shapeto ever get called. This can happen \nonly if we can prevent creation of object of Shapeclass. This can be \ndone as shown in the following program:\nfrom abc import ABC, abstractmethod\nclass Shape(ABC) :\n@abstractmethod\ndef draw(self) :\npass\nclass Rectangle(Shape) :\ndef draw(self) :\nprint('In Rectangle.draw')", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_387", "chunk_strategy": "fixed_size"}}, {"text": "from abc import ABC, abstractmethod\nclass Shape(ABC) :\n@abstractmethod\ndef draw(self) :\npass\nclass Rectangle(Shape) :\ndef draw(self) :\nprint('In Rectangle.draw')\nclass Circle(Shape) :\n--- Page 285 ---\nChapter20: Containership and Inheritance 269\ndef draw(self) :\nprint('In Circle.draw')\ns= Shape( )# will result in error, as Shape is abstract class\nc= Circle( )\nc.draw( )\nxA class from which an object cannot be created is called an abstract \nclass.\nxabcis a module. It stands for abstract base classes. From abcwe \nhave imported class ABCand decorator abstractmethod.\nxTo create an abstract class we need to derive it from class ABC. We \nalso need to mark draw( )as abstract method using the decorator \n@abstractmethod.\nxIf an abstract class contains only methods marked by the decorator \n@abstractmethod, it is often called an interface.\nxDecorators are discussed in Chapter 24.\nRuntimePolymorphism\nxPolymorphism means one thing existing in several different forms.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_388", "chunk_strategy": "fixed_size"}}, {"text": "@abstractmethod, it is often called an interface.\nxDecorators are discussed in Chapter 24.\nRuntimePolymorphism\nxPolymorphism means one thing existing in several different forms. \nRuntime polymorphism involves deciding at runtime which function \nfrom base class or derived class should get called. This feature is \nwidely used in C++.\nxParallel to Runtime Polymorphism, Java has a Dynamic Dispatch \nmechanism which works similarly.\nxPython is dynamically typed language, where type of any variable is \ndetermined at runtime based on its usage. Hence discussion of \nRuntime Polymorphism or Dynamic Dispatch mechanism is not \nrelevant in Python.\n____________________________________________________________________\nProblem 20.1\nDefine a class Shape. Inherit two classes Circleand Rectangle. Check \nprogrammatically the inheritance relationship between the classes. \n--- Page 286 ---\n270 Let Us Python\nCreate Shapeand Circleobjects. Report of which classes are these \nobjects instances of.\nProgram", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_389", "chunk_strategy": "fixed_size"}}, {"text": "programmatically the inheritance relationship between the classes. \n--- Page 286 ---\n270 Let Us Python\nCreate Shapeand Circleobjects. Report of which classes are these \nobjects instances of.\nProgram\nclass Shape :\npass\nclass Rectangle(Shape) :\npass\nclass Circle(Shape) :\npass\ns = Shape( )\nc = Circle( )\nprint(isinstance(s, Shape))\nprint(isinstance(s, Rectangle))\nprint(isinstance(s, Circle))\nprint(issubclass(Rectangle, Shape))\nprint(issubclass(Circle, Shape))\nOutput\nTrue\nFalse\nFalse\nTrue\nTrue\n____________________________________________________________________\nProblem 20.2\nWrite a program that uses simple inheritance between classes Base and \nDerived. If there is a method in Base class, how do you prevent it from \nbeing overridden in the Derived class?\nProgram\nclass Base :\ndef __method(self):\nprint('In Base.__method')\ndef func(self):\n--- Page 287 ---\nChapter20: Containership and Inheritance 271\nself.__method()\nclass Derived(Base):\ndef __method(self):\nprint('In Derived.__method')\nb = Base()", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_390", "chunk_strategy": "fixed_size"}}, {"text": "print('In Base.__method')\ndef func(self):\n--- Page 287 ---\nChapter20: Containership and Inheritance 271\nself.__method()\nclass Derived(Base):\ndef __method(self):\nprint('In Derived.__method')\nb = Base()\nb.func()\nd = Derived()\nd.func()\nOutput\nIn Base.__method\nIn Base.__method\nTips\nxTo prevent method from being overridden, prepend it with __. \nxWhen func( )is called using b, selfcontains address of Base class \nobject. When it is called using d, selfcontains address of Derived\nclass object. \nxIn Base class __method( )gets mangled to _Base__method( )and in \nDerivedclass it becomes _Derived__method( ). \nxWhen func( )calls__method( )from Base class, it is the \n_Base__method( )that gets called. In effect, __method( ) cannot be \noverridden. This is true, even when selfcontains address of the \nDerivedclass object.\n____________________________________________________________________\nProblem 20.3\nWrite a program that defines an abstract class called Printercontaining", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_391", "chunk_strategy": "fixed_size"}}, {"text": "Derivedclass object.\n____________________________________________________________________\nProblem 20.3\nWrite a program that defines an abstract class called Printercontaining \nan abstract method print( ).Derive from it two classes\u2014LaserPrinter\nand Inkjetprinter. Create objects of derived classes and call the print( )\nmethod using these objects, passing to it the name of the file to be \nprinted. In the print( )method simply print the filename and the class \nname to which print( )belongs.\n--- Page 288 ---\n272 Let Us Python\nProgram\nfrom abc import ABC, abstractmethod\nclass Printer(ABC) :\ndef __init__(self, n) :\nself.__name = n \n@abstractmethod\ndef print(self, docName) :\npass\nclass LaserPrinter(Printer) :\ndef __init__(self, n) :\nsuper( ).__init__(n)\ndef print(self, docName) :\nprint('>> LaserPrinter.print')\nprint('Trying to print :', docName)\nclass InkjetPrinter(Printer) :\ndef __init__(self, n) : \nsuper( ).__init__(n)\ndef print(self, docName) :\nprint('>> InkjetPrinter.print')", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_392", "chunk_strategy": "fixed_size"}}, {"text": "print('Trying to print :', docName)\nclass InkjetPrinter(Printer) :\ndef __init__(self, n) : \nsuper( ).__init__(n)\ndef print(self, docName) :\nprint('>> InkjetPrinter.print')\nprint('Trying to print :', docName)\np = LaserPrinter('LaserJet 1100')\np.print('hello1.pdf')\np = InkjetPrinter('IBM 2140') \np.print('hello2.doc')\nOutput\n>> LaserPrinter.print\nTrying to print :\nhello1.pdf\n>> InkjetPrinter.print\nTrying to print :\nhello2.doc\n____________________________________________________________________\n--- Page 289 ---\nChapter20: Containership and Inheritance 273\nProblem 20.4\nDefine an abstract class called Charactercontaining an abstract method \npatriotism( ). Define a class Actorcontaining a method style( ). Define a \nclass Personderived from Characterand Actor. Implement the method \npatriotism( )in it, and override the method style( )in it. Also define a \nnew method do_acting( )in it. Create an object of Personclass and call \nthe three methods in it.\nProgram\nfrom abc import ABC, abstractmethod", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_393", "chunk_strategy": "fixed_size"}}, {"text": "new method do_acting( )in it. Create an object of Personclass and call \nthe three methods in it.\nProgram\nfrom abc import ABC, abstractmethod\nclass Character(ABC) :\n@abstractmethod\ndef patriotism(self) :\npass\nclass Actor :\ndef style(self) :\nprint('>> Actor.Style: ')\nclass Person(Actor, Character) :\ndef do_acting(self) :\nprint('>> Person.doActing')\ndef style(self) :\nprint('>> Person.style') \ndef patriotism(self) :\nprint('>> Person.patriotism')\np = Person( )\np.patriotism( ) \np.style( )\np.do_acting( )\nOutput\n>> Person.patriotism\n>> Person.style\n>> Person.doActing\n____________________________________________________________________\n--- Page 290 ---\n274 Let Us Python\n[A]State whether the following statements are True or False:\n(a)Inheritance is the ability ofa class to inherit properties and behavior \nfrom a parent class by extending it.\n(b)Containership is the ability of a class to contain objects of different \nclasses as member data.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_394", "chunk_strategy": "fixed_size"}}, {"text": "from a parent class by extending it.\n(b)Containership is the ability of a class to contain objects of different \nclasses as member data.\n(c)We can derive a class from a base class even if the base class's \nsource code is not available.\n(d)Multiple inheritance is different from multiple levels of inheritance.\n(e)An object of a derived class cannot access members of base class if \nthe member names begin with __.\n(f)Creating a derived class from a base class requires fundamental \nchanges to the base class.\n(g) If a base class contains a member function func( ), and a derived \nclass does not contain a function with this name, an object of the \nderived class cannot access func( ).\n(h)If no constructors are specified for a derived class, objects of the \nderived class will use the constructors in the base class.\n(i)If a base class and a derived class each include a member function \nwith the same name, the member function of the derived class will \nbe called by an object of the derived class.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_395", "chunk_strategy": "fixed_size"}}, {"text": "(i)If a base class and a derived class each include a member function \nwith the same name, the member function of the derived class will \nbe called by an object of the derived class.\n(j)A class Dcan be derived from a class C, which is derived from a class \nB, which is derived from a class A.\n(k)It is illegal to make objects of one class members of another class.\n[B]Answer the followingquestions:\n(a)Which module should be imported to create abstract class?\n(b)For a class to be abstract from which class should we inherit it?\n--- Page 291 ---\nChapter20: Containership and Inheritance 275\n(c)Suppose there is a base class Band a derived class Dderived from \nB. Bhas two publicmember functions b1( )and b2( ), whereas D\nhas two member functions d1( )and d2( ). Write these classes for \nthe following different situations:\n\ue001 b1( )should be accessible from main module, b2( )should not \nbe.\n\ue001 Neither b1( ), nor b2( )should be accessible from main module.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_396", "chunk_strategy": "fixed_size"}}, {"text": "the following different situations:\n\ue001 b1( )should be accessible from main module, b2( )should not \nbe.\n\ue001 Neither b1( ), nor b2( )should be accessible from main module.\n\ue001 Both b1( )and b2( )should be accessible from main module.\n(d)If a class Dis derived from two base classes B1and B2, then write \nthese classes each containing a constructor. Ensure that while \nbuilding an object of type D, constructor of B2should get called. \nAlso provide a destructor in each class. In what order would these \ndestructors get called?\n(e)Create an abstract class called Vehiclecontaining methods speed( ), \nmaintenance( )and value( )in it. Derive classes FourWheeler, \nTwoWheelerand Airbornefrom Vehicleclass. Check whether you \nare able to prevent creation of objects of Vehicle class. Call the \nmethods using objects of other classes.\n(f)Assume a class Dthat is derived from class B. Which of the \nfollowing can an object of class Daccess?\n\ue001 members of D\n\ue001 members of B\n[C]Match the followingpairs:", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_397", "chunk_strategy": "fixed_size"}}, {"text": "(f)Assume a class Dthat is derived from class B. Which of the \nfollowing can an object of class Daccess?\n\ue001 members of D\n\ue001 members of B\n[C]Match the followingpairs:\na.__mro__( ) \u03ed. \u2018has a\u2019 relationship\nb.Inheritance 2. Object creation not allowed\nc.__var 3. Super class\nd.Abstract class 4. Root class\ne.Parent class \u03f1. \u2018is a\u2019 relationship\nf.object 6. Name mangling\ng.Child class 7. Decides resolution order\nh.Containership 8. Sub class\n[D]Attempt the following questions:\n(a)From which class is any abstract class derived?\n(b)At a time a class can be derived from how many abstract classes?\n--- Page 292 ---\n276 Let Us Python\n(c)How do we create an abstract class in Python?\n(d)What can an abstract class contain\u2014instance method, class \nmethod, abstract method?\n(e)How many objects can be created from an abstract class?\n(f)What will happen on execution of this code snippet?\nfrom abc import ABC, abstractmethod\nclass Sample(ABC) :\n@abstractmethod\ndef display(self) :\npass\ns= Sample( )", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_398", "chunk_strategy": "fixed_size"}}, {"text": "(f)What will happen on execution of this code snippet?\nfrom abc import ABC, abstractmethod\nclass Sample(ABC) :\n@abstractmethod\ndef display(self) :\npass\ns= Sample( )\n(g) Suppose there is a class called Vehicle. What should be done to \nensure that an object should not be created from Vehicleclass?\n(h)How will you mark an instance method in an abstract class as \nabstract?\n(i)There is something wrong in the following code snippet. How will \nyou rectify it?\nclass Shape(ABC) :\n@abstractmethod\ndef draw(self) :\npass\nclass Circle(Shape) :\n@abstractmethod\ndef draw(self) :\nprint('In draw')\n--- Page 293 ---\nLet UsPython\n277Iterators \nand Generators\nxIterables and Iterators xWhich to use When?\nxzip( )Function xGenerator Expressions\nxIterators xPrograms\nxUser-defined Iterators xExercise\nxGenerators21\n\u201cThe modern way... \u201d\n--- Page 294 ---\n278 Let Us Python\nIterables and Iterators\nxAn object is called iterable if it is capable of returning its members", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_399", "chunk_strategy": "fixed_size"}}, {"text": "xUser-defined Iterators xExercise\nxGenerators21\n\u201cThe modern way... \u201d\n--- Page 294 ---\n278 Let Us Python\nIterables and Iterators\nxAn object is called iterable if it is capable of returning its members \none at a time. Basic types like stringand containers likelist\nand tupleare iterables.\nxIterator is anobjectwhich is used to iterate over an iterable. An \niterable provides an iterator object.\nxIterators are implemented inforloops, comprehensions, generators \netc.\nzip( )Function\nxzip( )function typically receives multiple iterableobjectsand returns \nan iterator of tuples based onthem.This iterator can be used in a\nforloop as shown below.\nwords= ['A', 'coddle', 'called', 'Molly']\nnumbers= [10, 20, 30, 40]\nfor ele in zip(words, numbers) :\nprint(ele[0], ele[1])\nfor ele in zip(words, numbers) :\nprint(*ele)\nfor w, n in zip(words, numbers) :\nprint(w, n)\nAll threeforloops will output:\nA 10\ncoddle 20\ncalled 30\nMolly 40\nxIf two iterables are passedto zip( ), one containing 4and other", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_400", "chunk_strategy": "fixed_size"}}, {"text": "print(*ele)\nfor w, n in zip(words, numbers) :\nprint(w, n)\nAll threeforloops will output:\nA 10\ncoddle 20\ncalled 30\nMolly 40\nxIf two iterables are passedto zip( ), one containing 4and other \ncontaining 6elements, the returned iterator has 4(shorteriterable) \ntuples.\n--- Page 295 ---\nChapter21: Iterators and Generators 279\nxA list/tuple/setcan be generatedfrom the iterator of tuples \nreturned by zip( ).\nwords = ['A', 'coddle', 'called', 'Molly']\nnumbers = [10, 20, 30, 40]\nit = zip(words, numbers)\nlst= list(it)\nprint(lst) # prints [('A', 10), ('coddle', 20), ('called', 30), ('Molly', 40)]\nit = zip(words, numbers)# necessary to zip again\ntpl= tuple(it)\nprint(tpl) # prints (('A', 10), ('coddle', 20), ('called', 30), ('Molly', 40))\nit = zip(words, numbers)# necessary to zip again\ns= set(it)\nprint(s) # prints {('coddle', 20), ('Molly', 40), ('A', 10), ('called', 30)}\nxThe values can be unzipped from the listinto tuples using *.\nwords = ['A', 'coddle', 'called', 'Molly']", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_401", "chunk_strategy": "fixed_size"}}, {"text": "s= set(it)\nprint(s) # prints {('coddle', 20), ('Molly', 40), ('A', 10), ('called', 30)}\nxThe values can be unzipped from the listinto tuples using *.\nwords = ['A', 'coddle', 'called', 'Molly']\nnumbers = [10, 20, 30, 40]\nit = zip(words, numbers)\nlst= list(it)\nw, n = zip(*lst)\nprint(w) # prints ('A', 'coddle', 'called', 'Molly')\nprint(n) # print (10, 20, 30, 40)\nIterators\nxWe know that a string and container objects likelist, tuple, set, \ndictionary etc. can be iterated through using a forloop as in\nfor ch in 'Good Afternoon' :\nprint(ch)\nfor num in [10, 20, 30, 40, 50]:\nprint(num)\nBoth these forloops call __iter__( )method of str/list. This method \nreturns an iterator object. The iterator object has a method \n__next__( )which returns the next item in the str/listcontainer.\n--- Page 296 ---\n280 Let Us Python\nWhen all items have been iterated, next call to __next__( )raises a \nStopIterationexception which tells the forloop to terminate. \nExceptions have been discussed in Chapter 22.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_402", "chunk_strategy": "fixed_size"}}, {"text": "280 Let Us Python\nWhen all items have been iterated, next call to __next__( )raises a \nStopIterationexception which tells the forloop to terminate. \nExceptions have been discussed in Chapter 22.\nxWe too can call __iter__( )and __next__( )and get the same results.\nlst = [10, 20, 30, 40]\ni = lst.__iter__( )\nprint(i.__next__( ))\nprint(i.__next__( ))\nprint(i.__next__( ))\nxInstead of calling __iter__( )and __next__( ), we can call the more \nconvenientbuilt-in functionsiter( )and next( ). These functions in \nturn call __iter__( )and __next__( )respectively.\nlst= [10, 20, 30, 40]\ni = iter(lst)\nprint(next(i))\nprint(next(i))\nprint(next(i))\nNote than once we have iterated a container, if we wish to iterate it \nagain we have to obtain an iterator object afresh.\nxAn iterable is an object capable of returning its members one at a \ntime. Programmatically, it is an object that has implemented \n__iter__( )in it.\nxAn iterator is an object that has implemented both __iter__( )and \n__next__( )in it.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_403", "chunk_strategy": "fixed_size"}}, {"text": "time. Programmatically, it is an object that has implemented \n__iter__( )in it.\nxAn iterator is an object that has implemented both __iter__( )and \n__next__( )in it.\nxAs a proof that an iterable contains __iter__( ), whereas an iterator \ncontains both __iter__( )and __next__( ), we can check it using the \nhasattr( )built-infunction.\ns = 'Hello'\nlst = ['Focussed', 'bursts', 'of', 'activity']\nprint(hasattr(s, '__iter__'))\nprint(hasattr(s, '__next__'))\nprint(hasattr(lst, '__iter__'))\nprint(hasattr(lst, '__next__'))\ni = iter(s)\n--- Page 297 ---\nChapter21: Iterators and Generators 281\nj = iter(lst)\nprint(hasattr(i, '__iter__'))\nprint(hasattr(i, '__next__'))\nprint(hasattr(j, '__iter__'))\nprint(hasattr(j, '__next__'))\nOn execution of this program we get the following output:\nTrue\nFalse\nTrue\nFalse\nTrue\nTrue\nTrue\nTrue\nUser-defined Iterators\nxSuppose we wish our class to behave like an iterator. To do this we \nneed to define __iter__( )and __next__( )in it.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_404", "chunk_strategy": "fixed_size"}}, {"text": "True\nFalse\nTrue\nFalse\nTrue\nTrue\nTrue\nTrue\nUser-defined Iterators\nxSuppose we wish our class to behave like an iterator. To do this we \nneed to define __iter__( )and __next__( )in it.\nxOur iterator class AvgAdjshould maintain a list. When it is iterated \nupon it should return average of two adjacent numbers in the list.\nclass AvgAdj :\ndef __init__(self, data) :\nself.__data = data\nself.__len = len(data)\nself.__first = 0\nself.__sec = 1\ndef __iter__(self) :\nreturn self\ndef __next__(self) :\nif self.__sec == self.__len :\nraise StopIteration # raises exception (runtime error)\nself.__avg = (self.__data[self.__first] + \nself.__data[self.__sec]) / 2\nself.__first += 1\nself.__sec += 1\nreturn self.__avg\n--- Page 298 ---\n282 Let Us Python\nlst = [10, 20, 30, 40, 50, 60, 70]\ncoll = AvgAdj(lst)\nfor val in coll :\nprint(val)\nOn execution of this program, we get the following output:\n15.0\n25.0\n35.0\n45.0\n55.0\n65.0\nx__iter__( )is supposed to return an object which has implemented", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_405", "chunk_strategy": "fixed_size"}}, {"text": "for val in coll :\nprint(val)\nOn execution of this program, we get the following output:\n15.0\n25.0\n35.0\n45.0\n55.0\n65.0\nx__iter__( )is supposed to return an object which has implemented \n__next__( )in it. Since we have defined __next__( )in AvgAdj class, \nwe have returned selffrom __iter__( ).\nxLength of lstis 7, whereas elements in it are indexed from 0 to 6.\nxWhen self._sec becomes 7 it means that we have reached the end of \nlist and further iteration is not possible. In this situation we have \nraised an exception StopIteration.\nGenerators\nxGenerators are very efficient functions that create iterators. They \nuse yieldstatement instead of returnwhenever they wish to return\ndata from the function. \nxSpecialtyof a generator is that, it remembers the state of the \nfunction and the last statement it had executed when yieldwas \nexecuted.\nxSo each time next( )is called, it resumes where it had left off last \ntime.\nxGenerators can be used in place of class-based iterator that we saw", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_406", "chunk_strategy": "fixed_size"}}, {"text": "executed.\nxSo each time next( )is called, it resumes where it had left off last \ntime.\nxGenerators can be used in place of class-based iterator that we saw \nin the last section. \nxGenerators are very compact because the __iter__( ), __next__( )\nand StopIterationcode is created automatically for them.\nxGiven below is an example of a generator that returns average of \nnext two adjacent numbers in the listevery time.\n--- Page 299 ---\nChapter21: Iterators and Generators 283\ndef AvgAdj(data) :\nfori in range(0, len(data) -1) : \nyield (data[i] + data[i + 1]) / 2\nlst = [10, 20, 30, 40, 50, 60, 70]\nfor i in AvgAdj(lst) :\nprint(i)\nOn execution of this program, we get the following output:\n15.0\n25.0\n35.0\n45.0\n55.0\n65.0\nWhich to use When?\nxSuppose from a list of 100 integers we are to return an entity which \ncontains elements which are prime numbers. In this case we will \nreturn an 'iterable' which contains a list of prime numbers.\nxSuppose we wish to add all prime numbers below three million. In", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_407", "chunk_strategy": "fixed_size"}}, {"text": "contains elements which are prime numbers. In this case we will \nreturn an 'iterable' which contains a list of prime numbers.\nxSuppose we wish to add all prime numbers below three million. In \nthis case, first creating a list of all prime numbers and then adding \nthem will consume lot of memory. So we should write an iterator \nclass or a generator function which generates next prime number on \nthe fly and adds it to the running sum.\nGenerator Expressions\nxLike list/set/dictionary comprehensions, to make the code more \ncompact as well as succinct, we can write compact generator \nexpressions.\nxA generator expression creates a generator on the fly without being \nrequired to use the yieldstatement.\nxSome sample generator expressions are given below.\n# generate 20 random numbers in the range 10 to 100 and obtain \n# maximum out of them \n--- Page 300 ---\n284 Let Us Python\nprint(max(random.randint(10, 100) for n in range(20)))\n# print sum of cubes of all numbers less than 20", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_408", "chunk_strategy": "fixed_size"}}, {"text": "# maximum out of them \n--- Page 300 ---\n284 Let Us Python\nprint(max(random.randint(10, 100) for n in range(20)))\n# print sum of cubes of all numbers less than 20\nprint(sum(n *n * nfor nin range(20))) \nxList comprehensions are enclosed within [ ], set/dictionary \ncomprehensions are enclosed within { }, whereas generator \nexpressions are enclosed within ( ).\nxSince a list comprehension returns a list, it consumes more memory \nthan a generator expression. Generator expression takes less \nmemory since it generates the next element on demand, rather than \ngenerating all elements upfront.\nimport sys\nlst = [i * i for i in range(15)]\ngen = (i * i for i in range(15))\nprint(lst)\nprint(gen)\nprint(sys.getsizeof(lst))\nprint(sys.getsizeof(gen))\nOn execution of this program, we get the following output:\n[0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196]\n<generator object <genexpr> at 0x003BD570>\n100\n48\nxThough useful, generator expressions do not have the same power", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_409", "chunk_strategy": "fixed_size"}}, {"text": "[0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196]\n<generator object <genexpr> at 0x003BD570>\n100\n48\nxThough useful, generator expressions do not have the same power \nof a full-fledged generator function.\n____________________________________________________________________\nProblem 21.1\nWrite a program that proves that a list is an iterable and not an iterator.\nProgram\nlst = [10,20, 30, 40, 50]\nprint(dir(lst))\n--- Page 301 ---\nChapter21: Iterators and Generators 285\ni = iter(lst)\nprint(dir(i))\nOutput\n['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', \n'__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', \n'__getitem__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', \n'__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', \n'__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', \n'__reversed__', '__rmul__', '__setattr__', '__setitem__', '__sizeof__',", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_410", "chunk_strategy": "fixed_size"}}, {"text": "'__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', \n'__reversed__', '__rmul__', '__setattr__', '__setitem__', '__sizeof__', \n'index', 'insert', 'pop', 'remove', 'reverse', 'sort']\n['__class__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', \n'__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', \n'__init_subclass__', '__iter__', '__le__', '__length_hint__', '__lt__', \n'__ne__', '__new__', '__next__', '__reduce__', '__reduce_ex__', \n'__repr__', '__setattr__', '__setstate__', '__sizeof__', '__str__', \n'__subclasshook__']\nTips\nxlstis an iterable since dir(lst) shows __iter__but no __next__.\nxiter(lst)returns an iterator object, which is collected in i.\nxdir(i)shows __iter__as well as __next__. This shows that it is an \niterator object.\n____________________________________________________________________\nProblem 21.2\nWrite a program that generates prime numbers below 3 million. Print \nsum of these prime numbers.\nProgram\ndef generate_primes( ) :\nnum = 1", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_411", "chunk_strategy": "fixed_size"}}, {"text": "Problem 21.2\nWrite a program that generates prime numbers below 3 million. Print \nsum of these prime numbers.\nProgram\ndef generate_primes( ) :\nnum = 1\nwhile True:\nif isprime(num):\nyield num\nnum += 1 \n--- Page 302 ---\n286 Let Us Python\ndef isprime( n ) :\nif n > 1 :\nif n == 2 :\nreturn True\nif n % 2 == 0 :\nreturn False\nfor iin range(2,n // 2) :\nif n % i == 0 : \nreturn False\nelse :\nreturn True\nelse :\nreturn False\ntotal = 0\nfor next_prime in generate_primes( ):\nif next_prime < 300000 :\ntotal += next_prime\nelse:\nprint(total)\nexit( )\nOutput\n3709507114\nTips\nxexit( )terminates the execution of the program.\n____________________________________________________________________\nProblem 21.3\nWrite a program that uses dictionary comprehension to print sin, cos \nand tan tables for angles ranging from 0 to 360 in steps of 15 degrees. \nWrite generator expressionstofind the maximum value of sine and cos.\nProgram\nimport math\npi = 3.14", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_412", "chunk_strategy": "fixed_size"}}, {"text": "and tan tables for angles ranging from 0 to 360 in steps of 15 degrees. \nWrite generator expressionstofind the maximum value of sine and cos.\nProgram\nimport math\npi = 3.14\nsine_table = {ang : math.sin(ang * pi / 180) for ang in range(0, 360, 90)}\n--- Page 303 ---\nChapter21: Iterators and Generators 287\ncos_table = {ang : math.cos(ang * pi / 180) for ang in range(0, 360, 90)}\ntan_table = {ang : math.tan(ang * pi / 180) for ang in range(0, 360, 90)}\nprint(sine_table)\nprint(cos_table)\nprint(tan_table)\nmaxsin = max((math.sin(ang * pi / 180) for ang in range(0, 360, 90)))\nmaxcos = max((math.cos(ang * pi / 180) for ang in range(0, 360, 90)))\nprint(maxsin)\nprint(maxcos)\nOutput\n{0: 0.0, 90: 0.9999996829318346, 180: 0.0015926529164868282, 270: -\n0.999997146387718}\n{0: 1.0, 90: 0.0007963267107332633, 180: -0.9999987317275395, 270: -\n0.0023889781122815386}\n{0: 0.0, 90: 1255.7655915007897, 180: -0.001592654936407223, 270: \n418.58782265388515}\n0.9999996829318346\n1.0", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_413", "chunk_strategy": "fixed_size"}}, {"text": "0.0023889781122815386}\n{0: 0.0, 90: 1255.7655915007897, 180: -0.001592654936407223, 270: \n418.58782265388515}\n0.9999996829318346\n1.0\n____________________________________________________________________\nProblem 21.4\nCreate 3 lists\u0376a list of names, a list of ages and a list of salaries. \nGenerate and print a list of tuples containing name, age and salary from \nthe 3 lists. From this list generate 3 tuples \u0376one containing all names, \nanother containing all ages and third containing all salaries.\nProgram\nnames = ['Amol', 'Anil', 'Akash']\nages = [25, 23, 27]\nsalaries= [34555.50, 40000.00, 450000.00] \n# create iterator of tuples\nit = zip(names, ages, salaries) \n# build list by iterating the iterator object\nlst = list(it)\nprint(lst)\n# unzip the list into tuples\n--- Page 304 ---\n288 Let Us Python\nn, a, s = zip(*lst) \nprint(n)\nprint(a)\nprint(s)\nOutput\n[('Amol', 25, 34555.5), ('Anil', 23, 40000.0), ('Akash', 27, 450000.0)]\n('Amol', 'Anil', 'Akash')\n(25, 23, 27)\n(34555.5, 40000.0, 450000.0)", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_414", "chunk_strategy": "fixed_size"}}, {"text": "n, a, s = zip(*lst) \nprint(n)\nprint(a)\nprint(s)\nOutput\n[('Amol', 25, 34555.5), ('Anil', 23, 40000.0), ('Akash', 27, 450000.0)]\n('Amol', 'Anil', 'Akash')\n(25, 23, 27)\n(34555.5, 40000.0, 450000.0)\n____________________________________________________________________\nProblem 21.5\nWrite a program to obtain transpose of a 3 x 4 matrix.\nProgram\nmat = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]\nti = zip(*mat)\nlst = [[ ] for i in range(4)]\ni = 0\nfor t in ti :\nlst[i] = list(t)\ni += 1\nprint(lst)\nOutput\n[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]\nTips\nxmat contains a list of lists. These can be accessed using either \nmat[0], mat[1]and mat[2]or simply *mat.\nxzip(*mat)receives three lists and returns an iterator of tuples, each \ntuple containing 3 elements. \nxlstis intitialized as a list of 4 empty lists. \n--- Page 305 ---\nChapter21: Iterators and Generators 289\nxThe iterator returned by zip( )is iterated upon and a list is generated", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_415", "chunk_strategy": "fixed_size"}}, {"text": "xlstis intitialized as a list of 4 empty lists. \n--- Page 305 ---\nChapter21: Iterators and Generators 289\nxThe iterator returned by zip( )is iterated upon and a list is generated \nusing the list( )function.Each generated list is inserted in the list of \nlists at an appropriate index.\n____________________________________________________________________\nProblem 21.6\nWrite a program to multiply two matrices x(2 x 3) and y(2, 2) using list \ncomprehension.\nProgram\nx = [[1, 2, 3],4, 5, 6]]\ny = [[11, 12],[21, 22],[31, 32]]\nl1 = [xrow for xrow in x]\nprint(l1) \nl2 = [(xrow, ycol) for ycol in zip(*y) for xrow in x]\nprint(l2)\nl3 = [[sum(a * b for a,b in zip(xrow,ycol)) for ycol in zip(*y)]for xrow in x]\nprint(l3)\nOutput\n[[1, 2, 3], [4, 5, 6]]\n[([1, 2, 3], (11, 21, 31)), ([4, 5, 6], (11, 21, 31)), ([1, 2, 3], (12, 22, 32)), \n([4, 5, 6], (12, 22, 32))]\n[[146, 152], [335, 350]]\nTips\nxTo make it easy for you to understand the list comprehension, I have", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_416", "chunk_strategy": "fixed_size"}}, {"text": "([4, 5, 6], (12, 22, 32))]\n[[146, 152], [335, 350]]\nTips\nxTo make it easy for you to understand the list comprehension, I have \nbuilt it in 3 parts. Follow them by checking their output.\n____________________________________________________________________\nProblem 21.7\nSuppose we have a list of 5 integers and a tuple of 5 floats. Can we zip \nthem and obtain an iterator. If yes, how?\nProgram\nintegers = [10, 20, 30, 40, 50]\n--- Page 306 ---\n290 Let Us Python\nfloats = (1.1, 2.2, 3.3, 4.4, 5.5)\nti = zip(integers, floats)\nlst = list(ti)\nfor i, f in lst:\nprint(i, f)\nOutput\n10 1.1\n20 2.2\n30 3.3\n40 4.4\n50 5.5\nTips\nxAny type of iterables can be passed to a zip()function.\n____________________________________________________________________\nProblem 21.8\nCreate two lists studentsand marks. Create a dictionary from these two \nlists using dictionary comprehension. Use names as keys and marks as \nvalues.\nProgram\n# lists of keys and values\nlstnames = ['Sunil', 'Sachin', 'Rahul', 'Kapil', 'Rohit']", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_417", "chunk_strategy": "fixed_size"}}, {"text": "lists using dictionary comprehension. Use names as keys and marks as \nvalues.\nProgram\n# lists of keys and values\nlstnames = ['Sunil', 'Sachin', 'Rahul', 'Kapil', 'Rohit']\nlstmarks = [54, 65, 45, 67, 78] \n# dictionary comprehension\nd = {k:v for (k, v) in zip(lstnames, lstmarks)} \nprint(d)\nOutput\n{'Sunil': 54, 'Sachin': 65, 'Rahul': 45, 'Kapil': 67, 'Rohit': 78}\n____________________________________________________________________\n--- Page 307 ---\nChapter21: Iterators and Generators 291\nProblem 21.9\nCreate a dictionary containing names of students and marks obtained by \nthem in three subjects. Write a program to print these names in tabular \nform with sorted names as columns and marks in three subjects listed \nbelow each student name as shown below.\nRahulRakeshSameer\n67 59 58\n76 70 86\n39 81 78\nProgram\nd = {'Rahul':[67,76,39],'Sameer':[58,86,78],'Rakesh':[59,70,81]}\nlst = [(k, *v) for k, v in d.items( )]\nprint(lst)\nlst = [(k, *v) for k, v in sorted(d.items( ))]\nprint(lst)", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_418", "chunk_strategy": "fixed_size"}}, {"text": "76 70 86\n39 81 78\nProgram\nd = {'Rahul':[67,76,39],'Sameer':[58,86,78],'Rakesh':[59,70,81]}\nlst = [(k, *v) for k, v in d.items( )]\nprint(lst)\nlst = [(k, *v) for k, v in sorted(d.items( ))]\nprint(lst)\nfor row in zip(*lst) :\nprint(row)\nfor row in zip(*lst) :\nprint(*row, sep = '\\t')\nfor row in zip(*((k, *v) for k, v in sorted(d.items( )))):\nprint(*row, sep = '\\t')\nOutput\n[('Rahul', 67, 76, 39), ('Sameer', 58, 86, 78), ('Rakesh', 59, 70, 81)]\n[('Rahul', 67, 76, 39), ('Rakesh', 59, 70, 81), ('Sameer', 58, 86, 78)]\n('Rahul', 'Rakesh', 'Sameer')\n(67, 59, 58)\n(76, 70, 86)\n(39, 81, 78)\nRahulRakeshSameer\n67 59 58\n76 70 86\n39 81 78\nRahulRakeshSameer\n67 59 58\n--- Page 308 ---\n292 Let Us Python\n76 70 86\n39 81 78\nTips\nxTry to understand this program step-by-step:\nlst= [(k, *v) for k, v in d.items( )]\n*vwill unpack the marks in v. So a tuple like ('Rahul', 67, 76, 39) will \nbe created. All such tuples will be collected in the list to create:", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_419", "chunk_strategy": "fixed_size"}}, {"text": "lst= [(k, *v) for k, v in d.items( )]\n*vwill unpack the marks in v. So a tuple like ('Rahul', 67, 76, 39) will \nbe created. All such tuples will be collected in the list to create:\n[('Rahul', 67, 76, 39), ('Sameer', 58, 86, 78), ('Rakesh', 59, 70, 81)]\nxTo create a list of tuples sorted by name we have used the sorted( )\nfunction:\nlst = [(k, *v) for k, v in sorted(d.items( ))]\nThis will create the list:\n[('Rahul', 67, 76, 39), ('Rakesh', 59, 70, 81), ('Sameer', 58, 86, 78)]\nxThe sorted list is then unpacked and submitted to the zip( )function \nfor row in zip(*lst) :\nprint(row)\nThis will print the tuples\n('Rahul', 'Rakesh', 'Sameer')\n(67, 59, 58)\n(76, 70, 86)\n(39, 81, 78)\nxWe have then unpacked these tuples before printing and added \nseparator '\\t' to properly align the values being printed.\nfor row in zip(*lst) :\nprint(*row, sep = '\\t')\nxLastly we have combined all these activities into one loop:\nfor row in zip(*((k, *v) for k, v in sorted(d.items( )))):\nprint(*row, sep = '\\t')", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_420", "chunk_strategy": "fixed_size"}}, {"text": "for row in zip(*lst) :\nprint(*row, sep = '\\t')\nxLastly we have combined all these activities into one loop:\nfor row in zip(*((k, *v) for k, v in sorted(d.items( )))):\nprint(*row, sep = '\\t')\n____________________________________________________________________\n--- Page 309 ---\nChapter21: Iterators and Generators 293\nProblem 21.10\nWrite a program that defines a function pascal_triangle( )that displays a \nPascal Triangle of level received as parameter to the function. A Pascal's \nTriangle of level 5 is shownbelow.\n1\n1 1 \n1 2 1\n1 3 3 1 \n1 4 6 4 1\nProgram\ndef pascal_triangle(n):\nrow = [1]\nz = [0]\nfor x in range(n):\nprint(row)\nrow = [l + r for l,r in zip(row + z, z + row)]\npascal_triangle(5)\nOutput\n[1]\n[1, 1]\n[1, 2, 1]\n[1, 3, 3, 1]\n[1, 4, 6, 4, 1]\nTips\nxForn = 5,xwill vary from 0 to 4.\nxrow + zmerges two lists.\nxFor x = 1, row = [1], z = [0], so, \nzip([1, 0], [0, 1]) gives tuples (1, 0), (0, 1)\nl + r gives row = [ 1, 1]\n--- Page 310 ---\n294 Let Us Python", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_421", "chunk_strategy": "fixed_size"}}, {"text": "xrow + zmerges two lists.\nxFor x = 1, row = [1], z = [0], so, \nzip([1, 0], [0, 1]) gives tuples (1, 0), (0, 1)\nl + r gives row = [ 1, 1]\n--- Page 310 ---\n294 Let Us Python\nxFor x = 2, row = [1, 1], z = [0], so, \nzip([1, 1, 0], [0, 1, 1]) gives tuples (1, 0), (1, 1), (0, 1)\nl + r gives [ 1, 2, 1]\nxFor x = 3, row = [1, 2, 1], z = [0], so, \nzip([1, 2, 1, 0], [0, 1, 2, 1]) gives tuples (1, 0), (2, 1), (1, 2), (0, 1)\nl + r gives [ 1, 3, 3, 1]\nxFor x = 4, row = [1, 3, 3, 1], z = [0], so, \nzip([1, 3, 3, 1, 0], [0, 1, 3, 3, 1]) gives (1, 0), (3, 1), (3, 3), (1, 3), (0, 1)\nl + r gives [ 1, 4, 6, 4, 1]\n____________________________________________________________________\nProblem 21.11\nWrite a program that defines a class called Progression and inherits \nthree classes from it AP, GPand FP, standing for Arithmetic Progression, \nGeometric Progression and Fibonacci Progression respectively. \nProgressionclass should act as a user-defined iterator. By default, it", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_422", "chunk_strategy": "fixed_size"}}, {"text": "Geometric Progression and Fibonacci Progression respectively. \nProgressionclass should act as a user-defined iterator. By default, it \nshould generate integers stating with 0 and advancing in steps of 1. AP, \nGPand FPshould make use of the iteration facility of Progression class. \nThey should appropriately adjust themselves to generate numbers in \narithmetic progression, geometric progression or Fibonacci progression.\nProgram\nclass Progression :\ndef __init__ (self, start = 0) :\nself._cur = start\ndef __iter__ (self):\nreturn self\ndef advance(self):\nself._cur += 1\ndef __next__ (self) :\nif self._cur is None : \nraise StopIteration\nelse :\ndata = self._cur \nself.advance( ) \n--- Page 311 ---\nChapter21: Iterators and Generators 295\nreturn data\ndef display(self, n) :\nprint(' '.join(str(next(self)) for i in range(n)))\nclass AP(Progression) :\ndef __init__ (self, start = 0,step = 1) :\nsuper( ).__init__ (start) \nself.__step = step\ndef advance(self) : \nself._cur += self.__step", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_423", "chunk_strategy": "fixed_size"}}, {"text": "class AP(Progression) :\ndef __init__ (self, start = 0,step = 1) :\nsuper( ).__init__ (start) \nself.__step = step\ndef advance(self) : \nself._cur += self.__step\nclass GP(Progression) : \ndef __init__ (self, start = 1, step = 2 ) :\nsuper( ).__init__(start)\nself.__step = step\ndef advance(self) : \nself._cur *= self.__step\nclass FP(Progression) :\ndef __init__ (self, first = 0, second = 1) :\nsuper( ).__init__(first)\nself.__prev = second -first\ndef advance(self) :\nself.__prev, self._cur = self._cur, self.__prev + self._cur\nprint('Default progression:')\np = Progression( )\np.display(10)\nprint('AP with step 5:')\na = AP(5)\na.display(10)\nprint('AP with start 2 and step 4:')\na = AP(2, 4)\na.display(10)\nprint('GP with default multiple:')\ng = GP( )\ng.display(10)\n--- Page 312 ---\n296 Let Us Python\nprint('GP with start 1 and multiple 3:')\ng = GP(1, 3)\ng.display(10)\nprint('FP with default start values:')\nf = FP( )\nf.display(10)\nprint('FP with start values 4 and 6:')\nf = FP(4, 6)\nf.display(10)\nOutput", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_424", "chunk_strategy": "fixed_size"}}, {"text": "g = GP(1, 3)\ng.display(10)\nprint('FP with default start values:')\nf = FP( )\nf.display(10)\nprint('FP with start values 4 and 6:')\nf = FP(4, 6)\nf.display(10)\nOutput\nDefault progression:\n0 1 2 3 4 5 6 7 8 9\nAP with step 5:\n5 6 7 8 9 10 11 12 13 14\nAP with start 2 and step 4:\n2 6 10 14 18 22 26 30 34 38\nGP with default multiple:\n1 2 4 8 16 32 64 128 256 512\nGP with start 1 and multiple 3:\n1 3 9 27 81 243 729 2187 6561 19683\nFP with default start values:\n0 1 1 2 3 5 8 13 21 34\nFP with start values 4 and 6:\n4 6 10 16 26 42 68 110 178 288\nTips\nxSince Progressionis an iterator it has to implement __iter__( )and \n__next__( )methods. \nx__next__( )calls advance( )method to suitably adjust the value of \nself.cur(and self.previn case of FP). \nxEach derived class has an advance( )method. Depending on which \nobject\ue001s address is present in self\ue002 that object\ue001s advance( )method \ngets called. \nxThe generation of next data value happens one value at a time,", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_425", "chunk_strategy": "fixed_size"}}, {"text": "object\ue001s address is present in self\ue002 that object\ue001s advance( )method \ngets called. \nxThe generation of next data value happens one value at a time, \nwhen display( )method\ue001s forloop goes into action.\nxThere aretwo ways to create an object and call display( ). These are:\n--- Page 313 ---\nChapter21: Iterators and Generators 297\na = AP(5)\na.display(10)\nor\nAP(5).display(10)\n____________________________________________________________________\n[A]Answer the following:\n(a)Write a program to create a list of 5 odd integers. Replace the third \nelement with a list of 4 even integers. Flatten, sort and print the list.\n(b)Write a program to flatten the following list:\nmat1 = [[1, 2, 3, 4],[5, 6, 7, 8],[9, 10, 11, 12]]\n(c)Write a program to generate a list of numbers in the range 2 to 50 \nthat are divisible by 2 and 4.\n(d)Suppose there are two lists, each holding 5 strings. Write a program \nto generate a list that consists of strings that are concatenated by", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_426", "chunk_strategy": "fixed_size"}}, {"text": "that are divisible by 2 and 4.\n(d)Suppose there are two lists, each holding 5 strings. Write a program \nto generate a list that consists of strings that are concatenated by \npicking corresponding elements from the two lists.\n(e)Suppose a list contains 20integers generated randomly. Receive a \nnumber from the keyboard and report position of all occurrences of \nthis number in the list.\n(f)Suppose there are two lists\u0376one contains questions and another \ncontains lists of 4 possible answers for each question. Writea \nprogram to generate a list that contains lists of question and its 4 \npossible answers.\n(g)Suppose a list has 20 numbers. Write a program that removes all \nduplicates from this list.\n(h)Write a program to obtain a median value of a list of numbers, \nwithout disturbing the order of the numbers in the list.\n(i)A list contains only positive and negative integers. Write a program \nto obtain the number of negative numbers present in the list.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_427", "chunk_strategy": "fixed_size"}}, {"text": "without disturbing the order of the numbers in the list.\n(i)A list contains only positive and negative integers. Write a program \nto obtain the number of negative numbers present in the list.\n(j)Write a program to convert a list of tuples \n[(10, 20, 30), (150.55, 145.60, 157.65), ('A1', 'B1', 'C1')]\n--- Page 314 ---\n298 Let Us Python\ninto anotherlistof tuples\n[(10, 150.55, 'A1'), (20, 145.60, 'B1'), (30, 157.65, 'C1')]\n(k)What will be the output of the following program:\nx = [[1, 2, 3, 4],[4, 5, 6, 7]]\ny = [[1, 1], [2, 2], [3, 3], [4, 4]]\nl1 = [xrow forxrow in x]\nprint(l1) \nl2 = [(xrow, ycol) for ycol in zip(*y) for xrow in x]\nprint(l2)\n(l)Write a program that uses a generator to create a set of unique \nwords from a line input through the keyboard.\n(m)Write a program that uses a generator to find out maximum marks \nobtained by a student and his name from tuples of multiple \nstudents.\n(n)Write a program that uses a generator that generates characters \nfrom a string in reverse order.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_428", "chunk_strategy": "fixed_size"}}, {"text": "obtained by a student and his name from tuples of multiple \nstudents.\n(n)Write a program that uses a generator that generates characters \nfrom a string in reverse order.\n(o)What is the difference between the following statements:\nsum([x**2forxinrange(20)])\nsum(x**2forxinrange(20))\n(p)Suppose there are two lists, each holding 5 strings. Write a program \nto generate a list that consists of strings that are concatenated by \npicking corresponding elements from the two lists.\n(q)36 unique combinations can result from use of two dice. Create a \ndictionary which stores these combinations as tuples.\n--- Page 315 ---\nLet UsPython\n299Exception \nHandling\nxWhat may go Wrong? xUser-defined Exceptions\nxSyntax Errors xelseBlock\nxExceptions xfinally Block\nxHow to deal with Exceptions? xException Handling Tips\nxHow to use try-except? xPrograms\nxNuances of tryand except xExercises22\n\u201cExpect an exception and prepare for it \u201d\n--- Page 316 ---\n300 Let Us Python\nWhat may go Wrong?", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_429", "chunk_strategy": "fixed_size"}}, {"text": "xHow to use try-except? xPrograms\nxNuances of tryand except xExercises22\n\u201cExpect an exception and prepare for it \u201d\n--- Page 316 ---\n300 Let Us Python\nWhat may go Wrong?\nxWhile creating and executing a Python program things may go \nwrong at twodifferent stages \u0376during compilation and during \nexecution.\nxErrors that occur during compilation are called SyntaxErrors. Errors \nthat occur during execution are called Exceptions.\nSyntax Errors\nxIf things go wrong during compilation:\nMeans -Something in the program is not as per language grammar \nReported by -Interpreter/Compiler\nAction to be taken -Rectify program\nxExamples of syntax errors:\nprint 'Hello' # ( ) is missing\nd = 'Nagpur'\na = b + float(d) # d is a string, so it cannot be converted to float\na = Math.pow(3) # pow( ) needs two arguments\nxOther common syntax error are:\n-Leaving out a symbol, such as a colon, commaor brackets\n-Misspelling a keyword\n-Incorrect indentation\n-Empty if, else, while, for, function, class, method\n-Missing :", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_430", "chunk_strategy": "fixed_size"}}, {"text": "xOther common syntax error are:\n-Leaving out a symbol, such as a colon, commaor brackets\n-Misspelling a keyword\n-Incorrect indentation\n-Empty if, else, while, for, function, class, method\n-Missing :\n-Incorrect number of positional arguments\nxSuppose we try to compile the following piece of code:\nbasic_salary = int ( input('Enter basic salary'))\nif basic_salary < 5000\nprint('Does not qualify for Diwali bonus')\nWe get the following syntax error:\nFile 'c:\\Users\\Kanetkar\\Desktop\\Phone\\src\\phone.py', line 2\nif basic_salary < 5000\n--- Page 317 ---\nChapter22: Exception Handling 301\n^\nSyntaxError: invalid syntax\nx^ indicates the position in the line where an error was detected. It \noccurred because : is missing after the condition.\nxFilename and line number are also displayed to help you locate the \nerroneous statement easily.\nExceptions\nxIf things go wrong during execution (runtime): \nMeans -Something unforeseen has happened\nReported by -Python Runtime\nAction to be taken -Tackle it on the fly", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_431", "chunk_strategy": "fixed_size"}}, {"text": "erroneous statement easily.\nExceptions\nxIf things go wrong during execution (runtime): \nMeans -Something unforeseen has happened\nReported by -Python Runtime\nAction to be taken -Tackle it on the fly\nxExamples of Runtime errors:\nMemory Related -Stack/Heap overflow, Exceeding bounds\nArithmetic Related -Divide by zero\nOthers -Attempt to use an unassigned reference, File not found\nxEven if the program is grammatically correct, things may go wrong \nduring execution causing exceptions. \na = int(input('Enter an integer: '))\nb = int(input('Enter an integer: '))\nc = a / b\nIf during execution of this script we give value of bas 0, then \nfollowing message gets displayed:\nException has occurred: ZeroDivisionError\ndivision by zero\nFile 'C:\\Users\\Kanetkar\\Desktop\\Phone\\src\\trial.py', line 3, in \n<module> c = a / b \n# blah blah... rest of the stack trace showing how we landed here\nxAnother example of exception:\na, b = 10, 20\nc = a / b * d\n--- Page 318 ---\n302 Let Us Python", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_432", "chunk_strategy": "fixed_size"}}, {"text": "<module> c = a / b \n# blah blah... rest of the stack trace showing how we landed here\nxAnother example of exception:\na, b = 10, 20\nc = a / b * d\n--- Page 318 ---\n302 Let Us Python\nFile 'c:\\Users\\Kanetkar\\Desktop\\Phone\\src\\phone.py', line 2, in \n<module> c = a / b * d\nNameError: name 'd' is not defined\n# blah blah...rest of the stack trace showing how we landed here\nxThe stack trace prints the names of the files, line numbers starting \nfrom the first file that got executed, up to the point of exception.\nxThe stack trace is useful for the programmer to figure out where \nthings went wrong. However, a user is likely to get spooked looking \nat it, thinking something is very wrong. So we should try and tackle \nthe exceptions ourselves and provide a graceful exit from the \nprogram, instead of printing the stack trace.\nHowto deal with Exceptions?\nxtryand exceptblocks are used to deal with an exception.\nxStatement(s) which you suspect may go wrong at runtime should be", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_433", "chunk_strategy": "fixed_size"}}, {"text": "program, instead of printing the stack trace.\nHowto deal with Exceptions?\nxtryand exceptblocks are used to deal with an exception.\nxStatement(s) which you suspect may go wrong at runtime should be \nenclosed within a tryblock.\nxIf while executing statement(s) in tryblock, an exceptional condition \noccurs it can be tackled in two ways:\n(a)Pack exception information in an object and raise an exception.\n(b)Let Python Runtime pack exception information in an object and \nraise an exception.\nIn the examples in previous section Python Runtime raised \nexceptions ZeroDivisionErrorand NameError.\nRaising an exception is same as throwing an exception in C++/Java.\nxTwo things that can be done when anexception is raised:\n(a)Catch the raised exception object in exceptblock.\n(b)Raisethe exceptionfurther.\nxIf we catch the exception object,we can either perform a graceful \nexit or rectify the exceptional situation and continueexecution.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_434", "chunk_strategy": "fixed_size"}}, {"text": "(b)Raisethe exceptionfurther.\nxIf we catch the exception object,we can either perform a graceful \nexit or rectify the exceptional situation and continueexecution.\nxIf we raise the exception object further -Default exception handler \ncatches the object, prints stack trace and terminates.\nxThere are twoways to create exception objects:\n(a)From ready-made exception classes(like ZeroDivisionError)\n(b)From user-defined exception classes\n--- Page 319 ---\nChapter22: Exception Handling 303\nxAdvantagesof tackling exceptions in OO manner:\n-More information can be packed into exception objects.\n-Propagation of exception objects from the point where they are \nraised to the point where they are tackled is managed by Python \nRuntime.\nxPython facilitates exception handlingby providing:\n-Keywords try, except, else, finally, raise.\n-Readymade exception classes.\nHow to use t r y- e x c e p t?\nxtryblock -Enclose in it the code that you anticipate willcause an \nexception.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_435", "chunk_strategy": "fixed_size"}}, {"text": "-Keywords try, except, else, finally, raise.\n-Readymade exception classes.\nHow to use t r y- e x c e p t?\nxtryblock -Enclose in it the code that you anticipate willcause an \nexception.\nxexceptblock -Catch the raisedexception in it. It must immediately \nfollow the tryblock.\ntry :\na = int(input('Enter an integer: '))\nb = int(input('Enter an integer: '))\nc = a / b\nprint('c =', c)\nexcept ZeroDivisionError:\nprint('Denominator is 0')\nGiven below is the sample interaction with the program:\nEnter an integer: 10\nEnter an integer: 0\nDenominator is 0\nxIf no exception occurs while executing the tryblock, controlgoes to \nfirst line beyond the exceptblock.\nxIf an exception occurs during execution of statements in tryblock, \nan exception is raised and rest of the tryblock is skipped. Control \nnow goes to the exceptblock. Here,if the type of exception raised \nmatches the exception named after exceptkeyword, that except\nblockis executed.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_436", "chunk_strategy": "fixed_size"}}, {"text": "now goes to the exceptblock. Here,if the type of exception raised \nmatches the exception named after exceptkeyword, that except\nblockis executed.\nxIf an exception occurs which does not match the exception named in \nexceptblock, then the defaultexception handler catches the \nexception, prints stack trace and terminates execution.\n--- Page 320 ---\n304 Let Us Python\nxWhen exception is raisedand exceptblock is executed, control goes \nto the next line after exceptblock, unless there is a returnor raisein \nexceptblock.\nNuances of t r yand e x c e p t\nxtryblock:\n-Can be nested inside another tryblock.\n-If an exception occurs and if a matching except handler is not \nfound in the exceptblock, then the outer try's excepthandlers \nare inspected for a match.\nxexceptblock:\n-Multiple exceptblocks for one tryblock are ok.\n-At a time only one exceptblock goes to work. \n-If same action is to be taken in case of multiple exceptions, then \nthe except clause can mention these exceptions in a tuple\ntry :", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_437", "chunk_strategy": "fixed_size"}}, {"text": "-At a time only one exceptblock goes to work. \n-If same action is to be taken in case of multiple exceptions, then \nthe except clause can mention these exceptions in a tuple\ntry :\n# some statements\nexcept (NameError, TypeError, ZeroDivisionError) :\n# some other statements\n-Order of exceptblocks is important -Derived first, Base last.\n-An empty exceptis like a catchall\u0376catches all exceptions.\n-An exception may be re-raised from any exceptblock.\nxGiven below is a program that putssome of the try, exceptnuances \nto a practical stint:\ntry :\na = int(input('Enter an integer: '))\nb = int(input('Enter an integer: '))\nc = a / b\nprint('c =', c)\nexcept ZeroDivisionError as zde :\nprint('Denominator is 0')\nprint(zde.args)\nprint(zde)\nexcept ValueError :\nprint('Unable to convert string to int')\nexcept :\n--- Page 321 ---\nChapter22: Exception Handling 305\nprint('Some unknown error')\nGiven below is the sample interactionwith the program:\nEnter an integer: 10\nEnter an integer: 20\nc = 0.5", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_438", "chunk_strategy": "fixed_size"}}, {"text": "except :\n--- Page 321 ---\nChapter22: Exception Handling 305\nprint('Some unknown error')\nGiven below is the sample interactionwith the program:\nEnter an integer: 10\nEnter an integer: 20\nc = 0.5\nEnter an integer: 10\nEnter an integer: 0\nDenominator is 0\n('division by zero',)\ndivision by zero\nEnter an integer: 10\nEnter an integer: abc\nUnable to convert string to int\nxIf an exception occurs,the type of exception raised is matchedwith \nthe exceptionsnamed after exceptkeyword. When a match occurs, \nthat exceptblockis executed, and then execution continues after \nthe last exceptblock.\nxIf we wish to do something more before doing a graceful exit, we \ncan use the keyword asto receive the exception object. We can then \naccess its argument either using its argsvariable, or by simply using \nthe exception object.\nxargsrefers to arguments that were used while creating the \nexception object.\nUser-defined Exceptions\nxSince all exceptional conditions cannot be anticipated, for every", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_439", "chunk_strategy": "fixed_size"}}, {"text": "the exception object.\nxargsrefers to arguments that were used while creating the \nexception object.\nUser-defined Exceptions\nxSince all exceptional conditions cannot be anticipated, for every \nexceptionalcondition there cannot be a class in Python library.\nxIn such cases we can define our own exception class as shown in the \nfollowing program:\nclass InsufficientBalanceError(Exception) :\ndef __init__(self, accno, cb) :\nself.__accno = accno\nself.__curbal = cb \n--- Page 322 ---\n306 Let Us Python\ndef get_details(self) :\nreturn { 'Acc no' : self.__accno, \n'Current Balance' : self.__curbal}\nclass Customers :\ndef __init__(self) :\nself.__dct = { }\ndef append(self, accno, n, bal) :\nself.__dct[accno] = { 'Name' : n, 'Balance' : bal }\ndef deposit(self, accno, amt) :\nd = self.__dct[accno]\nd['Balance'] = d['Balance'] + amt\nself.__dct[accno] = d\ndef display(self) :\nfor k, v in self.__dct.items( ) :\nprint(k, v)\nprint( )\ndef withdraw(self, accno, amt) :\nd = self.__dct[accno]\ncurbal = d['Balance']", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_440", "chunk_strategy": "fixed_size"}}, {"text": "self.__dct[accno] = d\ndef display(self) :\nfor k, v in self.__dct.items( ) :\nprint(k, v)\nprint( )\ndef withdraw(self, accno, amt) :\nd = self.__dct[accno]\ncurbal = d['Balance']\nif curbal -amt < 5000 :\nraise InsufficientBalanceError(accno, curbal)\nelse :\nd['Balance'] = d['Balance'] -amt\nself.__dct[accno] = d\nc = Customers( )\nc.append(123, 'Sanjay', 9000)\nc.append(101, 'Sameer', 8000)\nc.append(423, 'Ajay', 7000)\nc.append(133, 'Sanket', 6000)\nc.display( )\nc.deposit(123, 1000)\nc.deposit(423, 2000)\nc.display( )\ntry :\nc.withdraw(423, 3000)\nprint('Amount withdrawn successfully')\nc.display( )\nc.withdraw(101, 5000)\n--- Page 323 ---\nChapter22: Exception Handling 307\nprint('Amount withdrawn successfully')\nc.display( )\nexcept InsufficientBalanceError as ibe :\nprint('Withdrawal denied')\nprint('Insufficient balance')\nprint(ibe.get_details( ))\nOn executionof this program we get the following output:\n123 {'Name': 'Sanjay', 'Balance': 9000}\n101 {'Name': 'Sameer', 'Balance': 8000}", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_441", "chunk_strategy": "fixed_size"}}, {"text": "print('Insufficient balance')\nprint(ibe.get_details( ))\nOn executionof this program we get the following output:\n123 {'Name': 'Sanjay', 'Balance': 9000}\n101 {'Name': 'Sameer', 'Balance': 8000}\n423 {'Name': 'Ajay', 'Balance': 7000}\n133 {'Name': 'Sanket', 'Balance': 6000}\n123 {'Name': 'Sanjay', 'Balance': 10000}\n101 {'Name': 'Sameer', 'Balance': 8000}\n423 {'Name': 'Ajay', 'Balance': 9000}\n133 {'Name': 'Sanket', 'Balance': 6000}\nAmount withdrawn successfully\n123 {'Name': 'Sanjay', 'Balance': 10000}\n101 {'Name': 'Sameer', 'Balance': 8000}\n423 {'Name': 'Ajay', 'Balance': 6000}\n133 {'Name': 'Sanket', 'Balance': 6000}\nWithdrawal denied\nInsufficient balance\n{'Acc no': 101, 'Current Balance': 8000}\nxEach customer in a Bank has data like account number, name and \nbalance amount. This data is maintained in nested directories. \nxIf during withdrawal of money from a particular account the balance \ngoes below Rs. 5000, then a user-defined exception called \nInsufficientBalanceErroris raised.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_442", "chunk_strategy": "fixed_size"}}, {"text": "xIf during withdrawal of money from a particular account the balance \ngoes below Rs. 5000, then a user-defined exception called \nInsufficientBalanceErroris raised.\nxIn the matching exceptblock, details of the withdrawal transaction \nthat resulted into an exception are fetched by calling get_details( ) \nmethod present inInsufficientBalanceErrorclass and displayed.\nxget_details( )returns the formatted data. If we wish to get raw data, \nthen we can use ibe.argsvariable, or simply ibe.\n--- Page 324 ---\n308 Let Us Python\nprint(ibe.args)\nprint(ibe)\ne l s eBlock\nxThe try.. exceptstatement may also have an optional elseblock.\nxIf itispresent, it must occur after all the exceptblocks.\nxControl goes to elseblock if no exception occurs during execution of \nthe tryblock.\nxProgram given below shows how to use the elseblock.\ntry:\nlst = [10, 20, 30, 40, 50]\nfor num in lst :\ni = int(num)\nj = i * i\nprint(i, j)\nexcept NameError:\nprint(NameError.args)\nelse:\nprint('Total numbers processed', len(lst))", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_443", "chunk_strategy": "fixed_size"}}, {"text": "try:\nlst = [10, 20, 30, 40, 50]\nfor num in lst :\ni = int(num)\nj = i * i\nprint(i, j)\nexcept NameError:\nprint(NameError.args)\nelse:\nprint('Total numbers processed', len(lst))\ndel(lst)\nWe get the following output on executing this program:\n10 100\n20 400\n30 900\n40 1600\n50 2500\nTotal numbers processed 5\nxControl goes to elseblock since no exception occurred while \nobtaining squares.\nxIf we replace one of the elements in lstto 'abc', then a NameError\nwill occur which will be caught by exceptblock. In this case else\nblock doesn't go to work.\n--- Page 325 ---\nChapter22: Exception Handling 309\nf i n a l l yBlock\nxfinallyblock is optional.\nxCode in finallyalways runs, no matter what! Even if a returnor \nbreakoccurs first.\nxfinallyblock is placed after exceptblocks (if they exist).\nxtryblock must have exceptblock and/or finallyblock.\nxfinallyblock is commonly used for releasing external resources like \nfiles, network connections or database connections, irrespective of", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_444", "chunk_strategy": "fixed_size"}}, {"text": "xtryblock must have exceptblock and/or finallyblock.\nxfinallyblock is commonly used for releasing external resources like \nfiles, network connections or database connections, irrespective of \nwhether the use of the resource was successfulor not.\nExceptionHandlingTips\nxDon\ue001\u019a ca\u019ach and ignore an exception.\nxDon't catch everything using a catchall except, distinguish between \ntypes of exceptions.\nxMake exception handlingoptimally elaborate; not too much, nottoo \nlittle.\n____________________________________________________________________\nProblem 22.1\nWrite a program that infinitely receives positive integer as input and \nprints its square. If a negative number is entered then raise an \nexception, display a relevant error message and make a graceful exit.\nProgram\ntry:\nwhile True :\nnum = int(input('Enter a positive number: '))\nif num >= 0 :\nprint(num * num)\nelse :\nraise ValueError('Negative number')\nexcept ValueError as ve :\nprint(ve.args)\n--- Page 326 ---\n310 Let Us Python\nOutput", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_445", "chunk_strategy": "fixed_size"}}, {"text": "if num >= 0 :\nprint(num * num)\nelse :\nraise ValueError('Negative number')\nexcept ValueError as ve :\nprint(ve.args)\n--- Page 326 ---\n310 Let Us Python\nOutput\nEnter a positive number: 12\n144\nEnter a positive number: 34\n1156\nEnter a positive number: 45\n2025\nEnter a positive number: -9\n('Negative number',)\n____________________________________________________________________\nProblem 22.2\nWrite a program that implements a stack data structure of specified size. \nIf the stack becomes full and we still try to push an element to it, then \nan IndexErrorexception should be raised. Similarly, if the stack is empty \nand we try topop an element from it then an IndexErrorexception \nshould be raised.\nProgram\nclass Stack :\ndef __init__(self, sz) :\nself.size = sz \nself.arr = [ ]\nself.top = -1\ndef push(self, n) :\nif self.top + 1 == self.size :\nraise IndexError('Stackis full')\nelse :\nself.top += 1\nself.arr = self.arr + [n]\ndef pop(self) :\nif self.top == -1 :\nraise IndexError('Stack is empty')\nelse :", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_446", "chunk_strategy": "fixed_size"}}, {"text": "if self.top + 1 == self.size :\nraise IndexError('Stackis full')\nelse :\nself.top += 1\nself.arr = self.arr + [n]\ndef pop(self) :\nif self.top == -1 :\nraise IndexError('Stack is empty')\nelse :\nn = self.arr[self.top] \nself.top -= 1\n--- Page 327 ---\nChapter22: Exception Handling 311\nreturn n\ndef printall(self) :\nprint(self.arr)\ns = Stack(5)\ntry :\ns.push(10)\nn = s.pop( )\nprint(n)\nn = s.pop( )\nprint(n)\ns.push(20)\ns.push(30)\ns.push(40)\ns.push(50)\ns.push(60)\ns.printall( )\ns.push(70)\nexcept IndexError as ie :\nprint(ie.args)\nOutput\n10\n('Stack is empty',)\nTips\nxA new elementis added to the stack by merging two lists.\nxIndexErroris a readymade exception class. Here we have used it to \nraise a stack full or stack empty exception.\n____________________________________________________________________\nProblem 22.3\nWrite a program that implements a queue data structure of specified \nsize. If the queue becomes full and we still try to add an element to it,", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_447", "chunk_strategy": "fixed_size"}}, {"text": "Problem 22.3\nWrite a program that implements a queue data structure of specified \nsize. If the queue becomes full and we still try to add an element to it, \nthen a user-defined QueueErrorexception should be raised. Similarly, if \nthe queue is empty and we try to delete an element from it then a \nQueueErrorexception should be raised.\n--- Page 328 ---\n312 Let Us Python\nProgram\nclass QueueError(Exception) :\ndef __init__(self, msg, front, rear ) :\nself.errmsg = msg + ' front = ' + str(front) + ' rear = ' + str(rear)\ndef get_message(self) :\nreturn self.errmsg \nclassQueue :\ndef __init__(self, sz) :\nself.size = sz \nself.arr = [ ]\nself.front = self.rear = -1 \ndef add_queue(self, item) :\nif self.rear == self.size -1 :\nraise QueueError('Queue is full.', self.front, self.rear)\nelse :\nself.rear += 1\nself.arr = self.arr + [item]\nif self.front == -1 :\nself.front = 0\ndef delete_queue(self) :\nif self.front == -1 :\nraise QueueError('Queue is empty.', self.front, self.rear)\nelse :", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_448", "chunk_strategy": "fixed_size"}}, {"text": "else :\nself.rear += 1\nself.arr = self.arr + [item]\nif self.front == -1 :\nself.front = 0\ndef delete_queue(self) :\nif self.front == -1 :\nraise QueueError('Queue is empty.', self.front, self.rear)\nelse :\ndata = self.arr[self.front]\nif ( self.front == self.rear ) :\nself.front = self.rear = -1 \nelse :\nself.front += 1\nreturn data\ndef printall(self) :\nprint(self.arr)\nq = Queue(5)\ntry : \n--- Page 329 ---\nChapter22: Exception Handling 313\nq.add_queue(11)\nq.add_queue(12)\nq.add_queue(13)\nq.add_queue(14)\nq.add_queue(15) # oops, queue is full\nq.printall( )\ni = q.delete_queue( )\nprint('Item deleted = ', i)\ni = q.delete_queue( )\nprint('Item deleted = ', i)\ni = q.delete_queue( )\nprint('Item deleted = ', i)\ni = q.delete_queue( )\nprint('Item deleted = ', i)\ni = q.delete_queue( ) \nprint('Item deleted = ', i)\ni = q.delete_queue( ) # oops, queue is empty\nprint('Item deleted = ', i)\nexcept QueueErroras qe :\nprint(qe.get_message())\nOutput\n[11, 12, 13, 14, 15]\nItem deleted = 11\nItem deleted = 12", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_449", "chunk_strategy": "fixed_size"}}, {"text": "i = q.delete_queue( ) # oops, queue is empty\nprint('Item deleted = ', i)\nexcept QueueErroras qe :\nprint(qe.get_message())\nOutput\n[11, 12, 13, 14, 15]\nItem deleted = 11\nItem deleted = 12\nItem deleted = 13\nItem deleted = 14\nItem deleted = 15\nQueue is empty. front = -1 rear = -1\n____________________________________________________________________\nProblem 22.4\nWrite a program that receives an integer as input. If a string is entered \ninstead of an integer, then report an errorand give another chance to \nuser to enter an integer. Continue this process till correct input is \nsupplied.\n--- Page 330 ---\n314 Let Us Python\nProgram\nwhile True :\ntry :\nnum = int(input('Enter a number: '))\nbreak\nexcept ValueError :\nprint('Incorrect Input')\nprint('You entered: ', num)\nOutput\nEnter a number: aa\nIncorrect Input\nEnter a number: abc\nIncorrect Input\nEnter a number: a\nIncorrect Input\nEnter a number: 23\nYou entered: 23\n____________________________________________________________________", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_450", "chunk_strategy": "fixed_size"}}, {"text": "Incorrect Input\nEnter a number: abc\nIncorrect Input\nEnter a number: a\nIncorrect Input\nEnter a number: 23\nYou entered: 23\n____________________________________________________________________\n[A]State whether the following statements are True or False:\n(a)The exception handling mechanism is supposed to handle compile \ntime errors.\n(b)It is necessary to declare the exception class within the class in \nwhich an exception is going to be thrown.\n(c)Every raised exception must be caught.\n(d)For one tryblock there can be multiple exceptblocks.\n(e)When an e\u01c6cep\u019aion is raised\ue002 an e\u01c6cep\u019aion class\ue001s cons\u019ar\u01b5c\u019aor ge\u019as \ncalled.\n(f)tryblocks cannot be nested.\n--- Page 331 ---\nChapter22: Exception Handling 315\n(g) Proper destruction of an object is guaranteed by exception handling \nmechanism.\n(h)All exceptions occur at runtime.\n(i)Exceptions offer an object-oriented way of handling runtime errors.\n(j)If an exception occurs, then the program terminates abruptly", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_451", "chunk_strategy": "fixed_size"}}, {"text": "mechanism.\n(h)All exceptions occur at runtime.\n(i)Exceptions offer an object-oriented way of handling runtime errors.\n(j)If an exception occurs, then the program terminates abruptly \nwithout getting any chance to recover from the exception.\n(k)No matter whether an exception occurs or not, the statements in \nthe finallyclause (if present) will get executed.\n(l)A program can contain multiple finallyclauses.\n(m)finallyclause is used to perform cleanup operations like closing the \nnetwork/database connections.\n(n)While raising a user-defined exception, multiple values can be set in \nthe exception object.\n(o)In one function/method, there can be only one tryblock.\n(p)An exception must be caught in the same function/method in which \nit is raised.\n(q)All values set up in the exception object are available in the except \nblock that catches the exception.\n(r)If our program does not catch an exception then PythonRuntime \ncatches it.\n(s)It is possible to create user-defined exceptions.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_452", "chunk_strategy": "fixed_size"}}, {"text": "block that catches the exception.\n(r)If our program does not catch an exception then PythonRuntime \ncatches it.\n(s)It is possible to create user-defined exceptions.\n(t)All types of exceptions can be caught using the Exception class.\n(u)For everytryblock there must be a corresponding finallyblock.\n[B]Answer the followingquestions:\n(a)If we do not catch the exception thrown at runtime then who \ncatches it?\n--- Page 332 ---\n316 Let Us Python\n(b)Explain in short most compelling reasons for using exception \nhandling over conventional error handling approaches.\n(c)Is it necessary that all classes that can be used to represent \nexceptions be derived from base class Exception? \n(d)What is the use of a finallyblock in Python exception handling \nmechanism?\n(e)How does nested exception handling work in Python?\n(f)Write a program that receives 10 integers and stores them and their \ncubes in a dictionary. If the number entered is less than 3, raise a", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_453", "chunk_strategy": "fixed_size"}}, {"text": "(e)How does nested exception handling work in Python?\n(f)Write a program that receives 10 integers and stores them and their \ncubes in a dictionary. If the number entered is less than 3, raise a \nuser-defined exception NumberTooSmall, and if the number \nentered is more than 30, then raise a user-defined exception \nNumberTooBig. Whether an exception occurs or not, at the end \nprint the contents of the dictionary.\n(g) What's wrong with the following code snippet?\ntry :\n# some statements\nexcept :\n# report error 1\nexcept ZeroDivisionError :\n# report error 2\n(h)Which of these keywords is not part of Python's exception handling\nvocabulary\u0376try, catch, throw , except, raise, finally, else?\n(i)What will be the output of the following code?\ndef fun():\ntry:\nreturn 10\nfinally:\nreturn 20\nk = fun()\nprint(k)\n--- Page 333 ---\nLet UsPython\n317File Input/Output\nxI/O System xSerialization and Deserialization\nxFile I/O xSerialization of User-defined Types", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_454", "chunk_strategy": "fixed_size"}}, {"text": "try:\nreturn 10\nfinally:\nreturn 20\nk = fun()\nprint(k)\n--- Page 333 ---\nLet UsPython\n317File Input/Output\nxI/O System xSerialization and Deserialization\nxFile I/O xSerialization of User-defined Types\nxRead / Write Operations xFile and Directory Operations\nxFile Opening Modes xPrograms\nxwithKeyword xExercises\nxMoving within a File23\n\u201cSave in file, or perish... \u201d\n--- Page 334 ---\n318 Let Us Python\nI/O System\nxExpectationsfrom an I/O System:\n-It should allow us to communicate with multiple sources and \ndestinations.\nEx. Sources -Keyboard, File, Network\nEx. Destinations -Screen, File, Network\n-It should allow us to input/output varied entities. \nEx. Numbers, Strings, Lists, Tuples, Sets, Dictionaries, etc.\n-It should allow us to communicate in multiple ways.\nEx. Sequential access, Random access\n-It should allow us to deal with underlying file system.\nEx. Create, Modify, Rename, Delete files and directories\nxTypes of dataused for I/O:\nText -'485000' as a sequence of Unicode characters.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_455", "chunk_strategy": "fixed_size"}}, {"text": "-It should allow us to deal with underlying file system.\nEx. Create, Modify, Rename, Delete files and directories\nxTypes of dataused for I/O:\nText -'485000' as a sequence of Unicode characters.\nBinary -485000 as sequence of bytes of its binary equivalent.\nxFile Types:\nAll program files are text files.\nAll image, music, video, executable files are binary files.\nFile I/O\nxSequence of operations in file I/O:\n-Open a file\n-Read/Write data to it\n-Close the file\nxGiven below is a program that implements this sequence of file I/O \noperations:\n# write/read text data\nmsg1 = 'Pay taxes with a smile...\\n'\nmsg2 = 'I tried, but they wanted money!\\n'\nmsg3 = 'Don\\'t feel bad...\\n'\nmsg4 = 'It is alright to have no talent!\\n'\nf = open('messages', 'w')\nf.write(msg1)\nf.write(msg2)\n--- Page 335 ---\nChapter23: File Input/Output 319\nf.write(msg3)\nf.write(msg4)\nf.close( )\nf = open('messages', 'r')\ndata = f.read( )\nprint(data)\nf.close( )\nOn executing this program, we get the following output:", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_456", "chunk_strategy": "fixed_size"}}, {"text": "Chapter23: File Input/Output 319\nf.write(msg3)\nf.write(msg4)\nf.close( )\nf = open('messages', 'r')\ndata = f.read( )\nprint(data)\nf.close( )\nOn executing this program, we get the following output:\nPay taxes with a smile...\nI tried, but they wanted money!\nDon't feel bad...\nIt is alright to have no talent!\nxOpening a file brings its contents to a buffer in memory. While \nperforming read/writeoperations, data is read from or written to \nbuffer.\nf = open(filename, 'r') # opens file for reading\nf = open(filename, 'w') # opens file for writing\nf.close( ) # closes the file by vacating the buffer\nOnce file is closed read/write operation on it are not feasible.\nxf.write(msg1)writes msg1string to the file.\nxdata = f.read()reads all the lines present in the file represented by \nobject finto data.\nRead / Write Operations\nxThere are two functions for writing data to a file:\nmsg= 'Bad officials are elected by good citizens who do not vote.\\n'", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_457", "chunk_strategy": "fixed_size"}}, {"text": "object finto data.\nRead / Write Operations\nxThere are two functions for writing data to a file:\nmsg= 'Bad officials are elected by good citizens who do not vote.\\n'\nmsgs = ['Humpty\\n', 'Dumpty\\n', 'Sat\\n', 'On\\n', 'a\\n', 'wall\\n']\nf.write(msg)\nf.writelines(msgs)\nxTo write objects other than strings, we need to convert them to \nstrings before writing:\ntpl = ('Ajay', 23, 15000)\n--- Page 336 ---\n320 Let Us Python\nlst = {23, 45, 56, 78, 90}\nd = {'Name' : 'Dilip', 'Age' : 25}\nf.write(str(tpl))\nf.write(str(lst))\nf.write(str(d))\nxThere are three functions for reading data from a filerepresented by \nfile object f. \ndata = f.read( ) # reads entire file contents and returns as string\ndata = f.read(n) # reads n characters, and returns as string\ndata = f.readline( )# reads a line, and returns as string\nIf end of file is reached f.read( )returns an empty string.\nxThere are two ways to read a file line-by-line till end of file:\n# first way\nwhile True :\ndata = f.readline()\nif data == '' :\nbreak", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_458", "chunk_strategy": "fixed_size"}}, {"text": "If end of file is reached f.read( )returns an empty string.\nxThere are two ways to read a file line-by-line till end of file:\n# first way\nwhile True :\ndata = f.readline()\nif data == '' :\nbreak \nprint(data, end ='')\n# second way\nfor data in f :\nprint(data, end ='')\nxTo read all the lines in a file and form a listof lines:\ndata = f.readlines( )\nFile Opening Modes\nxThere are multiple file-opening modes available:\n'r' -Opensfile for reading in text mode.\n'w' -Opensfile for writing in text mode.\n'a' -Opensfile for appending in text mode.\n'r+' -Opens file for reading and writing in text mode.\n'w+' -Opens file for writing and reading in text mode.\n'a+' -Opens file for appending and reading in text mode.\n--- Page 337 ---\nChapter23: File Input/Output 321\n'rb' -Opensfile for reading in binarymode.\n'wb' -Opensfile for writing in binary mode.\n'ab' -Opensfile for appending in binary mode.\n'rb+' -Opens file for reading and writingin binary mode.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_459", "chunk_strategy": "fixed_size"}}, {"text": "'rb' -Opensfile for reading in binarymode.\n'wb' -Opensfile for writing in binary mode.\n'ab' -Opensfile for appending in binary mode.\n'rb+' -Opens file for reading and writingin binary mode.\n'wb+' -Opens file for writingand readingin binary mode.\n'ab+' -Opens file for appending and readingin binary mode.\nIf mode argument is not mentioned while opening a file, then 'r' is \nassumed.\nxWhile opening a file for writing, if the file already exists, it is \noverwritten.\nxIf file is opened for writing in binary mode then a bytes-like object \nshould be passed to write( )as shown below:\nf = open('a.dat', 'wb+')\nd = b'\\xee\\x86\\xaa' # series of 3 bytes, \\x indicates hexadecimal\nf.write(d)\nw i t hKeyword\nx It is a good idea to close a file once its usage is over, as it will free up \nsystem resources.\nxIf we don\u2019t close a file, when the file object is destroyed file will be \nclosed for usby Python's garbage collector program.\nxIf we use withkeyword while opening the file, the file gets closed as", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_460", "chunk_strategy": "fixed_size"}}, {"text": "xIf we don\u2019t close a file, when the file object is destroyed file will be \nclosed for usby Python's garbage collector program.\nxIf we use withkeyword while opening the file, the file gets closed as \nsoon as its usage is over.\nwith open('messages', 'r') as f :\ndata = f.read( )\nxwithensures that the file is closed even if an exception occurs while \nprocessing it.\nMoving within a File\nxWhen we are reading a file or writing a file, the next read or write \noperation is performed from the next character/byte as compared \nto the previous read/write operation.\nxThus if we read the first character from a file using f.read(1), next \ncall to f.read(1)will automatically read the second character in the \nfile.\n--- Page 338 ---\n322 Let Us Python\nxAt times we may wish to move to desired position in a file before \nreading/writing. This can be done using f.seek( )method.\nxGeneral form of seek( )is given below:\nf.seek(offset, reference) \nreferencecan take values 0, 1, 2 standing for beginning of file,", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_461", "chunk_strategy": "fixed_size"}}, {"text": "reading/writing. This can be done using f.seek( )method.\nxGeneral form of seek( )is given below:\nf.seek(offset, reference) \nreferencecan take values 0, 1, 2 standing for beginning of file, \ncurrent position in file and end of file respectively.\nxFor file opened in text mode, reference values 0 and 2 alone can be \nused. Also, using2, we can only move to end of file.\nf.seek(512, 0)# moves to position 512 from beginning of file\nf.seek(0, 2) # moves to end of file\nxFor file opened in binary mode, reference values 0, 1, 2 can be used.\nf.seek(0) # moves to beginning of file\nf.seek(12, 0)# moves to position 12 from beginning of file\nf.seek(-15, 2)# moves 15 positions to left from end of file\nf.seek(6, 1) # moves 6 positions to right from current position\nf.seek(-10, 1)# moves 10 positions to left from currentposition\nSerialization and Deserialization\nxCompared to strings, reading/writing numbers from/to a file is \ntedious. This is because write( )writes a string to a file and read( )", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_462", "chunk_strategy": "fixed_size"}}, {"text": "Serialization and Deserialization\nxCompared to strings, reading/writing numbers from/to a file is \ntedious. This is because write( )writes a string to a file and read( ) \nreturns a string read from a file. So we need to do conversions while \nreading/writing, as shown in the following program:\nf = open('numberstxt', 'w+')\nf.write(str(233)+'\\n')\nf.write(str(13.45))\nf.seek(0)\na = int(f.readline( ))\nb = float(f.readline( ))\nprint(a + a)\nprint(b + b)\nxIf we are to read/write more complicated data in theform of tuple, \ndictionaries, etc. from/to file using the above method, it will become \nmore difficult. In such cases a module called json should be used.\n--- Page 339 ---\nChapter23: File Input/Output 323\nxjsonmodule converts Python data into appropriate JSON types \nbefore writing data to a file. Likewise, it converts JSON types read \nfrom a file into Python data. The first process is called serialization\nand the second is called deserialization.\n# serialize/deserialize a list\nimport json", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_463", "chunk_strategy": "fixed_size"}}, {"text": "from a file into Python data. The first process is called serialization\nand the second is called deserialization.\n# serialize/deserialize a list\nimport json\nf = open('sampledata', 'w+')\nlst = [10, 20, 30, 40, 50, 60, 70, 80, 90]\njson.dump(lst, f)\nf.seek(0)\ninlst = json.load(f)\nprint(inlst)\nf.close( )\n# serialize/deserialize a tuple\nimport json\nf = open('sampledata', 'w+')\ntpl = ('Ajay', 23, 2455.55)\njson.dump(tpl, f)\nf.seek(0)\nintpl = json.load(f)\nprint(tuple(intpl))\nf.close( )\n# serialize/deserialize a dictionary\nimport json\nf = open('sampledata', 'w+')\ndct = { 'Anil' : 24, 'Ajay' : 23, 'Nisha' : 22}\njson.dump(dct, f)\nf.seek(0)\nindct = json.load(f)\nprint(indct)\nf.close( )\nxSerialization of a Python type to JSON data is done using a function \ndump( ). It writes the serialized data to a file.\nxDeserialization of a JSON type to a Python type is done using a \nfunction load( ). It reads the data from a file, does the conversion \nand returns the converted data.\n--- Page 340 ---", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_464", "chunk_strategy": "fixed_size"}}, {"text": "xDeserialization of a JSON type to a Python type is done using a \nfunction load( ). It reads the data from a file, does the conversion \nand returns the converted data.\n--- Page 340 ---\n324 Let Us Python\nxWhile deserializing a tuple, load( )returns a list and not a tuple. So \nwe need to convert the list to a tuple using tuple( )conversion \nfunction.\nxInstead of writing JSON data to a file, we can write it to a string, and \nread it back from a string as shown below:\nimport json\nlst = [10, 20, 30, 40, 50, 60, 70, 80, 90]\ntpl = ('Ajay', 23, 2455.55)\ndct = { 'Anil' : 24, 'Ajay' : 23, 'Nisha' : 22}\nstr1 = json.dumps(lst)\nstr2 = json.dumps(tpl)\nstr3 = json.dumps(dct)\nl = json.loads(str1)\nt = tuple(json.loads(str2))\nd = json.loads(str3)\nprint(l)\nprint(t)\nprint(d)\nxIt is possible to serialize/deserialize nested lists and directories as \nshown below:\n# serialize/deserialize a dictionary\nimport json\nlofl = [10, [20, 30, 40], [ 50, 60, 70], 80, 90]\nf = open('data', 'w+')\njson.dump(lofl, f)", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_465", "chunk_strategy": "fixed_size"}}, {"text": "shown below:\n# serialize/deserialize a dictionary\nimport json\nlofl = [10, [20, 30, 40], [ 50, 60, 70], 80, 90]\nf = open('data', 'w+')\njson.dump(lofl, f)\nf.seek(0)\ninlofl = json.load(f)\nprint(inlofl)\nf.close( )\n# serialize/deserialize a dictionary\nimport json\ncontacts = { 'Anil': { 'DOB' : '17/11/98', 'Favorite' : 'Igloo' },\n'Amol': { 'DOB' : '14/10/99', 'Favorite' : 'Tundra' },\n'Ravi': { 'DOB' : '19/11/97', 'Favorite' : 'Artic' } }\nf = open('data', 'w+')\njson.dump(contacts, f)\nf.seek(0)\n--- Page 341 ---\nChapter23: File Input/Output 325\nincontacts = json.load(f)\nprint(incontacts)\nf.close( )\nSerialization of User-defined Types\nxStandard Python types can be easily converted to JSON and vice-\ncersa. However, if we attempt to serialize a user-defined Complex\ntype to JSON we get following error:\nTypeError: Objectof type 'Complex' is not JSON serializable\nxTo serialize user-defined types we need to define encoding and \ndecoding functions. This is shown in the following program where,", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_466", "chunk_strategy": "fixed_size"}}, {"text": "TypeError: Objectof type 'Complex' is not JSON serializable\nxTo serialize user-defined types we need to define encoding and \ndecoding functions. This is shown in the following program where, \nwe serialize Complextype.\nimport json\ndef encode_complex(x):\nif isinstance(x, Complex) :\nreturn(x.real, x.imag)\nelse :\nraise TypeError('Complex object is not JSON serializable')\ndef decode_complex(dct):\nif '__Complex__' in dct :\nreturn Complex(dct['real'], dct['imag'])\nreturn dct\nclass Complex :\ndef __init__(self, r = 0, i = 0) :\nself.real = r \nself.imag = i\ndef print_data(self) :\nprint(self.real, self.imag)\nc = Complex(1.0, 2.0)\nf = open('data', 'w+')\njson.dump(c, f, default = encode_complex)\nf.seek(0)\ninc = json.load(f, object_hook = decode_complex)\nprint(inc)\n--- Page 342 ---\n326 Let Us Python\nxTo translate a Complexobject into JSON, we have defined an \nencoding functioncalled encode_complex( ).We have provided this\nfunction to dump( )method\u2019s defaultparameter. dump( )method", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_467", "chunk_strategy": "fixed_size"}}, {"text": "xTo translate a Complexobject into JSON, we have defined an \nencoding functioncalled encode_complex( ).We have provided this\nfunction to dump( )method\u2019s defaultparameter. dump( )method \nwill use encode_complex( )function while serializing a Complex\nobject.\nxIn encode_complex( )we have checked whether the object received \nis of the type Complex. If it is,then we return the Complexobject \ndata as a tuple. If not, we raise a TypeErrorexception.\nxDuring deserialization when load( )method attempts to parse an \nobject, instead of the default decoder we provide our decoder \ndecode_complex( )through the object_hookparameter.\nFile and Directory Operations\nxPython lets us interact with the underlying file system. This lets us \nperform many file and directory operations.\nxFile operations include creation, deletion, renaming, copying, \nchecking if an entry is a file, obtaining statistics of a file, etc.\nxDirectory operations include creation, recursive creation, renaming,", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_468", "chunk_strategy": "fixed_size"}}, {"text": "checking if an entry is a file, obtaining statistics of a file, etc.\nxDirectory operations include creation, recursive creation, renaming, \nchanging into, deleting, listing a directory, etc.\nxPath operations include obtaining the absolute and relative path, \nsplitting path elements, joining paths, etc.\nx'.' represents current directory and '..' represents parent of current \ndirectory.\nxGiven below is a program that demonstrates some file, directory and \npath operations.\nimport os\nimport shutil\nprint(os.name)\nprint(os.getcwd( ))\nprint(os.listdir('.')) \nprint(os.listdir('..'))\nif os.path.exists('mydir') :\nprint('mydir already exists')\nelse :\n--- Page 343 ---\nChapter23: File Input/Output 327\nos.mkdir('mydir')\nos.chdir('mydir')\nos.makedirs('.\\\\dir1\\\\dir2\\\\dir3')\nf = open('myfile', 'w')\nf.write('Having one child makes you a parent...')\nf.write('Having two you are a referee')\nf.close( )\nstats = os.stat('myfile')\nprint('Size = ', stats.st_size)\nos.rename('myfile', 'yourfile')", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_469", "chunk_strategy": "fixed_size"}}, {"text": "f.write('Having one child makes you a parent...')\nf.write('Having two you are a referee')\nf.close( )\nstats = os.stat('myfile')\nprint('Size = ', stats.st_size)\nos.rename('myfile', 'yourfile')\nshutil.copyfile('yourfile', 'ourfile')\nos.remove('yourfile')\ncurpath = os.path.abspath('.')\nos.path.join(curpath, 'yourfile')\nif os.path.isfile(curpath) :\nprint('yourfile file exists')\nelse :\nprint('yourfile file doesn\\'t exist')\n____________________________________________________________________\nProblem 23.1\nWrite a program to read the contents of file 'messages' one character at \na time. Print each character that is read.\nProgram\nf = open('messages', 'r')\nwhile True :\ndata = f.read(1)\nif data == '' :\nbreak \nprint(data, end ='')\nf.close( )\n--- Page 344 ---\n328 Let Us Python\nOutput\nYou may not be great when you start, but you need to start to be great.\nWork hard until you don't need an introduction.\nWork so hard that one day your signature becomes an autograph.\nTips", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_470", "chunk_strategy": "fixed_size"}}, {"text": "Output\nYou may not be great when you start, but you need to start to be great.\nWork hard until you don't need an introduction.\nWork so hard that one day your signature becomes an autograph.\nTips\nxf.read(1)reads 1 character from a file object f.\nxread( )returns an empty string on reaching end of file.\nxif end=''is not used in the call to print( ), each character read will \nbe printed in a new line.\n____________________________________________________________________\nProblem 23.2\nWrite a program that writes four integers to a file called 'numbers'. Go \nto following positions in the file and report these positions.\n10 positions from beginning\n2 positions to the right of current position\n5 positions to the left of current position\n10 positions to the left from end\nProgram\nf = open('numbers', 'wb')\nf.write(b'231')\nf.write(b'431')\nf.write(b'2632')\nf.write(b'833')\nf.close( )\nf = open('numbers', 'rb')\nf.seek(10,0)\nprint(f.tell( ))\nf.seek(2,1)\nprint(f.tell( ))\nf.seek(-5,1)\nprint(f.tell( ))", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_471", "chunk_strategy": "fixed_size"}}, {"text": "f.write(b'231')\nf.write(b'431')\nf.write(b'2632')\nf.write(b'833')\nf.close( )\nf = open('numbers', 'rb')\nf.seek(10,0)\nprint(f.tell( ))\nf.seek(2,1)\nprint(f.tell( ))\nf.seek(-5,1)\nprint(f.tell( ))\nf.seek(-10,2)\nprint(f.tell( ))\n--- Page 345 ---\nChapter23: File Input/Output 329\nf.close( )\nOutput\n10\n12\n7\n1\n____________________________________________________________________\nProblem 23.3\nWrite a Python program that searches for a file, obtains its size and \nreports the size in bytes/KB/MB/GB/TB as appropriate.\nProgram\nimport os\ndef convert(num) :\nfor x in ['bytes', 'KB', 'MB', 'GB','TB']:\nif num < 1024.0:\nreturn \"%3.1f %s\" % (num, x)\nnum /= 1024.0\ndef file_size(file_path):\nif os.path.isfile(file_path):\nfile_info = os.stat(file_path)\nreturn convert(file_info.st_size)\nfile_path = r'C:\\Windows\\System32\\mspaint.exe'\nprint(file_size(file_path))\nOutput\n6.1 MB\n____________________________________________________________________\nProblem 23.4", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_472", "chunk_strategy": "fixed_size"}}, {"text": "file_path = r'C:\\Windows\\System32\\mspaint.exe'\nprint(file_size(file_path))\nOutput\n6.1 MB\n____________________________________________________________________\nProblem 23.4\nWrite a Python program that reports the time of creation, time of last \naccess and time of last modification for a given file.\n--- Page 346 ---\n330 Let Us Python\nProgram\nimport os, time\nfile = 'sampledata'\nprint(file)\ncreated = os.path.getctime(file)\nmodified = os.path.getmtime(file)\naccessed = os.path.getatime(file)\nprint('Date created: ' + time.ctime(created))\nprint('Date modified: ' + time.ctime(modified))\nprint('Date accessed: ' + time.ctime(accessed))\nOutput\nsampledata\nDate created: Tue May 14 08:51:52 2019\nDate modified: Tue May 14 09:11:59 2019\nDate accessed: Tue May 14 08:51:52 2019\nTips\nxFunctionsgetctime( ), getmtime( ) and getatime( ) return the \ncreation, modification and access time for the given file. The times \nare returned as number of seconds since the epoch. Epoch is", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_473", "chunk_strategy": "fixed_size"}}, {"text": "Tips\nxFunctionsgetctime( ), getmtime( ) and getatime( ) return the \ncreation, modification and access time for the given file. The times \nare returned as number of seconds since the epoch. Epoch is \nconsidered to be 1stJan 1970, 00:00:00.\nxctime( )function of timemodule converts the time expressed in \nseconds since epoch into a string representing local time.\n____________________________________________________________________\n[A]State whether the following statements are True or False:\n(a)If a file is opened for reading, it is necessary that the file must exist.\n--- Page 347 ---\nChapter23: File Input/Output 331\n(b)If a file opened for writing already exists, its contents would be \noverwritten.\n(c)For opening a file in append mode it is necessary that the file should \nexist.\n[B]Answer the followingquestions:\n(a)What sequence of activities take place on opening a file for reading\nin text mode?\n(b)Is it necessary that a file created in text mode must always be", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_474", "chunk_strategy": "fixed_size"}}, {"text": "exist.\n[B]Answer the followingquestions:\n(a)What sequence of activities take place on opening a file for reading\nin text mode?\n(b)Is it necessary that a file created in text mode must always be \nopened in text mode for subsequent operations?\n(c)While using the statement,\nfp = open('myfile', 'r')\nwhat happens if,\n\ue001'myfile' does not exist on the disk\n\ue001'myfile' exists on the disk\n(d)While using the statement,\nf = open('myfile', 'wb')\nwhat happens if,\n\ue001'myfile' does not exist on the disk\n\ue001'myfile' exists on the disk\n(e)A floating-point list contains percentage marks obtained by \nstudents in an examination. To store these marks in a file \n\u2018marks.dat\u2019, in which mode would you open the file and why?\n[C]Attempt the followingquestions:\n(a)Write a program to read a file and display its contents along with \nline numbers before each line.\n(b)Write a program to append the contents of one file at the end of \nanother.\n--- Page 348 ---\n332 Let Us Python", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_475", "chunk_strategy": "fixed_size"}}, {"text": "line numbers before each line.\n(b)Write a program to append the contents of one file at the end of \nanother.\n--- Page 348 ---\n332 Let Us Python\n(c)Suppose a file contains student\u2019s records with each record \ncontaining name and age of a student. Write a program to read \nthese records and display them in sorted order by name.\n(d)Write a program to copy contents of one file to another. While \ndoing so replace all lowercase characters with their equivalent \nuppercase characters.\n(e)Write a program that merges lines alternately from two files and \nwrites the results to new file. If one file has less number of lines\nthan the other, the remaining lines from the larger file should be \nsimply copied into the target file.\n(f)Suppose an Employeeobject contains following details:\nemployee code, employee name, date of joining, salary \nWrite a program to serialize and deserialize this data.\n(g) A hospital keeps a file of blood donors in which each record has the \nformat:\nName: 20 Columns", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_476", "chunk_strategy": "fixed_size"}}, {"text": "Write a program to serialize and deserialize this data.\n(g) A hospital keeps a file of blood donors in which each record has the \nformat:\nName: 20 Columns\nAddress: 40 Columns\nAge: 2 Columns\nBlood Type: 1 Column (Type 1, 2, 3 or 4)\nWrite a program to read the file and print a list of all blooddonors \nwhose age is below 25 and whose blood type is 2.\n(h)Given a list of names of students in a class, write a program to store \nthe names in a file on disk. Make a provision to display the nthname \nin the list, where nis read from the keyboard.\n(i)Assume that a Master file contains two fields, roll number and \nname of the student. At the end of the year, a set of students join \nthe class and another set leaves. A Transaction file contains the roll \nnumbers and an appropriate code to add or delete a student.\nWrite a program to create another file that contains the updated \nlist of names and roll numbers. Assume that the Masterfile and the", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_477", "chunk_strategy": "fixed_size"}}, {"text": "numbers and an appropriate code to add or delete a student.\nWrite a program to create another file that contains the updated \nlist of names and roll numbers. Assume that the Masterfile and the\nTransaction file are arranged in ascending order by roll numbers. \nThe updated file should also be in ascending order by rollnumbers.\n(j)Given a text file, write a program to create another text file deleting \nthe words \u201ca\u201d, \u201cthe\u201d, \u201can\u201d and replacing each one of them with a \nblank space.\n--- Page 349 ---\nLet UsPython\n333Miscellany\nxDocumentation Strings xDecorating Functions with Args\nxCommand-line Arguments xUnicode\nxParsing of Command-line xbytesDatatype\nxBitwise Operators xCreate Executable File\nxAssertion xPrograms\nxDecorators xExercises24\n\u201cEfficient is better... \u201d\n--- Page 350 ---\n334 Let Us Python\nThe topics discussed in this chapter are far too removed from the \nmainstream Python programming for inclusion in the earlier chapters.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_478", "chunk_strategy": "fixed_size"}}, {"text": "\u201cEfficient is better... \u201d\n--- Page 350 ---\n334 Let Us Python\nThe topics discussed in this chapter are far too removed from the \nmainstream Python programming for inclusion in the earlier chapters. \nThese topics provide certain useful programming features, and could \nprove to be of immense help in certain programming strategies.\nDocumentation Strings\nxIt is a good idea to mention a documentation string (often called \ndoscstring) below a module, function, class or method definition. It \nshould be the first line below the defor the classstatement.\nxThe docstring is available in the attribute __doc__ of a module, \nfunction, class or method. \nxIf the docstring is multi-line itshould contain a summary line \nfollowed by a blank line, followed by a detailed comment. \nxSingle-line and Multi-line docstrings are written within triple quotes.\nxUsing help( )method we can print the functions/class/method \ndocumentation systematically.\nxIn the program given below thefunction display( )displays a", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_479", "chunk_strategy": "fixed_size"}}, {"text": "xUsing help( )method we can print the functions/class/method \ndocumentation systematically.\nxIn the program given below thefunction display( )displays a \nmessage and the function show(msg1, msg2)displays msg1in \nlowercase and msg2in uppercase. It uses a single line docstring for \ndisplay( ) and a mulit-line docstring for show( ). It displays both the \ndocstrings. Also, it generates help on both the functions.\ndef display( ) :\n\"\"\"Display a message\"\"\"\nprint('Hello')\nprint(display.__doc__)\ndef show(msg1 = ' ', msg2 = ' '):\n\"\"\"Display 2 messages\nArguments:\nmsg1 --message to be displayed in lowercase (default ' ')\nmsg2 --message to be displayed in uppercase (default ' ')\n\"\"\"\nprint(msg1.lower())\nprint(msg2.upper())\n--- Page 351 ---\nChapter24: Miscellany 335\nprint(show.__doc__)\ndisplay( )\nshow('Cindrella', 'Mozerella')\nhelp(display) \nhelp(show) \nOn execution of the program it produces the following output:\nHello\nDisplay a message.\ncindrella\nMOZERELLA\nDisplay 2 messages.\nArguments:", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_480", "chunk_strategy": "fixed_size"}}, {"text": "show('Cindrella', 'Mozerella')\nhelp(display) \nhelp(show) \nOn execution of the program it produces the following output:\nHello\nDisplay a message.\ncindrella\nMOZERELLA\nDisplay 2 messages.\nArguments:\nmsg1 --message to be displayedin lowercase (default ' ')\nmsg2 --message to be displayed in uppercase (default ' ')\nHelp on function display in module __main__:\ndisplay()\nDisplay a message.\nHelp on function show in module __main__:\nshow(msg1=' ', msg2=' ')\nDisplay 2 messages.\nArguments:\nmsg1 --message to be displayed in lowercase (default ' ')\nmsg1 --message to be displayed in uppercase (default ' ')\nCommand-line Arguments\nxArguments passed to a Python script are available in sys.argv.\n# sample.py\nimport sys\nprint('Number of arguments received= ', len(sys.argv))\nprint('Arguments received= ', str(sys.argv))\nIf we execute the script as\n--- Page 352 ---\n336 Let Us Python\nC:\\>sample.py cat dog parrot\nwe get the following output:\nNumber of arguments received= 4", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_481", "chunk_strategy": "fixed_size"}}, {"text": "print('Arguments received= ', str(sys.argv))\nIf we execute the script as\n--- Page 352 ---\n336 Let Us Python\nC:\\>sample.py cat dog parrot\nwe get the following output:\nNumber of arguments received= 4\nArguments received= sample.py cat dog parrot\nxIf we are to write a program for copying contents of one file to \nanother, we can receive source and target filenames through \ncommand-line arguments.\n# filecopy.py\nimport sys\nimport shutil\nargc = len(sys.argv)\nif argc != 3 :\nprint('Incorrect usage')\nprint('Correct usage: filecopy source target')\nelse :\nsource = sys.argv[1]\ntarget = sys.argv[2]\nshutil.copyfile(source, target)\nParsing of Command-line\nxWhile using the 'filecopy.py' program discussedabove, the first \nfilename is always treated as source and second as target. Instead of \nthis, if we wish to have flexibility in supplying source and target \nfilenames, we can use options at command-lineas shown below:\nfilecopy.py -s phone -t newphone\nfilecopy -t newphone -s phone\nfilecopy-h", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_482", "chunk_strategy": "fixed_size"}}, {"text": "filenames, we can use options at command-lineas shown below:\nfilecopy.py -s phone -t newphone\nfilecopy -t newphone -s phone\nfilecopy-h\nNow argument that follows -swould be treated as source filename \nand the one that follows -twould be treated as target filename. The \noption -his for receiving help about the program.\nxTo permit this flexibility, we should use the getoptmodule to parse \nthe command-line.\n# filecopy.py\nimport sys, getopt\n--- Page 353 ---\nChapter24: Miscellany 337\nimport shutil\nif len(sys.argv) == 1 :\nprint('Incorrect usage')\nprint('Correct usage: filecopy.py -s <source> -t <target>')\nsys.exit(1)\nsource = ''\ntarget = ''\ntry:\noptions, arguments = getopt.getopt(sys.argv[1:],'hs:t:')\nexcept getopt.GetoptError:\nprint('filecopy.py -s <source> -t <target>')\nelse :\nfor opt, arg in options:\nif opt == '-h':\nprint('filecopy.py -s <source> -t <target>')\nsys.exit(2)\nelif opt == '-s' :\nsource = arg\nelif opt == '-t' :\ntarget = arg\nelse :\nprint('source file: ', source)", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_483", "chunk_strategy": "fixed_size"}}, {"text": "for opt, arg in options:\nif opt == '-h':\nprint('filecopy.py -s <source> -t <target>')\nsys.exit(2)\nelif opt == '-s' :\nsource = arg\nelif opt == '-t' :\ntarget = arg\nelse :\nprint('source file: ', source)\nprint('target file: ', target)\nif source and target :\nshutil.copyfile(source, target)\nxsys.argv[1:]returns the command-line except the name of the \nprogram, i.e. filecopy.py.\nxCommand line and the valid options are passed to getopt( ). In our \ncase the valid options are -s, -tand -h. If an option has anargument \nit is indicated using the :after the argument, as in s:and t:.-hoption \nhas no argument.\nxThe getopt( )method parses sys.argv[1:]and returns two lists\u0376a list\nof (option, argument) pairs and a list of non-option arguments.\nxSome examples of contents of these two lists are given below:\nExample 1:\nfilecopy.py -s phone -t newphone \n--- Page 354 ---\n338 Let Us Python\noptionswould be [('-s', 'phone'), ('-t', 'newphone')]\nargumentswould be [ ] \nExample 2:\nfilecopy.py -h", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_484", "chunk_strategy": "fixed_size"}}, {"text": "Example 1:\nfilecopy.py -s phone -t newphone \n--- Page 354 ---\n338 Let Us Python\noptionswould be [('-s', 'phone'), ('-t', 'newphone')]\nargumentswould be [ ] \nExample 2:\nfilecopy.py -h\noptionswould be [('-h', ' ')]\nargumentswould be [ ]\nExample 3:\nfilecopy.py -s phone -t newphone word1 word2\noptionswould be [('-s', 'phone'), ('-t', 'newphone')]\nargumentswould be ['word1', 'word2']\nxNote that non-option arguments like word1, word2must always \nfollow option argumentslike -s, -t, -h, otherwise they too would be \ntreated as non-option arguments.\nxsys.exit()terminates the execution of the program.\nxIDLE has no GUI-based provision to provide command-line \narguments. So at command prompt you have to execute program as \nfollows:\nC:\\>idle.py -r filecopy.py -s phone -t newphone\nHere -rindicates that when IDLE is launched it should run the script \nfollowing -r.\nxWhen we are experimenting with getopt( )function, frequently \ngoing to command-prompt to execute the script becomes tedious.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_485", "chunk_strategy": "fixed_size"}}, {"text": "following -r.\nxWhen we are experimenting with getopt( )function, frequently \ngoing to command-prompt to execute the script becomes tedious. \nInstead you can set up sys.argv[ ]at the beginning of the program as \nshown below:\nsys.argv = ['filecopy.py', '-s', 'phone', '-t', 'newphone']\nBitwise Operators\nxBitwise operators permit us to work with individual bits of a byte. \nThere are many bitwise operators available:\n~ -not (also called complement operator)\n<< -left shift, >> -right shift\n& -and, | -or, ^ -xor\nxBitwise operators usage:\n--- Page 355 ---\nChapter24: Miscellany 339\nch = 32\ndh = ~ch # toggles 0s to1s and 1s to 0s\neh = ch << 3 # << shifts bits in ch 3 positions to left\nfh = ch >> 2 # >> shifts bits in ch 2 positions to right\na = 45 & 32 # and bits of 45 and 32\nb = 45 | 32 # or bits of 45 and 32\nc = 45 ^ 32 # xor bits of 45 and 32\nxRemember:\nAnything ANDed with 0 is 0.\nAnything ORed with 1 is 1.\n1 XORed with 1 is 0.\n<< -As bits are shifted from left, zeros are pushed from right.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_486", "chunk_strategy": "fixed_size"}}, {"text": "c = 45 ^ 32 # xor bits of 45 and 32\nxRemember:\nAnything ANDed with 0 is 0.\nAnything ORed with 1 is 1.\n1 XORed with 1 is 0.\n<< -As bits are shifted from left, zeros are pushed from right.\n>> -As bits are shifted from right, left-most bit is copied from left.\nxPurpose of each bitwise operator is given below: \n~ -Convert 0 to 1 and 1 to 0\n<< >> -Shift out desired number of bits from left or right\n& -Check whether a bit is on / off. Put off a particular bit\n| -Puton a particular bit\n^ -Toggle a bit\nxBitwise in-place operators: <<= >>= &= |= ^=\na = a << 5is same as a <<= 5\nb= b&2is same as b &= 2\nxExcept ~ all other bitwise operators are binary operators.\nAssertion\nxAn assertion allows you to express programmatically your \nassumption about the data at a particular point in execution.\nxAssertions perform run-time checksof assumptions that you would \nhave otherwise put incode comments. \n# denominator should be non-zero, i.e. numlist must not be empty\navg = sum(numlist) / len(numlist)", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_487", "chunk_strategy": "fixed_size"}}, {"text": "have otherwise put incode comments. \n# denominator should be non-zero, i.e. numlist must not be empty\navg = sum(numlist) / len(numlist)\nInstead of this, a safer way to code will be:\n--- Page 356 ---\n340 Let Us Python\nassert len(numlist) != 0\navg = sum(numlist) / len(numlist)\nIf the condition following assertis true, program proceeds to next \ninstruction. If it turns out to be false then an AssertionError\nexception occurs. \nxAssertion may also be followed by a relevant message, which will be \ndisplayed if the condition fails.\nassert len(numlist) != 0, 'Check denominator, it appears to be 0' \navg = sum(numlist) / len(numlist)\nxBenefits of Assertions:\n-Over a period of time comments may get out-of-date. Same will \nnot be the case with assert, because if they do, then they will fail \nfor legitimate cases, and you will be forced to update them.\n-Assert statementsare very useful while debugging aprogram as \nit halts the program at the point where an error occurs. This", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_488", "chunk_strategy": "fixed_size"}}, {"text": "for legitimate cases, and you will be forced to update them.\n-Assert statementsare very useful while debugging aprogram as \nit halts the program at the point where an error occurs. This \nmakes sense as there is no point in continuing the execution if \nthe assumption is no longer true.\n-Withassertstatements,failures appear earlierand closer to the \nlocations of the errors, which makes iteasier to diagnose and fix\nthem.\nDecorators\nxFunctions are 'first-class citizens'of Python. This means like integers, \nstrings, lists, modules, etc. functions too can be created and \ndestroyed dynamically, passed to other functionsand returned as \nvalues.\nxFirst class citizenship feature is used in developing decorators. \nxA decorator function receives a function, adds some functionality \n(decoration) to it and returns it.\nxThere are many decorators available in the library. These include the \ndecorator @abstractmethodthat we used in Chapter 20.\nxOther commonly used library decorators are @classmethod,", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_489", "chunk_strategy": "fixed_size"}}, {"text": "xThere are many decorators available in the library. These include the \ndecorator @abstractmethodthat we used in Chapter 20.\nxOther commonly used library decorators are @classmethod, \n@staticmethod and @property. @classmethodand @staticmethod\n--- Page 357 ---\nChapter24: Miscellany 341\ndecorators are used to define methods inside a class namespace \nthat are not connected to a particular instance of that class. The \n@propertydecorator is used to customize getters and setters for \nclass attributes. \nxWe can also create user-defined decorators, as shown in the \nfollowing program:\ndef my_decorator(func) :\ndef wrapper( ) :\nprint('*****************')\nfunc( )\nprint('~~~~~~~~~~~~~~~~~')\nreturn wrapper\ndef display( ) :\nprint('I stand decorated')\ndef show( ) :\nprint('Nothing great.Me too!')\ndisplay = my_decorator(display)\ndisplay( )\nshow = my_decorator(show)\nshow( )\nOn executing the program, we get the following output.\n*****************\nI stand decorated\n~~~~~~~~~~~~~~~~~\n*****************", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_490", "chunk_strategy": "fixed_size"}}, {"text": "display( )\nshow = my_decorator(show)\nshow( )\nOn executing the program, we get the following output.\n*****************\nI stand decorated\n~~~~~~~~~~~~~~~~~\n*****************\nNothing great. Me too!\n~~~~~~~~~~~~~~~~~\nxHere display( )and show( )are normal functions. Both these \nfunctions have been decorated by a decorator function called \nmy_decorator( ). The decorator function has an inner function called \nwrapper( ). \nxName of a function merely contains address of the function object. \nHence, in the statement\ndisplay = my_decorator(display)\n--- Page 358 ---\n342 Let Us Python\nwe are passing address of function display( )to my_decorator( ). \nmy_decorator( )collects it in func , and returns address of the inner \nfunction wrapper( ). We are collecting this address back in display.\nxWhen we call display( ), in reality wrapper( )gets called. Since it is \nan inner function, it has access to variable func of the outer function.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_491", "chunk_strategy": "fixed_size"}}, {"text": "xWhen we call display( ), in reality wrapper( )gets called. Since it is \nan inner function, it has access to variable func of the outer function. \nIt uses the address stored in functo call the function display( ). It \nprints a patternbefore and after this call.\nxOnce a decorator has been created, it can be applied tomultiple \nfunctions. In addition to display( ), we have also applied it to show( )\nfunction.\nxThe syntax of decorating display( )is complex for two reasons. \nFirstly, we have to use the word displaythrice. Secondly, the \ndecoration gets a bit hidden away below the definition of the \nfunction.\nxTo solve both the problems, Python permits usage of @symbol to \ndecorate a function as shown below:\ndef my_decorator(func) :\ndef wrapper( ) :\nprint('*****************')\nfunc( )\nprint('~~~~~~~~~~~~~~~~~')\nreturn wrapper\n@my_decorator\ndef display( ) :\nprint('I stand decorated')\n@my_decorator\ndef show( ) :\nprint('Nothing great. Me too!')\ndisplay( )\nshow( )", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_492", "chunk_strategy": "fixed_size"}}, {"text": "func( )\nprint('~~~~~~~~~~~~~~~~~')\nreturn wrapper\n@my_decorator\ndef display( ) :\nprint('I stand decorated')\n@my_decorator\ndef show( ) :\nprint('Nothing great. Me too!')\ndisplay( )\nshow( )\nDecorating Functions with Arguments\nxSuppose we wish to define a decorator that can report time required \nfor executing any function. We want a common decorator which will \n--- Page 359 ---\nChapter24: Miscellany 343\nwork for any function regardless of number and type of arguments \nthat it receives and returns. \nimport time\ndef timer(func):\ndef calculate(*args, **kwargs):\nstart_time = time.perf_counter()\nvalue = func(*args, **kwargs)\nend_time = time.perf_counter( )\nruntime = end_time -start_time\nprint(f'Finished {func.__name__!r} in {runtime:.8f} secs')\nreturn value\nreturn calculate\n@timer\ndef product(num) :\nfact = 1\nfor i in range(num) :\nfact = fact * i + 1\nreturn fact\n@timer\ndef product_and_sum(num) :\np = 1\nfor i in range(num) :\np = p * i + 1\ns = 0\nfor i in range(num) :\ns = s + i + 1\nreturn (p, s)", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_493", "chunk_strategy": "fixed_size"}}, {"text": "fact = 1\nfor i in range(num) :\nfact = fact * i + 1\nreturn fact\n@timer\ndef product_and_sum(num) :\np = 1\nfor i in range(num) :\np = p * i + 1\ns = 0\nfor i in range(num) :\ns = s + i + 1\nreturn (p, s)\n@timer\ndef time_pass(num):\nfor i in range(num) :\ni += 1\np =product(10)\nprint('product of first 10 numbers =', p)\np = product(20)\nprint('product of first 20 numbers =', p)\nfs = product_and_sum(10)\n--- Page 360 ---\n344 Let Us Python\nprint('product and sum of first 10 numbers=', fs)\nfs = product_and_sum(20)\nprint('product and sum of first 20 numbers=', fs)\ntime_pass(20)\nHere is the output of the program...\nFinished 'product' in 0.00000770 secs\nproduct of first 10 numbers = 986410\nFinished 'product' in 0.00001240 secs\nproduct of first 20 numbers = 330665665962404000\nFinished 'product_and_sum' in0.00001583 secs\nproduct and sum of first 10 numbers = (986410, 55)\nFinished 'product_and_sum' in 0.00001968 secs\nproduct and sum of first 20 numbers = (330665665962404000, 210)", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_494", "chunk_strategy": "fixed_size"}}, {"text": "product and sum of first 10 numbers = (986410, 55)\nFinished 'product_and_sum' in 0.00001968 secs\nproduct and sum of first 20 numbers = (330665665962404000, 210)\nFinished 'time_pass' in 0.00000813 secs\nxWe have determined execution time of three functions\u0376product( ), \nproduct_and_sum( ) and time_pass( ). Each varies in arguments and \nreturn type. We are still able to apply the same decorator @timerto \nall of them.\nxThe arguments passed while calling the threefunctions are received \nin *argsand **kwargs.This takes care of any number of positional \narguments and any number of keyword arguments that are needed \nby the function. They are then passed to the suitable functions \nthrough the call \nvalue = func(*args, **kwargs)\nxThe value(s) returned by the function being called is/arecollected in \nvalueand returned.\nxRather than finding the difference between the start and end time of \na function in terms of seconds a performance counter is used.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_495", "chunk_strategy": "fixed_size"}}, {"text": "valueand returned.\nxRather than finding the difference between the start and end time of \na function in terms of seconds a performance counter is used.\nxtime.perf_counter( )returns the value of a performance counter, i.e. \na clock in fractional seconds. Difference between two consecutive \ncalls to this function determines the time required for executing a \nfunction.\nxOn similar lines it is possible to define decorators for methods in a \nclass.\n--- Page 361 ---\nChapter24: Miscellany 345\nUnicode\nxUnicode is a standard for representation, encoding, and handling of \ntext expressed in all scripts of the world.\nxIt is a myth that every character in Unicode is 2 bytes long. Unicode \nhas already gone beyond 65536 characters\u0376the maximum number \nof characters that can be represented using 2 bytes. \nxIn Unicode every character is assigned an integer value called code \npoint, which isusually expressed in Hexadecimal. \nxCode points for A, B, C, D, E are 0041, 0042, 0043, 0044, 0045. Code", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_496", "chunk_strategy": "fixed_size"}}, {"text": "xIn Unicode every character is assigned an integer value called code \npoint, which isusually expressed in Hexadecimal. \nxCode points for A, B, C, D, E are 0041, 0042, 0043, 0044, 0045. Code \npoints for characters \u0905 \u0906 \u0907 \u0908 \u00eaof Devanagari script are 0905, \n0906, 0907, 0908, 0909.\nxComputers understand only bytes. So we need a way to represent \nUnicode code points as bytes in order to store or transmit them. \nUnicode standard defines a number of ways to represent code \npoints as bytes. These are called encodings.\nxThere are different encoding schemes like UTF-8, UTF-16, ASCII, \n8859-1, Windows 1252, etc. UTF-8 is perhaps the most popular \nencoding scheme.\nxThe same Unicode code point will be interpreted differently by \ndifferent encoding schemes. \nxCode point0041 maps to byte value 41 in UTF-8, whereas it maps to \nbyte values fffe00in UTF-16. Similarly, code point 0905 maps to \nbyte values e0 a4 85 and ff fe 05 \\t in UTF-8 and UTF-16 repsectively.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_497", "chunk_strategy": "fixed_size"}}, {"text": "byte values fffe00in UTF-16. Similarly, code point 0905 maps to \nbyte values e0 a4 85 and ff fe 05 \\t in UTF-8 and UTF-16 repsectively. \nYou may refer table available at https://en.wikipedia.org/wiki/UTF-8 (https://en.wik\nfor one to one mapping of code points to byte values.\nxUTF-8 uses a variable number of bytes for each code point. Higher \nthe code point value, more the bytes it needs in UTF-8. \nb y t e sDatatype\nxIn Python text is always represented as Unicode characters and is \nrepresented by strtype, whereas, binary data is represented by \nbytestype. You can create a bytesliteral with a prefixb.\ns = 'Hi'\nprint(type(s))\n--- Page 362 ---\n346 Let Us Python\nprint(type('Hello'))\nby= b'\\xe0\\xa4\\x85'\nprint(type(by))\nprint(type(b'\\xee\\x84\\x65'))\nwill output\n<class 'str'>\n<class 'str'>\n<class 'bytes'>\n<class 'bytes'>\nxWe can't mix strand bytesin concatenation, in checking whether \none is embedded inside another, or while passing one to a function \nthat expects the other.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_498", "chunk_strategy": "fixed_size"}}, {"text": "<class 'bytes'>\n<class 'bytes'>\nxWe can't mix strand bytesin concatenation, in checking whether \none is embedded inside another, or while passing one to a function \nthat expects the other. \nxStrings can beencodedto bytes, and bytes can bedecodedback to \nstringsas shown below:\neng = 'A B C D'\ndev \u0441 \u0396 \u0905 \u0906 \u0907 \u0908\u0396\nprint(type(eng))\nprint(type(dev))\nprint(eng)\nprint(dev)\nprint (eng.encode('utf-8') )\nprint (eng.encode('utf-16') )\nprint (dev.encode('utf-8') )\nprint (dev.encode('utf-16') )\nprint(b'A B C D'.decode('utf-8'))\nprint(b'\\xff\\xfeA\\x00 \\x00B\\x00 \\x00C\\x00 \\x00D\\x00'\n.decode('utf-16'))\nprint(b'\\xe0\\xa4\\x85 \\xe0\\xa4\\x86 \\xe0\\xa4\\x87\\xe0\\xa4\\x88'\n.decode('utf-8'))\nprint(b'\\xff\\xfe\\x05\\t \\x00\\x06\\t \\x00\\x07\\t \\x00\\x08\\t'\n.decode('utf-16'))\nExecution of this program produces the following output:\n<class 'str'>\n--- Page 363 ---\nChapter24: Miscellany 347\n<class 'str'>\n\u0905 \u0906 \u0907 \u0908\nA B C D\nb'A B C D'\nb'\\xff\\xfeA\\x00 \\x00B\\x00 \\x00C\\x00 \\x00D\\x00'\nb'\\xe0\\xa4\\x85 \\xe0\\xa4\\x86 \\xe0\\xa4\\x87 \\xe0\\xa4\\x88'", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_499", "chunk_strategy": "fixed_size"}}, {"text": "<class 'str'>\n--- Page 363 ---\nChapter24: Miscellany 347\n<class 'str'>\n\u0905 \u0906 \u0907 \u0908\nA B C D\nb'A B C D'\nb'\\xff\\xfeA\\x00 \\x00B\\x00 \\x00C\\x00 \\x00D\\x00'\nb'\\xe0\\xa4\\x85 \\xe0\\xa4\\x86 \\xe0\\xa4\\x87 \\xe0\\xa4\\x88'\nb'\\xff\\xfe\\x05\\t \\x00\\x06\\t \\x00\\x07\\t \\x00\\x08\\t'\nA B C D\nA B C D\n\u0905 \u0906 \u0907 \u0908\n\u0905 \u0906 \u0907 \u0908\nxHow these Unicode code points will beinterpreted by your machine \nor your software depends upon the encoding scheme used. If we do \nnot specify the encoding scheme, then the default encoding scheme \nset on your machine will be used.\nxWe can find out the default encoding scheme by printing the value \npresent in sys.stdin.encoding . On my machine it is set to UTF-8.\nxSo when we print engor devstrings, the code points present in the \nstrings are mapped to UTF-8 byte values and characters \ncorresponding to these byte values are printed.\nCreate Executable File \nxIf we are developing a program for a client, rather than giving the \nsource code of our program, we would prefer to given an executable", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_500", "chunk_strategy": "fixed_size"}}, {"text": "Create Executable File \nxIf we are developing a program for a client, rather than giving the \nsource code of our program, we would prefer to given an executable \nversion of it. The steps involved in creating the executable file are \ngiven below:\nxStep 1: Install the Pyinstaller Package \nIn the Windows Command Prompt, type the following command to \ninstall the pyinstaller package (and then press Enter):\nC:\\Users\\Kanetkar>pip install pyinstaller\nxStep 2: Go to folder where the Python script is stored.\nC:\\Users\\Kanetkar>CD Programs\nxStep 3: Create the Executable using Pyinstaller\nC:\\Users\\Kanetkar\\Programs>pyinstaller --onefile ScriptName.py\n--- Page 364 ---\n348 Let Us Python\nxStep 4: Executable file pythonScriptName.exe will be created in 'dist' \nfolder. Double-click the EXE fileto execute it.\n____________________________________________________________________\nProblem 24.1\nWrite a program that displays all files in current directory. It can receive", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_501", "chunk_strategy": "fixed_size"}}, {"text": "____________________________________________________________________\nProblem 24.1\nWrite a program that displays all files in current directory. It can receive \noptions -h or -l or -w from command-line. If -h is received display help \nabout the program. If -l is received, display files one line at a time,. If -w \nis received, display files separated by tab character.\nProgram\n# mydir.py\nimport os, sys, getopt\nif len(sys.argv) == 1 :\nprint(os.listdir('.'))\nsys.exit(1)\ntry:\noptions, arguments = getopt.getopt(sys.argv[1:],'hlw')\nprint(options)\nprint(arguments)\nfor opt, arg in options :\nprint(opt)\nif opt == '-h':\nprint('mydir.py -h -l -w')\nsys.exit(2)\nelif opt == '-l' :\nlst = os.listdir('.')\nprint(*lst, sep = '\\n')\nelif opt == '-w' :\nlst = os.listdir('.')\nprint(*lst, sep = '\\t')\nexcept getopt.GetoptError:\nprint('mydir.py -h -l -w')\n--- Page 365 ---\nChapter24: Miscellany 349\nOutput\nC:\\>mydir -l\ndata\nmessages\nmydir\nnbproject\nnumbers\nnumbersbin\nnumberstxt\nsampledata\nsrc", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_502", "chunk_strategy": "fixed_size"}}, {"text": "except getopt.GetoptError:\nprint('mydir.py -h -l -w')\n--- Page 365 ---\nChapter24: Miscellany 349\nOutput\nC:\\>mydir -l\ndata\nmessages\nmydir\nnbproject\nnumbers\nnumbersbin\nnumberstxt\nsampledata\nsrc\n____________________________________________________________________\nProblem24.2\nDefine a function show_bits( )which displays the binary equivalent of \nthe integer passed to it. Call it to display binary equivalent of 45.\nProgram\ndef show_bits(n) :\nfor i in range(32, -1, -1) :\nandmask = 1 << i \nk = n & andmask \nprint('0', end = '') if k == 0 else print('1', end = '') \nshow_bits(45)\nprint( )\nprint(bin(45))\nOutput\n000000000000000000000000000101101\n0b101101\nTips\nxshow_bits( )performs a bitwise and operation with individual bits of \n45, and prints a 1 or 0 based on the value of the individual bit.\n____________________________________________________________________\n--- Page 366 ---\n350 Let Us Python\nProblem 24.3\nWindows stores date of creation of a file as a 2-byte number with the", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_503", "chunk_strategy": "fixed_size"}}, {"text": "____________________________________________________________________\n--- Page 366 ---\n350 Let Us Python\nProblem 24.3\nWindows stores date of creation of a file as a 2-byte number with the \nfollowing bit distribution:\nleft-most 7 bits: year -1980\nmiddle 4 bits -month\nright-most 5 bits -day\nWrite a program that converts 9766 into a date 6/1/1999.\nProgram\ndt = 9766\ny = (dt >> 9) + 1980\nm = (dt & 0b111100000) >> 5\nd = (dt & 0b11111) \nprint(str(d) + '/' + str(m) + '/' + str(y)) \nOutput\n6/1/1999\nTips\nxNumber preceded by 0b is treated as a binary number.\n____________________________________________________________________\nProblem 24.4\nWindows stores time of creation of a file as a 2-byte number. \nDistribution of different bits which account for hours, minutes and \nseconds is as follows:\nleft-most 5 bits: hours\nmiddle 6 bits -minute\nright-most 5 bits -second / 2\nWrite a program to convert time represented by a number 26031 into \n12:45:30.\nProgram\ntm = 26031\n--- Page 367 ---", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_504", "chunk_strategy": "fixed_size"}}, {"text": "left-most 5 bits: hours\nmiddle 6 bits -minute\nright-most 5 bits -second / 2\nWrite a program to convert time represented by a number 26031 into \n12:45:30.\nProgram\ntm = 26031\n--- Page 367 ---\nChapter24: Miscellany 351\nhr = tm >> 11\nmin = (tm & 0b11111100000) >> 5\nsec = (tm & 0b11111) * 2\nprint(str(hr) + ':' + str(min) + ':' + str(sec)) \nOutput\n12:45:30\n____________________________________________________________________\nProblem 24.5\nWrite assert statements for the following with suitable messages:\n-Salary multiplier sm must be non-zero\n-Both p and q are of same type\n-Value present in num is part of the list lst\n-Length of combined string is 45 characters\n-Gross salary is in the range 30,000 to 45,000\nProgram\n# Salary multiplier m must be non-zero\nsm = 45\nassert sm != 0, 'Oops, salary multiplier is 0'\n# Both p and q are of type Sample\nclass Sample :\npass\nclass NewSample :\npass\np = Sample( )\nq = NewSample( )\nassert type(p) == type(q), 'Type mismatch'", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_505", "chunk_strategy": "fixed_size"}}, {"text": "assert sm != 0, 'Oops, salary multiplier is 0'\n# Both p and q are of type Sample\nclass Sample :\npass\nclass NewSample :\npass\np = Sample( )\nq = NewSample( )\nassert type(p) == type(q), 'Type mismatch' \n# Value present in num is part of the list lst\nnum = 45\nlst = [10, 20, 30, 40, 50]\nassert num in lst, 'num is missing from lst'\n--- Page 368 ---\n352 Let Us Python\n# Length of combined string is less than 45 characters\ns1 = 'A successful marriage requires falling in love many times...'\ns2 = 'Always with the same person!'\ns = s1 + s2 \nassert len(s) <= 45, 'String s is too long'\n# Gross salary is in the range 30,000 to 45,000\ngs = 30000 + 20000 * 15 / 100 + 20000 * 12 / 100\nassert gs >= 30000 and gs <= 45000, 'Gross salary out of range'\n____________________________________________________________________\nProblem 24.6\nDefine a decorator that will decorate any function such that it prepends \na call with a message indicating that the function is being called and", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_506", "chunk_strategy": "fixed_size"}}, {"text": "Problem 24.6\nDefine a decorator that will decorate any function such that it prepends \na call with a message indicating that the function is being called and \nfollows the call with a message indicating that the function has been \ncalled. Also,report the name of the function being called, its arguments \nand its return value. A sample output is given below:\nCalling sum_num ((10, 20), { })\nCalled sum_num ((10, 20), { }) got return value: 30\nProgram\ndef calldecorator(func) :\ndef _decorated(*arg,**kwargs) :\nprint(f'Calling {func.__name__} ({arg},{kwargs})')\nret = func(*arg,**kwargs)\nprint(f'Called {func.__name__} ({arg}, {kwargs}) got retval: {ret}')\nreturn ret\nreturn _decorated\n@calldecorator\ndef sum_num(arg1,arg2) :\nreturn arg1 + arg2 \n@calldecorator\ndef prod_num(arg1,arg2) :\nreturn arg1 * arg2 \n@calldecorator\ndef message(msg) :\npass\n--- Page 369 ---\nChapter24: Miscellany 353\nsum_num(10, 20)\nprod_num(10, 20)\nmessage('Errors should never pass silently')\nOutput", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_507", "chunk_strategy": "fixed_size"}}, {"text": "return arg1 * arg2 \n@calldecorator\ndef message(msg) :\npass\n--- Page 369 ---\nChapter24: Miscellany 353\nsum_num(10, 20)\nprod_num(10, 20)\nmessage('Errors should never pass silently')\nOutput\nCalling sum_num ((10, 20), { })\nCalled sum_num ((10, 20), { }) got return value: 30\nCalling prod_num ((10, 20), { })\nCalled prod_num ((10, 20), { }) got return value: 200\nCalling message (('Errors should never pass silently',), { })\nCalled message (('Errors should never pass silently',), { }) got return \nvalue: None\n____________________________________________________________________\n[A]State whether the following statements are True or False:\n(a)We can send arguments at command-line to any Python program.\n(b)The zeroth element of sys.argv is always the name of thefile being \nexecuted.\n(c)In Python a function is treated as an object.\n(d)A function can be passed to a function and can be returned from a \nfunction.\n(e)A decorator adds some features to an existing function.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_508", "chunk_strategy": "fixed_size"}}, {"text": "executed.\n(c)In Python a function is treated as an object.\n(d)A function can be passed to a function and can be returned from a \nfunction.\n(e)A decorator adds some features to an existing function.\n(f)Once a decorator has been created, it can be appliedto only one \nfunction within the program.\n(g) It is mandatory that the function being decorated should not \nreceive any arguments.\n(h)It is mandatorythat the function being decorated should not return \nany value.\n(i)Type of 'Good!' is bytes.\n(j)Type of msginthe statementmsg = 'Good!'is str.\n--- Page 370 ---\n354 Let Us Python\n[B]Answer the followingquestions:\n(a)Is it necessary to mention the docstring for a function immediately \nbelow the defstatement?\n(b)Write a program using command-line arguments to search for a \nword in a file and replace it with the specified word. The usage of \nthe program is shown below.\nC:\\> change -o oldword -n newword -f filename\n(c)Write a program that can be used at command prompt as a", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_509", "chunk_strategy": "fixed_size"}}, {"text": "the program is shown below.\nC:\\> change -o oldword -n newword -f filename\n(c)Write a program that can be used at command prompt as a \ncalculating utility. The usage of the program is shown below.\nC:\\> calc <switch> <n> <m>\nWhere, n and m are two integer operands. switch can be any \narithmetic operator. The output should be the result of the \noperation. \n(d)Rewrite the followingexpressionsusing bitwise in-placeoperators:\na = a | 3 a = a & 0x48 b = b ^ 0x22\nc = c << 2 d = d >> 4\n(e)Consider an unsignedinteger in which rightmost bit is numbered as \n0. Write a function checkbits(x, p, n)which returns True if all 'n'bits \nstarting from position 'p'are on, False otherwise. For example,\ncheckbits(x, 4, 3)will return true if bits 4, 3 and 2 are 1 in number x.\n(f)Write a program to receive a number as input and check whether \nits 3rd, 6thand 7thbit is on.\n(g) Write a program to receive a 8-bit number into a variable and then \nexchange its higher 4 bits with lower 4 bits.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_510", "chunk_strategy": "fixed_size"}}, {"text": "its 3rd, 6thand 7thbit is on.\n(g) Write a program to receive a 8-bit number into a variable and then \nexchange its higher 4 bits with lower 4 bits.\n(h)Write a program to receive a 8-bit number into a variable and then \nset its odd bits to 1.\n--- Page 371 ---\nLet UsPython\n355Concurrency and\nParallelism \nxConcurrency and Parallelism xTypes of Concurrencies\nxWhat are Threads? xThread Properties\nxConcurrency & Parallelism in \nProgrammingxLaunching Threads\nxCPU-bound & I/O-bound Programs xPassing parameters to a\nThread\nxWhich to use when? xPrograms\nxConcurrency for Improving \nPerformancexExercises25\n\u201cEfficient is better... \u201d\n--- Page 372 ---\n356 Let Us Python\nConcurrency and Parallelism\nxA task is an activity that we carry out. For example, driving a car, \nwatering a plant, cooking food, etc. are all tasks. \nxWhen we perform multiple tasksin overlappingtimes we are doing \nthem concurrently. When we perform tasks simultaneouslywe are \ndoing them parallelly.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_511", "chunk_strategy": "fixed_size"}}, {"text": "xWhen we perform multiple tasksin overlappingtimes we are doing \nthem concurrently. When we perform tasks simultaneouslywe are \ndoing them parallelly.\nxThus though the words concurrency and parallelism indicate \nhappening of two or more tasksat the same time, they are not the \nsame thing.\nxExample1 of concurrency: We watch TV, read a news-paper, sip \ncoffee in overlapping times. At any given moment you are doing only \none task.\nxExample 2 of concurrency: In a 4 x 100 meter relay race, each runner \nin a given lane has to run, but unless the first runner hands over the \nbaton, second doesn't start and unless second hands over the baton \nthe third doesn't start. So at any given moment only one runner in \nrunning.\nxExample 1 of parallelism: Example of parallelism: While driving a car \nwe carry out several activities in parallel \u2014we listen to music, we \ndrive the car and we talk to the co-passengers. \nxExample 2 of parallelism: In a 100 meter race each runner is running", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_512", "chunk_strategy": "fixed_size"}}, {"text": "we carry out several activities in parallel \u2014we listen to music, we \ndrive the car and we talk to the co-passengers. \nxExample 2 of parallelism: In a 100 meter race each runner is running \nin his own lane. At a given moment all runners are running. \nWhat are Threads?\nxA program may have several units (parts). Each unit of execution is \ncalled a thread.\nxExample 1 of multiple threads: One unit of execution may carry out \ncopying of files, whereas another unit may displaya progress bar.\nxExample 2 of multiple threads: One unit of execution may download \nimages, whereas another unit may display text.\n--- Page 373 ---\nChapter25: Concurrency and Parallelism 357\nxExample 3 of multiple threads: One unit may let you edit a \ndocument, second unit may check spellings, third unit may check \ngrammar and fourth unit may do printing.\nxExample 4 of multiple threads: One unit may scan disk for viruses, \nsecond unit may scan memoryfor viruses and third unit may let you", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_513", "chunk_strategy": "fixed_size"}}, {"text": "grammar and fourth unit may do printing.\nxExample 4 of multiple threads: One unit may scan disk for viruses, \nsecond unit may scan memoryfor viruses and third unit may let you \ninteract with the program user-interface to stop/pause the scanning \nof viruses by first two units.\nConcurrency and Parallelism in Programming\nxConcurrencyis when multiplethreads of a program start, run, and \ncomplete inoverlappingtime periods. \nxOnce the program execution begins one thread may run for some \ntime, then it may stop and the second thread may start running. \nAfter some time, second thread may stop and the third may start \nrunning. \nxThreads may get executed in a round-robin fashion or based on \npriority of each thread. At any given instance only one thread is \nrunning. \nxParallelismis when multiple threads of a program literally runat the \nsame time. So at any given instance multiple threads are running. \nxIn concurrency multiple units of a program can run on a single-core", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_514", "chunk_strategy": "fixed_size"}}, {"text": "same time. So at any given instance multiple threads are running. \nxIn concurrency multiple units of a program can run on a single-core \nprocessor, whereas, in parallelism multiple units can run on multiple \ncores of a multi-core processor.\nxFigure 25.1 shows working how threads t1, t2 and t3 in a program \nmay runconcurrently or in parallelover a period of time.\nConcurrencyTime Time\nParallelismt1\nt2t1\nt3t2t1\nt3t2\nFigure 25.1\n--- Page 374 ---\n358 Let Us Python\nxAdvantages of Concurrency:\n-Improves application's speed, by making CPU do other things \ninstead of waiting for slow I/O operationsto finish\n-Simplifies program design. For example, the logic that copies \nfiles and logic that displays the progress bar can be kept \nseparate.\nxAdvantage of Parallelism:\n-Capability of multi-core processors can be exploited by running \ndifferent processes in each processor simultaneously.\nCPU-bound and I/O-bound Programs\nxA program typically performs two types of operations:", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_515", "chunk_strategy": "fixed_size"}}, {"text": "different processes in each processor simultaneously.\nCPU-bound and I/O-bound Programs\nxA program typically performs two types of operations:\n-Operations involving CPU for calculations, comparisons, etc. \n-Operations that perform inputor output\nxUsually CPU operations run several times faster than I/O operations.\nxA program that predominantly performsCPU operations iscalled \nCPU-bound program. A program that predominantly performs I/O \noperations is called I/O-bound program.\nxExample of CPU-bound program: A program that perform \nmultiplication of matrices, or a program that finds sum of first 200 \nprime numbers.\nxExample of I/O-bound program: A program that processes files on \nthe disk, or a program that does database queries or sends a lot of \ndata over a network.\nWhich touse when?\nxA CPU-bound program will perform better on a faster CPU. For \nexample, using i7 CPU instead of i3 CPU.\nxAn IO-bound program will perform betteron a faster I/O subsystem.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_516", "chunk_strategy": "fixed_size"}}, {"text": "Which touse when?\nxA CPU-bound program will perform better on a faster CPU. For \nexample, using i7 CPU instead of i3 CPU.\nxAn IO-bound program will perform betteron a faster I/O subsystem. \nFor example using a faster disk or faster network.\nxThe solution to improve performance cannot always be to replace \nexisting CPU with a faster CPU or an existing I/O subsystem with a \nfaster I/O subsystem.\n--- Page 375 ---\nChapter25: Concurrency and Parallelism 359\nxInstead, we should organize our program to use concurrencyor \nparallelism to improve performance. \nxPerformance of I/O-bound programcan improveif different units of \nthe program are executed in overlapping times. \nxPerformance of CPU-bound program can improve if different units of \ntheprogram are executed parallelly on multiple cores of a processor.\nxIt is quite easy to imagine how performance of a CPU-bound \nprogram can improve with parallelism. Performance improvement of", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_517", "chunk_strategy": "fixed_size"}}, {"text": "theprogram are executed parallelly on multiple cores of a processor.\nxIt is quite easy to imagine how performance of a CPU-bound \nprogram can improve with parallelism. Performance improvement of \nan I/O-bound program using concurrency is discussed in the next \nsection.\nConcurrency for improving Performance\nxSuppose we wish to write a program that finds squares and cubes of \nfirst 5000 natural numbers and prints them on the screen. \nxWe can write this program in two ways:\n-A single-threaded program -calculation of squares, calculation of \ncubes and printing are done in same thread.\n-A multi-threadedprogram -calculation of squares is done in one \nthread, calculation of cubes in second thread and printing in \nthirdthread.\nxIn the single-threaded program the CPU has to frequently wait for \nprinting ofsquare/cube(I/O operation)to get overbefore it can \nproceed to calculate square or cube of the next number. So CPU \nremainsunder-utilized.This scenario is shown in Figure 25.2.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_518", "chunk_strategy": "fixed_size"}}, {"text": "printing ofsquare/cube(I/O operation)to get overbefore it can \nproceed to calculate square or cube of the next number. So CPU \nremainsunder-utilized.This scenario is shown in Figure 25.2.\nSingle-threadedprogramTimeP r i n t 1\n12P r i n t 1\n13P r i n t 4\n22P r i n t 8\n2332I/O\nCPU\nFigure 25.2\n--- Page 376 ---\n360 Let Us Python\nxIn the multi-threaded program theCPU can proceed with the next \ncalculation (square or cube) and need not wait for the square or \ncube to get printed on the screen. Thisscenarioisshown in Figure \n25.3.\nMulti-threadedprogramTimeP r i n t 1\n12P r i n t 4\n2232P r i n t 8I/O\nCPU132333P r i n t 1\nCPU\nFigure 25.3\nTypes of Concurrencies\nxIn a multi-threaded program one thread runs for some time, then it \nstops and the second thread starts running. After some time, second \nthread stops and the third thread starts running. This is true even if \nthe program is being executed on a multi-core processor.\nxWhen context would switch from one thread to another depends on", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_519", "chunk_strategy": "fixed_size"}}, {"text": "thread stops and the third thread starts running. This is true even if \nthe program is being executed on a multi-core processor.\nxWhen context would switch from one thread to another depends on \nthe type of concurrency that we use in our program.\nxConcurrencies are of two types:\n-Pre-emptive concurrency-The OS decides when to switch from \none threadto another.\n-Cooperative concurrency-The threaddecides when to give up \nthe control to the next task.\nxPython modules availablefor implementing concurrency and \nparallelism in our program are as follows:\nPre-emptive concurrency-threading\nCooperative concurrency-asyncio\nParallelism-multiprocessing\n--- Page 377 ---\nChapter25: Concurrency and Parallelism 361\nThis book discusses the technique for pre-emptive concurrency \nalone.\nThread Properties\nxEvery running thread has a name a number called thread identifier\nassociated with it. \nxThe name of all running threads need not be unique, whereas the \nidentifiermust be unique.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_520", "chunk_strategy": "fixed_size"}}, {"text": "Thread Properties\nxEvery running thread has a name a number called thread identifier\nassociated with it. \nxThe name of all running threads need not be unique, whereas the \nidentifiermust be unique. \nxThe identifiercould be reused for other threads, if the current \nthread ends.\nimport threading\nt = threading.current_thread( ) # returns current Thread object\nprint(\"Current thread:\", t) # prints thread name, identifier & status\nprint(\"Thread name:\", t.name)\nprint(\"Thread identifier:\", t.ident)\nprint(\"Is thread alive:\", t.is_alive( ))\nt.name = 'MyThread'\nprint(\"After name change:\", t.name)\nHere, current_thread( )is a function defined in threadingmodule\nand nameand identare attributes of Threadobject.\nLaunching Threads\nxThere are two ways to launch a new thread:\n-By passing the name of the function that should run as a \nseparate thread, to the constructor of the Thread class.\n-By overriding __init__( )and run( )methods in a subclass of\nThreadclass.\nxMethod 1-threadcreation", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_521", "chunk_strategy": "fixed_size"}}, {"text": "separate thread, to the constructor of the Thread class.\n-By overriding __init__( )and run( )methods in a subclass of\nThreadclass.\nxMethod 1-threadcreation\nth1 = threading.Thread(name = 'My first thread', target = func1)\nth2 = threading.Thread(target = func2) # use default name\nth1.start( )\nth2.start( )\nxMethod 2 -thread creation\n--- Page 378 ---\n362 Let Us Python\nclass SquareGeneratorThread(threading.Thread) :\ndef __init__(self) :\nthreading.Thread.__init__(self)\ndef run(self) :\nprint('Launching...')\nth = SquareGeneratorThread( )\nth.start( )\nxOnce a thread object is created, its activity must be started by calling \nthe thread's start( )method. This method in turn invokes the run( )\nmethod.\nxstart( )method will raise an exceptionRuntimeErrorif called more \nthan once on the same thread object.\nPassing parameters to a Thread\nxSometimes we may wish to pass some parameters to the target \nfunction of a thread object. \nth1 = threading.Thread(target=squares, args =(a, b))", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_522", "chunk_strategy": "fixed_size"}}, {"text": "Passing parameters to a Thread\nxSometimes we may wish to pass some parameters to the target \nfunction of a thread object. \nth1 = threading.Thread(target=squares, args =(a, b))\nth2 = threading.Thread(target=cubes, args=(a,))\nArguments being passed to the constructor of Threadclass will \nultimately be passed to the target function. Arguments must be in \nthe form of a tuple.\nxOnce thread have been launched we have no control over the order \nin which they are executed. It is controlled by the thread scheduler \nof the Python runtime environment.\nxSometimes we may wish to pass some parameters to therun( )\nmethod in the threadclass. For this pass the parameters to the \nconstructor while creating the thread object. The constructor should \nstore them in object's variables. Once stored, run( )will be able to \naccess them.\nth = SquareGeneratorThread(a, b, c)\n____________________________________________________________________\n--- Page 379 ---\nChapter25: Concurrency and Parallelism 363", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_523", "chunk_strategy": "fixed_size"}}, {"text": "access them.\nth = SquareGeneratorThread(a, b, c)\n____________________________________________________________________\n--- Page 379 ---\nChapter25: Concurrency and Parallelism 363\nProblem 25.1\nWrite a program that launches three threads, assigns new names to two \nof them. Suspend each thread for 1 second after it has been launched.\nProgram\nimport threading\nimport time\ndef fun1( ):\nt = threading.current_thread( )\nprint('Starting', t.name)\ntime.sleep(1)\nprint('Exiting', t.name)\ndef fun2( ):\nt = threading.current_thread( )\nprint('Starting', t.name)\ntime.sleep(1)\nprint('Exiting', t.name)\ndef fun3( ):\nt = threading.current_thread( )\nprint('Starting', t.name)\ntime.sleep(1)\nprint('Exiting', t.name)\nt1 = threading.Thread(target=fun1) # use default name\nt2 = threading.Thread(name='My second thread', target = fun2)\nt3 = threading.Thread(name='My third thread', target = fun3)\nt1.start()\nt2.start()\nt3.start()\nOutput\nStarting Thread-1\nStarting My second thread\n--- Page 380 ---\n364 Let Us Python", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_524", "chunk_strategy": "fixed_size"}}, {"text": "t3 = threading.Thread(name='My third thread', target = fun3)\nt1.start()\nt2.start()\nt3.start()\nOutput\nStarting Thread-1\nStarting My second thread\n--- Page 380 ---\n364 Let Us Python\nStarting My third thread\nExiting Thread-1\nExiting My third thread\nExiting My second thread\nTips\nxsleep( )function of timemodule suspends execution of the calling \nthread for the number of secondspassed to it.\n____________________________________________________________________\nProblem 25.2\nWrite a program that calculates the squares and cubes of first 6 odd \nnumbers through functions that are executed sequentially. Incorporate \na delay of 0.5 secondsafter calculation of each square/cube value. \nReport the time required for execution of the program.\nProgram\nimport time\nimport threading\ndef squares(nos):\nprint('Calculating squares...')\nfor n in nos :\ntime.sleep(0.5)\nprint('n = ', n, ' square =', n * n)\ndef cubes(nos):\nprint('Calculating cubes...')\nfor n in nos :\ntime.sleep(0.5)", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_525", "chunk_strategy": "fixed_size"}}, {"text": "def squares(nos):\nprint('Calculating squares...')\nfor n in nos :\ntime.sleep(0.5)\nprint('n = ', n, ' square =', n * n)\ndef cubes(nos):\nprint('Calculating cubes...')\nfor n in nos :\ntime.sleep(0.5)\nprint('n = ', n, ' cube =', n * n * n)\narr = [1, 3, 5, 7, 9, 11]\nstartTime = time.time()\nsquares(arr)\ncubes(arr)\nendTime = time.time()\nprint('Time required = ', endTime -startTime, 'sec')\n--- Page 381 ---\nChapter25: Concurrency and Parallelism 365\nOutput\nCalculating squares...\nn = 1 square = 1\nn = 3 square = 9\nn = 5 square = 25\nn = 7 square = 49\nn = 9 square = 81\nn = 11 square = 121\nCalculating cubes...\nn = 1 cube = 1\nn = 3 cube = 27\nn = 5 cube = 125\nn = 7 cube = 343\nn = 9 cube = 729\nn = 11 cube = 1331\nTime required= 6.000343322753906 sec\nTips\nxThe functions squares( )and cubes( )are running in the same \nthread.\nxtime( )function returns the time in seconds since theepoch (Jan 1, \n1970, 00:00:00) as a floating point number.\n____________________________________________________________________", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_526", "chunk_strategy": "fixed_size"}}, {"text": "thread.\nxtime( )function returns the time in seconds since theepoch (Jan 1, \n1970, 00:00:00) as a floating point number.\n____________________________________________________________________\nProblem 25.3\nWrite a program that calculates squares and cubes of first 6 odd \nnumbers through functions that are executed in two independent \nthreads. Incorporate a delay of 0.5 secondsafter calculation of each \nsquare/cube value. Report the time required for execution of the \nprogram.\nProgram\nimport time\nimport threading\ndef squares(nos) :\n--- Page 382 ---\n366 Let Us Python\nprint('Calculating squares...')\nfor n in nos :\ntime.sleep(0.5)\nprint('n = ', n, ' square =', n * n)\ndef cubes(nos) :\nprint('Calculating cubes...')\nfor n in nos :\ntime.sleep(0.5)\nprint('n = ', n, ' cube =', n * n * n)\narr = [1, 3, 5,7, 9, 11]\nstartTime = time.time( )\nth1 = threading.Thread(target = squares, args = (arr,))\nth2 = threading.Thread(target = cubes, args = (arr,))\nth1.start( )\nth2.start( )\nth1.join( )\nth2.join( )", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_527", "chunk_strategy": "fixed_size"}}, {"text": "startTime = time.time( )\nth1 = threading.Thread(target = squares, args = (arr,))\nth2 = threading.Thread(target = cubes, args = (arr,))\nth1.start( )\nth2.start( )\nth1.join( )\nth2.join( )\nendTime = time.time( )\nprint('Time required = ', endTime -startTime, 'sec')\nOutput\nCalculating squares...\nCalculating cubes...\nn = 1 square = 1\nn = 1 cube = 1\nn = 3 square = 9\nn = 3 cube = 27\nn = 5 square = 25\nn = 5 cube = 125\nn = 7 square = 49\nn = 7 cube = 343\nn = 9 square = 81\nn = 9 cube = 729\nn = 11 square = 121\nn = 11 cube = 1331\nTime required = 3.001171588897705 sec\n--- Page 383 ---\nChapter25: Concurrency and Parallelism 367\nTips\nxsquares( )and cubes( )are being launched in separate threads.\nxSince squares( )and cubes( )need arr, it is passed to the constructor \nwhile launching the threads.\nxArguments meant for target functions must be passed as a tuple.\nxjoin( )waits until the thread on which it is called terminates.\nxIf this program is executed on a single processor machine it will still", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_528", "chunk_strategy": "fixed_size"}}, {"text": "xjoin( )waits until the thread on which it is called terminates.\nxIf this program is executed on a single processor machine it will still \nwork faster than the one in Problem 25.2. This is because when one \nthread is performing I/O, i.e. printing value of square/cube, the \nother thread can proceed with the calculation of cube/square.\nxThe output shows values of squares and cubes mixed. How to take \ncare of it has been shown in Chapter 26.\n____________________________________________________________________\nProblem 25.4\nWrite a program that reads the contents of 3 files a.txt, b.txt and c.txt \nsequentially and reports the number of lines present in it as well as the \ntotal reading time. These files should be added to the project and filled \nwith some text. The program should receive the file names as command-\nline arguments. Suspend the program for 0.5 secondsafter reading a \nline from any file. \nProgram\nimport time, sys\nstartTime = time.time( )\nlst = sys.argv\nlst = lst[1:]", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_529", "chunk_strategy": "fixed_size"}}, {"text": "line arguments. Suspend the program for 0.5 secondsafter reading a \nline from any file. \nProgram\nimport time, sys\nstartTime = time.time( )\nlst = sys.argv\nlst = lst[1:]\nfor file in lst:\nf = open(file, 'r')\ncount = 0\nwhile True :\ndata = f.readline( )\ntime.sleep(0.5)\nif data == '' :\n--- Page 384 ---\n368 Let Us Python\nbreak\ncount = count + 1\nprint('File:', file, 'Lines:', count)\nendTime = time.time( )\nprint('Time required =', endTime -startTime, 'sec')\nOutput\nFile: a.txt Lines: 5\nFile: b.txt Lines: 24\nFile: c.txt Lines: 6\nTime required = 19.009087324142456 sec \nTips\nxIf you are using IDLE then create three files a.txt, b.txt and c.txt \nthese files in the same folder as the source file.\nxIf you are using NetBeans add files a.txt, b.txt and c.txt to the project \nas 'Empty' files by right-clicking the project in Project window in \nNetBeans. Once created, add some lines to each of these files.\nxIf you are using IDLE thenprovide command-line arguments as \nfollows:", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_530", "chunk_strategy": "fixed_size"}}, {"text": "NetBeans. Once created, add some lines to each of these files.\nxIf you are using IDLE thenprovide command-line arguments as \nfollows:\nc:\\>idle -r SingleThreading.py a.txt b.txt c.txt\nEnsure that the path of idle batch file given below is added to PATH \nenvironmentvariable through Control Panel:\nC:\\Users\\Kanetkar\\AppData\\Local\\Programs\\Python\\Python36-32\\\nLib\\idlelib\nxIf you are using NetBeans, to provide a.txt, b.txt and c.txt as \ncommand-line arguments, right-click the project in Project window \nin NetBeans and select 'Properties' followed by 'Run'. Add 'a.txt b.txt \nc.txt' as 'Application Arguments'.\nxApplication arguments become available through sys.argvas a list. \nThis list also includes application name as the 0thelement in the list. \nSo we have slicedthe list to eliminate it.\n--- Page 385 ---\nChapter25: Concurrency and Parallelism 369\nxFile is opened for reading using open( )and file is read line by line in \na loop using readline( ).", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_531", "chunk_strategy": "fixed_size"}}, {"text": "--- Page 385 ---\nChapter25: Concurrency and Parallelism 369\nxFile is opened for reading using open( )and file is read line by line in \na loop using readline( ).\n____________________________________________________________________\nProblem 25.5\nWrite a program that reads the contents of 3 files a.txt, b.txt and c.txt in \ndifferent threads and reports the number of lines present in it as well as \nthe total reading time. These files should be added to the project and \nfilled with some text. The program should receive the file names as \ncommand-line arguments. Suspend the program for 0.5 secondsafter \nreading a line from any file. \nProgram\nimport time\nimport sys\nimport threading\ndef readFile(inputFile):\nf = open(inputFile, 'r')\ncount = 0\nwhile True :\ndata = f.readline( )\ntime.sleep(0.5)\nif data == '' :\nbreak\ncount = count + 1\nprint('File:', inputFile, 'Lines:', count)\nstartTime = time.time( )\nlst = sys.argv\nlst = lst[1:]\ntharr = [ ]\nfor file in lst:", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_532", "chunk_strategy": "fixed_size"}}, {"text": "time.sleep(0.5)\nif data == '' :\nbreak\ncount = count + 1\nprint('File:', inputFile, 'Lines:', count)\nstartTime = time.time( )\nlst = sys.argv\nlst = lst[1:]\ntharr = [ ]\nfor file in lst:\nth = threading.Thread(target=readFile, args =(file,))\nth.start( )\ntharr.append(th)\nfor th in tharr:\n--- Page 386 ---\n370 Let Us Python\nth.join( )\nendTime = time.time()\nprint('Time required = ', endTime -startTime, 'sec')\nOutput\nFile: a.txt Lines: 5\nFile: c.txt Lines: 6\nFile: b.txt Lines: 24\nTime required = 12.504715204238892 sec\nTips\nxFor details of adding files to the project, making them available to \napplication as command-line arguments and slicing the command-\nline argument list refer tips in Problem 25.4.\nxAs each thread is launched, the thread object is added to the thread \narray through tharr.append( ). This is necessary, so that we can later \ncall join( )on each thread.\nxThis program performs better than the one in Problem 25.4 because", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_533", "chunk_strategy": "fixed_size"}}, {"text": "array through tharr.append( ). This is necessary, so that we can later \ncall join( )on each thread.\nxThis program performs better than the one in Problem 25.4 because \nas one thread is busy printing the file statistics, the other thread can \ncontinue reading a file. \n____________________________________________________________________\n[A]State whether the following statements are True or False:\n(a)Multi-threading improves the speed of execution of the program.\n(b)A running task may have several threads running in it.\n(c)Multi-processing is same as multi-threading.\n(d)If we create a class that inherits from the Thread class, we can still \ninherit our class from some other class.\n(e)It is possible to change the name of the running thread.\n--- Page 387 ---\nChapter25: Concurrency and Parallelism 371\n(f)To launch a thread we must explicitly call the function that is \nsupposed to run in a separate thread.\n(g) To launch a thread we must explicitly call the run( )method defined", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_534", "chunk_strategy": "fixed_size"}}, {"text": "(f)To launch a thread we must explicitly call the function that is \nsupposed to run in a separate thread.\n(g) To launch a thread we must explicitly call the run( )method defined \nin a class that extends the Threadclass.\n(h)Though we do not explicitly call the function that is supposed to run \nin a separate thread, it is possible to pass arguments to the \nfunction.\n(i)We cannot control the priority of multiple threads that we may \nlaunch in a program.\n[B]Answer the followingquestions:\n(a)What is the difference between multi-processing and multi-\nthreading?\n(b)What is the difference between preemptive multi-threading and \ncooperative multi-threading?\n(c)Which are the two methodsavailable for launching threads in a \nPython program? \n(d)If Exclass extends the Thread class, then can we launch multiple \nthreads for objects of Exclass? If yes, how?\n(e)What do different elements of the following statement signify?\nth1 = threading.Thread(target=quads, args=(a, b))", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_535", "chunk_strategy": "fixed_size"}}, {"text": "threads for objects of Exclass? If yes, how?\n(e)What do different elements of the following statement signify?\nth1 = threading.Thread(target=quads, args=(a, b))\n(f)Write a multithreaded program that copies contents of one folder \ninto another. The source and target folder paths should be input \nthrough keyboard. \n(g) Write a program that reads the contents of 3 files a.txt, b.txt and \nc.txt sequentially and converts their contents into uppercase and \nwrites them into files aa.txt, bb.txt and cc.txt respectively. The \nprogram should report the time required in carrying out this \nconversion. The files a.txt, b.txt and c.txt should be added to the \nproject and filled with some text. The program should receive the \nfile names as command-line arguments. Suspend the program for \n0.5 seconds after reading a line from any file.\n--- Page 388 ---\n372 Let Us Python\n(h)Write a program that accomplishes the same task mentioned in \nExercise [B](g) above bylaunching the conversion operations in 3", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_536", "chunk_strategy": "fixed_size"}}, {"text": "--- Page 388 ---\n372 Let Us Python\n(h)Write a program that accomplishes the same task mentioned in \nExercise [B](g) above bylaunching the conversion operations in 3 \ndifferent threads.\n[C]Match the followingpairs:\na. Multiprocessing 1. use multiprocessingmodule\nb. Pre-emptive multi-threading 2. use multi-threading\nc. Cooperative multi-threading 3. use threadingmodule\nd. CPU-bound programs 4. use multi-processing\ne. I/O-boundprograms 5. use asyncio module\n--- Page 389 ---\nLet UsPython\n373Synchronization\nxSynchronization xSemaphore\nxExamples of sharing Resources xMechanisms for ITC\nxExample of comm. between Threads xEvent\nxMechanisms for Sharing Resources xCondition\nxLock xPrograms\nxRLock xExercises26\n\u201cWell-oiled threadsrun smoother... \u201d\n--- Page 390 ---\n374 Let Us Python\nSynchronization\nxIn a multithreaded application we may be needed to coordinate \n(synchronize) the activities of the threads running in it. \nxThe need to coordinate activities of threads will arise in two \nsituations:", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_537", "chunk_strategy": "fixed_size"}}, {"text": "xIn a multithreaded application we may be needed to coordinate \n(synchronize) the activities of the threads running in it. \nxThe need to coordinate activities of threads will arise in two \nsituations:\n(a)When data or other resources are to be shared amongst threads.\n(b)When we need to carry out communication between threads.\nExamplesof Sharing Resources\nxExample 1: Suppose a function has a statement n = n + 1. Here value \nof nis read, 1 is added to it and the result is writtenback.If multiple \nthreadscall this function then nwill be shared amongst these \nthreads. In such a case, if onethread has read nand before it \nupdates it another thread may read and update it. Such overlapping \naccesses and modifications from multiple threads may not \nincrement nsystematically.\nxSolution to Example 1: To ensure proper incrementation of n, we \nshould ensure that whichever thread gets the time-slot first should \ncomplete working with n. If inthe meanwhile another thread gets", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_538", "chunk_strategy": "fixed_size"}}, {"text": "xSolution to Example 1: To ensure proper incrementation of n, we \nshould ensure that whichever thread gets the time-slot first should \ncomplete working with n. If inthe meanwhile another thread gets \nthe time-slot, it should be made to wait. Only when first thread is \ndone, the other thread should be able to access to n.\nxExample 2: Suppose there are two threads in an application. One \nthread reads a list of numbers and prints its squares and another \nreads the list and prints cubes of numbers in it.So both threads are \ngoing to share the list. When thethreads print the squares and \ncubes, the output is likely to get mixed up. \nxSolution to Example 2: To avoid mixing of output we should ensure \nthat whichever thread gets the time-slot first should complete \nworking with the list. If inthe meanwhile other thread gets the time-\nslot, it should be made to wait. Only when first thread is done, the \nother thread should be able to access the list.\nExample of Communication between Threads", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_539", "chunk_strategy": "fixed_size"}}, {"text": "slot, it should be made to wait. Only when first thread is done, the \nother thread should be able to access the list.\nExample of Communication between Threads\nxSuppose one thread is generating numbers in an infinite loop and \nanother thread is finding squares of generated numbers. Unless the \n--- Page 391 ---\nChapter26: Synchronization 375\nnew number is generated its square cannot be found. So if squaring \nthread gets the time slot earlier than the generating thread, \nsquaring thread must be made to wait. Also, when square is being \ngenerated, new numbers should not get generated. This is necessary \notherwise the squaring thread may miss some numbers. \nxThis is a typical producer-consumer problem, where the number \ngenerating thread is the producer and the squaring thread is the \nconsumer. \nxHere communication between two threads would be required. \nWhen producer thread completes production it should communicate \nto the squaring thread that it is done with production. When", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_540", "chunk_strategy": "fixed_size"}}, {"text": "consumer. \nxHere communication between two threads would be required. \nWhen producer thread completes production it should communicate \nto the squaring thread that it is done with production. When \nconsumer thread completes squaring it should communicate to the \nproducer thread that it is done and producer thread can produce the \nnext number.\nMechanisms for Sharing Resources\nxPython's threading module provides three mechanisms for sharing \nresources between threads:\n(a)Lock\n(b)RLock \n(c)Semaphore\nxThey should be used in following situations:\n-For synchronized access to shared resources -use lock.\n-For nested access to shared resources -use re-entrant lock.\n-For permitting limited number of accesses to a resource -use \nsemaphore.\nLock\nxLocks are used to synchronize access to a shared resource. We \nshould first createaLockobject. When we need to access the \nresource we shouldcallacquire( ), then use the resource and once \ndone, callrelease( )as shown below:\nlck = threading.Lock( )", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_541", "chunk_strategy": "fixed_size"}}, {"text": "should first createaLockobject. When we need to access the \nresource we shouldcallacquire( ), then use the resource and once \ndone, callrelease( )as shown below:\nlck = threading.Lock( )\nlck.acquire( )\n# use the resource\nlck.release( )\n--- Page 392 ---\n376 Let Us Python\nxFor each shared resource, a new Lockobject should be created.\nxA lock can be in two states\u0376'Locked' or 'Unlocked'. \nxA Lockobject has two methods\u0376acquire( )and release( ). If a thread \ncalls acquire( )it puts the lock in 'Locked' state if it is currently in \n'Unlocked' state and returns. If it is already in 'Locked' state then the \ncall to acquire( )blocks the thread (means control doesn't return \nfrom acquire( )). A call to release( )puts the lock in 'Unlocked' state.\nRLock\nxSometimes a recursive function may be invoked through multiple \nthreads. In such cases, if we use Lockto provide synchronized access \nto shared variables it would lead to a problem\u0376thread will be", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_542", "chunk_strategy": "fixed_size"}}, {"text": "xSometimes a recursive function may be invoked through multiple \nthreads. In such cases, if we use Lockto provide synchronized access \nto shared variables it would lead to a problem\u0376thread will be \nblocked when it attempts to acquire the same lock second time.\nxThis problem can be overcome by using re-entrant Lock or RLock. A \nre-entrant lock only blocks if another thread currently holds the lock. \nIf \u019ahe c\u01b5rren\u019a \u019ahread \u019arie\u0190 \u019ao acq\u01b5ire a lock \u019aha\u019a i\u019a\ue001\u0190 alread\u01c7 holding\ue002 \nexecution continues as usual.\nxA lock/rlock acquired by one thread can be released either by same \nthread or by another thread.\nxrelease( )should be called as many times as acquire( )is called.\nxFollowing code snippet shows working of normal lock and re-entrant \nlock.\nlck = threading.Lock( )\nlck.acquire( )\nlck.acquire( ) # this will block\nrlck = threading.RLock( )\nrlck.acquire( )\nrlck.acquire( ) # this won't block\nxA lock/rlock is also known as mutex as it permits mutual exclusive \naccess to a resource.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_543", "chunk_strategy": "fixed_size"}}, {"text": "lck.acquire( ) # this will block\nrlck = threading.RLock( )\nrlck.acquire( )\nrlck.acquire( ) # this won't block\nxA lock/rlock is also known as mutex as it permits mutual exclusive \naccess to a resource.\n--- Page 393 ---\nChapter26: Synchronization 377\nSemaphore\nxIf we wish to permitaccess to a resource like network connection or \na database serverto a limited number of threads we can do so using \na semaphore object. \nxA semaphore object uses acounter rather than a lock flag. The \ncounter can be set to indicate the number of threads that \ncanacquirethe semaphore before blocking occurs. \nxOnce the counter is set, the counter decreases peracquire()call, \nand increases perrelease( )call. Blocking occurs only if more than \nthe setnumber of threads attemptto acquirethe semaphore.\nxWe have to only initialize the counter to the maximum number while \ncreating the semaphore object, and the semaphore implementationl \ntakescare of the rest.\nMechanisms for Inter-thread Communication(ITC)", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_544", "chunk_strategy": "fixed_size"}}, {"text": "creating the semaphore object, and the semaphore implementationl \ntakescare of the rest.\nMechanisms for Inter-thread Communication(ITC)\nxPython's threadingmodule provides two mechanisms forinter-\nthread communication:\n(a)Event\n(b)Condition\nEvent\nxAn Eventobject is used to communicate between threads. It has an \ninternal flag which threads can set or clear through methods set( )\nand clear( ). \nxTypical working: If thread 1 calls the method wait(), it will wait \n(block) if internal flag has not yet been set. Thread 2 will set the flag. \nSince the flag now stands set, Thread 1 will come out its wait state, \nperform its work and then clear the flag. This scenario is shown in \nthe following program:\ndeffun1():\nwhile True :\n# waitfortheflagtobeset\nev.wait()\n# once flag is set by thread 2, do the work in this thread\nev.clear()# clear the flag\ndeffun2():\n--- Page 394 ---\n378 Let Us Python\nwhile True :\n# perform some work\n# set the flag\nev.set()\nev = Event( )", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_545", "chunk_strategy": "fixed_size"}}, {"text": "ev.clear()# clear the flag\ndeffun2():\n--- Page 394 ---\n378 Let Us Python\nwhile True :\n# perform some work\n# set the flag\nev.set()\nev = Event( )\nth1 = threading.Thread(target = fun1)\nth2 = threading.Thread(target = fun2)\nCondition\nxAConditionobject is an advanced version of theEventobject. It too \nis used to communicate between threads. It has methods acquire( ), \nrelease( ), wait( ), notify( )and notifyAll( ).\nxA Conditionobject internally uses a lock that can be acquired or \nreleased using acquire( )and release( )functions respectively. \nacquire( )blocks if the lock is already in locked state.\nxConditionobject cannotifyother threads using notify( )/notifyAll( )\nabout a change in the state of the program. \nxThewait( )method releases the lock, and then blocks until it is \nawakened by anotify()ornotifyAll()call for the same Conditionin \nanother thread. Once awakened, it re-acquires the lock and returns.\nxA thread shouldreleaseaConditiononce it has completed the", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_546", "chunk_strategy": "fixed_size"}}, {"text": "awakened by anotify()ornotifyAll()call for the same Conditionin \nanother thread. Once awakened, it re-acquires the lock and returns.\nxA thread shouldreleaseaConditiononce it has completed the \nrelated actions, so that other threads can acquire the condition for \ntheir purposes.\nxProducer Consumer algorithm is a technique for generating requests \nand processing the pending requests. Producer produces requests, \nConsumer consumes generated requests. Both work as independent \nthreads.\nxConditionobject can be used to implement a Producer Consumer \nalgorithm as shown below:\n# Producer thread\ncond.acquire( )\n# code here to produce one item\ncond.notify( )\ncond.release( )\n# Consumer thread\n--- Page 395 ---\nChapter26: Synchronization 379\ncond.acquire( )\nwhile item_is_not_available( ) :\ncond.wait( )\n# code here to consume the item\ncond.release( )\nxWorking of Producer Consumer problem:\n-Consumer waitswhile Producer is producing.\n-Once Producer has produced it sends asignal to Consumer.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_547", "chunk_strategy": "fixed_size"}}, {"text": "# code here to consume the item\ncond.release( )\nxWorking of Producer Consumer problem:\n-Consumer waitswhile Producer is producing.\n-Once Producer has produced it sends asignal to Consumer.\n-Producer waits while Consumer is consuming.\n-Once Consumer has consumed it sends asignal to Producer.\n____________________________________________________________________\nProblem 26.1\nWrite a program through whichyou can prove that in this programming \nsituation synchronization is really required. Then write a program to \ndemonstrate how synchronization can solve the problem.\nProgram\nimport time\nimport threading \ndef fun1( ) :\nprint('Entering fun1')\nglobal g\ng += 1\n#time.sleep(10)\ng -= 1\nprint('In fun1 g =', g)\nprint('Exiting fun1')\ndef fun2( ) :\nprint('Entering fun2')\nglobal g\ng += 2\ng -= 2\nprint('In fun2 g =', g)\n--- Page 396 ---\n380 Let Us Python\nprint('Exiting fun2')\ng = 10\nth1 = threading.Thread(target = fun1)\nth2 = threading.Thread(target = fun2)\nth1.start( )\nth2.start( )\nth1.join( )", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_548", "chunk_strategy": "fixed_size"}}, {"text": "--- Page 396 ---\n380 Let Us Python\nprint('Exiting fun2')\ng = 10\nth1 = threading.Thread(target = fun1)\nth2 = threading.Thread(target = fun2)\nth1.start( )\nth2.start( )\nth1.join( )\nth2.join( )\nOutput\nEntering fun1\nIn fun1 g = 10\nExiting fun1\nEntering fun2\nIn fun2 g = 10\nExiting fun2\nIf you uncomment the call to time.sleep( ), the output changes to:\nEntering fun1\nEntering fun2\nIn fun2 g = 11\nExiting fun2\nIn fun1 g = 10\nExiting fun1\nTips\nxWe are using the global variable g in fun1( )and fun2() which are \nrunning in two different threads. As expected, both print the value \nof gas 10, as both increment and decrement it by 1 and 2 \nrespectively.\nxIf you uncomment the call to sleep( )the output becomes \ninconsistent. fun1( )increments the value of gto 11, but before it \ncan decrement the incremented value, fun2( )gets the time-slot, \nwhich increments gto 13,decrements it to 11 and prints it. The \ntime-slot again goes to fun1( ), which decrements gto 10 and prints \nit.\n--- Page 397 ---", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_549", "chunk_strategy": "fixed_size"}}, {"text": "which increments gto 13,decrements it to 11 and prints it. The \ntime-slot again goes to fun1( ), which decrements gto 10 and prints \nit.\n--- Page 397 ---\nChapter26: Synchronization 381\nxThe solution to avoid this mismatch is given in the program shown \nbelow.\nProgram\nimport time\nimport threading \ndef fun1( ) :\nprint('Entering fun1')\nglobal g\nlck.acquire( )\ng += 1\ng -= 1\nlck.release( )\nprint('In fun1 g =', g)\nprint('Exiting fun1')\ndef fun2( ) :\nprint('Entering fun2')\nglobal g\nlck.acquire( )\ng += 2\ng -= 2\nlck.release( )\nprint('In fun2 g =', g)\nprint('Exiting fun2')\ng = 10\nlck = threading.Lock( )\nth1 = threading.Thread(target = fun1)\nth2 = threading.Thread(target = fun2)\nth1.start( )\nth2.start( )\nth1.join( )\nth2.join( )\nTips\nxIn main thread we have created a Lockobject through the call \nthreading.Lock( ). \n--- Page 398 ---\n382 Let Us Python\nxIf fun1thread gets the first time-slot, it calls acquire( ).This call puts \nthe lock in 'Locked' state and returns. So fun1threadcan work with", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_550", "chunk_strategy": "fixed_size"}}, {"text": "threading.Lock( ). \n--- Page 398 ---\n382 Let Us Python\nxIf fun1thread gets the first time-slot, it calls acquire( ).This call puts \nthe lock in 'Locked' state and returns. So fun1threadcan work with \ng. If midway through its time-slot expires and fun2thread gets it, it \nwill also call acquire( ), but it will be blocked (control will not return \nfrom it) since lock is in 'Locked' state. In the next time-slot fun1 \nthread finishes its work and releases the lock (puts the lock in \n'Unlocked' state) by calling release( ). As a result, fun2thread can \nwork with gwhen it gets time-slot.\n____________________________________________________________________\nProblem 26.2\nWrite a program that calculates the squares and cubes of first 6 odd \nnumbers through functions that are executed in two independent \nthreads. Incorporate a delay of 0.5 secondsafter calculation of each \nsquare/cube value. Report the time required for execution of the", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_551", "chunk_strategy": "fixed_size"}}, {"text": "numbers through functions that are executed in two independent \nthreads. Incorporate a delay of 0.5 secondsafter calculation of each \nsquare/cube value. Report the time required for execution of the \nprogram. Make sure that the output of squares( )and cubes( )doesn't \nget mixed up.\nProgram\nimport time\nimport threading\ndef squares(nos, lck):\nlck.acquire()\nprint('Calculating squares...')\nfor n in nos :\ntime.sleep(0.5)\nprint('n = ', n, ' square =', n * n)\nlck.release()\ndef cubes(nos, lck) :\nlck.acquire()\nprint('Calculating cubes...')\nfor n in nos :\ntime.sleep(0.5)\nprint('n = ', n, ' cube =', n * n * n)\nlck.release()\narr = [1, 3, 5, 7, 9, 11]\nstartTime = time.time()\n--- Page 399 ---\nChapter26: Synchronization 383\nlck = threading.Lock() \nth1 = threading.Thread(target=squares, args =(arr, lck))\nth2 = threading.Thread(target=cubes, args=(arr, lck))\nth1.start()\nth2.start()\nth1.join()\nth2.join()\nendTime = time.time()\nprint('Time required = ', endTime -startTime, 'sec')\nOutput", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_552", "chunk_strategy": "fixed_size"}}, {"text": "th2 = threading.Thread(target=cubes, args=(arr, lck))\nth1.start()\nth2.start()\nth1.join()\nth2.join()\nendTime = time.time()\nprint('Time required = ', endTime -startTime, 'sec')\nOutput\nCalculating squares...\nn = 1 square = 1\nn = 3 square = 9\nn = 5 square = 25\nn = 7 square = 49\nn = 9 square = 81\nn = 11 square = 121\nCalculating cubes...\nn = 1 cube = 1\nn = 3 cube = 27\nn = 5 cube = 125\nn = 7 cube = 343\nn = 9 cube = 729\nn = 11 cube = 1331\nTime required = 6.001343250274658 sec\nTips\nxTo ensure that output ofsquares( )doesn't get mixed up with \noutput of cubes( )we should ensure that when one is working \nanother should be put on hold.\nxIn main thread we have created a Lockobject through the call \nthreading.Lock( ). Along with the list, this Lockobject is shared \nbetween squares( )and cubes( ).\nxIf squares thread gets the first time-slot, it calls acquire( ). This call \nputs the lock in 'Locked' state and returns. So squares threadcan \n--- Page 400 ---\n384 Let Us Python", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_553", "chunk_strategy": "fixed_size"}}, {"text": "xIf squares thread gets the first time-slot, it calls acquire( ). This call \nputs the lock in 'Locked' state and returns. So squares threadcan \n--- Page 400 ---\n384 Let Us Python\nstart generating and printing squares. If midway through its time-\nslot expires and cubesthread gets it, it will also call acquire( ), but it \nwill be blocked (control will not return from it) since lock is in \n'Locked' state. In the next time-slot squaresthread finishes its work \nand releases the lock (puts the lock in 'Unlocked' state) by calling \nrelease( ).\nxSimilar reasoning would hold good if cubesthread gets the first \ntime-slot.\nxSuppose there were three threads squares, cubes and quadruples\nand squaresthread acquires the lock. When it releases the lock \nwhich of the two waiting threads will proceed is not defined and \nmay vary across Python implementations.\n____________________________________________________________________\nProblem 26.3\nWrite a program that prints the following 3 messages through 3", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_554", "chunk_strategy": "fixed_size"}}, {"text": "may vary across Python implementations.\n____________________________________________________________________\nProblem 26.3\nWrite a program that prints the following 3 messages through 3 \ndifferent threads:\n[What is this life...]\n[We have no time...]\n[To standand stare!]\nEach thread should be passed the relevant message and should print '[', \nmessage and ']' through three different print( )calls.\nProgram\nimport time\nimport threading\ndef printMsg(msg, lck):\nlck.acquire( )\nprint('[', end = '')\nprint(msg, end = '')\ntime.sleep(0.5)\nprint(']')\nlck.release( )\nlck = threading.Lock( ) \nth1 = threading.Thread(target = printMsg, \nargs = ('What is this life...', lck))\n--- Page 401 ---\nChapter26: Synchronization 385\nth1.start( )\nth2 = threading.Thread(target = printMsg, \nargs = ('We have no time...', lck))\nth2.start( )\nth3 = threading.Thread(target = printMsg, \nargs = ('To stand and stare!', lck))\nth3.start( )\nth1.join( )\nth2.join( )\nth3.join( )\nTips", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_555", "chunk_strategy": "fixed_size"}}, {"text": "args = ('We have no time...', lck))\nth2.start( )\nth3 = threading.Thread(target = printMsg, \nargs = ('To stand and stare!', lck))\nth3.start( )\nth1.join( )\nth2.join( )\nth3.join( )\nTips\nxThree threads are created. In each thread the printMsg( )function is \nexecuted, but a different message is passed to it in each thread.\nxTo ensure that '[', message and ']' are printed in the same order in \neach thread, the activity of the threads is synchronized. \nxWhen one thread acquires a lock, othersare blocked until the thread \nthat acquired the lock releases it.\n____________________________________________________________________\nProblem 26.4\nWrite a program that runs a recursive print_num( )function in 2 \nthreads. This function should receive an integer and print all numbers\nfrom that number up to 1.\nProgram\nimport threading \ndef print_num(n) :\ntry :\nrlck.acquire( )\nif n == 0 : \nreturn \nelse :\nt = threading.current_thread( )\nprint(t.name, ':', n)\nn -= 1\n--- Page 402 ---\n386 Let Us Python", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_556", "chunk_strategy": "fixed_size"}}, {"text": "Program\nimport threading \ndef print_num(n) :\ntry :\nrlck.acquire( )\nif n == 0 : \nreturn \nelse :\nt = threading.current_thread( )\nprint(t.name, ':', n)\nn -= 1\n--- Page 402 ---\n386 Let Us Python\nprint_num(n)\nfinally :\nrlck.release( )\nrlck = threading.RLock( )\nth1 = threading.Thread(target = print_num, args = (8,))\nth1.start( )\nth2 = threading.Thread(target = print_num, args = (5,))\nth2.start( )\nth1.join( )\nth2.join( )\nOutput\nThread-1 : 8\nThread-1 : 7\nThread-1 : 6\nThread-1 : 5\nThread-1 : 4\nThread-1 : 3\nThread-1 : 2\nThread-1 : 1\nThread-2 : 5\nThread-2 : 4\nThread-2 : 3\nThread-2 : 2\nThread-2 : 1\nTips\nxSince we are sharing resources in a recursive function we have used \nRLockinstead of Lock.\nxA lock acquired by one thread can be released by another. So we \nhave released the lock in finally block for each thread. finallyblock \ngoes to work only when control returns from print_num( )last time \nafter completing all recursive calls. \nxWe have printed name of each thread along with the current value", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_557", "chunk_strategy": "fixed_size"}}, {"text": "goes to work only when control returns from print_num( )last time \nafter completing all recursive calls. \nxWe have printed name of each thread along with the current value \nof nso that we get an idea of which thread are we working in.\n--- Page 403 ---\nChapter26: Synchronization 387\nxIf wereplace RLockwith Lockwewill get output from one thread \nonly. This is because one thread will acquire the lock and do some \nprinting. When its' time-slot expires and another thread gets it, it \nwill also call acquire( )and would get blocked.\nxIf you do not use any lock the output from the two threads will get \nmixed up.\n____________________________________________________________________\nProblem 26.5\nWrite a program that runs a recursive factorial( )function in 2 threads. \nThis function should receive an integer and print all the intermediate \nproducts and final product.\nProgram\nimport threading \ndef factorial(n) :\ntry :\nrlck.acquire( )\nif n == 0 : \nreturn 1 \nelse :\np = n * factorial(n -1)", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_558", "chunk_strategy": "fixed_size"}}, {"text": "products and final product.\nProgram\nimport threading \ndef factorial(n) :\ntry :\nrlck.acquire( )\nif n == 0 : \nreturn 1 \nelse :\np = n * factorial(n -1)\nprint(f'{n}! = {p}')\nreturn p\nfinally :\nrlck.release( )\nrlck = threading.RLock( )\nth1 = threading.Thread(target = factorial, args = (5,))\nth1.start( )\nth2 = threading.Thread(target = factorial, args = (8,))\nth2.start( )\nth1.join( )\nth2.join( )\nOutput\n1 != 1\n--- Page 404 ---\n388 Let Us Python\n2 != 2\n3 != 6\n4 != 24\n5 != 120\n1 != 1\n2 != 2\n3 != 6\n4 != 24\n5 != 120\n6 != 720\n7 != 5040\n8 != 40320\nTips\nxSince we are sharing resources in a recursive function we have used \nRLockinstead of Lock.\nxA lock acquired by one thread can be released by another. So we \nhave released the lock in finally block for each thread. finallyblock \ngoes to work only when control returns from factorial( )last time \nafter completing all recursive calls. \nxIf wereplace RLockwith Lockwewill get output from one thread", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_559", "chunk_strategy": "fixed_size"}}, {"text": "goes to work only when control returns from factorial( )last time \nafter completing all recursive calls. \nxIf wereplace RLockwith Lockwewill get output from one thread \nonly. This is because one thread will acquire the lock and do some \ncalculation and printing. When its' time-slot expires and other \nthread gets it, it will also call acquire( )and would get blocked.\nxIf wedo not use any lock the output from the two threadswill get \nmixed up.\n____________________________________________________________________\nProblem 26.6\nWrite a program that defines a function fun( )that prints a message that \nit receives infinite times. Limit the number of threads that can invoke \nfun( ) to 3. If 4ththread tries to invoke fun( ), it should not get invoked.\nProgram\nimport threading \ndef fun(msg) :\n--- Page 405 ---\nChapter26: Synchronization 389\ns.acquire( )\nt = threading.current_thread( )\nwhile True :\nprint(t.name, ':', msg)\ns.release( )\ns = threading.BoundedSemaphore(3)", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_560", "chunk_strategy": "fixed_size"}}, {"text": "def fun(msg) :\n--- Page 405 ---\nChapter26: Synchronization 389\ns.acquire( )\nt = threading.current_thread( )\nwhile True :\nprint(t.name, ':', msg)\ns.release( )\ns = threading.BoundedSemaphore(3)\nth1 = threading.Thread(target = fun, args = ('Hello',))\nth2 = threading.Thread(target = fun, args = ('Hi',))\nth3 = threading.Thread(target = fun, args = ('Welcome',))\nth4 = threading.Thread(target = fun, args = ('ByeBye',))\nth1.start( )\nth2.start( )\nth3.start( )\nth4.start( )\nth1.join( )\nth2.join( )\nth3.join( )\nth4.join( )\nOutput\nThread-2 : Hi\nThread-1 : Hello\nThread-2 : Hi\nThread-1 : Hello\nThread-2 : Hi\nThread-3 : Welcome\nThread-1 : Hello\nThread-2 : Hi\nThread-3 : Welcome\nThread-3 : Welcome\nThread-3 : Welcome\n...\nTips\nxFrom the output it is evident that the 4ththread could not invoke \nfun( ). \n____________________________________________________________________\n--- Page 406 ---\n390 Let Us Python\nProblem 26.7\nWrite a program that runs functions fun1( )and fun2( )in two different", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_561", "chunk_strategy": "fixed_size"}}, {"text": "fun( ). \n____________________________________________________________________\n--- Page 406 ---\n390 Let Us Python\nProblem 26.7\nWrite a program that runs functions fun1( )and fun2( )in two different \nthreads. Using an event object, function fun1( )should wait for fun2( )\nto signal it at random intervals that its wait is over. On receiving the \nsignal, fun1( )should report the time and clear the event flag.\nProgram\nimportthreading\nimportrandom\nimporttime\ndeffun1(ev, n):\nforiinrange(n):\nprint(i+1,'Waiting fortheflagtobeset...')\nev.wait()\nprint('Waitcompleteat:',time.ctime())\nev.clear()\nprint()\ndeffun2(ev, n):\nforiinrange(n):\ntime.sleep(random.randrange(2,5))\nev.set()\nev=threading.Event()\nth=[]\nnum=random.randrange(4,8)\nth.append(threading.Thread(target=fun1, args =(ev,num)))\nth[-1].start()\nth.append(threading.Thread(target=fun2, args =(ev,num)))\nth[-1].start()\nfortinth:\nt.join()\nprint('All done!!')\nOutput\n1 Waiting for the flag to be set...\nWait complete at: Sat Nov 2 11:03:43 2019", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_562", "chunk_strategy": "fixed_size"}}, {"text": "th.append(threading.Thread(target=fun2, args =(ev,num)))\nth[-1].start()\nfortinth:\nt.join()\nprint('All done!!')\nOutput\n1 Waiting for the flag to be set...\nWait complete at: Sat Nov 2 11:03:43 2019\n--- Page 407 ---\nChapter26: Synchronization 391\n2 Waiting for the flag to be set...\nWait complete at: Sat Nov 2 11:03:45 2019\n3 Waiting for the flag to be set...\nWait complete at: Sat Nov 2 11:03:48 2019\n4Waiting for the flag to be set...\nWait complete at: Sat Nov 2 11:03:52 2019\n5 Waiting for the flag to be set...\nWait complete at: Sat Nov 2 11:03:54 2019\nAll done!!\nTips\nxNote how the thread array is maintained using the indexvalue '-1'to \nrefer to the last thread added to the array.\n____________________________________________________________________\nProblem 26.8\nWrite a program that implements a Producer -Consumer algorithm. The \nproducer thread should generate random numbers in the range 10 to \n20.The consumer thread should print the square of the random number", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_563", "chunk_strategy": "fixed_size"}}, {"text": "producer thread should generate random numbers in the range 10 to \n20.The consumer thread should print the square of the random number \nproduced by the producer thread. \nProgram\nimportthreading\nimportrandom\nimportqueue\nimporttime\ndefproducer():\nforiinrange(5):\ntime.sleep(random.randrange(2,5))\ncond.acquire()\nnum=random.randrange(10,20)\nprint('Generatednumber=',num)\nq.append(num)\ncond.notify()\n--- Page 408 ---\n392 Let Us Python\ncond.release()\ndefconsumer():\nforiinrange(5):\ncond.acquire()\nwhileTrue:\niflen(q) :\nnum=q.pop()\nbreak\ncond.wait()\nprint('Its square=',num*num)\ncond.release()\ncond=threading.Condition( )\nq=[]\nth1=threading.Thread(target=producer)\nth2=threading.Thread(target=consumer)\nth1.start()\nth2.start()\nth1.join()\nth2.join()\nprint('Alldone!!')\nOutput\nGenerated number = 14\nIts square = 196\nGenerated number = 10\nIts square = 100\nGenerated number = 13\nIts square = 169\nGenerated number = 15\nItssquare = 225\nGenerated number = 10\nIts square = 100\nAll done!!\n--- Page 409 ---", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_564", "chunk_strategy": "fixed_size"}}, {"text": "Its square = 196\nGenerated number = 10\nIts square = 100\nGenerated number = 13\nIts square = 169\nGenerated number = 15\nItssquare = 225\nGenerated number = 10\nIts square = 100\nAll done!!\n--- Page 409 ---\nChapter26: Synchronization 393\nTips\nxExamine the program for the following possibilities and satisfy \nyourself that it works as per expectation in all situations:\n-Producer gets a time-slot before Consumer\n-Producer gets time-slot when Consumer is consuming\n-Producer finishes producing before its time-slot expires\n-Consumer gets a time-slot after Producer\n-Consumer finishes before its time-slot expires\n-Consumer gets a time-slot before Producer\n-Consumer gets time-slot when Producer is busy\n____________________________________________________________________\n[A]State whether the following statements are True or False:\n(a)All multi-threaded applications should use synchronization.\n(b)If 3 threads are going to read from a shared list it is necessary to \nsynchronize their activities.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_565", "chunk_strategy": "fixed_size"}}, {"text": "(a)All multi-threaded applications should use synchronization.\n(b)If 3 threads are going to read from a shared list it is necessary to \nsynchronize their activities.\n(c)A Lock acquired by one thread can be released by eitherthe same \nthread or any other thread running in the application.\n(d)If Lock is used in reentrant code then the thread is likely to get \nblocked during the second call.\n(e)Lock and RLock work like a Mutex.\n(f)A thread will wait on an Event object unless its internal flag is \ncleared.\n(g) A Condition object internally uses a lock.\n(h)While using RLock we must ensure that we call release( )as many \ntimes as the number of calls to acquire( ).\n(i)Using Lock we can control the maximum number of threads that \ncan access a resource.\n(j)There is no difference between the synchronization objects Event \nand Condition.\n(k)If in a Python program one thread reads a document and another \nthread writes to the same document then the two threads should \nbe synchronized.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_566", "chunk_strategy": "fixed_size"}}, {"text": "and Condition.\n(k)If in a Python program one thread reads a document and another \nthread writes to the same document then the two threads should \nbe synchronized.\n--- Page 410 ---\n394 Let Us Python\n(l)If in a Python program one thread copies a document and another \nthread displays progress bar then the two threads should be \nsynchronized.\n(m)If in a Python program one thread lets you type a document and \nanother thread performs spellcheck on the same document then \nthe two threads should be synchronized.\n(n)If in a Python program one thread canscan a document for viruses \nand another thread can pause or stop the scan then the two \nthreads should be synchronized.\n[B]Answer the followingquestions:\n(a)Which synchronization mechanisms are used for sharing resources \namongst multiple threads?\n(b)Which synchronization objects are used for inter-thread \ncommunication in a multi-threaded application?\n(c)What is the difference between a Lock and RLock?", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_567", "chunk_strategy": "fixed_size"}}, {"text": "amongst multiple threads?\n(b)Which synchronization objects are used for inter-thread \ncommunication in a multi-threaded application?\n(c)What is the difference between a Lock and RLock?\n(d)What is the purpose of the Semaphore synchronization primitive?\n(e)Write a program that has three threads in it. The first thread should \nproduce random numbers in the range 1 to 20, the second thread \nshould display the square of the number generated by first thread \non the screen, and the third thread should write cube of number \ngenerated by first thread into a file.\n(f)Suppose one thread is producing numbers from 1to nand another \nthread is printing the produced numbers. Comment on the output \nthat we are likely to get.\n(g) What will happen if thread t1waits for thread t2to finish and \nthread t2waits for t1to finish?\n[C]Matchthe followingpairs:\na. RLock 1. limits no. of threads accessing a resource\nb. Event 2. useful in sharing resource in reentrant code", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_568", "chunk_strategy": "fixed_size"}}, {"text": "thread t2waits for t1to finish?\n[C]Matchthe followingpairs:\na. RLock 1. limits no. of threads accessing a resource\nb. Event 2. useful in sharing resource in reentrant code\nc. Semaphore 3. useful for inter-thread communication\nd. Condition 4. signals waiting threads on change in state\ne. Lock 5. useful in sharing resource among threads\n--- Page 411 ---\nLet UsPython\n395Precedence TableA\n\u201cPreferential treatments... \u201d\n--- Page 412 ---\n396 Let Us Python\nDescription Operator Associativity\nGrouping\nFunctioncall\nSlicing\nExponentiation\nBitwiseNOT\nUnaryplus/minus\nMultiplication\nDivision\nModularDivsion\nAddition\nSubtraction\nBitwiseleftshift\nBitwiserightshift\nBitwiseAND\nBitwiseXOR\nBitwiseOR\nMembership\nIdentity\nRelational\nEquality\nInequality\nLogicalNOT\nLogicalAND\nLogicalOR\nAssignment()\nfunction()\n[start:end:step]\n**\n~\n+-\n*\n/\n%\n+\n-\n<<\n>>\n&\n^\n|\nInnotin\nisisnot\n<><=>=\n==\n!=<>\nnot\nand\nor\n=+=-=*=/=%=//=**=&=|=^=>>=<<=LefttoRight\nLefttoRight\nLefttoRight\nRighttoLeft\nRighttoLeft\nLefttoRight\nLefttoRight", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_569", "chunk_strategy": "fixed_size"}}, {"text": "**\n~\n+-\n*\n/\n%\n+\n-\n<<\n>>\n&\n^\n|\nInnotin\nisisnot\n<><=>=\n==\n!=<>\nnot\nand\nor\n=+=-=*=/=%=//=**=&=|=^=>>=<<=LefttoRight\nLefttoRight\nLefttoRight\nRighttoLeft\nRighttoLeft\nLefttoRight\nLefttoRight\nLefttoRight\nLefttoRight\nLefttoRight\nLefttoRight\nLefttoRight\nLefttoRight\nLefttoRight\nLefttoRight\nLefttoRight\nLefttoRight\nLefttoRight\nLefttoRight\nLefttoRight\nLefttoRight\nLefttoRight\nLefttoRight\nLefttoRight\nRighttoLeft\n--- Page 413 ---\nLet UsPython\n397Debugging in \nPython B\n\ue001Don\ue002t bug others, debug instead...\ue003\n--- Page 414 ---\n398 Let Us Python\nDebugging\nxTwo types of errors occur while creating programs\u0376Syntax errors \nand Logical errors.\nxSyntax errors are grammatical errors and are reported by Python \ninterpreter. It is easy to rectify these errors as interpreter tells us \nexactly which statement in the program is incorrect and why is it so.\nxLogical errors are diffic\u01b5l\u019a \u019ao loca\u019ae beca\u01b5se \u01c1e don\ue001\u019a ge\u019a an\u01c7 hin\u019a as \nto where things are wrong in our program and why we are not \ngetting the desired results.", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_570", "chunk_strategy": "fixed_size"}}, {"text": "xLogical errors are diffic\u01b5l\u019a \u019ao loca\u019ae beca\u01b5se \u01c1e don\ue001\u019a ge\u019a an\u01c7 hin\u019a as \nto where things are wrong in our program and why we are not \ngetting the desired results.\nxBug means an error. Debugging means process of removal of errors.\nDebugger is a special program the can help us detect Logical errors \nin our program.\nxThere are many debuggers available for debugging Python programs. \nNo matter which debugger we use, the steps for debugging remain \nsame. These steps are given below:\n(a)Start the debugger\n(b)Set breakpoints\n(c)Stepthrough the source code one line at a time\n(d)Inspect the values of variables as they change\n(e)Make corrections to the sourcecode\n(f)Rerun the program to make sure the fixes are correct\nGiven below is a detailed explanation of these stepsfor IDLE\ndebugger.\nStart Debugger\nxStart IDLE and type any program in it, or open an already typed \nsource file.\nxIn the Shell window, click on the 'Debug' menu option at the top and", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_571", "chunk_strategy": "fixed_size"}}, {"text": "debugger.\nStart Debugger\nxStart IDLE and type any program in it, or open an already typed \nsource file.\nxIn the Shell window, click on the 'Debug' menu option at the top and \nthen choose 'Debugger' from the pop-up menu. A new window \nshown in Figure B.1 and titled 'Debug Control' will appear on the \nscreen. \n--- Page 415 ---\nAppendix B: Debugging in Python 399\nFigure B.1\nxThe Shell window will show:\n>>>\n[DEBUG ON]\n>>>\nSet Breakpoints\nxA breakpoint is a marker in our code that tells the debugger that \nexecution should proceed at normal speed up to the breakpoint, and \nstop there. Execution will not proceed beyond it unless we do so \nthrough manual intervention.\nxBreak points can be set in a program wherever we suspect \nsomething may go wrong.Wecan have many of them at different \nstatements in one program.\nxTo set up a break point right click on a line of thesource and choose \n'Set breakpoint' from the menu.\nxOn settinga breakpoint the background colorof the line turns", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_572", "chunk_strategy": "fixed_size"}}, {"text": "statements in one program.\nxTo set up a break point right click on a line of thesource and choose \n'Set breakpoint' from the menu.\nxOn settinga breakpoint the background colorof the line turns \nyellow to show that a breakpoint has been set at that line.\nSingle Step through Program\nxExecute the program using F5.\nxThe Debug Control window will now show in blue color thefirst line \nfrom where our program execution is to start. This means that line is \nready to be executed.\n--- Page 416 ---\n400 Let Us Python\nxFrom this point wecan click the 'Go'button in the Debug Control \nwindow to execute the program at normal speed until a breakpoint \nis encountered (or input is requested or the program finishes). \nxOnce control reaches the breakpoint, we can use the 'Step'button to \nstep through our code, one line at a time. If the line being stepped \nthrough has a function call, execution will go to the first line of the \nfunction definition (weare \"stepping into\" the function). If we not", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_573", "chunk_strategy": "fixed_size"}}, {"text": "through has a function call, execution will go to the first line of the \nfunction definition (weare \"stepping into\" the function). If we not \nwish to examine the statements in the function, we can choose the \n'Over' button to step over the function.\nInspect Values\nxAs we single step through the program we can watch the type and \nvalue of local and global variables used in our program at the \nbottom of the Debug Control window. \nxAs different steps of our program get executed and the values of the \nvariables change, the changed values get displayed in the Debug \nControl window.\nCorrect and Run Again\nxBy watching the values of the variables if we get a clue as to what is \nwrong with our program, we can stop the execution using the 'Quit' \nbutton. We can then rectify the program and debug it again using \nthe same steps.\nxWhile single stepping if we reach inside a function and we wish to\nfinish execution of the function at normal speed and return from the", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_574", "chunk_strategy": "fixed_size"}}, {"text": "the same steps.\nxWhile single stepping if we reach inside a function and we wish to\nfinish execution of the function at normal speed and return from the \nfunction, we can do so using the 'Out' button. \n--- Page 417 ---\nLet UsPython\n401Chasing the BugsC\n\u201cWading through the choppy waters... \u201d\n--- Page 418 ---\n402 Let Us Python\nHow can we chase away the bugs in a Python program? No sure-shot \nway for that. So I thought if I make a list of more common programming \nmistakes, it might be of help. I have presented them below. They are not \narranged in any particular order, but I think, they would be a goodhelp!\nBug 1\nMixing tabs with spacesin indentation. \nConsider the code snippet given below:\nif a < b :\na = 10\nb = 20\nHere the first statement in if block has been indented using tab, whereas \nthe second has been indented using spaces. So on the screen the \nsnippet looks alright, but Python interpreter will flag an error. Such", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_575", "chunk_strategy": "fixed_size"}}, {"text": "the second has been indented using spaces. So on the screen the \nsnippet looks alright, but Python interpreter will flag an error. Such \nerrors are difficult to spot, so always use 4 spaces for indentation.\nBug 2\nMissing : after if, loop, function, class. \nSince other languages do not need a : those who migrate to Python from \nother languages tend to forget to use :.\nBug 3\nUsing ++ or --.\nDon't increment/decrement using ++ or --. There are only two ways to \nincrement/decrement a variable:\ni = i + 1\ni += 1\nBug 4\nNo static typesfor variables. \nUnlike other languages, we do not have to define the type of the \nvariable. Type of the variable is determined dynamically at the time of \n--- Page 419 ---\nAppendix C: Chasing the Bugs 403\nexecution based on the usage of the variable. So in the following code \nsnippet ais integer to begin with, but when the context changes its type \nchanges to str.\na = 25\nprint(type(a)) # prints <class 'int'>\na = 'Hi'\nprint(type(a)) # prints <class 'str'>\nBug 5", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_576", "chunk_strategy": "fixed_size"}}, {"text": "snippet ais integer to begin with, but when the context changes its type \nchanges to str.\na = 25\nprint(type(a)) # prints <class 'int'>\na = 'Hi'\nprint(type(a)) # prints <class 'str'>\nBug 5\nDeleting an item from a list while iterating it.\nlst = [n for n in range(10)]\nfor i in range(len(lst)) :\nif i % 2 == 0 :\ndel lst[i]\nCorrect way to do this is to use list comprehension as shown below:\nlst = [n for n in range(10)]\nlst = [n for n in lst if n % 2 != 0]\nprint(lst)\nBug 6\nImproper interpretation of range( )function.\nRemember the following for loop will generate numbers from 0 to 9 and \nnot from 1 to 10.\nfor i in range(10) :\nprint(i)\nBug 7\nUsing = in place of ==. \nWhen performing a comparison between two objects or value, you just \nuse the equality operator (==), not the assignment operator (=). The \nassignment operator places an object or value within a variable and \ndoesn\ue001t compare anything\ue002\n--- Page 420 ---\n404 Let Us Python\nBug 8", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_577", "chunk_strategy": "fixed_size"}}, {"text": "assignment operator places an object or value within a variable and \ndoesn\ue001t compare anything\ue002\n--- Page 420 ---\n404 Let Us Python\nBug 8\nDifference in built-in and other types while referring to objects.\ni = 10\nj =10\na = 'Hi'\nb = 'Hi'\nx = [10]\ny = [10]\nprint(id(i), id(j), id(a), id(b), id(x), id(y))\nid( )returns the address stored in its argument. Since iand jare \nreferring to same int, they contain same address. Since aand bare \nreferring to same string, theycontain same address. However, addresses \nstored in xand yare different as two objects each containing [10] are \ncreated.\nBug 9\nUsing improper case in logical values.\nAll keywords and operator (like and, or, not, in, is) are in small-case, but \nlogical values are Trueand False(not true and false).\nBug 10\nImproper order of function calls.\nWhile creating complex Python statements we may placefunction calls \nin wrong orderproducing unexpected results. For example, in the", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_578", "chunk_strategy": "fixed_size"}}, {"text": "Bug 10\nImproper order of function calls.\nWhile creating complex Python statements we may placefunction calls \nin wrong orderproducing unexpected results. For example, in the \nfollowing code snippet if we change the order of the function calls, we \nget different results.\ns = \" Hi \"\nprint(s.strip().center(21, \"!\")) # prints !!!!!!!!!!Hi!!!!!!!!!\nprint(s.center(21, \"!\").strip()) # prints !!!!!!!! Hi !!!!!!!\nRemember that Python always executes functions from left to right. \nBug 11\nImproperly initializing a mutable default value for a function argument. \nConsider the following code snippet:\n--- Page 421 ---\nAppendix C: Chasing the Bugs 405\ndef fun(lst = [ ]) :\nlst.append('Hi')\nprint(lst)\nfun( ) # prints ['Hi']\nfun( ) # prints ['Hi', 'Hi']\nIt may appear that during each call to fun 'Hi' would be printed. \nHowever, this doesn't happen since the default value for a function \nargument is only evaluated once, at the time that the function is \ndefined.Correct way to write this code would be:", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_579", "chunk_strategy": "fixed_size"}}, {"text": "However, this doesn't happen since the default value for a function \nargument is only evaluated once, at the time that the function is \ndefined.Correct way to write this code would be:\ndeffun(lst = None) :\nif lst is None :\nlst = [ ]\nlst.append('Hi')\nprint(lst)\nfun( )\nfun( )\nBug 12\nCommon exceptions.\nFollowing is a list of common exceptions that occur at runtime and the \nreasons that cause them:\nAssertionError-It is raised when the assert statement fails.\nage = int(input('Enter your age: '))\nassert age >= 0, 'Negative age'\nAttributeError-It is raised when we try to use an attribute that doesn't \nexist.\ns = 'Hi'\ns.convert( )# str doesn't have convert( ) method\nEOFError-It is raised when the input() function hits the end-of-file \ncondition.\nImportError-It is raisedwhen the imported module is not found.\n--- Page 422 ---\n406 Let Us Python\nIndexError-It is raisedwhen the index of a sequence is out of range.\nlst = [10, 20, 30]\nprint(lst[3])", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_580", "chunk_strategy": "fixed_size"}}, {"text": "ImportError-It is raisedwhen the imported module is not found.\n--- Page 422 ---\n406 Let Us Python\nIndexError-It is raisedwhen the index of a sequence is out of range.\nlst = [10, 20, 30]\nprint(lst[3])\nKeyError-It is raisedwhen a key is not found in a dictionary.\nKeyboardInterrupt-It is raisedwhen the user hits Ctrl+c.\nMemoryError-It is raisedwhen an operation runs out of memory.\nNameError-It is raisedwhen a variable is not found in the local or global \nscope.\nRuntimeError-It is raised when an error does not fall under any other \ncategory.\nStopIteration-It is raisedby the next()function to indicate that there is \nno further item to be returned by the iterator.\nTypeError-It is raisedwhen a function or operation is applied to an \nobject of an incorrect type.\n--- Page 423 ---\nLet UsPython\n407Index I\n\u201cRandom access begins here... \u201d\n--- Page 424 ---\n408 Let Us Python\n**, 20, 135, 136, 162\n*, 92, 98, 113\n@, 340\n_ _add_ _, 249\n__del__( ), 232\n_ _doc_ _, 334\n_ _eq_ _, 249\n_ _floordiv_ _, 249", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_581", "chunk_strategy": "fixed_size"}}, {"text": "\u201cRandom access begins here... \u201d\n--- Page 424 ---\n408 Let Us Python\n**, 20, 135, 136, 162\n*, 92, 98, 113\n@, 340\n_ _add_ _, 249\n__del__( ), 232\n_ _doc_ _, 334\n_ _eq_ _, 249\n_ _floordiv_ _, 249\n_ _ge_ _, 249\n_ _gt_ _, 249\n_ _iadd_ _, 249\n_ _idiv_ _, 249\n_ _ifloordiv_ _, 249\n_ _imod_ _, 249\n_ _imult_ _, 249\n__init_ _( ), 232\n_ _ipow_ _, 249\n_ _isub_ _, 249\n_ _iter_ _, 279\n_ _le_ _, 249\n_ _lt_ _, 249\n_ _main_ _, 206\n_ _mod_ _, 249\n_ _mult_ _, 249\n_ _name_ _, 206\n_ _ne_ _, 249\n_ _next_ _, 279\n_ _pow_ _, 249\n_ _sub_ _, 249\n_ _truediv_ _, 249\nA\nabs( ), 23\nabspath( ), 327\nabstract classes, 268\naccess convention, 231\naccessing dictionary elements, 132\naccessing list elements, 92\naccessing set elements, 123\naccessing string elements, 40\naccessing tuple elements, 110\nacos( ), 25\nadd( ), 123\nall( ), 59\nany( ), 59\nand, 57append( ), 97\nprecedence table, 395\ndebugging in python, 397\nchasing the bugs, 401\narguments, keyword, 160\narguments, positional, 160\narguments, variable length, 160", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_582", "chunk_strategy": "fixed_size"}}, {"text": "all( ), 59\nany( ), 59\nand, 57append( ), 97\nprecedence table, 395\ndebugging in python, 397\nchasing the bugs, 401\narguments, keyword, 160\narguments, positional, 160\narguments, variable length, 160\narithmetic operators, 20\nasin( ), 25\nassert, 339\nassertion, 339\nassignment, 20\nassociativity, 22\natan( ), 25\nB\nbasic dictionary operations, 133\nbasic list operations, 93\nbasic set operations, 123\nbasic tuple operations, 111\nbasic types, 19\nbin( ), 24\nbitwise operators, 338\nbreak, 73\nbuilt-in functions, 23\nbuilt-in functions, 42\nbuilt-in modules, 24\nbytes datatype, 345\nC\ncalling methods, 247\ncapitalize( ), 44\nceil( ), 24\nchr( ), 23\nclass methods, 234\nclass variables, 234\nclasses and objects, 28\nclasses and objects , 227\nclasses and objects in programming, \n229\nclear( ), 125\nclose( ), 319\ncmath, 24\ncode point, 345\n--- Page 425 ---\nIndex 409\ncommand-line arguments, 335\ncomments and indentation, 27\ncommunication with functions, 159\ncomplex, 18\ncomprehensions, 145\nconcurrency and parallelism, 356", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_583", "chunk_strategy": "fixed_size"}}, {"text": "code point, 345\n--- Page 425 ---\nIndex 409\ncommand-line arguments, 335\ncomments and indentation, 27\ncommunication with functions, 159\ncomplex, 18\ncomprehensions, 145\nconcurrency and parallelism, 356\nconcurrency and parallelism in \nprogramming, 357\nconcurrency and parallelism, 355\nconcurrency for improving \nperformance, 359\ncondition, 378\nconditional expressions, 58\nconsole input, 82\nconsole input/output , 81\nconsole output, 83\ncontainer types, 26\ncontainership, 260\ncontinue, 73\nconversions, 23\ncopyfile( ), 327\ncos( ), 25\ncosh( ), 25\ncount( ), 97\ncpu-bound & i/o-bound prog, 358\ncreate executable file, 347\nD\ndecimal, 19\ndecision control instruction, 56\ndecorating functions with \narguments, 342\ndecorators, 340\ndefault values for arguments, 163\ndegrees( ), 25\ndel( ), 96\ndetermining python version, 15\ndiamond problem, 267\ndictionaries , 131\ndictionary comprehension, 148\ndictionary methods, 135\ndictionary varieties, 135\ndir( ), 234\ndiscard( ), 125\ndivmod( ), 24", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_584", "chunk_strategy": "fixed_size"}}, {"text": "determining python version, 15\ndiamond problem, 267\ndictionaries , 131\ndictionary comprehension, 148\ndictionary methods, 135\ndictionary varieties, 135\ndir( ), 234\ndiscard( ), 125\ndivmod( ), 24\ndocstring, 334documentation strings, 334\ndump( ), 323\ndumps( ), 324\nE\ne, 24\nelif, 56\nelse block, 308\nelse block of a loop, 73\nelse, 56\nencoding, 325\nendswith( ), 42\nevent, 377\nevent-driven programming model, 6\neverything is an object, 250\nexample of communication between \nthreads, 374\nexamples of sharing resources, 374\nexcept, 302\nexception handling , 299\nexception handling tips, 309\nexceptions, 301\nexp( ), 24\nexponentiation operator, 20\nF\nfabs( ), 24\nfactorial( ), 24\nfeatures of inheritance, 265\nfile and directory operations, 326\nfile i/o, 318\nfile input/output, 317\nfile opening modes, 320\nfilter( ) function, 196\nfinally block, 309\nfind( ), 42\nfloat, 18\nfloor( ), 24\nfor loop, 70\nformatted printing, 83\nfstring, 83\nfunctional programming, 192\nfunctional programming model, 5\nfunctions, 157", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_585", "chunk_strategy": "fixed_size"}}, {"text": "filter( ) function, 196\nfinally block, 309\nfind( ), 42\nfloat, 18\nfloor( ), 24\nfor loop, 70\nformatted printing, 83\nfstring, 83\nfunctional programming, 192\nfunctional programming model, 5\nfunctions, 157\n--- Page 426 ---\n410 Let Us Python\nfunctions as first-class values, 192\nfunctions, 158\nG\ngenerator expressions, 283\ngenerators, 282\ngetcwd( ), 326\ngetopt, 336\nglobals( ) and locals( ), 219\nH\nhas a relationship, 260\nhex( ), 24\nhigher order functions, 194\nhow to deal with exceptions?, 302\nhow to use try -except?, 303\nI\nI/O system, 318\nid( ), 28\nidentifier naming convention , 246\nidentifiers and keywords, 18\nif, 56\nimitating a structure , 252\nimporting a module, 207\nindentation, 27\nindex, 407\nindex( ), 97\ninheritance, 261\ninner functions, 221\ninput( ), 82\ninsert( ), 97\nint, 18\ninteger and float ranges, 19\ninteractive mode, 13\ninter-thread communication, 321, \nintricacies of classes and objects, 245\nintricacies of classes and objects, \n199, \nintroduction to python, 1\nisalnum( ), 42", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_586", "chunk_strategy": "fixed_size"}}, {"text": "interactive mode, 13\ninter-thread communication, 321, \nintricacies of classes and objects, 245\nintricacies of classes and objects, \n199, \nintroduction to python, 1\nisalnum( ), 42\nisalpha( ), 42isdigit( ), 42\nisfile( ), 327\nisinstance( ), 28\nislower( ), 42\nissubclass( ), 264\nisupper( ), 42\nitems( ), 133\niterable, 278\niterators, 278\niteration to recursion, 182\niterators, 279\niterators and generators, 277\nJ\nJSON, 323\njoin( ), 327\nK\nkeys( ), 133\nkeyword arguments, 160\nkeywords, 18\nL\nlambda functions, 193\nlaunching threads, 361\nleft shift, 338\nlen( ), 93\nlibrary functions, 25\nlike a relationship, 260\nlist comprehension, 146\nlist methods, 97\nlist varieties, 98\nlist, 92\nlistdir( ), 348\nlists , 91\nload( ), 323\nlock , 375\nlog( ), 24\nlog10( ), 24\nlogical operators, 57\nlooping in dictionaries, 133\nlooping in lists, 93\n--- Page 427 ---\nIndex 411\nlooping in sets, 123\nlooping in tuples, 111\nlower( ), 43\nlstrip( ), 43\nM\nmain module, 206\nmakedirs( ), 327\nmap( ) function, 195\nmap, filter, reduce, 195", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_587", "chunk_strategy": "fixed_size"}}, {"text": "looping in lists, 93\n--- Page 427 ---\nIndex 411\nlooping in sets, 123\nlooping in tuples, 111\nlower( ), 43\nlstrip( ), 43\nM\nmain module, 206\nmakedirs( ), 327\nmap( ) function, 195\nmap, filter, reduce, 195\nmath module, 24\nmathematical set operations, 125\nmax( ), 24\nmechanisms for inter-thread \ncommunication, 377\nmechanisms for sharing resources, \n375\nmin( ), 24\nmiscellany, 333\nmodf( ), 24\nmodules and packages_, 205\nmoving within a file,321\nmulti-lining, 27\nmultiple modules, 206\nmultiple objects, 29\nN\nNameError, 302\nnamespace, 218\nnested dictionary, 135\nnext( ), 280\nnone, 160\nnot, 57\nnuances of conditions, 57\nnuances of try and except, 304\nO\nObject class, 265\nobject creation, 230\nobjectinitialization, 232\nobject-oriented prog model, 6objects, 229\noct( ), 24\nopen( ), 318\noperation nuances, 21\noperator overloading, 248\noperator precedence, 22\nor, 57\nord( ), 44\nP\nPYTHONPATH, 208\nPython basics, 17\nPython installation under Linux, 11\nPythoninstallation under Windows, \n10", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_588", "chunk_strategy": "fixed_size"}}, {"text": "operation nuances, 21\noperator overloading, 248\noperator precedence, 22\nor, 57\nord( ), 44\nP\nPYTHONPATH, 208\nPython basics, 17\nPython installation under Linux, 11\nPythoninstallation under Windows, \n10\nPython, reasons for popularity, 18\nPython resources, 2\nPython specification, 12\nPython type Jargon, 10\nPython types, 26\npackages, 209\nparsing of command-line, 336\npass statement, 60\npassing parameters to a thread, 362\nperf_counter( ), 343\npi, 24\npop( ), 97\npositional arguments, 160\npow( ), 23\nprecedence and associativity, 22\nprint( ), 83, 84\nproblem as similar sub-problems, \n177\nproblem with unknown loops, 179\nprocedural programming model, 5\nprogramming paradigms, 4\nprogramming paradigms, 228\nclasses and objects, 228\ncomprehensions, 146\ndictionaries, 132\nfunction, 158\nlists, 92\n--- Page 428 ---\n412 Let Us Python\nQ\nqueue data structure, 99\nR\nread / write operations, 319\nreasons for popularity, 2\nreceiving input, 59\nrecursion, 175\nrecursion limit, 182\nrecursive factorial function, 178", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_589", "chunk_strategy": "fixed_size"}}, {"text": "412 Let Us Python\nQ\nqueue data structure, 99\nR\nread / write operations, 319\nreasons for popularity, 2\nreceiving input, 59\nrecursion, 175\nrecursion limit, 182\nrecursive factorial function, 178\nrecursive function, 176\nreduce( ) function, 196\nrepetition control instruction, 70\nrepetitions, 176\nreplace( ), 42\nreuse mechanisms, 260\nrlock , 376\nruntime polymorphism, 269\nS\nsame code, different interpretation, \n209\nscope and legbrule, 222\nscript mode, 13\nsearch sequence, 208\nseek( ), 321\nsemaphore, 377\nserialization and deserialization, 322\nserialization of user-defined types, \n325\nset comprehension, 147\nset methods, 124\nset varieties, 126\nsets, 121\nsets, 122\nsorting and reversing, 97\nstack data structure, 99\nstring comparisons, 44\nstring conversions, 43\nstring methods, 42\nstring properties, 41\nstrings, 40strings , 39\nsymbol table, 218\nsynchronization, 374\nsynchronization_, 373\nsyntax errors, 300\nT\nthird-party packages, 210\nthreadproperties, 361\nthreads, 356\ntuple methods, 113", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_590", "chunk_strategy": "fixed_size"}}, {"text": "strings, 40strings , 39\nsymbol table, 218\nsynchronization, 374\nsynchronization_, 373\nsyntax errors, 300\nT\nthird-party packages, 210\nthreadproperties, 361\nthreads, 356\ntuple methods, 113\ntuple varieties, 113\ntuples, 109\ntuples, 110\ntype( ), 28\ntype conversion, 252\ntypes of arguments, 160\ntypes of concurrencies, 360\ntypes of inheritance, 265\ntypes of recursion, 181\nU\nunicode, 345\nunpacking arguments, 163\nunpacking dictionary, 135, 136\nunpacking list, 98\nunpacking tuple, 113\nupdating set operations, 126\nusage of for loop, 71\nusage of while loop, 70\nuser-defined classes, 229\nuser-defined exceptions, 305\nuser-defined iterators, 281\nusing built-infunctions on \ndictionaries, 134\nusing built-in functions on lists, 96\nusing built-in functions on sets, 124\nusing built-in functions on tuples, \n112\nusing lambda with map( ), filter( ), \nreduce( ), 197\n--- Page 429 ---\nIndex 413\nV\nvariable type and assignment, 20\nvariations of import, 208\nvars( ) and dir( ) functions, 234\nW\nwith keyword, 321", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_591", "chunk_strategy": "fixed_size"}}, {"text": "112\nusing lambda with map( ), filter( ), \nreduce( ), 197\n--- Page 429 ---\nIndex 413\nV\nvariable type and assignment, 20\nvariations of import, 208\nvars( ) and dir( ) functions, 234\nW\nwith keyword, 321\nworking with python, 13\nX\nxor, 338\nY\nyield, 282\nZ\nzip( ) function , 278", "strategy": "fixed_size", "metadata": {"source": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf", "file_type": "pdf", "chunk_id": "Let Us Python by Yashavant Kanetkar Aditya Kanetkar.pdf_592", "chunk_strategy": "fixed_size"}}]